/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 28.01.2021 10:29:22

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 132896;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_PAD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[185];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[73];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,64,64,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0037062668707221746, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 40, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data3[10] = { 77, 97, 66, -8, -32, -13, -14, 108, -94, 197, };
const TfArray<1, int> tensor_dimension3 = { 1, { 10 } };
const TfArray<1, float> quant3_scale = { 1, { 1.6612293620710261e-05, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[2] = { -14, 14, };
const TfArray<1, int> tensor_dimension4 = { 1, { 2 } };
const TfArray<1, float> quant4_scale = { 1, { 7.1596485213376582e-05, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int32_t tensor_data5[2] = { 4, 1280, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data6[8] = { 41437, 30692, 1652, 59479, 3599, 25285, 94793, -7639, };
const TfArray<1, int> tensor_dimension6 = { 1, { 8 } };
const TfArray<8, float> quant6_scale = { 8, { 6.0348065744619817e-05, 7.0758178480900824e-05, 7.8164135629776865e-05, 4.6545006625819951e-05, 0.00011721340706571937, 9.7716991149354726e-05, 5.5055897973943502e-06, 1.5797186279087327e-05, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int32_t tensor_data7[48] = { -779, 5059, 162, 46095, -582, -8051, -70, 3246, -2370, 5789, 41, 408, 7662, -917, -607, 4532, 2742, 2380, 5378, 16214, -3064, 1224, 6561, 328, 9212, 5108, 2853, 722, -1144, 9161, 5790, 1977, 6446, -267, 2327, 5508, 7485, 4658, 3240, 4731, 5984, -564, 6010, 282, -1078, 3673, 10183, 751, };
const TfArray<1, int> tensor_dimension7 = { 1, { 48 } };
const TfArray<48, float> quant7_scale = { 48, { 0.00019062131468672305, 0.00011129717313451692, 0.00029111441108398139, 2.1264637325657532e-05, 0.00029203185113146901, 7.7397096902132034e-05, 0.00028731988277286291, 0.00015118594455998391, 0.00020138945546932518, 8.7014552264008671e-05, 0.00022466707741841674, 0.00030646982486359775, 8.3428203652147204e-05, 0.00011866437125718221, 0.00026124267606064677, 0.00016401617904193699, 0.00011447265569586307, 0.00024810430477373302, 0.00014960643602535129, 4.9890189984580502e-05, 8.1992096966132522e-05, 0.00024426257004961371, 8.5439729446079582e-05, 7.6303935202304274e-05, 9.2616028268821537e-05, 7.4139359639957547e-05, 7.2159287810791284e-05, 0.00028744892915710807, 0.0001790770620573312, 9.7286349046044052e-05, 0.00010663520515663549, 9.0891764557454735e-05, 7.958186324685812e-05, 0.0001511652662884444, 0.0002015104255406186, 0.00013722607400268316, 6.5490108681842685e-05, 8.6488260421901941e-05, 9.9279175628907979e-05, 0.00014590327918995172, 0.000138708739541471, 0.00020331163250375539, 0.00012646079994738102, 0.00029565923614427447, 0.0001689440687187016, 0.00014242537145037204, 8.5680985648650676e-05, 0.00035975201171822846, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[48] = { -922, 737, 11297, -3937, -206, -773, -3626, 2661, -497, 2536, -3542, 21950, -3622, 13517, -2113, 2022, -1059, 3968, 1898, 17146, 1482, -2918, 10052, -946, -501, 1794, 1407, -5968, -4577, -632, 18701, 10578, -3981, -4397, -2059, -18, 3813, 23932, 20165, 5829, 2633, -5211, 252, 16727, -3650, 36681, 23277, -7981, };
const TfArray<1, int> tensor_dimension8 = { 1, { 48 } };
const TfArray<48, float> quant8_scale = { 48, { 0.0001242131256731227, 9.5774194051045924e-05, 6.3039551605470479e-05, 0.00019442710618022829, 0.00012557495210785419, 0.00021319824736565351, 8.763404912315309e-05, 6.7900815338362008e-05, 9.3835551524534822e-05, 0.00013121777737978846, 5.4399308282881975e-05, 3.4192777093267068e-05, 0.00026012203306891024, 7.3808361776173115e-05, 4.687220643972978e-05, 0.000164458790095523, 9.4881390396039933e-05, 6.1892729718238115e-05, 0.00015053989773150533, 0.00016887346282601357, 0.00013706563913729042, 7.383023330476135e-05, 0.00011250431271037087, 0.00044561258982867002, 0.00010966358240693808, 0.00015633172006346285, 0.00048855633940547705, 0.00012475695984903723, 8.6847780039533973e-05, 0.00013886728265788406, 5.0675072998274118e-05, 0.00016979852807708085, 0.00013102036609780043, 0.00012513596448116004, 0.00011802942754002288, 9.0073030150961131e-05, 0.00015639254706911743, 8.2586055214051157e-05, 6.3611070800106972e-05, 6.66271589579992e-05, 7.6368647569324821e-05, 0.00017802575894165784, 8.3833278040401638e-05, 5.3354684496298432e-05, 0.0001293976092711091, 3.1008115911390632e-05, 0.00011081911361543462, 6.6631575464271009e-05, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int32_t tensor_data9[48] = { 468, -1499, 3586, 1919, 3505, 2163, -2129, 5138, -1768, 1171, 8512, 12251, 3202, 1469, 16656, 1160, 7387, 1486, 629, 7248, 593, 9367, 1675, 4813, 2704, 4798, 6515, 3711, -1013, 2170, -822, 5923, 1985, 4772, -6335, 10395, -112, 13161, 941, -3614, 4844, 3426, 4100, 308, 16450, 2225, 2134, 770, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 9.676426270743832e-05, 0.00015179600450210273, 0.00015948621148709208, 0.00018289065337739885, 8.351573342224583e-05, 0.00023472247994504869, 0.00010498540359549224, 0.00014905097486916929, 0.00013278565893415362, 0.00022571178851649165, 0.00010355736594647169, 7.2991359047591686e-05, 0.00015513681864831597, 0.00026314004207961261, 3.7990463169990107e-05, 0.000133725450723432, 7.8246543125715107e-05, 0.00012355191574897617, 0.00010187256702920422, 0.00011676215217448771, 0.00022037995222490281, 6.7644687078427523e-05, 0.00021500253933481872, 0.00017423136159777641, 0.00023275912099052221, 0.00015156572044361383, 0.0001153627090388909, 0.00011563893349375576, 6.8876317527610809e-05, 0.00022334053937811404, 0.00016582732496317476, 6.6586631874088198e-05, 0.00018652554717846215, 0.00013436083099804819, 6.0724327340722084e-05, 6.4215018937829882e-05, 0.00013901035708840936, 4.2326904804212973e-05, 0.00023967215383891016, 0.00011807457485701889, 0.00015017291298136115, 0.00019858712039422244, 0.00017287800437770784, 0.00017551689234096557, 4.6614124585175887e-05, 0.00017640973965171725, 0.00012795701331924647, 0.00011520533735165372, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int32_t tensor_data10[48] = { -4492, -5381, 3959, 7536, -201, -9757, 5789, -4587, 708, -3691, -295, -4121, -3889, -2076, 26927, -6052, 3463, 2004, -8803, -1815, -608, -7847, -440, 433, 24844, -1165, -3079, -10298, -7361, -931, -3266, 1707, -349, -7213, 668, 10633, -15020, 15970, 1265, 8722, 2373, -3231, -3568, -308, -1141, -118, 2686, -214, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.00015307855210267007, 0.00017510396719444543, 9.1437264927662909e-05, 0.00013115420006215572, 0.00010682951688067988, 5.6011147535173222e-05, 0.00013104542449582368, 0.0001471872819820419, 6.3373205193784088e-05, 8.0471763794776052e-05, 0.00012357327796053141, 0.00020402148948051035, 8.2369413576088846e-05, 0.00012125780631322414, 0.00012220800272189081, 0.00013262275024317205, 0.00012708097347058356, 0.00010663228749763221, 7.1174152253661305e-05, 7.5591262429952621e-05, 0.000143239158205688, 0.00011901711695827544, 6.6264758061151952e-05, 0.0001443852816009894, 5.9245026932330802e-05, 9.8198404884897172e-05, 0.00012056645209668204, 8.2964092143811285e-05, 0.00016314709500875324, 0.00014713246491737664, 6.6881264501716942e-05, 0.00014897798246238381, 9.2658621724694967e-05, 8.9157649199478328e-05, 0.00024687446421012282, 0.00010173417831538245, 5.8601974160410464e-05, 9.9841570772696286e-05, 6.8376160925254226e-05, 0.00012612156569957733, 0.00013846741057932377, 8.8592933025211096e-05, 0.00015118865121621639, 9.3110000307206064e-05, 0.00018258788622915745, 6.7709806899074465e-05, 4.7044890379766002e-05, 0.00022551091387867928, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int32_t tensor_data11[48] = { 2542, 4157, -1537, 3827, 15623, -1405, 7224, 879, -725, 3407, 9, 9235, 16823, 13144, 11444, 4327, 745, 5503, 1549, 3772, 466, 3537, 147, 987, -360, 2237, 1030, 907, 2474, 782, 2535, 1254, 3045, 2581, 7133, 10414, 4032, 6835, 802, 1532, 135, 3054, 5516, 1542, 3000, 3618, 350, -373, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 6.3083236454986036e-05, 7.3739138315431774e-05, 0.00024091363593470305, 0.00016821990720927715, 6.1389306210912764e-05, 0.0001659900153754279, 9.6562689577694982e-05, 0.00011128424375783652, 0.00020477798534557223, 0.00020489119924604893, 0.00010826331708813086, 8.0156212789006531e-05, 5.8728212025016546e-05, 4.3352476495783776e-05, 7.7830074587836862e-05, 0.00017321629275102168, 0.00030772309401072562, 0.00014310026017483324, 9.7773045126814395e-05, 0.00011839072249131277, 0.00017848647257778794, 0.00018697607447393239, 0.00016626638534944504, 0.00016662952839396894, 0.00024711916921660304, 0.00016572306049056351, 0.00018749508308246732, 5.4919622925808653e-05, 8.7663822341710329e-05, 0.00016884210344869643, 0.00011766373791033402, 0.00018841782002709806, 8.5492691141553223e-05, 0.00015355680079665035, 0.00011994381929980591, 9.0053283201996237e-05, 0.00010468361142557114, 6.0193979152245447e-05, 8.4498577052727342e-05, 0.00024983417824842036, 0.00016260481788776815, 0.00021508555801119655, 6.0211972595425323e-05, 0.00016673354548402131, 0.00010566448327153921, 0.00016503471124451607, 0.00026424851967021823, 0.00030807091388851404, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(8) int32_t tensor_data12[48] = { -322, -535, -5095, -14038, 10460, -3843, 1075, -3905, -3955, -2327, -1234, -4243, 25723, 2093, 30260, -3588, 8514, 19669, -4219, 8015, 8073, -1481, 413, -3313, 2146, -6136, 17981, 6207, -4628, -7194, 199, 14295, 17119, 17856, 17851, 26596, 16059, -3632, -3630, 14052, -31, 35179, -5378, -4619, -4907, -8360, -13326, -10034, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 0.00029712656396441162, 0.00045369059080258012, 0.00017829224816523492, 7.3181254265364259e-05, 0.00019814319966826588, 0.00020538347598630935, 0.00016034160216804594, 0.00012152246927144006, 9.8721320682670921e-05, 9.376161324325949e-05, 0.00015401132986880839, 0.00024891868815757334, 0.00015430190251208842, 0.0003021055890712887, 8.0752237408887595e-05, 0.00015326548600569367, 5.4212287068367004e-05, 6.6910586610902101e-05, 0.00016385220806114376, 9.7459393145982176e-05, 5.7582827139412984e-05, 0.00010396981815574691, 0.00022396755230147392, 0.00017216750711668283, 4.216970773995854e-05, 0.00015454432286787778, 6.5280546550638974e-05, 0.00036129838554188609, 0.00012776689254678786, 0.00015946997154969722, 5.8506393543211743e-05, 6.8348643253557384e-05, 0.00012601126218214631, 6.2442406488116831e-05, 9.1850946773774922e-05, 9.8769342002924532e-05, 8.0130375863518566e-05, 0.0002052683848887682, 0.00018934899708256125, 4.1901683289324865e-05, 0.00013157074863556772, 4.4986671127844602e-05, 0.00019493607396725565, 6.836084503447637e-05, 0.00012161667837062851, 6.7812739871442318e-05, 0.00010309436038369313, 8.9601177023723722e-05, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(8) int32_t tensor_data13[48] = { 28549, 11839, 36870, 6014, 10135, 10856, -11031, 11906, 6825, -7083, -8187, 14107, -8013, -12282, 20270, 4148, -5267, 5828, -4762, 8206, 186, 10981, 4899, -6388, -989, -12247, 7087, -9258, 10268, 20045, 381, 1309, 19485, 27555, 22114, 11923, 13642, -12167, 1795, 11763, -2162, -11397, 10510, 4297, 677, -17198, -30720, 5842, };
const TfArray<1, int> tensor_dimension13 = { 1, { 48 } };
const TfArray<48, float> quant13_scale = { 48, { 0.0001590783940628171, 0.00023237043933477253, 3.1913539714878425e-05, 0.00028146512340754271, 0.00019501763745211065, 0.00017149985069409013, 0.00044847856042906642, 0.00027076012338511646, 0.00035671587102115154, 0.00020661104645114392, 5.7049801398534328e-05, 0.00014710475807078183, 0.00018871128850150853, 0.0003801447746809572, 0.00020787141693290323, 0.00061943742912262678, 0.00037311785854399204, 0.00012147496454417706, 0.00042166281491518021, 0.00060099712572991848, 0.00032343319617211819, 0.00015832221833989024, 4.3654283217620105e-05, 0.0001914574095280841, 0.00047877579345367849, 0.00034098236938007176, 0.00034108740510419011, 0.00015724792319815606, 0.00031566052348352969, 0.00027969788061454892, 0.0001186823210446164, 0.000216899104998447, 0.00029706890927627683, 0.00010524906247155741, 0.00013959243369754404, 0.00014087816816754639, 0.00020617588597815484, 0.00037785258609801531, 0.00018685216491576284, 0.00024468990159220994, 0.00054163578897714615, 0.00024971802486106753, 0.00033111247466877103, 9.2273345217108727e-05, 0.00049850973300635815, 0.00018285895930603147, 0.00022350653307512403, 0.00016444476204924285, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(8) int32_t tensor_data14[48] = { 6830, 11168, 2167, 4757, 3286, 4777, 2485, -2184, -757, 1483, 7734, 2058, 506, -30, 13798, -3108, 1719, 4609, 6047, 82, 5037, 4306, 12297, 3579, 7147, 151, -116, 8823, 2655, 348, 741, 2462, 3918, 3599, 12330, 6227, 568, 6615, 172658, 4597, 4046, 5100, 1909, -1024, 3461, 10503, 3705, -1006, };
const TfArray<1, int> tensor_dimension14 = { 1, { 48 } };
const TfArray<48, float> quant14_scale = { 48, { 0.00010037958418251947, 0.00010283345181960613, 0.00024098699213936925, 9.2986701929476112e-05, 0.00010107341222465038, 7.7219876402523369e-05, 0.00025430976529605687, 7.0699417847208679e-05, 8.7004773376975209e-05, 0.0001687641633907333, 0.00011973561777267605, 0.00017029176524374634, 0.00029718439327552915, 7.49200553400442e-05, 5.4226584325078875e-05, 7.5965777796227485e-05, 0.00029289527446962893, 0.00017010793089866638, 0.00014343697694130242, 0.00020957713422831148, 0.00011291483679087833, 0.00012685952242463827, 7.8472461609635502e-05, 0.00010089429997606203, 8.8546723418403417e-05, 0.00020775328448507935, 0.00031084727379493415, 6.0125752497697249e-05, 0.00012392125790938735, 0.00014154060045257211, 0.00029977256781421602, 0.00013710942585021257, 0.00011524977890076116, 5.8387700846651569e-05, 8.3670929598156363e-05, 0.00011066573642892763, 0.00024393013154622167, 9.2167203547433019e-05, 7.5863686106458772e-06, 0.00015605181397404522, 8.7175372755154967e-05, 0.0001091489102691412, 0.0002364005777053535, 0.00028015486896038055, 0.0001950569567270577, 5.5693421018077061e-05, 0.00012726987188216299, 0.00028235014178790152, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(8) int32_t tensor_data15[48] = { 27934, -5305, 732, -2828, 15370, 14086, -2643, 7603, 1179, -5516, -10904, 47152, 15017, -1927, 8850, -569, 545, -2023, 8895, -146, 20269, 14541, -3527, -353, -1382, -300, 37154, -3588, 21740, -39, 41175, -566, 21360, -1201, -164, -367, 7, 1073, 5522, 22972, -4161, -4646, 8346, -3093, 25203, -7806, 135, 5337, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 5.5272219469770789e-05, 0.0001064843891072087, 5.440445602289401e-05, 0.00020103192946407944, 6.2491344579029828e-05, 0.00012689406867139041, 9.6105366537813097e-05, 0.00014818005729466677, 0.00021448872576002032, 0.00019302575674373657, 0.00017661160381976515, 2.8154068786534481e-05, 4.4121556129539385e-05, 0.00017993652727454901, 0.0002935032534878701, 0.00018064294999931008, 6.3711879192851484e-05, 0.00011397538764867932, 0.00012409410555846989, 9.581678023096174e-05, 7.0583504566457123e-05, 0.00011917120718862861, 0.00016388135554734617, 0.00025559202185831964, 0.00017977046081796288, 9.8985357908532023e-05, 3.8874411984579638e-05, 0.00023145749582909048, 7.6469019404612482e-05, 0.00011736658780137077, 3.7998423067620024e-05, 0.00012336904183030128, 7.9248915426433086e-05, 0.00023575586965307593, 0.00020694390696007758, 0.00015157985035330057, 5.3507657867157832e-05, 8.1889134889934212e-05, 0.00033709793933667243, 5.9797566791530699e-05, 0.00027060945285484195, 0.00017477176152169704, 4.549363802652806e-05, 6.5672466007526964e-05, 5.2415725804166868e-05, 0.00026680581504479051, 9.2452326498460025e-05, 4.3563810322666541e-05, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(8) int32_t tensor_data16[96] = { 4318, 6369, -513, -1922, 5365, 6227, 5150, -2322, 3497, 8340, -13307, 5174, 1709, 11732, 9926, 3446, 11726, -3, 2283, -2937, 6893, 10187, 151, -5013, 6363, 2866, 5087, 2179, 2989, 5925, 4717, 4734, 3576, 6373, 2698, -2490, 12177, 16159, 9876, -262, 6887, 2287, 7279, 5604, 1315, -1704, -654, 3479, 2815, 3696, -4198, 819, 4500, 4853, -745, 3885, 7926, 7488, 1696, -224, 6322, 3481, -4455, 979, 4256, 1947, -2748, 5238, 6836, 3536, -3084, 813, 5470, -762, 1922, 4086, 3398, 5202, 7548, 3972, 10243, 4694, 2863, 885, 14608, 10198, 1108, 1190, 2586, -2882, 4824, 18479, 10791, 2861, 6806, 5545, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 8.6181084043346345e-05, 5.7279579777969047e-05, 0.00011454478953965008, 0.00024367055448237807, 5.6286429753527045e-05, 9.584756480762735e-05, 8.2156839198432863e-05, 5.082187635707669e-05, 0.0001315857662120834, 9.9751450761687011e-05, 4.8364705435233191e-05, 7.7670039900112897e-05, 0.00013887362729292363, 6.6627253545448184e-05, 5.5371681810356677e-05, 0.00016248771862592548, 5.3869418479735032e-05, 7.9488068877253681e-05, 6.7134518758393824e-05, 6.9954912760294974e-05, 6.8522393121384084e-05, 6.9956222432665527e-05, 0.00014338777691591531, 0.00010346499038860202, 8.97846111911349e-05, 0.00016050848353188485, 8.6794265371281654e-05, 7.274936797330156e-05, 0.00010399072925793007, 0.00013754387327935547, 9.5928917289711535e-05, 8.1707890785764903e-05, 0.00011475489736767486, 8.1481623055879027e-05, 5.9250993217574432e-05, 5.9588779549812898e-05, 5.5549357057316229e-05, 4.7080447984626517e-05, 4.8120695282705128e-05, 7.2234302933793515e-05, 0.00011146735050715506, 7.7069795224815607e-05, 0.00011174340761499479, 7.3945157055277377e-05, 0.00024238211335614324, 9.6248892077710479e-05, 8.2069338532164693e-05, 5.5535499996040016e-05, 8.7523956608492881e-05, 8.1532743934076279e-05, 8.0938982137013227e-05, 9.0020948846358806e-05, 7.4669078458100557e-05, 7.9346136772073805e-05, 9.3997601652517915e-05, 7.4007453804370016e-05, 0.00010006179945776239, 6.6911336034536362e-05, 7.4454910645727068e-05, 8.96311248652637e-05, 5.4974680097075179e-05, 0.00010220635158475488, 7.4881718319375068e-05, 0.00013905616651754826, 5.884744314244017e-05, 0.00011384319805074483, 6.6852662712335587e-05, 9.5783390861470252e-05, 5.6317785492865369e-05, 0.00018580340838525444, 5.6182052503572777e-05, 0.00011749109398806468, 7.6095479016657919e-05, 6.2232807977125049e-05, 0.00012137177691329271, 8.4995946963317692e-05, 8.7937842181418091e-05, 5.9957394114462659e-05, 7.3689399869181216e-05, 0.00011185421317350119, 8.2063321315217763e-05, 9.424334712093696e-05, 0.00015350064495578408, 7.9386452853213996e-05, 6.7543645855039358e-05, 8.4813938883598894e-05, 0.00013416318688541651, 0.00018552727124188095, 5.9488575061550364e-05, 9.2896625574212521e-05, 0.00013377451978158206, 3.5050044971285388e-05, 4.2508159822318703e-05, 0.00014790882414672524, 9.2578869953285903e-05, 5.6791421229718253e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(8) int32_t tensor_data17[96] = { 17003, 259, -845, -101, 23482, -155, -161, -1288, -11, -2610, -1507, 23490, -11794, 4451, 1349, 40726, 2478, -4839, 12742, -4292, -8746, -540, 898, 13, -187, -2787, 117, 10888, -3316, -242, -159, -12361, -13667, 1291, -1329, 414, -1950, -721, 36138, 3572, 4119, -5877, 783, -95, 23628, -23, 601, 19458, 16228, 24535, -2751, -132, 18184, -12569, -947, 17184, -987, 714, -5006, 9479, -5017, -1450, 2190, -4558, -146, 19825, -1960, -400, -3322, -913, -1694, -3522, -783, 11131, 17263, -14150, 2897, -11494, -17214, -381, 96, -390, -133, 579, 1282, 1670, 17, 18404, 348, -86, -47, -463, -8225, -121, -16627, 16931, };
const TfArray<1, int> tensor_dimension17 = { 1, { 96 } };
const TfArray<96, float> quant17_scale = { 96, { 9.0778274170588702e-05, 0.00018890119099523872, 0.00013260279956739396, 6.3166713516693562e-05, 5.9790800150949508e-05, 0.00023454890470020473, 0.00013070169370621443, 0.00017097331874538213, 9.8277690995018929e-05, 0.00010924057278316468, 0.00048146388144232333, 5.5747575970599428e-05, 5.768646951764822e-05, 9.515442798146978e-05, 9.9995719210710377e-05, 2.2782247469876893e-05, 0.00011457551590865478, 0.00020162634609732777, 9.8082731710746884e-05, 0.00014343216025736183, 8.8537795818410814e-05, 0.00015295943012461066, 3.776150697376579e-05, 0.00022549480490852147, 0.00012054057879140601, 6.6853230237029493e-05, 0.00016332016093656421, 5.3346499043982476e-05, 0.00010412430128781125, 9.4531802460551262e-05, 0.00010628923337208107, 9.918306750478223e-05, 8.2544873293954879e-05, 0.00014415571058634669, 0.00017396938346792012, 0.0001651691272854805, 0.00016657949890941381, 0.00012605480151250958, 4.4228494516573846e-05, 0.00030209452961571515, 8.7383283243980259e-05, 5.9638568927766755e-05, 9.0366003860253841e-05, 0.00013476783351507038, 4.0970564441522583e-05, 0.0001089635698008351, 8.0978861660696566e-05, 0.00010017053864430636, 6.0426231357268989e-05, 6.2775856349617243e-05, 8.9418354036752135e-05, 5.8831021306104958e-05, 6.0864604165544733e-05, 6.2793376855552197e-05, 0.00018857326358556747, 4.6908167860237882e-05, 0.00010324043250875548, 0.00013598181249108166, 6.3913648773450404e-05, 8.9772787760011852e-05, 0.00024785401183180511, 7.4670948379207402e-05, 0.0001303620811086148, 4.8872811021283269e-05, 0.00021372766059357673, 6.3592800870537758e-05, 0.0002869427262339741, 0.000108473097498063, 0.00015465305477846414, 9.3952257884666324e-05, 0.00025950846611522138, 6.9118679675739259e-05, 0.00012804404832422733, 6.6326821979600936e-05, 4.7847679525148124e-05, 7.7289398177526891e-05, 0.00015216288738884032, 0.00010264739103149623, 0.00010788333020173013, 0.0001051604631356895, 0.0001547767169540748, 0.00011871428432641551, 7.3535018600523472e-05, 0.00025409046793356538, 0.00014946713054087013, 0.00012056958075845614, 0.00013732681691180915, 3.9909897168399766e-05, 0.00014793408627156168, 0.00014631092199124396, 0.00010159505472984165, 0.00022064987570047379, 0.00012632190191652626, 5.4706113587599248e-05, 8.2119717262685299e-05, 7.3416907980572432e-05, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(8) int32_t tensor_data18[96] = { 888, 4872, 3266, 4223, 741, -4666, 2985, 6812, -9151, 937, -838, 11032, -3258, 3942, 3842, 278, 4488, 3706, -475, 3347, 3575, 2084, 8440, 1948, 21097, -1357, 1729, 6630, -1823, 3924, 7225, -50, -151, 909, 5742, 4467, 6929, 6499, 5942, 2900, 1476, 4987, -2909, 10661, -336, 2428, 4348, 3005, 894, 4585, 770, 3734, 1247, -1718, 3872, -295, -1795, 1380, 2428, 362, -3092, 2947, 5341, -1213, 1721, 3222, 502, 3131, 912, 2045, 4461, 13602, 587, 644, 927, 5924, 5212, -2652, 10219, 5655, 1073, 1162, 2729, -2808, 8354, 2901, -2085, 3513, -891, -5463, 3484, -3365, 2599, 659, -812, 3253, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00014570879284292459, 8.6845881014596671e-05, 7.5244861363898963e-05, 7.6373980846256018e-05, 9.5606847025919706e-05, 6.2970219005364925e-05, 9.6763767942320555e-05, 8.6038766312412918e-05, 4.8597867134958506e-05, 7.9141202149912715e-05, 0.00013645345461554825, 7.983763498486951e-05, 7.2787152021192014e-05, 6.3620558648835868e-05, 0.00012036021507810801, 0.00026504279230721295, 6.1242732044775039e-05, 0.0001548033906146884, 0.00010225235746474937, 9.8991251434199512e-05, 0.00010322385787731037, 6.6115295339841396e-05, 7.2303453634958714e-05, 0.00020716778817586601, 4.1974155465140939e-05, 7.2276234277524054e-05, 0.00010702417057473212, 9.4528419140260667e-05, 0.00014814361929893494, 5.9548008721321821e-05, 8.6824969912413508e-05, 0.0002799796056933701, 8.3951563283335418e-05, 0.00012388509640004486, 8.6029402154963464e-05, 6.5352556703146547e-05, 8.8629218225833029e-05, 0.00011847711721202359, 9.0122899564448744e-05, 8.6996391473803669e-05, 0.00010946118709398434, 0.00010351176024414599, 4.7445097152376547e-05, 5.7611330703366548e-05, 0.00011962185089942068, 0.00018484288011677563, 0.00012896968109998852, 0.00013122092059347779, 8.5921034042257816e-05, 0.00010933315206784755, 0.00015427378821186721, 0.00010894425940932706, 6.0998350818408653e-05, 0.00012232127483002841, 0.00013502605725079775, 9.2388909251894802e-05, 0.00014125440793577582, 6.8063920480199158e-05, 0.00011464965064078569, 0.00013238700921647251, 0.00012051183875882998, 0.00020246118947397918, 9.5191360742319375e-05, 8.9652450697030872e-05, 0.00017094817303586751, 0.00012021777365589514, 0.00010138681682292372, 0.00010637391824275255, 0.00012594014697242528, 8.1579921243246645e-05, 5.9995709307258949e-05, 5.8624271332519129e-05, 0.00010564769036136568, 0.00022341003932524472, 0.00011169040226377547, 9.3141257821116596e-05, 7.1716203819960356e-05, 9.6255404059775174e-05, 8.6716012447141111e-05, 8.9029941591434181e-05, 0.00010067404946312308, 7.510521390940994e-05, 0.00010644544090609998, 0.00015751083265058696, 4.6833432861603796e-05, 0.000101038946013432, 0.00012219409109093249, 6.7105502239428461e-05, 6.4332132751587778e-05, 9.3175600341055542e-05, 7.5658092100638896e-05, 0.00013250148913357407, 0.00015778187662363052, 0.00018556896247901022, 5.6229768233606592e-05, 8.1929858424700797e-05, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(8) int32_t tensor_data19[96] = { 20360, 13427, -2566, -10432, 116, -356, -1053, -3144, -1529, -4420, 3164, -42, 9849, 31041, 6699, 37916, 2349, 340, 1540, 18521, -6366, 987, -1190, -5628, -1296, -14119, 24926, -22826, -36, 54, -8994, 20824, -549, 3213, -5178, -144, -2025, -1590, 3565, 130, -2282, -17138, 5825, -450, 903, 830, 12644, 335, 16100, 167, -764, 18423, -6769, 1298, -22005, -8504, -6756, -13, 15034, -612, -9978, 189, 9399, 15980, 951, -11064, -5132, -1318, -414, -6989, -75, 5534, 9207, -8322, -253, -83, -3524, 14292, -1068, 28178, -6640, -281, -982, -2036, 18515, 11685, 53, 9031, 923, 3334, -5802, -39, -138, -3205, 40, -70, };
const TfArray<1, int> tensor_dimension19 = { 1, { 96 } };
const TfArray<96, float> quant19_scale = { 96, { 3.9270664274226874e-05, 8.5593514086212963e-05, 7.7871598477941006e-05, 8.4815255831927061e-05, 0.00018394566723145545, 0.0002543340960983187, 0.00014267087681218982, 8.2275706517975777e-05, 0.00034583738306537271, 0.00011527336755534634, 6.9180889113340527e-05, 0.00011809611169155687, 0.00013797394058201462, 6.3180632423609495e-05, 8.9122127974405885e-05, 2.8365227990434505e-05, 9.1993788373656571e-05, 8.0767153121996671e-05, 0.00013532573939301074, 6.1155966250225902e-05, 5.5099622841225937e-05, 0.00013142850366421044, 0.00012302005779929459, 0.00012833574146497995, 0.00016512493311893195, 0.00010497422772459686, 4.4356900616548955e-05, 6.7383523855824023e-05, 0.00011675932182697579, 0.00020393187878653407, 9.8734730272553861e-05, 3.5711451346287504e-05, 0.00011051770707126707, 0.00011310989066259935, 0.00012840099225286394, 0.00015771080506965518, 0.00012124075874453411, 9.2476402642205358e-05, 8.6720036051701754e-05, 0.00016645151481498033, 8.7437176262028515e-05, 7.8842342190910131e-05, 0.0001987683936022222, 0.00013771804515272379, 0.00015880688442848623, 9.1782916570082307e-05, 6.3711835537105799e-05, 0.00018027675105258822, 6.4532177930232137e-05, 0.00012221078213769943, 0.00010285855387337506, 7.2494367486797273e-05, 0.00017394512542523444, 0.000181818992132321, 6.3326777308247983e-05, 0.00021456995455082506, 8.2136568380519748e-05, 0.00018331881437916309, 5.1664013881236315e-05, 0.00010861650662263855, 9.3975744675844908e-05, 7.7548960689455271e-05, 0.00018709867435973138, 9.2034417320974171e-05, 5.4145260946825147e-05, 9.2972128186374903e-05, 0.00011276798613835126, 7.4060670158360153e-05, 0.00013995233166497201, 5.7273988204542547e-05, 0.00021408167958725244, 0.00011505410657264292, 0.00010827517689904198, 3.1770145142218098e-05, 0.00013765280891675502, 0.00021526929049286991, 5.712014899472706e-05, 9.8573887953534722e-05, 0.00010753966489573941, 9.7196927526965737e-05, 9.0877641923725605e-05, 0.0002382407255936414, 8.0853933468461037e-05, 6.6182285081595182e-05, 7.7596938353963196e-05, 9.6469244454056025e-05, 0.00018015781824942678, 0.00020332391432020813, 0.00022076955065131187, 0.00025935436133295298, 8.1146885349880904e-05, 7.8638920967932791e-05, 0.0001188010792247951, 8.5825260612182319e-05, 0.00017513474449515343, 0.00010050045966636389, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(8) int32_t tensor_data20[96] = { 4608, 12720, 865, 1553, 1902, 686, 6245, 1838, 10214, 847, 6042, -5545, 5014, 6891, 73, -3106, 7388, 4445, 7450, -918, 9685, 2836, 5910, 3526, 1528, 4135, 1283, 4901, 659, 4107, 3566, 1142, 3820, 3449, 627, 160, 6409, -445, 1775, 303, 2837, 3137, 5580, 4468, 11890, 5215, 9624, 6329, -359, 5800, 7127, 551, -4301, 2154, 4987, 1305, 2676, 8995, 3197, -2535, 255, 8327, 1612, 8025, 3505, 458, -5626, 9119, 4665, 5667, 11875, -878, 1888, 12171, -873, 4393, 2338, 1176, 4408, 9946, -3064, -1870, 5888, 1095, 4858, 2653, 300, 5867, 7253, 2741, 10961, 2805, 4472, 1129, 3795, 1272, };
const TfArray<1, int> tensor_dimension20 = { 1, { 96 } };
const TfArray<96, float> quant20_scale = { 96, { 6.7525288613978773e-05, 4.8096444515977055e-05, 9.5055613201111555e-05, 0.00010624237620504573, 8.6498956079594791e-05, 7.567387365270406e-05, 7.8149430919438601e-05, 5.8027249906444922e-05, 5.5345815781038254e-05, 0.00016446308291051537, 9.2360554845072329e-05, 5.6118300562957302e-05, 5.5307125876424834e-05, 7.9410689068026841e-05, 0.00011315885785734281, 8.5705207311548293e-05, 5.7784942327998579e-05, 0.00010291452053934336, 6.461519660660997e-05, 7.7079617767594755e-05, 5.8727036957861856e-05, 8.4056358900852501e-05, 6.454966205637902e-05, 0.00011539304978214204, 0.00012907067139167339, 0.00010095089965034276, 6.447824853239581e-05, 5.333167064236477e-05, 0.00011466825526440516, 9.6966097771655768e-05, 8.3500133769121021e-05, 7.0880931161809713e-05, 6.3254075939767063e-05, 8.2652986748144031e-05, 5.3731902880826965e-05, 9.2243484687060118e-05, 7.757257844787091e-05, 0.0001367365475744009, 0.00014644325710833073, 0.00011737513705156744, 0.00010020507033914328, 0.00013991656305734068, 6.7760985984932631e-05, 7.5683812610805035e-05, 6.2567472923547029e-05, 0.00011248944792896509, 5.7741395721677691e-05, 7.6137621363159269e-05, 0.00012137550220359117, 6.1126353102736175e-05, 6.5258769609499723e-05, 0.00012214206799399108, 7.9409845056943595e-05, 0.00012731997412629426, 0.00010444624058436602, 8.3993661974091083e-05, 8.761863864492625e-05, 5.2636827604146674e-05, 7.9518591519445181e-05, 8.6983389337547123e-05, 9.9383600172586739e-05, 7.8639299317728728e-05, 0.00013748307537753135, 8.1172409409191459e-05, 9.5219096692744642e-05, 9.179500921163708e-05, 6.7234112066216767e-05, 5.2215236792108044e-05, 7.7698670793324709e-05, 6.6241191234439611e-05, 5.0507711421232671e-05, 6.4794403442647308e-05, 0.00010466249659657478, 5.1872506446670741e-05, 8.6469612142536789e-05, 8.6389358330052346e-05, 0.00013482043868862092, 0.0001278950076084584, 8.1276280980091542e-05, 6.6117958340328187e-05, 8.2536011177580804e-05, 0.00014498934615403414, 8.4149622125551105e-05, 0.0001588493469171226, 7.270882633747533e-05, 0.00011023387924069539, 7.9075645771808922e-05, 0.00010197197116212919, 6.8349378125276417e-05, 6.3863641116768122e-05, 4.5802342356182635e-05, 0.000110190077975858, 7.892458961578086e-05, 9.9460608907975256e-05, 9.8341923148836941e-05, 9.3391303380485624e-05, } };
const TfArray<96, int> quant20_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(8) int32_t tensor_data21[48] = { 226, 9013, 899, -66, 115, 84, 7548, 6808, -343, -7665, -180, 488, 6000, 3868, 23333, 19291, -70, -1876, 1630, 6530, 18852, -24, -417, -344, 4316, -48, 3968, 20638, 6946, 13050, 63, 2325, -1176, -3320, -3451, 252, -15, 44, -151, 3802, 4874, 4539, -6966, 636, 5875, -497, 9923, 23, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.00010454820585437119, 0.00013754631800111383, 0.00058787257876247168, 6.997316813794896e-05, 0.00050391949480399489, 0.00065559922950342298, 0.00015642843209207058, 0.00019240616529714316, 7.0198366302065551e-05, 0.00019383389735594392, 0.00043982395436614752, 0.0002537136897444725, 0.00024226766254287213, 0.00018416284001432359, 5.9018089814344421e-05, 5.5846689065219834e-05, 0.00011203526810277253, 0.00044009112752974033, 6.5097898186650127e-05, 9.2136993771418929e-05, 5.8601955970516428e-05, 0.00051139801507815719, 0.00088911748025566339, 0.00023215166584122926, 5.6290533393621445e-05, 0.0001505247491877526, 9.3636634119320661e-05, 0.00010051007848232985, 0.00015842457651160657, 0.00012313660408835858, 0.00034377444535493851, 0.00021741977252531797, 9.4153867394197732e-05, 0.00023708703520242125, 8.417577191721648e-05, 7.8482589742634445e-05, 0.00027045590104535222, 0.00037217661156319082, 0.00011957568494835868, 0.00021603077766485512, 8.8643180788494647e-05, 0.00023444069665856659, 0.00010810705862240866, 0.00032300269231200218, 8.8510409113951027e-05, 0.0002999853459186852, 0.0001068379933713004, 0.00051624455954879522, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(8) int32_t tensor_data22[96] = { -814, 29754, -12078, 9623, 2872, -14107, -15060, -8740, 31152, 8915, 30300, -10494, 32422, 35778, -193, -8477, -23895, 17758, 28207, 17271, 36796, -14147, -17677, -4949, 5662, -10091, -12530, 15961, -452, 5340, -6419, -10838, 18959, 733, 25, 566, 130, -674, 75, -1171, 19777, 8162, 32289, -11804, 39132, 276, 2429, 19749, 2017, 32733, -124, -5172, -15627, 48551, 363, -5398, 719, 21765, -17144, 4693, -8228, 33601, 291, -27170, 13341, 2192, -9205, -9135, 4794, 19443, 20507, -3853, 168, 15645, 24059, -3425, 20459, 35404, -25649, -9126, -10239, -5068, 27537, -1724, -36064, -23347, -13388, -14020, 23108, 31469, -23520, -3356, 34011, -1484, 142, 984, };
const TfArray<1, int> tensor_dimension22 = { 1, { 96 } };
const TfArray<96, float> quant22_scale = { 96, { 6.4065119659062475e-05, 7.2553404606878757e-05, 6.8924906372558326e-05, 3.8309353840304539e-05, 3.1337527616415173e-05, 7.5671348895411938e-05, 6.6867258283309639e-05, 9.8232580057810992e-05, 5.3986535931471735e-05, 1.9974399037891999e-05, 3.8506961573148146e-05, 0.00010877427121158689, 6.0072336054872721e-05, 5.1150305807823315e-05, 3.6094279494136572e-05, 9.4613584224134684e-05, 6.9526293373201042e-05, 8.0265708675142378e-05, 5.6404576753266156e-05, 6.8604305852204561e-05, 7.2575145168229938e-05, 7.5992888014297932e-05, 7.0621565100736916e-05, 4.3640298827085644e-05, 4.2876959923887625e-05, 4.659908518078737e-05, 6.3697872974444181e-05, 4.1748815419850871e-05, 2.5990098947659135e-05, 4.2500574636505917e-05, 5.0703642045846209e-05, 7.9549557995051146e-05, 0.0001018564507830888, 5.6694458180572838e-05, 0.00016417719598393887, 4.6839129936415702e-05, 6.7503562604542822e-05, 4.0873343095881864e-05, 3.2294239645125344e-05, 5.3214225772535428e-05, 4.4288535718806088e-05, 5.2979699830757454e-05, 5.3968928114045411e-05, 4.7654411901021376e-05, 7.460681808879599e-05, 7.1410860982723534e-05, 3.676965570775792e-05, 7.1566850238014013e-05, 4.0830313082551584e-05, 6.0340204072417691e-05, 8.1612255598884076e-05, 3.5196906537748873e-05, 8.7875669123604894e-05, 2.5259678295697086e-05, 6.7684508394449949e-05, 5.09725468873512e-05, 3.8554080674657598e-05, 8.3590493886731565e-05, 8.5198553279042244e-05, 4.2824067350011319e-05, 3.7607340345857665e-05, 5.094270090921782e-05, 3.157632818329148e-05, 5.9803973272209987e-05, 9.7389471193309873e-05, 6.0917849623365328e-05, 0.00011717410961864516, 8.8374610641039908e-05, 6.2801336753182113e-05, 5.8786572481039912e-05, 7.8237950219772756e-05, 7.76668093749322e-05, 3.8764297642046586e-05, 0.00010273654334014282, 3.9677033782936633e-05, 6.7432352807372808e-05, 3.1383155146613717e-05, 2.9832555810571648e-05, 7.4119576311204582e-05, 6.3410909206140786e-05, 5.8993075072066858e-05, 5.8092951803700998e-05, 9.8763055575545877e-05, 3.0346382118295878e-05, 7.8235971159301698e-05, 3.9911650674184784e-05, 7.5303745688870549e-05, 4.5820219384040684e-05, 4.969947985955514e-05, 5.1771869038930163e-05, 7.1596005000174046e-05, 3.5396053135627881e-05, 5.8103356423089281e-05, 4.7358778829220682e-05, 4.1018472984433174e-05, 3.3334556064801291e-05, } };
const TfArray<96, int> quant22_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(8) int32_t tensor_data23[96] = { -4702, 7147, 9128, 7461, 5730, -820, 4797, 13327, 168, 16659, 4603, 1282, 5550, 13004, 1463, 2794, 12688, 205, -5083, 5415, 3866, -993, 4161, 1612, -285, 2319, 15860, 5465, 11099, 2414, 2868, 6125, -2568, 16535, 4935, 14038, 6794, 13800, 3554, 1130, 95, 4094, 6430, 635, 1421, 3520, 11526, 5005, 4406, 13043, 3332, 5662, 2983, 7430, -927, 4864, 13358, 12825, -4629, -3937, -488, 6176, 11631, -3556, 1574, 6845, -108, 197, 27520, -330, 982, 6365, -723, 4941, 2039, 11335, 5507, 9982, 13, 2497, 4391, 2036, 7805, 6160, 8175, 5499, 1756, 6029, 539, 7760, 4342, 2944, 5881, 3226, 1312, 4127, };
const TfArray<1, int> tensor_dimension23 = { 1, { 96 } };
const TfArray<96, float> quant23_scale = { 96, { 4.0944225474959239e-05, 5.6895696616265923e-05, 5.1104012527503073e-05, 3.962323535233736e-05, 3.33328680426348e-05, 4.3356492824386805e-05, 4.7775047278264537e-05, 4.7948964493116364e-05, 5.9866295487154275e-05, 4.5246662921272218e-05, 5.2163224609103054e-05, 6.2767183408141136e-05, 7.5143121648579836e-05, 6.3788953411858529e-05, 4.539968358585611e-05, 7.8040320659056306e-05, 5.5337524827336892e-05, 5.740479173255153e-05, 7.4437179137021303e-05, 4.3313204514561221e-05, 9.6141782705672085e-05, 8.3938037278130651e-05, 9.4351926236413419e-05, 8.0909529060591012e-05, 4.2764444515341893e-05, 7.6660762715619057e-05, 3.7417739804368466e-05, 0.00011223997717024758, 5.9028727264376357e-05, 6.8215151259209961e-05, 7.2894166805781424e-05, 6.5639913373161107e-05, 6.8611450842581689e-05, 5.5943488405318931e-05, 6.065408160793595e-05, 4.3663429096341133e-05, 5.151470031705685e-05, 5.8001533034257591e-05, 8.6913882114458829e-05, 7.2172493673861027e-05, 8.9792702056001872e-05, 6.8655230279546231e-05, 6.0590504290303215e-05, 5.4153861128725111e-05, 7.7908887760713696e-05, 8.3084953075740486e-05, 4.0711132896831259e-05, 6.4497173298150301e-05, 9.1025023721158504e-05, 4.5567117922473699e-05, 6.21336221229285e-05, 6.2276121752802283e-05, 5.3019011829746887e-05, 4.7207817260641605e-05, 4.9122696509584785e-05, 9.0570661996025592e-05, 5.4688487580278888e-05, 3.4999502531718463e-05, 5.1104958401992917e-05, 6.8266992457211018e-05, 6.9211862864904106e-05, 9.756187500897795e-05, 5.8469795476412401e-05, 3.9150931115727872e-05, 5.418543514679186e-05, 5.4060816182754934e-05, 4.3773536162916571e-05, 4.5366807171376422e-05, 2.7803816919913515e-05, 8.4720209997612983e-05, 6.5517182520125061e-05, 5.5093336413847283e-05, 5.5187731049954891e-05, 6.3301929912995547e-05, 8.0467485531698912e-05, 4.46829799329862e-05, 4.5449247409123927e-05, 3.6919343983754516e-05, 4.9092861445387825e-05, 8.6386658949777484e-05, 9.4663191703148186e-05, 5.9148031141376123e-05, 6.7493478127289563e-05, 8.1051570305135101e-05, 6.2514962337445468e-05, 7.0562397013418376e-05, 5.5918306316016242e-05, 8.0157544289249927e-05, 5.4068157623987645e-05, 9.0407898824196309e-05, 0.00010789433872560039, 6.0036250943085179e-05, 6.4376174123026431e-05, 4.5976397814229131e-05, 5.1772600272670388e-05, 6.3143328588921577e-05, } };
const TfArray<96, int> quant23_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(8) int32_t tensor_data24[96] = { -335, -1339, 7048, -894, -14673, -2742, -906, -377, -14, 38155, 1897, 35, -78, 2005, 15917, -5295, 1093, 4756, -2602, 143, -18451, -14096, -1418, 336, -3057, 1475, 32656, -35264, -71, 2079, -914, 1851, 8779, -5003, -3351, -19953, -5569, -8367, 137, -12949, 8407, -115, -2701, 20529, 1306, 2075, -1547, -3468, 864, -11378, 3104, -12867, 201, 22, -1294, -2301, -1159, -2904, 506, -254, -3285, 2815, -3512, -271, -3068, 14917, -13311, 12163, -11021, -784, 1826, 1730, 56, 891, 8105, -2190, 5349, 1128, -7475, -423, 2297, -19740, -1016, 15, 626, -4642, 2395, -5199, -3692, -24935, 10064, 17294, -3531, -8670, -7029, -106, };
const TfArray<1, int> tensor_dimension24 = { 1, { 96 } };
const TfArray<96, float> quant24_scale = { 96, { 0.00015134341083467007, 9.8463322501629591e-05, 0.00013661722186952829, 0.00011060691031161696, 8.2469872722867876e-05, 9.2828260676469654e-05, 0.00010202296834904701, 7.1167967689689249e-05, 9.7238698799628764e-05, 3.9552880480187014e-05, 8.5800333181396127e-05, 6.8529989221133292e-05, 0.00010902396752499044, 6.6140324634034187e-05, 8.72959935804829e-05, 7.3998351581394672e-05, 9.1064728621859103e-05, 0.00011012242612196133, 0.00010616950021358207, 0.00014640591689385474, 4.6675999328726903e-05, 5.4265663493424654e-05, 7.5333846325520426e-05, 5.8188976254314184e-05, 0.00019319554849062115, 0.00012219118070788682, 7.1200069214683026e-05, 3.324419230921194e-05, 6.4475148974452168e-05, 0.00011187956260982901, 0.00011273420386714861, 0.00012512139801401645, 0.0001161442487500608, 6.6463930124882609e-05, 0.00012553989654406905, 5.8172146964352578e-05, 0.00013041331840213388, 5.6523804232710972e-05, 5.7418459618929774e-05, 3.7457477446878329e-05, 8.9204499090556055e-05, 0.00012472581875044852, 8.714398427400738e-05, 8.3400904259178787e-05, 0.00011281936167506501, 6.4394058426842093e-05, 9.0393230493646115e-05, 0.00013473733270075172, 6.6950429754797369e-05, 8.3481863839551806e-05, 0.0001026972895488143, 0.0001123370966524817, 0.00013309875794220716, 0.00011947476741624996, 0.00014715128054376692, 0.00013491418212652206, 7.4423609476070851e-05, 0.00013824709458276629, 0.0001174101562355645, 0.00011942544369958341, 0.00014040282985661179, 2.9526952857850119e-05, 7.6198746683076024e-05, 0.00019643720588646829, 7.4554343882482499e-05, 5.2371407946338877e-05, 8.9210923761129379e-05, 0.00014132671640254557, 8.6376836406998336e-05, 9.0752815594896674e-05, 8.4091952885501087e-05, 0.00012568893725983799, 0.00013528611452784389, 0.00017048069275915623, 6.7894819949287921e-05, 0.00010950772411888465, 0.00019542679365258664, 0.00010689139162423089, 6.5905835072044283e-05, 0.00014538384857587516, 7.5821793871000409e-05, 6.7662476794794202e-05, 7.5936943176202476e-05, 8.3380888099782169e-05, 8.9942615886684507e-05, 6.9460722443182021e-05, 7.2452414315193892e-05, 6.8702582211699337e-05, 8.2613398262765259e-05, 5.2617935580201447e-05, 7.3790215537883341e-05, 9.7343989182263613e-05, 0.00012631730351131409, 0.00012401769345160574, 0.00012878292181994766, 0.00010121803643414751, } };
const TfArray<96, int> quant24_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(8) int32_t tensor_data25[96] = { -1275, 9149, 8663, 1940, 4421, 4647, 19450, 6882, -2715, 21477, 6044, -514, 1, 4673, -2354, 15881, 2271, 16352, -99, 3858, 6083, 4319, 1686, 4730, -261, 7639, -963, -819, 1891, 1404, 6064, 4343, 1889, -944, 4689, 6961, 1538, 3804, 7257, -78, 5286, 2509, -6706, 15967, -1691, -2010, 3008, 16641, -1500, 9185, -1214, 6404, 3296, 2963, 7967, 6507, 6494, 17238, -4801, -7916, 5535, 6772, 4810, 750, -3867, -9245, 5399, 309, 7206, 4067, -1079, 3148, 3221, -108, 6678, 3894, -2255, 1949, -11118, 5866, 4618, -1093, 19656, 17048, -15535, -273, 2330, 11853, 3575, 3365, 12176, 3112, 4155, 6729, -2737, -2634, };
const TfArray<1, int> tensor_dimension25 = { 1, { 96 } };
const TfArray<96, float> quant25_scale = { 96, { 5.0979688239749521e-05, 4.1070768929785118e-05, 2.9997298042871989e-05, 9.8304815765004605e-05, 6.9127469032537192e-05, 5.6996741477632895e-05, 4.5287306420505047e-05, 4.8043577407952398e-05, 4.6126227971399203e-05, 3.4177868656115606e-05, 5.8822672144742683e-05, 8.1980542745441198e-05, 5.9259535191813484e-05, 5.4499985708389431e-05, 3.6523200833471492e-05, 3.2843581720953807e-05, 7.4408322689123452e-05, 3.7425092159537598e-05, 5.264851643005386e-05, 6.3445419073104858e-05, 5.5861331929918379e-05, 4.6496730647049844e-05, 6.512308755191043e-05, 9.379631228512153e-05, 6.6308639361523092e-05, 5.2019895520061255e-05, 4.1302697354694828e-05, 0.00010130168084288016, 6.4814426878001541e-05, 6.6153123043477535e-05, 3.6120189179200679e-05, 6.3686289649922401e-05, 6.9658322900068015e-05, 5.9597663494059816e-05, 8.1732534454204142e-05, 4.4159944081911817e-05, 4.1973809857154265e-05, 0.00010104986722581089, 6.2288861954584718e-05, 7.1210895839612931e-05, 6.1747989093419164e-05, 5.5931144743226469e-05, 5.9485788369784132e-05, 4.4558695662999526e-05, 5.6263328588102013e-05, 5.2735264034708962e-05, 4.2978717829100788e-05, 2.8091086278436705e-05, 6.3563296862412244e-05, 8.6072694102767855e-05, 5.6652010243851691e-05, 6.5378160797990859e-05, 8.7153792264871299e-05, 9.2293987108860165e-05, 5.2969833632232621e-05, 5.0842754717450589e-05, 4.2779454815899953e-05, 4.5921202399767935e-05, 3.5296856367494911e-05, 4.6709505113540217e-05, 5.132189835421741e-05, 6.9629313657060266e-05, 0.00010962073429254815, 4.818247543880716e-05, 5.013789632357657e-05, 2.5692246708786115e-05, 5.0049198762280867e-05, 4.4387426896719262e-05, 3.5872581065632403e-05, 4.3689200538210571e-05, 3.6088611523155123e-05, 4.1066810808843002e-05, 6.4871848735492676e-05, 6.7117980506736785e-05, 3.3058680855901912e-05, 5.9208367019891739e-05, 0.0001102281894418411, 8.0137564509641379e-05, 3.3220603654626757e-05, 3.8943377148825675e-05, 6.9588233600370586e-05, 0.00012264001998119056, 3.236335760448128e-05, 3.8068865251261741e-05, 2.4395070795435458e-05, 0.00010543144890107214, 6.1535385611932725e-05, 4.9021742597687989e-05, 0.00010331218800274655, 8.61000080476515e-05, 3.8719292206224054e-05, 4.4666790927294642e-05, 8.5602783656213433e-05, 6.7725661210715771e-05, 5.9503781812964007e-05, 4.4354805140756071e-05, } };
const TfArray<96, int> quant25_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(8) int32_t tensor_data26[96] = { -3585, 6045, 22414, -7522, -2845, -1463, 72, -816, -5408, -2128, 1243, -310, -366, 6075, 11663, 20799, -1002, 131, -733, -2835, -1998, 2410, 5062, 545, -3131, 17110, 12882, -6219, 18150, -4401, 78, 491, 7016, -9185, -5061, 6418, 22759, 25603, 1712, 3532, 728, 16240, 9600, 2425, 2358, 4908, 572, -16069, -1180, -29916, -5642, -3462, -19748, 1078, -9334, -9387, -14890, -2126, -1513, -1849, -8222, -3849, 15392, -8934, -2179, -10435, -1880, -5998, 1819, -4148, -8868, -666, 1378, 10063, 13910, 360, -7747, -946, -5904, 13061, -2435, 2168, -1438, -27541, -864, 1503, -4041, -5228, -1085, -64, 5828, 62, 15051, -15105, 759, 2000, };
const TfArray<1, int> tensor_dimension26 = { 1, { 96 } };
const TfArray<96, float> quant26_scale = { 96, { 0.00011074681970058009, 0.00028508235118351877, 0.00012631530989892781, 7.9426121374126524e-05, 7.2014656325336546e-05, 7.4891395343001932e-05, 8.7267086200881749e-05, 0.00021063459280412644, 0.00013974643661640584, 0.00010184539132751524, 0.00012506888015195727, 8.3434031694196165e-05, 0.00019073416478931904, 8.2282553194090724e-05, 0.00012458636774681509, 8.7293898104690015e-05, 7.8347628004848957e-05, 0.00021132525580469519, 0.00011898775846930221, 0.00010319825378246605, 0.00010122121602762491, 9.104506898438558e-05, 7.9869125329423696e-05, 8.9150766143575311e-05, 0.00011513401113916188, 0.0001211753988172859, 0.00015175907174125314, 8.5859697719570249e-05, 8.0868194345384836e-05, 0.0001048017293214798, 0.00017293180280830711, 0.00016611733008176088, 9.1045760200358927e-05, 0.00017481455870438367, 8.8247994426637888e-05, 0.00031565385870635509, 9.152520215138793e-05, 6.506793579319492e-05, 0.00010263045260217041, 7.8811463026795536e-05, 0.0002019227686105296, 8.804869867162779e-05, 0.00013669095642399043, 0.00013736195978708565, 0.00011234091653022915, 7.1941642090678215e-05, 0.00012167913519078866, 0.00013719011622015387, 0.00016257604875136167, 5.9337926359148696e-05, 0.0001339077134616673, 6.9458335929084569e-05, 6.7070963268633932e-05, 0.00010867995297303423, 0.0001505635300418362, 9.8181226348970085e-05, 0.0001069214558810927, 9.0983434347435832e-05, 0.00020469338051043451, 0.00028607252170331776, 0.00010023086360888556, 7.6432981586549431e-05, 6.4810177718754858e-05, 0.00011943719437113032, 0.00015692647139076144, 0.00017318807658739388, 0.00021802780975122005, 0.00012973167758900672, 0.0001689350901870057, 0.00011864316184073687, 0.00015000150597188622, 0.00012899489956907928, 0.0001202368366648443, 0.0001027054968290031, 7.1545095124747604e-05, 0.00013776024570688605, 9.6349031082354486e-05, 8.0449368397239596e-05, 0.00012711761519312859, 0.00012356320803519338, 9.2212663730606437e-05, 0.00012164482177468017, 0.00010270417988067493, 8.2360420492477715e-05, 0.00043277014628984034, 9.2116933956276625e-05, 0.00013034496805630624, 0.00019217708904761821, 8.730152330826968e-05, 6.8529181589838117e-05, 0.00012311773025430739, 0.00014073560305405408, 5.433544356492348e-05, 6.7692839365918189e-05, 7.4130104621872306e-05, 0.00021436982206068933, } };
const TfArray<96, int> quant26_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(8) int32_t tensor_data27[96] = { -9258, 390, -4045, -11952, 4255, 7095, -20686, 12984, 2923, -271, -3553, -8046, -892, -642, 1004, 20572, -9316, 10155, 1191, 4218, 13097, 7686, 5414, 18528, 1818, 6634, -7524, 7855, 1698, 117, 17117, -5019, 2340, -3330, -309, 10320, 14695, 4347, 8841, 2014, -360, -13212, 2673, -12466, 2810, -7466, -2542, 6489, 394, -6514, 10005, 13640, 31397, -1171, 3817, 8284, 16338, 14971, 11863, 3990, -10660, 4219, -8298, 632, 3340, -5575, -4689, -8366, -16942, -1360, 5791, -15049, 5672, 496, -7378, -640, 292, 2311, -3281, 6901, 4738, 7127, 3587, -3484, 17002, -8839, 8141, 6587, 1423, -434, 10093, 1275, -1516, 2258, 3357, -3261, };
const TfArray<1, int> tensor_dimension27 = { 1, { 96 } };
const TfArray<96, float> quant27_scale = { 96, { 4.2297782783862203e-05, 8.0093213910004124e-06, 4.0630071453051642e-05, 4.1352661355631426e-05, 6.7013403167948127e-05, 5.7160323194693774e-05, 2.4018596377572976e-05, 5.4887190344743431e-05, 5.3389685490401462e-05, 5.055928704678081e-05, 7.6637421443592757e-05, 3.4711090847849846e-05, 0.00011451783211668953, 5.8840680139837787e-05, 4.9706450226949528e-05, 3.6175904824631289e-05, 3.787553941947408e-05, 5.3612184274243191e-05, 9.0402470959816128e-05, 4.5173012040322646e-05, 3.0081457225605845e-05, 6.3532657804898918e-05, 5.249242894933559e-05, 2.9947937946417369e-05, 5.8225385146215558e-05, 7.1265429141931236e-05, 4.6196451876312494e-05, 5.523570507648401e-05, 2.754551314865239e-05, 2.9128475944162346e-05, 3.1910425605019554e-05, 4.0933609852800146e-05, 7.3384180723223835e-06, 8.0171106674242765e-05, 2.6683674150262959e-05, 3.2784362701931968e-05, 3.462368476903066e-05, 5.0084490794688463e-05, 5.083403448224999e-05, 4.5386375859379768e-05, 4.165853897575289e-05, 2.3722113837720826e-05, 7.6410331530496478e-05, 3.8728619983885437e-05, 9.5293180493172258e-05, 4.9124933866551146e-05, 6.3386076362803578e-05, 5.0295533583266661e-05, 4.2140422010561451e-05, 3.2083287806017324e-05, 4.9647132982499897e-05, 3.0547329515684396e-05, 3.0030942070879973e-05, 4.7355581045849249e-05, 8.4062383393757045e-05, 6.0160091379657388e-05, 4.1592636989662424e-05, 3.104794814134948e-05, 3.4967484680237249e-05, 8.1743193732108921e-05, 4.4567619625013322e-05, 5.449826130643487e-05, 2.8674179702647962e-05, 0.00010043564543593675, 2.3815877284505405e-05, 5.351003710529767e-05, 5.743811561842449e-05, 3.151304554194212e-05, 3.1285064324038103e-05, 6.2316488765645772e-05, 5.8647394325817004e-05, 3.285057027824223e-05, 2.0009771105833352e-05, 6.4469611970707774e-05, 3.3047253964468837e-05, 6.1267834098543972e-05, 4.5152646634960547e-05, 4.1313676774734631e-05, 7.8992612543515861e-05, 8.9246117568109185e-05, 4.2442377889528871e-05, 5.1694365538423881e-05, 4.3604406528174877e-05, 4.5283155486686155e-05, 4.3054496927652508e-05, 4.6923880290705711e-05, 4.3945106881437823e-05, 4.460361014935188e-05, 4.6580429625464603e-05, 3.9818653021939099e-05, 4.1875035094562918e-05, 9.6181596745736897e-05, 4.6878249122528359e-05, 3.653305975603871e-05, 3.407108670216985e-05, 3.6510420613922179e-05, } };
const TfArray<96, int> quant27_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(8) int32_t tensor_data28[96] = { -1901, 4015, 15127, -3384, -4974, -625, -5205, -5132, 12520, -7939, 7861, 1518, -6137, -1201, -5431, -22903, 19753, -6850, -9640, -2248, -8804, -3575, 27157, 2303, -254, -2633, -4675, 16730, -422, -18893, 12985, -4916, 3001, -2829, 18518, -13776, 5880, -2401, -10781, -9224, 12915, -12564, 27543, -3660, -6261, -3252, -5413, 240, -1181, 13139, 384, 14045, 3168, -2835, -3411, -4228, -12169, 19272, 16157, -7207, -2900, -4425, -11467, -8466, 22434, -2422, -2644, -3996, -2263, -5964, 26938, -2105, -13100, 8, -5554, -5803, -18326, 10512, -1251, 5365, 16249, 11448, 22890, 6616, 9347, -332, 15364, -12290, 30, 16634, 10776, 12194, 10825, 5585, 13854, 14420, };
const TfArray<1, int> tensor_dimension28 = { 1, { 96 } };
const TfArray<96, float> quant28_scale = { 96, { 0.00018065630865748972, 0.00061064620967954397, 0.00013198607484810054, 0.00015048825298435986, 0.00013112781743984669, 0.00012440377031452954, 0.00015448956401087344, 0.00012766843428835273, 0.00010653684876160696, 9.8186050308868289e-05, 0.0001026503014145419, 9.9177428637631238e-05, 4.0099399484461173e-05, 6.8274173827376217e-05, 0.00011864145199069753, 0.00010577226930763572, 0.00012392491044010967, 7.7429605880752206e-05, 6.3563617004547268e-05, 7.9600744356866926e-05, 0.00012612786667887121, 5.6338329159189016e-05, 8.0820085713639855e-05, 0.00016303961456287652, 0.00012252396845724434, 0.0001048656995408237, 0.00014815249596722424, 9.8705953860189766e-05, 0.00018145426292903721, 7.9529076174367219e-05, 0.00011344497033860534, 8.9183660747949034e-05, 0.00091104803141206503, 0.00015619515033904463, 0.00012240088835824281, 0.00011140655988128856, 0.00011762698704842478, 8.9888540969695896e-05, 0.00010267859033774585, 0.00014043001283425838, 0.00010506634862395003, 0.00014553201617673039, 8.2265629316680133e-05, 0.00023763612261973321, 4.7994613851187751e-05, 0.00016575929475948215, 6.3326908275485039e-05, 9.581914491718635e-05, 0.00017981999553740025, 0.00015287987480405718, 0.00012963729386683553, 8.4626750322058797e-05, 0.00016945153765846044, 0.00013678096001967788, 3.5750072129303589e-05, 8.9902918261941522e-05, 6.1450271459762007e-05, 0.00015188765246421099, 0.00018543837359175086, 0.0001100500812754035, 0.00022874513524584472, 0.00010090657451655716, 0.00014484029088634998, 4.153060945100151e-05, 0.00016101024812087417, 9.2556052550207824e-05, 0.00013047065294813365, 0.00020705089264083654, 0.00020324143406469375, 0.0001611234329175204, 8.2913829828612506e-05, 0.0002057399251498282, 0.00018817573436535895, 9.0829940745607018e-05, 0.00020384164236020297, 9.8421311122365296e-05, 7.319857832044363e-05, 0.00013717213005293161, 7.2161987191066146e-05, 4.8596892156638205e-05, 7.6572985562961549e-05, 0.00010082761582452804, 9.261645027436316e-05, 0.00010347116040065885, 0.00014063064008951187, 0.000153229950228706, 8.9720328105613589e-05, 0.00010476211900822818, 0.00014023056428413838, 0.00012008026533294469, 0.00016919944027904421, 4.3415915570221841e-05, 9.1237699962221086e-05, 8.861267997417599e-05, 0.00014753703726455569, 0.00011259624443482608, } };
const TfArray<96, int> quant28_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(8) int32_t tensor_data29[1280] = { -605, -588, -1208, -443, -808, -643, -761, -1022, -940, -1240, -197, 219, -684, -1428, 101, -583, -899, -1070, -982, 61, -779, -1494, 150, -1308, -924, -938, -1072, -434, -1059, -1086, -918, -494, -639, 273, -861, -1093, 15, -1105, -569, -632, -699, 42, 41, -1038, -514, -1846, -1316, -387, -1591, -948, -901, -679, -1335, -2000, -338, -994, -743, -807, -977, -1755, -1203, -1122, -1369, -383, -441, 45, -510, -121, 37, -496, -975, -725, -144, 64, -993, -765, -719, -340, -271, -973, -699, -32, -632, -1414, -1044, -1105, -189, -751, -616, -330, -1302, -2044, -972, -1959, -558, 772, -1285, -570, -1047, -1, -570, -1447, -836, -1125, -992, -602, -899, -74, -492, -834, -551, -1250, -845, -311, -1080, -658, -415, 265, -407, -1297, -1013, -575, -1288, -192, -727, -21, -845, -1794, -838, -501, -884, -408, -1524, -28, -1067, -536, -1416, -985, 259, -1257, -573, -517, -1310, -1412, -1198, -1644, -744, -271, -789, -980, -25, -651, -528, -1206, -381, -1567, -1154, -19, -772, -1405, -849, -742, 113, -1013, -601, -1826, -86, -682, -575, -1283, -380, -725, -797, -400, 420, -629, -515, -1349, -631, -920, -562, -1791, -724, -401, -545, -891, -1099, -974, -229, -631, -822, -450, -960, -870, -948, -885, -847, -1110, -574, -91, -588, 38, -307, -775, -580, -560, -703, -891, -1233, -474, -567, -1902, 134, -112, -1060, -1039, 685, -1152, 127, -976, -1170, 86, -136, -1865, -473, -673, -926, -264, 120, -260, -554, -817, -105, -1817, -332, -661, -1324, 85, -999, -1288, -1392, -1996, -289, -1204, -1232, -1118, -634, 562, -920, -416, -1700, -1224, -851, -1064, -49, -120, -1089, -970, -1861, -829, -969, -932, -458, -922, -537, 27, -329, -561, -282, -313, -803, -2642, -620, -597, 121, -363, -819, -1241, -662, -72, -722, -1143, -988, -1759, -872, -500, -1007, -432, 189, -761, -1029, -1259, -706, -312, -1000, -832, -1300, 106, -1108, -1501, 344, -172, -911, -846, -131, -511, -998, -865, -853, -1165, -446, -1578, -1290, -379, -837, -1499, -1446, -915, -772, -644, -478, 201, -1090, -375, -2727, -946, -972, -1188, -485, -503, -741, -1077, -616, -582, -537, -255, -893, -438, -582, -1755, -583, -840, -1023, -917, -511, -1908, -1435, -1479, -457, -903, -473, -1113, 367, -304, -680, -976, -285, -746, -1751, -1438, -1507, 483, -1210, -367, -805, -587, -762, -526, -1542, -229, -93, -777, -1573, -219, -480, -1292, -660, -989, -495, -530, -474, -868, -200, -684, -429, -919, -1306, -600, -1190, -797, -1025, -998, -817, -860, -440, -580, -1894, -842, -1199, -1456, -665, -244, -1185, -1240, -146, -1815, -521, -1149, -1754, -307, -1273, 743, -366, -1177, -386, -298, -189, -1098, -269, 227, 167, -579, -219, 70, -1143, -94, -724, 140, -1491, -573, -466, 73, 299, -792, -121, -662, -1013, -157, -727, 167, -1162, -986, -354, -1713, -378, -1457, -599, -287, -835, -1757, -809, -46, -524, -285, -284, -738, -164, -204, -474, -1150, -865, -1197, -254, -946, -719, -689, -1197, -1014, -312, 323, -665, -846, -181, -591, 291, -381, -771, -339, -1128, -736, 211, -666, -813, -1025, -280, 78, -588, -528, -1509, -1113, -548, -560, -1065, -665, -726, -384, -1108, -788, -571, -656, -214, -435, -830, -718, -1340, -1579, -519, -723, 110, -154, -1713, -681, -940, -1285, 1011, -1320, -1731, -917, -686, -1009, -672, -1532, 819, -437, -634, 90, -978, -1590, -551, 195, -511, -1124, -106, -488, -923, -2196, -231, -702, -1556, -216, -761, 76, -1304, -529, -1061, -565, -807, -1466, 372, 433, 234, -486, -280, -760, -154, -417, -639, -291, -780, -2076, -197, -423, -174, -858, -1487, -1488, -1787, -559, -968, -771, -103, -1294, -903, -556, -146, -671, -817, -431, -609, -1048, -461, -899, -723, -1321, -209, -1234, -328, -620, -868, -448, -800, -1440, -715, -38, -398, -1297, -443, -782, 61, -770, -302, -1044, 44, -204, -94, -1214, 73, -1016, -795, -671, 125, -663, -930, -1132, -814, -1246, -382, -1875, 20, -880, -645, -406, -933, 303, 239, -206, -682, -559, -454, -632, -1851, -688, -903, -622, -1098, -852, -1630, -923, -182, -501, -566, -390, -806, -649, -1193, -1481, -1107, -604, -482, 159, 130, -1000, -453, -1790, -1133, -1106, -377, -897, -713, -571, -757, -737, -560, -720, -1324, -633, -500, -2043, -947, -454, -1072, -1874, -1219, -455, -1165, -908, 46, -353, -427, -1013, -529, -1378, -587, -805, -397, -1054, -639, -236, -1358, -506, -10, -636, -132, -1428, -376, -104, -302, -560, -421, -521, -1101, -824, -642, -254, -1735, 10, -1314, -395, -530, 518, -788, -274, -1374, -597, -1333, -1131, -877, -750, -989, -1581, -2327, -773, -1266, -627, -1056, -204, -1634, -1131, -884, -159, -1297, -1475, -874, -1305, -301, -836, -1359, -1086, 527, -592, -466, -99, -992, 45, -1195, -448, -438, -470, 127, -133, -1134, -937, -1163, -133, -173, -678, -2173, -215, -2072, -389, -1130, -509, -394, -643, -1301, -267, -1007, -842, -889, -1314, -1390, -588, -941, -521, -472, -952, -386, -1423, -439, -370, 0, -649, -833, -1605, -932, -854, 123, -204, -379, 382, -1635, -639, -389, -954, -515, -1048, -1280, -1001, -702, -723, -117, -405, -599, -1135, -1398, -551, -1323, -1000, -1806, -168, -1074, -576, 895, -1331, 56, 274, 263, -473, 164, -259, -584, -1111, -775, -622, -456, -13, -1724, -410, -704, -691, -378, 43, -262, -1573, -1827, -174, -1296, -573, 344, -551, -205, 70, -794, -1718, -168, -543, -803, -1179, -1509, -717, -1382, -767, -1374, -304, -1816, -1688, -1252, -750, -289, -682, -788, -966, -728, -959, -1283, -1704, -1241, -801, -651, -128, -993, -803, -274, -601, -1351, -435, -1952, -1015, -1967, -260, -142, -649, -701, -1442, -909, -115, -738, -900, -1210, 222, -747, -100, -1130, -765, 479, -258, 389, -469, -1332, -1195, -1605, -323, -1133, -1040, -106, -502, -372, -1197, -1564, -626, -282, -309, 27, 292, -279, -919, -1407, -49, -20, -154, -257, -290, -627, 379, -906, -499, -525, -1716, -943, -743, -416, -1355, -1545, -334, -964, -659, -1034, -473, -398, -680, -87, -543, -1424, -771, -1178, -1247, -1293, 319, -978, -508, -1158, 3, -558, -426, -494, -711, -1021, -586, -1031, -489, -869, -1275, -851, -1309, -363, -408, -183, -764, -358, -751, -796, -349, -893, -1218, -1178, -788, -2152, -51, -4, -1033, -353, -877, -767, -293, -439, -1157, -608, -1209, -231, -723, -527, -404, -937, 354, -83, -954, -1218, -423, 127, -893, -632, -1576, -188, -324, -287, -189, -963, -697, -668, -35, -1178, -401, -1360, -1042, -960, -1255, -85, -1479, -1818, -533, -1155, -475, 264, -1995, -261, -1526, -1113, -680, -302, -1185, -1165, 128, -984, -163, -1112, -1463, -971, -497, -665, -498, -871, 100, -425, -1276, 146, -1055, -777, -854, -646, 182, -164, -559, -230, -814, -698, -1049, -1119, -763, -509, -1209, -406, -462, -1606, 60, -1056, -699, -1118, -996, -1067, -953, -1083, -1510, -658, -720, -1343, -891, 167, -165, -404, -332, -1986, -584, -939, -666, -844, -417, -321, -2371, -1054, -857, -243, -1890, -1164, -932, -352, -532, -526, -660, -663, -758, -760, -1152, -1110, -1356, -322, -844, -438, -727, -485, -684, -363, 119, -62, 147, -886, -1023, -712, -736, 86, -971, -673, -466, -1041, -793, -38, -296, -494, -431, 121, -819, -707, -1929, -727, -415, -606, -450, -676, -1769, -965, -851, 48, -722, -804, 552, -958, -925, -1763, -274, -693, -636, -1482, -32, -483, -156, -90, -681, -1040, -991, -818, -4, -1523, -1552, -642, -1258, -282, 139, -642, -256, -984, -960, -1227, -2016, -827, -125, -1134, -72, -979, -249, -1091, -1279, -257, -903, -890, -227, -1792, -394, -438, -2197, -687, -242, -723, 508, -905, -680, -851, -175, -2101, 548, -419, -1953, 35, -827, -1063, -880, -531, 18, -433, -1966, -1472, -10, -1073, -309, -864, -154, -1789, -88, -841, 153, -443, -1022, -1070, -659, -446, -758, -727, -902, -1157, -1182, -88, -552, 42, -1093, -141, -82, -410, -1152, -563, -1266, -1582, -575, -896, -623, -66, -1228, -1781, -394, -605, -624, -761, -248, -1257, -239, -820, -1174, -861, -988, -453, -67, -785, -310, 1148, -1077, -287, -143, -551, -1178, -244, -786, -777, -396, -1417, -1021, -473, -543, -516, -1740, -77, -1303, -935, -1357, };
const TfArray<1, int> tensor_dimension29 = { 1, { 1280 } };
const TfArray<1280, float> quant29_scale = { 1280, { 0.00033770382287912071, 0.00028990182909183204, 0.00027351369499228895, 0.00031248261802829802, 0.00029630569042637944, 0.00024417127133347094, 0.00026822937070392072, 0.00023038375366013497, 0.00027732815942727029, 0.0002948913024738431, 0.0002780756913125515, 0.00029720325255766511, 0.00031382119050249457, 0.00027968789800070226, 0.00023337220773100853, 0.00032890663715079427, 0.00026361548225395381, 0.0003348976606503129, 0.00033266731770709157, 0.00031759770354256034, 0.00022986324620433152, 0.0002565999748185277, 0.00031939419568516314, 0.00025478389579802752, 0.00026636311667971313, 0.00027544129989109933, 0.00025850514066405594, 0.00030183451599441469, 0.00031038318411447108, 0.00024271421716548502, 0.0003315242356620729, 0.00032369175460189581, 0.00021174699941184372, 0.00032683595782145858, 0.0002371964801568538, 0.00024156810832209885, 0.00028474742430262268, 0.00025054931757040322, 0.0003838814445771277, 0.000224380346480757, 0.00036392011679708958, 0.0002417159266769886, 0.00030515211983583868, 0.00028631606255657971, 0.00024033161753322929, 0.00026939221424981952, 0.00025342195294797421, 0.00024331030726898462, 0.00027659261832013726, 0.00022831017849966884, 0.00031738317920826375, 0.00029038527281954885, 0.00025941917556338012, 0.00028390940860845149, 0.00028196736820973456, 0.00037407950730994344, 0.00026202664594165981, 0.00028832032694481313, 0.00035474932519719005, 0.00027146909269504249, 0.00024342589313164353, 0.00020863479585386813, 0.00025209476007148623, 0.00025476780137978494, 0.00024088242207653821, 0.00028250535251572728, 0.00029554002685472369, 0.00024020875571295619, 0.00036341982195153832, 0.00037681378307752311, 0.00029758692835457623, 0.0003040023148059845, 0.00029697938589379191, 0.00023781300114933401, 0.00032095680944621563, 0.0002989700878970325, 0.00020402639347594231, 0.00034679172676987946, 0.00030428144964389503, 0.00021326556452549994, 0.00018260597425978631, 0.00029728494700975716, 0.00027551568928174675, 0.00031866418430581689, 0.00034225379931740463, 0.00029568083118647337, 0.00026423265808261931, 0.00029795651789754629, 0.00027718182536773384, 0.0002867966250050813, 0.00024176745500881225, 0.00029696559067815542, 0.00022741757857147604, 0.00026347232051193714, 0.00033278868068009615, 0.00025835484848357737, 0.00020153600780759007, 0.00028532015858218074, 0.00042006085277535021, 0.0002839330118149519, 0.00029160160920582712, 0.00031517259776592255, 0.00027339710504747927, 0.00025464361533522606, 0.00028465042123571038, 0.0003200257197022438, 0.00030088124913163483, 0.0003168454859405756, 0.00023009239521343261, 0.00032895515323616564, 0.00022612026077695191, 0.00021352266776375473, 0.00018384400755167007, 0.00032337062293663621, 0.00023500126553699374, 0.0003390326164662838, 0.00028267648303881288, 0.00030915174284018576, 0.00029765893123112619, 0.00027138966834172606, 0.00027724116807803512, 0.00031393152312375605, 0.0002344734821235761, 0.00030348580912686884, 0.00027933641104027629, 0.00032969695166684687, 0.00032010430004447699, 0.00023745854559820145, 0.000296901969704777, 0.00024511149968020618, 0.00030085031175985932, 0.00037684835842810571, 0.00026214294484816492, 0.00030903116567060351, 0.00023197868722490966, 0.00024583854246884584, 0.00025526105309836566, 0.00030169260571710765, 0.00038444082019850612, 0.00024715223116800189, 0.00035691462107934058, 0.00022917980095371604, 0.00022214946511667222, 0.00021072725940030068, 0.00025032984558492899, 0.00032933233887888491, 0.00026638270355761051, 0.00025226088473573327, 0.00033328571589663625, 0.00032917343196459115, 0.00022977551270741969, 0.00031446502543985844, 0.00041299429722130299, 0.00027615396538749337, 0.00028074273723177612, 0.00026868324493989348, 0.00030990087543614209, 0.00024877424584701657, 0.00029491496388800442, 0.00027223073993809521, 0.00029232152155600488, 0.00026579143013805151, 0.00025859425659291446, 0.00028826852212660015, 0.00024600638425908983, 0.00027724332176148891, 0.00031797465635463595, 0.00032853451557457447, 0.00021238281624391675, 0.00028580756043083966, 0.00023360618797596544, 0.00030629010871052742, 0.00032310938695445657, 0.0003534650313667953, 0.00030597837758250535, 0.00031472879345528781, 0.00036125295446254313, 0.00027251336723566055, 0.00023677429999224842, 0.00025887126685120165, 0.00025620684027671814, 0.00022278389951679856, 0.00025907787494361401, 0.00027733243769034743, 0.00050937832565978169, 0.00025136492331512272, 0.00024811268667690456, 0.00027445671730674803, 0.00026769153191708028, 0.00034400343429297209, 0.00020746022346429527, 0.00038733670953661203, 0.00026314944261685014, 0.00028781811124645174, 0.00025826244382187724, 0.0002273574355058372, 0.00022657832596451044, 0.00025183899560943246, 0.00026282583712600172, 0.00026683096075430512, 0.00021965669293422252, 0.00031410870724357665, 0.00030153279658406973, 0.00024762481916695833, 0.00020337395835667849, 0.00023648557544220239, 0.00021968111104797572, 0.00021696281328331679, 0.00031981160282157362, 0.00035962637048214674, 0.00021411680791061372, 0.00024501225561834872, 0.00026074866764247417, 0.00025241798721253872, 0.00036054421798326075, 0.00023154652444645762, 0.00018300970259588212, 0.00031280683469958603, 0.00029240723233669996, 0.00019992352463304996, 0.00026611803332343698, 0.00036565199843607843, 0.00020316195150371641, 0.00024884825688786805, 0.00026571325724944472, 0.00028770696371793747, 0.0002733012952376157, 0.0002754251763690263, 0.00026141476701013744, 0.0002852891047950834, 0.00028329793713055551, 0.00028568343259394169, 0.0003370699705556035, 0.00021796111832372844, 0.00034926339867524803, 0.00029603738221339881, 0.0002386989799560979, 0.00033975241240113974, 0.00023699775920249522, 0.00022930903651285917, 0.0002770319115370512, 0.00021422265854198486, 0.00029803102370351553, 0.00027247483376413584, 0.00026739237364381552, 0.00031055623549036682, 0.00019710116612259299, 0.00020809244597330689, 0.00024737624335102737, 0.00023359613260254264, 0.00025805245968513191, 0.00028116104658693075, 0.00027723555103875697, 0.00036303119850344956, 0.00023565918672829866, 0.0002630200469866395, 0.00025005923816934228, 0.00026860894286073744, 0.0002618165744934231, 0.0003219243953935802, 0.00031021566246636212, 0.00033063202863559127, 0.00024770270101726055, 0.00032003148226067424, 0.00025388531503267586, 0.00028649065643548965, 0.0003740296233445406, 0.00025230029132217169, 0.00024425066658295691, 0.00025389465736225247, 0.00027704969397746027, 0.00023105547006707639, 0.00026246433844789863, 0.00031451697577722371, 0.00027967710047960281, 0.00026698593865148723, 0.00025748429470695555, 0.00028341481811366975, 0.00036640043254010379, 0.0003462788590695709, 0.00025199091760441661, 0.00026642926968634129, 0.00025087149697355926, 0.00026971110492013395, 0.00020084672723896801, 0.00028102882788516581, 0.00028142301016487181, 0.00026620767312124372, 0.00024623158969916403, 0.00024667673278599977, 0.00027351913740858436, 0.00027249363483861089, 0.00030507720657624304, 0.00038402850623242557, 0.00036670349072664976, 0.00025594024918973446, 0.00021959005971439183, 0.00020136151579208672, 0.00023144752776715904, 0.00025911859120242298, 0.00028872868278995156, 0.00030145191703923047, 0.00031135912286117673, 0.00029334938153624535, 0.00029500978416763246, 0.00030722754308953881, 0.00030286272522062063, 0.00024595388094894588, 0.00028217898216098547, 0.00022966459800954908, 0.00026919032097794116, 0.00018786385771818459, 0.00026026929845102131, 0.00023863308888394386, 0.0003283526748418808, 0.0002659614838194102, 0.00032562448177486658, 0.00023900555970612913, 0.00026714196428656578, 0.00027626584051176906, 0.00036376228672452271, 0.00029686893685720861, 0.00021878984989598393, 0.00024625699734315276, 0.00022978552442509681, 0.00031300875707529485, 0.0002774606691673398, 0.00029483754769898951, 0.00023473764304071665, 0.00029754507704637945, 0.00026157431420870125, 0.00021986528008710593, 0.00026571340276859701, 0.00041831852286122739, 0.00029572684434242547, 0.00029952061595395207, 0.00027199395117349923, 0.00033213858841918409, 0.00032014338648878038, 0.0003213530289940536, 0.00027217352180741727, 0.00027886682073585689, 0.00024461172870360315, 0.0003421827859710902, 0.00023128825705498457, 0.00026926607824862003, 0.00028519454644992948, 0.00023022200912237167, 0.00024373592168558389, 0.00027396695804782212, 0.00027832313207909465, 0.00022968612029217184, 0.00041906343540176749, 0.0003331018378958106, 0.00036068502231501043, 0.00026798769249580801, 0.00025414404808543622, 0.00022347205958794802, 0.00026216855621896684, 0.00027792871696874499, 0.00025055118021555245, 0.00029219264979474247, 0.00024351794854737818, 0.00037387237534858286, 0.0004202475247438997, 0.00036644909414462745, 0.00021176406880840659, 0.00026098362286575139, 0.00026556311058811843, 0.00030285434331744909, 0.00028971952269785106, 0.00027311593294143677, 0.0002452870539855212, 0.00023229204816743731, 0.00026445960975252092, 0.0002586411137599498, 0.00027120872982777655, 0.00030762222013436258, 0.00023768439132254571, 0.00028442303300835192, 0.00025940852356143296, 0.00020853451860602945, 0.00029788026586174965, 0.00023777269234415144, 0.00029750625253655016, 0.00039095629472285509, 0.00026297074509784579, 0.00024910256615839899, 0.00025307745090685785, 0.00041402931674383581, 0.00022517723846249282, 0.00025415097479708493, 0.00026690255617722869, 0.00034137119655497372, 0.00020878728537354618, 0.00028936014859937131, 0.00023652829986531287, 0.0002856357314158231, 0.00027034935192205012, 0.00021363928681239486, 0.00022587922285310924, 0.00024896749528124928, 0.00037425311165861785, 0.00028341356664896011, 0.00032196354004554451, 0.00024006329476833344, 0.00029525274294428527, 0.0002141842560376972, 0.00024506048066541553, 0.00030556597630493343, 0.00026523327687755227, 0.00030230381526052952, 0.00025315978564321995, 0.00026900097145698965, 0.00030838960083201528, 0.00026582047576084733, 0.00040248656296171248, 0.00034609821159392595, 0.00028720733826048672, 0.00022822686878498644, 0.00030816966318525374, 0.0003571638953872025, 0.00033118273131549358, 0.00030104929464869201, 0.00031862047035247087, 0.00027841806877404451, 0.00023720499302726239, 0.00030828375020064414, 0.00030868517933413386, 0.00036402247496880591, 0.00029260801966302097, 0.00024237124307546765, 0.00021377943630795926, 0.00030957604758441448, 0.00032806032686494291, 0.00029501560493372381, 0.00029425485990941525, 0.00025011168327182531, 0.00027055965620093048, 0.00021664802625309676, 0.00022501715284306556, 0.00031079436303116381, 0.0002464652934577316, 0.00023469974985346198, 0.00036901867133565247, 0.00026670179795473814, 0.0003235371841583401, 0.00038641382707282901, 0.00026677921414375305, 0.00020486433641053736, 0.00027492857770994306, 0.00036330518196336925, 0.00037311922642402351, 0.00033965898910537362, 0.0002607591450214386, 0.00028235302306711674, 0.00038002931978553534, 0.00030060485005378723, 0.00035022728843614459, 0.00025144362007267773, 0.00024131633108481765, 0.00022942364739719778, 0.00028746385942213237, 0.00028953584842383862, 0.00034716105437837541, 0.00023603638692293316, 0.00031391700031235814, 0.00026918394723907113, 0.00030813127523288131, 0.00029793757130391896, 0.00030240396154113114, 0.00030520043219439685, 0.00035919697256758809, 0.00028909873799420893, 0.0002880280080717057, 0.00024945766199380159, 0.00023232704552356154, 0.00021663073857780546, 0.00025891026598401368, 0.00033944990718737245, 0.00030537051497958601, 0.00037355558015406132, 0.00028607039712369442, 0.00025171821471303701, 0.00031377453706227243, 0.00024249964917544276, 0.00024018835392780602, 0.00027297413907945156, 0.00025042836205102503, 0.00031634452170692384, 0.00030126163619570434, 0.00033289179555140436, 0.00021868044859729707, 0.0003388727200217545, 0.00027557625435292721, 0.00026809243718162179, 0.00021265825489535928, 0.00032345586805604398, 0.00022561712830793113, 0.00021892289805691689, 0.00021286008995957673, 0.0002804535033646971, 0.00026672845706343651, 0.00033869181061163545, 0.00035680786822922528, 0.00023341405903920531, 0.00023877911735326052, 0.00030818043160252273, 0.00036227304372005165, 0.00028352343360893428, 0.00026894014445133507, 0.00032593932701274753, 0.00029975263169035316, 0.00025292253121733665, 0.00025794672546908259, 0.00025221437681466341, 0.00022253287897910923, 0.00024114815460052341, 0.00025037393788807094, 0.0002671357651706785, 0.000299393868772313, 0.00035653242957778275, 0.00026725587667897344, 0.00036099040880799294, 0.00023029570002108812, 0.00025754128000698984, 0.00022646629076916724, 0.00035609517362900078, 0.00019485088705550879, 0.00029227999038994312, 0.00030859600519761443, 0.00020498894446063787, 0.00025993451708927751, 0.0003068696241825819, 0.00022846109641250223, 0.0002514784864615649, 0.00025891620316542685, 0.00028899166500195861, 0.00033253981382586062, 0.00025633824407123029, 0.0002730974811129272, 0.0002876338257919997, 0.00029769956017844379, 0.00028399203438311815, 0.00031513551948592067, 0.00024603289784863591, 0.0002400881057837978, 0.00027118183788843453, 0.00023725720529910177, 0.00030901172431185842, 0.00025303984875790775, 0.00024459796259179711, 0.00025033764541149139, 0.0002876338257919997, 0.000310628762235865, 0.00030235096346586943, 0.00025529417325742543, 0.00031006612698547542, 0.00026130111655220389, 0.00023130910994950682, 0.0002309966366738081, 0.00024424915318377316, 0.00025420085876248777, 0.00033363056718371809, 0.00032817074679769576, 0.00038686196785420179, 0.00025070572155527771, 0.00020679674344137311, 0.00023401754151564091, 0.00027222459902986884, 0.00025010804529301822, 0.00025235558860003948, 0.00023461962700821459, 0.00026199346757493913, 0.00021562459005508572, 0.00029177058604545891, 0.00030166460783220828, 0.00028306993772275746, 0.00030279578641057014, 0.00027435662923380733, 0.00030378386145457625, 0.00029177163378335536, 0.00029095885111019015, 0.00024000456323847175, 0.00036062582512386143, 0.00023613519442733377, 0.00026250493829138577, 0.00032915332121774554, 0.00025236938381567597, 0.00026920702657662332, 0.00024258476332761347, 0.00027918067644350231, 0.00026145981973968446, 0.00028809957439079881, 0.00023065140703693032, 0.00030713359592482448, 0.00022947591787669808, 0.00024335952184628695, 0.00025027425726875663, 0.00027037103427574039, 0.00027328621945343912, 0.00034682606928981841, 0.00028762069996446371, 0.00027796524227596819, 0.00028328748885542154, 0.00021111404930707067, 0.0002915572258643806, 0.00024118585861288011, 0.00028195101185701787, 0.0003207760164514184, 0.00027545006014406681, 0.00030458226683549583, 0.00032675170223228633, 0.00024671628489159048, 0.00032868041307665408, 0.00022831362730357796, 0.00023700474412180483, 0.00018704294052440673, 0.00040648420690558851, 0.00028415297856554389, 0.00026547868037596345, 0.00033521151635795832, 0.00027156059513799846, 0.00022183050168678164, 0.00023669951769988984, 0.0002837739884853363, 0.00024395901709794998, 0.00029668162460438907, 0.00030517837149091065, 0.00024290644796565175, 0.00019759827409870923, 0.00038855380262248218, 0.00020193900854792446, 0.00027569616213440895, 0.00018996694416273385, 0.00024970213416963816, 0.00027134432457387447, 0.00024799144011922181, 0.00024468213086947799, 0.00033409567549824715, 0.0002686640655156225, 0.00024807738373056054, 0.00024726256378926337, 0.00021776052017230541, 0.00031464826315641403, 0.00024164251226466149, 0.0002275730948895216, 0.00026044723927043378, 0.00029290339443832636, 0.00022753668599762022, 0.00025386997731402516, 0.00033883340074680746, 0.00030462839640676975, 0.00025311985518783331, 0.0003490069939289242, 0.00023674944532103837, 0.00030597118893638253, 0.0003355814260430634, 0.00022844718478154391, 0.00033999027800746262, 0.00026955513749271631, 0.0002303525252500549, 0.00024009383923839778, 0.00028951407875865698, 0.00025741048739291728, 0.00034504281939007342, 0.00022581964731216431, 0.00024126467178575695, 0.0003255065530538559, 0.00039558915887027979, 0.00028353874222375453, 0.00024657166795805097, 0.00026874907780438662, 0.00032677652779966593, 0.00030008089379407465, 0.00028188066789880395, 0.00030652238638140261, 0.00025621629902161658, 0.00026403091032989323, 0.00039278878830373287, 0.00034891805262304842, 0.00033208046806976199, 0.0003139805921819061, 0.00036415495560504496, 0.00025333274970762432, 0.00023722503101453185, 0.00024673328152857721, 0.00023361756757367402, 0.00021726898557972163, 0.00025092839496210217, 0.00022625304700341076, 0.00026533327763900161, 0.00027026652242057025, 0.00025048013776540756, 0.00031644318369217217, 0.00030697602778673172, 0.0002546904725022614, 0.00029430253198370337, 0.00028768213815055788, 0.00027700353530235589, 0.0002828797441907227, 0.00028119259513914585, 0.000234188002650626, 0.00033590375096537173, 0.00024815282085910439, 0.00022795249242335558, 0.0002773279557004571, 0.00028712453786283731, 0.00025437056319788098, 0.0002875917125493288, 0.00032470293808728456, 0.00033583384356461465, 0.00020463246619328856, 0.00034265962312929332, 0.000244203518377617, 0.0002560234279371798, 0.00029947844450362027, 0.00024872095673345029, 0.0002324924134882167, 0.00025613550678826869, 0.00024648563703522086, 0.00025957345496863127, 0.00022734313097316772, 0.00024118229339364916, 0.0003620128845795989, 0.00025802230811677873, 0.00026069942396134138, 0.00026628220803104341, 0.00027466029860079288, 0.00020949949976056814, 0.00020020522060804069, 0.00027362225227989256, 0.00031948488322086632, 0.00027703735395334661, 0.00029831999563612044, 0.00029369519324973226, 0.00026903976686298847, 0.00033097236882895231, 0.00027173489797860384, 0.00021594642021227628, 0.00029438338242471218, 0.00023812940344214439, 0.00021134615235496312, 0.00032429429120384157, 0.00033127405913546681, 0.00028843202744610608, 0.00023667057394050062, 0.00022945618547964841, 0.00026124363648705184, 0.00033626961521804333, 0.00024990161182358861, 0.00033096541301347315, 0.0002482126874383539, 0.00022437257575802505, 0.00024137590662576258, 0.00026965435245074332, 0.0002142158045899123, 0.00027243213844485581, 0.00026223657187074423, 0.0002849163138307631, 0.00028770740027539432, 0.00025215125060640275, 0.00030207622330635786, 0.00019436939328443259, 0.00024239388585556298, 0.00024259110796265304, 0.00030137991416268051, 0.00023902015527710319, 0.00031528549152426422, 0.00022659880050923675, 0.00022288165928330272, 0.00026774205616675317, 0.00030863922438584268, 0.00028398312861099839, 0.00018595447181724012, 0.00037183333188295364, 0.00032296380959451199, 0.00022161887318361551, 0.0003124051436316222, 0.00026633634115569293, 0.00055936159333214164, 0.0002369227004237473, 0.00023066205903887749, 0.0002527254109736532, 0.00027689011767506599, 0.00025992470909841359, 0.00028443269548006356, 0.00023167372273746878, 0.00032361288322135806, 0.00021540865418501198, 0.00025429602828808129, 0.0002936472010333091, 0.00035251752706244588, 0.00031241093529388309, 0.0002424648409942165, 0.00028519303305074573, 0.00021989764354657382, 0.00030461422284133732, 0.00029013113817200065, 0.00030599752790294588, 0.00022154006001073867, 0.00030148497899062932, 0.00024157574807759374, 0.00024157571897376329, 0.00027876134845428169, 0.00023825677635613829, 0.00031791723449714482, 0.00034906607470475137, 0.00021705687686335295, 0.00026056604110635817, 0.0002410013839835301, 0.00025239313254132867, 0.00029981439001858234, 0.00020247632346581668, 0.00033903538133017719, 0.00024913984816521406, 0.00024364808632526547, 0.00029661657754331827, 0.00028914984432049096, 0.00026267132489010692, 0.00024400348775088787, 0.00035204537562094629, 0.00028589216526597738, 0.00028460679459385574, 0.00025160366203635931, 0.00033019043621607125, 0.00024005459272302687, 0.00027115893317386508, 0.00022645290300715715, 0.00029535769135691226, 0.00031990755815058947, 0.00020250005763955414, 0.0002450489264447242, 0.00025755990645848215, 0.00027722853701561689, 0.00031832800596021116, 0.00022650561004411429, 0.00024836696684360504, 0.00028878753073513508, 0.00021651962015312165, 0.00021544742048718035, 0.0002426102728350088, 0.00027710688300430775, 0.00021629374532494694, 0.00025496640591882169, 0.0002238926972495392, 0.00023654362303204834, 0.00023731891997158527, 0.00023424171376973391, 0.00028673306223936379, 0.00022177744540385902, 0.00027952433447353542, 0.00031021755421534181, 0.00026693427935242653, 0.00028754363302141428, 0.00028310870402492583, 0.00022884916688781232, 0.00029667859780602157, 0.00026854634052142501, 0.00028544626547954977, 0.0003122428897768259, 0.000309029157506302, 0.00023742581834085286, 0.00021736096823588014, 0.00023602883447892964, 0.00022949639242142439, 0.00025555925094522536, 0.00032145736622624099, 0.00023505302669946104, 0.00025838366127572954, 0.00030138471629470587, 0.0002872294862754643, 0.0003230833972338587, 0.00034563604276627302, 0.00028302913415245712, 0.00036901846760883927, 0.00028327677864581347, 0.00021500287402886897, 0.00024422697606496513, 0.00033260488999076188, 0.00031506150844506919, 0.00026780468760989606, 0.00028773533995263278, 0.00026319795870222151, 0.00027394533390179276, 0.00036820059176534414, 0.00033597627771086991, 0.00025446238578297198, 0.00030792449251748621, 0.00031579757342115045, 0.00025800129515118897, 0.00025807516067288816, 0.00030182537739165127, 0.00029268101206980646, 0.0002931607305072248, 0.00028407419449649751, 0.00032592218485660851, 0.00024771635071374476, 0.000275810481980443, 0.00028242566622793674, 0.00026223977329209447, 0.00025622945395298302, 0.00026786132366396487, 0.00023389418493025005, 0.00033887979225255549, 0.00029437866760417819, 0.00027248720289207995, 0.0002730443375185132, 0.00025705632288008928, 0.00027645810041576624, 0.00022903595527168363, 0.00037058681482449174, 0.00022627673752140254, 0.00031753387884236872, 0.00025117179029621184, 0.00030995137058198452, 0.00026059849187731743, 0.0002909004979301244, 0.00029237210401333869, 0.0002524872834328562, 0.00030529015930369496, 0.00023758977476973087, 0.00027763107209466398, 0.00026073027402162552, 0.0002254460850963369, 0.00028434459818527102, 0.00025193419423885643, 0.00025088642723858356, 0.00028964882949367166, 0.00024185363145079464, 0.00023586474708281457, 0.00026312324916943908, 0.00025738816475495696, 0.00029712237301282585, 0.00029179986449889839, 0.00025850092060863972, 0.00027795496862381697, 0.00029547643498517573, 0.00022222875850275159, 0.00028287098393775523, 0.00033350344165228307, 0.0003042877942789346, 0.00024832159397192299, 0.0002177097339881584, 0.00022479389735963196, 0.00027862837305292487, 0.00029429714777506888, 0.00036306626861914992, 0.00032646159525029361, 0.000239013388636522, 0.00025380769511684775, 0.00028863607440143824, 0.00044354746933095157, 0.00028612295864149928, 0.00025246798759326339, 0.00032674040994606912, 0.00031477745505981147, 0.00031510842381976545, 0.00026123589486815035, 0.00025867778458632529, 0.00030576626886613667, 0.00028203293913975358, 0.00028672191547229886, 0.00028119160560891032, 0.00025931402342393994, 0.00025852204998955131, 0.00033446706947870553, 0.00028675034991465509, 0.00027055872487835586, 0.00035996257793158293, 0.00021345823188312352, 0.00035415127058513463, 0.00032564310822635889, 0.00024772499455139041, 0.00027474496164359152, 0.00029450873262248933, 0.00023469972074963152, 0.00025902644847519696, 0.00040923155029304326, 0.00028714720974676311, 0.0003077768487855792, 0.00027021628920920193, 0.00023951243201736361, 0.0002845556300599128, 0.00026078592054545879, 0.00027355781639926136, 0.00025550698046572506, 0.00026161316782236099, 0.00034973275614902377, 0.0002920741681009531, 0.00028857096913270652, 0.00027755388873629272, 0.00035010365536436439, 0.00028435824788175523, 0.00030546117341145873, 0.00028466989169828594, 0.00029625574825331569, 0.00021420462871901691, 0.00027444702573120594, 0.00021135376300662756, 0.00020812245202250779, 0.00024804446729831398, 0.00023300926841329783, 0.00031017893343232572, 0.00036766010452993214, 0.00023704599880147725, 0.00030369978048838675, 0.00029494281625375152, 0.00039298928459174931, 0.00025733091752044857, 0.00024919162387959659, 0.00023668829817324877, 0.00026205848553217947, 0.00026859439094550908, 0.00034669475280679762, 0.00029148563044145703, 0.00023316137958317995, 0.00026002104277722538, 0.00030322821112349629, 0.00034549093106761575, 0.00023387244436889887, 0.00035662093432620168, 0.00020634778775274754, 0.00025436215219087899, 0.00033230939880013466, 0.00031784662860445678, 0.00032433526939712465, 0.00032739611924625933, 0.00033079760032705963, 0.00021631366689689457, 0.00029928577714599669, 0.00022551498841494322, 0.00027046629111282527, 0.0002575348480604589, 0.00029773672576993704, 0.00031205100822262466, 0.00030329072615131736, 0.00034296710509806871, 0.00027403715648688376, 0.00028484113863669336, 0.00030259042978286743, 0.00025196446222253144, 0.00025442111655138433, 0.0002175016124965623, 0.00025130662834271789, 0.00028968448168598115, 0.00032150407787412405, 0.0002738300827331841, 0.00031201099045574665, 0.00025077577447518706, 0.00030908736516721547, 0.00028949903207831085, 0.00029671750962734222, 0.00024499875144101679, 0.0002794525062199682, 0.00028503482462838292, 0.00023048362345434725, 0.00022485585941467434, 0.00031850242521613836, 0.00024550897069275379, 0.00027669861447066069, 0.00026006574626080692, 0.00033163436455652118, 0.0002264452341478318, 0.00022684605210088193, 0.00028144157840870321, 0.00025612962781451643, 0.00027812120970338583, 0.00031586308614350855, 0.00032452482264488935, 0.00027181339100934565, 0.0002890992327593267, 0.00025648644077591598, 0.00022701587295159698, 0.00027222326025366783, 0.00036569408257491887, 0.00023511065228376538, 0.00022915340377949178, 0.00026608112966641784, 0.00023847285774536431, 0.00024531027884222567, 0.00031427197973243892, 0.00026642531156539917, 0.00029473242466337979, 0.00027922139270231128, 0.00033675858867354691, 0.00030922345467843115, 0.00030855165095999837, 0.00032803657813929021, 0.00025963876396417618, 0.00035183902946300805, 0.00023756093287374824, 0.00030464271549135447, 0.00026081566466018558, 0.00038859888445585966, 0.0002619939623400569, 0.00029778419411741197, 0.00028267715242691338, 0.00025696112425066531, 0.0003369480837136507, 0.00028181867673993111, 0.00030432816129177809, 0.00029387132963165641, 0.00026199346757493913, 0.00031367602059617639, 0.0002401063684374094, 0.00024412055790890008, 0.00021422344434540719, 0.00024546854547224939, 0.00027967122150585055, 0.00039712601574137807, 0.00027956379926763475, 0.00032220190041698515, 0.00032792583806440234, 0.00029447537963278592, 0.00028827329515479505, 0.0003206954279448837, 0.00024323585967067629, 0.00028585628024302423, 0.00028994277818128467, 0.00032509668380953372, 0.00025436043506488204, 0.00028198875952512026, 0.00029337161686271429, 0.00028614228358492255, 0.00026337229064665735, 0.00038235928514041007, 0.00027080532163381577, 0.00029022665694355965, 0.00024803349515423179, 0.0002582443121355027, 0.00023306472576223314, 0.00023512351617682725, 0.0002714762813411653, 0.00029821365023963153, 0.00025883634225465357, 0.00027586903888732195, 0.00020418789063114673, 0.00033861110568977892, 0.00030661298660561442, 0.0002629683876875788, 0.0003315758949611336, 0.00024664099328219891, 0.00029131546034477651, 0.00021030973584856838, 0.00022525891836266965, 0.00023868083371780813, 0.00029213808011263609, 0.00025391892995685339, 0.00026082104886882007, 0.00029745479696430266, 0.00031711187330074608, 0.0002856355276890099, 0.00026280549354851246, 0.0002347146364627406, 0.00025204542907886207, 0.00026004374376498163, 0.00022466309019364417, 0.00024727210984565318, 0.00021021129214204848, 0.00027468416374176741, 0.00028605342959053814, 0.00026480993255972862, 0.00027837968082167208, 0.00037382595473900437, 0.00029684402397833765, 0.00023670848167967051, 0.00020374663290567696, 0.0003612761793192476, 0.00030442775459960103, 0.0003830673813354224, 0.00021934491815045476, 0.0002929450711235404, 0.00037196351331658661, 0.00022521463688462973, 0.0002737855538725853, 0.00025721397832967341, 0.00022708716278430074, 0.00024264727835543454, 0.00027309628785587847, 0.00032068663858808577, 0.00020763592328876257, 0.00025425024796277285, 0.0002759561175480485, 0.00025622232351452112, 0.00028357634437270463, 0.00031315017258748412, 0.00024031283101066947, 0.00029415305471047759, 0.00030999479349702597, 0.00028083109646104276, 0.00030350469751283526, 0.0003385852905921638, 0.00033368871663697064, 0.00022197674843482673, 0.00027172235422767699, 0.0002259977045468986, 0.00029316043946892023, 0.0002647960209287703, 0.00022880168398842216, 0.00024148619559127837, 0.00034839933505281806, 0.00020042671530973166, 0.00032470427686348557, 0.0002496776869520545, 0.00041084372787736356, 0.000398734409827739, 0.00022087527031544596, 0.00026147355674766004, 0.00029764865757897496, 0.00025124158128164709, 0.00024574165581725538, 0.00031732799834571779, 0.00026881918893195689, 0.00024269233108498156, 0.00036780699156224728, 0.00024056565598584712, 0.00027852019411511719, 0.00026152585633099079, 0.00031745646265335381, 0.00023352645803242922, 0.00029777293093502522, 0.00025752198416739702, 0.00023897446226328611, 0.00025031139375641942, 0.000383636390324682, 0.00022743924637325108, 0.00022324660676531494, 0.00034271879121661186, 0.00024581389152444899, 0.00034094342845492065, 0.00029474010807462037, 0.00023599823180120438, 0.00034554727608337998, 0.00022108328994363546, 0.00027501641307026148, 0.00032639395794831216, 0.00021011765056755394, 0.00021905591711401939, 0.00028077801107428968, 0.00026747479569166899, 0.00020054106425959617, 0.00029813253786414862, 0.00025761185679584742, 0.00020658069115597755, 0.00036950511275790632, 0.00027900026179850101, 0.00028271542396396399, 0.00033079169224947691, 0.00039887652383185923, 0.00022840124438516796, 0.00030863136635161936, 0.00025823983014561236, 0.00021702879166696221, 0.00025227159494534135, 0.00031935263541527092, 0.00028828901122324169, 0.00032475072657689452, 0.00023129789042286575, 0.00025136917247436941, 0.00026849840651266277, 0.00027380060055293143, 0.00030682393116876483, 0.00037428562063723803, 0.00027111009694635868, 0.00026056473143398762, 0.00035394149017520249, 0.00030495866667479277, 0.00032529659802094102, 0.00024963769828900695, 0.0002372425515204668, 0.00023985894222278148, 0.00021851106430403888, 0.00026406804681755602, 0.00029794155852869153, 0.00023588247131556273, 0.00024281424703076482, 0.00022681072005070746, 0.00024423221475444734, 0.00028648058651015162, } };
const TfArray<1280, int> quant29_zero = { 1280, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(8) int8_t tensor_data30[10*1280] = { 
  10, -70, -4, -54, -44, -100, 95, 8, -79, -1, -8, 50, 80, -31, 13, -77, 11, 73, 25, 77, -16, -90, -85, -81, 82, -29, 31, -6, -3, -37, 3, -1, -92, 71, 30, 21, -83, -57, 67, 37, -38, -30, 77, 85, 1, -52, -40, -28, 62, 2, -55, -93, 24, 17, -58, 72, 70, 10, -34, -16, -49, 33, 95, 63, -29, -4, 50, -9, 51, 42, 82, 71, -80, 52, -23, -35, 31, -62, -11, -80, -84, 86, 90, 44, 24, 31, 65, -89, 21, 38, 8, 69, 77, -22, -75, -70, 59, -10, -38, 11, -5, -110, 31, -78, -64, -20, 35, 77, -37, 47, -2, 24, -34, -90, -48, 24, -93, 25, 35, -46, 93, 47, -81, -74, -69, 56, 60, -57, -88, 71, 83, -9, 19, 21, -1, 61, 66, -22, -87, 13, 37, -47, 14, 52, -14, 24, 26, 92, -30, 78, 15, -27, -46, 10, 92, -87, -72, -48, 90, -17, -50, 69, 97, -79, -16, -75, 4, -67, -28, 82, -91, -94, 63, 4, 69, -18, 46, 49, -71, -83, -24, 63, 80, -12, 79, 4, 88, -31, -13, 88, -83, 59, -11, 61, -31, -41, -13, -28, -23, 70, 2, -66, 65, 8, -16, 88, -66, 78, -95, 84, 93, 75, 14, -85, 73, 41, -36, -30, 19, -85, 56, 16, -87, 81, -13, 74, -58, 87, 46, 72, 56, 47, 62, -89, -5, -68, -84, -12, -15, -58, 94, 47, 95, 17, 67, 24, 50, 37, -35, 25, -29, 54, -28, -60, -50, -37, -84, 1, 14, 27, 80, -38, 53, -27, -3, -38, 2, 30, -35, -66, 61, 36, -55, 60, 17, -67, -31, 83, -61, 94, -88, -72, -29, 42, -66, 65, -73, 81, 28, -43, -91, 41, 58, 95, -72, -72, 39, -35, -20, -80, -70, 67, -97, 89, 44, -11, 57, -55, -11, 89, -47, 2, 37, -10, 37, 72, 52, 100, -86, -56, -77, 89, -26, -71, 37, -21, -2, -87, 85, -79, -45, 4, 76, -89, -66, -93, 3, -47, -56, 75, -24, 101, -73, -26, 4, -59, 16, 5, -55, -87, -87, 19, 34, -77, 60, -49, -33, 33, -39, -3, 27, 27, 20, -40, 26, -26, -42, 24, 56, 24, 81, -71, 74, -38, 63, -89, 75, -99, -26, -92, 84, 70, 6, 11, -106, 28, -72, -36, 89, -90, -22, -62, 59, -54, -19, 32, -60, -30, -55, 89, -85, 45, -72, -95, 18, -73, 26, -13, 48, 63, 40, -70, -33, -40, -20, -11, 68, -36, -53, 94, -8, -84, 40, 30, 89, -25, 51, -35, -11, 36, 0, 35, -3, -32, 76, 22, -65, 51, -48, 42, -17, 84, -75, -36, -72, -87, 45, -31, 20, -29, -86, 89, 36, -49, 28, 88, -16, 0, -36, -3, 94, -40, -48, 4, 12, 39, 63, -34, -1, -60, 3, 3, -11, 52, -6, 25, -51, -46, -83, 33, 47, 67, -60, -50, -41, 6, -35, -92, -8, -79, 87, 28, 105, 102, -30, -58, 43, -61, 29, -33, -61, -43, -82, -71, 13, -12, -39, -2, -80, -1, 68, 67, 62, 63, 60, -27, 19, 92, 35, 79, -80, 80, 93, 48, 22, -56, 56, 33, 50, -56, 62, 44, 87, 55, -89, 81, -21, 81, 35, 92, 87, -72, 116, 72, 68, 40, 19, -65, 81, -50, -48, -69, -85, -14, -84, -86, -75, 9, -10, -58, 69, -53, -28, -25, 74, -56, -14, 43, 78, -68, -6, -11, -79, -1, -26, -44, 73, -39, 8, -32, -56, 61, -18, 0, 22, -97, -1, -3, -54, 40, 23, 58, 3, 70, 17, -89, 47, 62, -67, 7, -46, 83, 75, 56, -76, 75, 80, -68, -46, -37, -8, 28, -86, -55, -88, 90, -25, 13, 4, -45, 14, 25, -58, 6, 72, 2, 4, -33, 17, 61, 0, -67, 96, -87, -55, -49, 14, -92, 60, 88, 84, -35, 47, -85, -24, 46, -60, -1, 20, -11, -33, 66, -32, 26, -37, 24, -53, 11, -89, 55, 20, 33, 76, 50, -1, 37, -73, -41, -62, -90, -19, 7, 93, 55, -35, 45, 70, -2, 53, 17, 85, -60, -57, 16, 82, 40, 66, 90, -41, -7, -93, -70, -10, -47, 82, -98, 20, 86, 51, 45, 32, -47, 74, -37, -60, 41, -20, 58, 71, 33, -86, 57, -76, -41, -56, 69, -3, -44, 38, 73, 29, -64, 30, 96, 46, 74, 34, -74, 59, 78, -34, 79, -26, 102, -19, -32, 35, 24, 49, -57, -78, 84, -64, -12, -21, 70, -30, -3, 54, 33, 16, 73, -57, -51, 0, -68, 55, 13, -5, 43, -75, -58, -20, -100, -78, -40, -71, -82, -31, -13, -77, -71, 49, -72, 42, 76, -66, 93, 75, 12, 17, 44, -46, 87, -87, 3, 57, -84, 14, 31, 76, 56, -51, 88, -42, 93, -62, 77, 3, -78, -96, -89, 33, 1, -43, 36, -29, 13, 38, 72, -58, -64, 6, -31, -52, 75, -76, 53, -60, 41, -58, 36, -39, -59, -60, 86, 35, -81, 2, 23, 24, 88, 22, -61, 81, -35, 4, 20, -81, 34, 19, -81, 7, 74, 56, 4, -35, 3, 5, 45, -38, -40, 42, -40, -58, 104, 50, 45, 15, 42, 81, 6, -10, -70, 53, 94, -84, -6, -42, 54, -13, 13, -73, -33, -85, -54, 92, -75, -1, 48, 57, 32, -41, 67, -18, 61, 3, 7, 48, 67, 80, -89, 47, -71, -45, -34, -5, 79, -11, -5, 55, -14, -83, 69, 89, 82, -16, -25, 37, -105, -14, -48, -77, -14, -50, 81, -31, 26, -31, 23, -58, 90, -58, -63, 16, -95, 67, -34, 67, 44, 82, 61, 93, 36, 44, 64, -84, -50, -66, -59, -31, 3, 22, 69, 8, -88, 29, -3, -41, 89, 22, -19, -65, 33, 31, 12, -46, 67, -31, -55, 71, -66, -51, -13, -80, -7, -61, 87, -68, 0, -62, -31, -22, -60, -23, 90, 47, -87, -15, -3, -48, 65, 61, 85, 31, -33, -13, 18, 14, 73, -19, 45, 1, 66, 25, -76, -62, 105, -66, 16, -57, -27, -80, 95, 21, -11, -19, 41, -91, -27, 61, -88, 27, -68, 11, 35, -64, 40, -90, 53, -81, 112, 3, -10, -66, -67, -56, 84, -28, -69, -35, -83, 70, 69, -32, -56, 55, -2, -68, 6, 21, -93, 5, -37, -13, 97, -16, 48, -84, 46, 33, 68, -49, 2, -116, 79, 10, -19, 10, -55, 88, -55, 58, 91, 9, 19, 93, -7, 70, -17, -43, -15, -30, 91, 96, -40, 18, -47, 12, -26, -15, 72, -16, 36, -29, -19, -64, 14, 78, 43, 55, 32, -85, -72, -84, -17, -28, -58, -66, 65, -18, 2, 75, -92, -76, 7, 64, 31, -24, 61, 73, 47, -48, -63, -20, 17, -18, -4, 23, 10, -27, -53, -90, 92, 82, -2, 36, -16, -78, 43, 30, -90, -38, 1, 74, 13, 63, -97, -87, 72, -52, -22, 64, -95, 27, -42, -54, -72, 14, 79, 14, 25, 37, -52, 78, -27, 58, 66, 89, -87, -13, -25, 59, -5, -35, 40, 4, 60, -50, 75, 69, 80, -13, -58, 44, 51, -59, -13, 37, 35, -86, 63, 109, 50, 17, -1, 95, -28, -68, 37, 18, -26, -51, 59, 57, 41, 29, 67, 11, -28, 34, 90, -59, -8, 6, -54, -25, -66, -78, -27, -11, 27, 28, 86, -34, 27, 93, -60, 87, -94, -32, -65, -10, 14, 14, -74, 91, -18, -93, 11, 10, -63, -43, 81, 71, 8, -63, -77, 9, 86, 74, -3, -6, 37, 11, 20, 61, -85, 42, -72, -29, 36, 59, 33, 3, -64, 37, -83, 25, -13, 54, 41, 77, 15, -82, 10, -91, 87, -32, -83, -45, 26, 74, 14, 64, 37, 57, 48, 60, 56, 
  47, 51, 65, 25, -24, 36, -18, -39, -93, -91, -53, -67, 89, 107, 78, -75, -62, -5, -30, -21, 77, -46, 20, -41, 83, 1, -33, -94, -16, 21, -89, -61, -66, 37, 29, 51, 50, -44, -86, -36, -32, -99, 29, -33, 63, 96, 34, 55, -55, -59, -85, 23, 1, 26, 76, 1, 66, -89, 82, -82, -73, 80, 69, 12, 83, -29, -25, -11, 68, -61, -52, -14, -59, 69, 69, -42, 74, 78, 73, 44, -8, 77, 29, 73, -30, 22, -78, 87, -67, 45, -24, -9, 51, 33, -78, 64, -21, 2, 87, 38, 43, -115, 21, -95, 50, 88, 57, 88, -69, 25, 25, 84, -80, -55, 89, 74, -22, -84, -28, 0, -66, 74, -37, -27, -82, -41, 17, -57, -6, 38, 8, 3, 73, 29, -19, -45, -23, -21, -46, -58, 5, -67, 55, -87, -2, 21, 90, 83, 53, -84, -64, -39, -75, -52, 16, 24, -39, 88, 75, 69, -25, -47, 1, -41, -57, -22, 36, -32, -58, 91, -33, -4, -5, 86, 3, 59, -86, -73, -41, 2, -23, 48, 37, -96, 65, -25, -50, 80, 86, -97, -54, -19, 50, -30, 17, 4, -51, 55, 97, -34, 54, -89, 58, -51, 26, 16, -78, 91, -15, -22, 53, -69, 63, -40, -94, -74, 50, -85, 79, -13, 12, -32, -70, 88, 25, -29, -5, 87, 16, 5, -72, -84, -54, 19, 66, 26, 52, -46, 86, -14, 28, -88, 9, 48, 85, 8, -47, -34, -33, 3, 45, -86, 23, -47, -50, -13, -56, -71, -31, 10, -28, -34, -35, -3, 67, 72, -46, -40, 33, 73, 85, -44, 18, -66, -48, 82, -73, 63, -53, -59, 80, -22, 56, 51, -82, -85, -44, -58, 51, -27, -52, 33, 10, 13, -42, 31, -81, 74, 71, -37, 54, 30, -23, -52, 7, 5, -19, 55, 39, -21, -24, -71, 94, 72, -42, 0, 22, -73, -10, -23, -24, 44, 53, -79, -70, -70, -34, 75, -68, 53, 16, 61, 24, 66, 42, -73, -90, 70, 42, 82, 20, 71, -80, 42, 62, -15, 90, 71, 34, 34, 38, -73, 36, -73, -23, -54, 55, 26, -95, -5, -87, -42, 46, 43, -90, -82, 112, 43, 108, -55, -45, 61, -94, -102, 30, 83, 38, 22, -27, 74, 84, 14, -6, -48, -79, 5, 72, 54, -48, 89, -36, 8, 34, -28, 75, -46, -52, -81, -92, 82, -32, -12, -21, 24, 50, 51, -86, 57, -7, 93, 19, 95, -75, -55, 33, 11, 85, -19, -85, -1, -107, -74, 79, 16, -47, -56, -75, 70, -28, -61, 80, -43, -57, 9, 72, 3, 46, -90, 5, 45, 15, 51, -65, -7, -68, 70, -70, 54, 19, 71, 29, 53, -24, -91, 35, -16, -29, -96, 96, 4, -35, 1, -36, 24, 83, 42, -60, -60, -12, 37, 76, 71, -90, -40, 7, -9, 15, -74, 5, -41, -61, 78, -18, 38, -25, -4, 39, -71, -42, -61, 26, 75, -51, 42, 71, 16, -63, 59, -81, 59, 94, -80, -45, 33, 81, -44, 20, 43, 28, 46, 102, 89, 15, -50, 45, 54, 6, -50, 87, -36, 43, 57, 56, 72, 56, 85, 5, -8, -75, 46, 54, 45, -81, 91, -77, 43, 60, -40, -44, 22, 62, 83, 60, 39, -20, 68, -16, 61, 36, 56, -27, -77, -96, 6, -75, 68, -78, 24, -68, 34, -32, -97, 105, -53, -39, 81, 6, 27, 58, -57, 11, -11, -43, -90, 95, 2, 16, -90, -6, -80, -41, -32, -7, 68, -75, 15, -3, -54, 10, -76, 32, 15, -84, -25, 40, 14, -89, -78, 12, -22, 87, -51, -10, -71, -90, 77, 56, -73, -51, 72, -33, -23, 2, 71, -48, -41, 90, 87, -8, 36, 17, -60, -15, -66, -5, 26, -84, 60, -29, -48, 23, -10, 89, 35, -19, 50, -85, 87, 66, -80, 35, 80, -80, -67, 51, -41, -5, -90, 19, 5, 32, 56, 44, 5, 16, -32, -5, 81, 64, -79, -71, -11, -65, 78, -52, -84, 5, -74, -87, 85, -87, -31, 90, -41, 9, 63, -51, -14, 83, -73, 67, 65, -34, -33, 76, 71, 43, -77, 51, -40, 44, -54, 25, -88, -28, -43, 41, 47, -62, 28, 72, -46, 40, -8, 44, -66, -87, -32, -47, -18, -20, -71, 96, 41, 67, -46, -10, 46, 53, 35, -87, -29, -41, -91, -29, 53, -45, -56, 9, 53, 54, 38, -9, 85, 10, -83, -106, -66, -27, 73, -44, -32, -6, -77, -28, -75, 80, -88, -45, 32, -3, 86, 34, -85, -46, -25, -68, -88, -63, 25, -87, -24, -68, -62, 63, 69, -24, -21, 104, -73, -84, -33, -33, -8, -37, -33, -14, -55, -52, -73, 76, 59, -7, -5, 52, 48, 27, -68, 50, 37, 23, -51, 91, -11, 110, 10, -25, -79, 75, 16, 41, -49, 12, 4, 38, -30, 68, 6, -49, -31, 86, -25, -46, 58, 16, 22, 84, 46, -88, 96, 93, -68, 85, 60, -32, 53, -34, -75, 12, -81, -3, 53, -50, 4, -40, -88, -75, -5, -31, 32, -89, 50, 48, 24, 55, 53, -61, 75, 11, 44, -3, 72, 17, 70, 15, 74, 7, -65, 72, -23, -68, -6, -2, -58, -25, 14, 84, 14, -53, -18, 96, -15, -8, 80, -60, 42, -30, -75, -49, 95, 41, -94, -81, -47, 37, 47, -46, -23, -56, -25, 34, -34, -65, 53, -91, -30, -25, 78, -48, 18, 84, 82, 70, 34, 28, -80, -83, -68, -43, 56, -70, -16, 73, 59, 30, -15, -67, -5, 38, -65, 30, 58, 62, 35, -27, 4, 71, -52, -2, -9, -29, -17, -12, -23, -61, -9, 16, 58, -29, 67, 88, -8, -96, -92, 20, 41, -85, -109, -22, -26, -5, 23, -49, -92, -73, 34, 97, -34, 3, -77, 22, 28, -83, 67, -9, 40, 43, 77, -35, 60, 80, 8, -53, 5, 8, 21, -11, 13, -46, -66, 56, -10, -2, 76, 19, 17, -61, -62, 37, 92, 13, 51, -57, 23, -119, -58, -53, -40, 98, -57, 76, 46, 19, 92, -37, 64, -3, 54, -3, 25, -29, 41, -30, 66, -77, -44, -48, 49, 12, -36, 48, 6, -83, 13, -93, 19, 47, 48, -105, -34, 7, 38, -110, -92, 62, -92, -54, 32, 27, -80, 78, -78, 16, -85, -7, -37, -39, 56, 36, 24, 43, -50, 56, -47, -14, 32, -44, 49, -80, -74, 21, 20, 56, -14, 99, -62, 53, 83, -89, -35, 4, 50, 69, -61, 41, 75, 68, -95, -41, 37, -94, -71, 59, -57, -46, -25, -36, -69, 77, -25, 37, -5, 34, -8, 15, -88, 70, -58, -75, -79, -19, -54, 80, -1, 86, 54, -28, 11, -55, 73, 97, -66, -41, 80, 4, -90, -19, 28, 18, 107, -108, 12, 16, 4, -74, -28, 30, -46, -43, 79, -71, -29, -15, 79, -57, -89, -6, -104, -37, -93, 36, 18, -86, -18, 33, 96, 41, 102, 45, 2, -59, 4, -4, -42, -37, 68, 76, 51, 71, -19, -21, -16, -10, -52, 76, -3, 54, -26, 55, 64, -1, -13, -5, 24, 56, -43, -34, -71, 51, 51, 7, 1, 71, 62, -79, -53, -87, 26, 23, 18, -65, -34, 84, 13, -25, -3, -53, -64, -33, 26, -33, -57, 4, -13, 23, 72, -80, -38, -72, 43, 32, 28, 75, 82, -49, 60, 9, 78, 58, 86, -66, 35, -58, -18, -7, 87, -90, -68, -84, 9, -4, 26, 17, 84, -42, 84, 65, -21, -64, 55, -40, -62, -58, 53, 108, 21, -88, 6, -56, 96, 41, -54, 53, 14, 85, -24, 48, 60, -84, -74, 69, 90, -82, 23, 92, 10, -78, 42, 25, 87, -45, -98, 85, -15, -18, 34, 57, 40, -5, -71, 
  -10, -63, -28, 62, 43, -88, -77, -76, -92, -39, -84, 95, -10, 47, 24, 53, 10, -31, -98, 0, -88, 76, 43, -78, -76, -1, 32, -30, 39, 50, 54, -97, -46, -39, -24, -72, 53, -9, 46, -22, -8, 51, -57, 69, -53, 26, -17, -1, -81, 54, -99, 37, 92, -12, 80, 63, 77, 67, 29, -40, -62, -58, -80, 64, -67, -79, 38, -81, -45, -86, -60, 75, 17, -1, 23, 12, 63, -30, -34, -14, 57, 76, 38, 2, -21, -65, -23, -80, -85, 99, -41, -33, 16, -91, -70, 98, -64, 71, -63, 2, -76, -14, 34, -35, -23, -20, 16, -31, 40, -47, 87, -9, 20, -60, 36, -19, 93, 86, -69, -81, -16, 52, -11, -92, -94, -79, -60, -73, 66, 61, -28, -32, 24, -89, -97, 40, 101, -5, -1, -50, -79, -25, 52, -43, 1, -12, -46, -66, -15, -32, -60, 78, -44, 5, 17, -18, 18, -25, 4, -37, 24, -45, -80, 20, 84, -51, -37, 93, -45, 48, -88, -93, 90, -5, 74, 97, -60, 40, 41, -53, 39, -43, 81, -9, 21, 35, -6, -25, -49, -23, -75, -35, 80, 51, -70, 79, 52, 70, -90, -83, 52, 5, 10, 49, -88, -36, -7, -95, 64, 1, -100, -82, 7, 47, 20, -48, -94, -57, -5, 5, 1, 77, -14, -59, 56, 29, -85, 90, 25, 21, -33, 34, -89, -90, -47, -14, -61, 9, 40, 13, -46, -24, -23, -38, 44, 1, 46, 2, 55, -31, -38, -75, -5, 32, -5, 58, -64, 25, 83, 33, 38, 86, 40, -16, -82, 47, -88, -82, -16, 29, -64, -65, 30, -48, 73, -49, -61, -64, 53, 63, 19, -50, -22, 90, 26, -11, -4, 65, 69, -1, 91, 49, 72, -61, -105, -70, -76, 41, -11, 24, 61, -87, -62, 56, 60, 74, 62, 73, 66, 89, 60, 1, 64, -53, 83, 7, -78, 66, 77, -78, -88, 5, -69, 46, 73, 34, -9, -38, 74, -24, -68, -80, 61, -4, -54, 28, 64, 51, -29, -15, 39, -17, 2, 87, -43, -1, 76, -74, -87, -91, 95, -63, 41, 14, -63, 50, 26, -13, 94, -27, -38, -67, -65, 61, -95, 55, -95, 102, 0, -64, 14, 17, -13, -41, 24, -31, 98, -56, -6, -9, -47, -30, -41, 19, 81, 43, -42, -80, 39, 48, -16, -53, 37, -92, -62, 34, -2, 89, 93, -42, -86, -69, -53, -5, 39, 19, -21, -40, -25, -60, 45, -22, -91, -72, -35, -16, -8, -54, -61, -64, 38, 27, 78, 31, 68, -77, -89, 8, 90, -24, -85, -39, -98, -100, -41, -35, 48, 13, 37, 66, -75, 45, 25, -34, 21, -38, 40, -25, -48, -80, -66, 46, 98, -19, -51, 14, -15, -77, 49, 70, 8, 56, 27, -2, 7, 65, -71, 65, 39, 40, -38, -42, -21, -37, 36, 33, -41, -51, 30, 9, 49, 100, 57, -7, 21, -83, 5, -100, -23, -64, 87, 27, -71, -58, -76, 23, -1, 63, -59, 65, -69, 87, 51, 74, -55, -10, -2, 30, 65, 52, -86, 8, -38, 3, 46, 10, -62, 70, 67, 24, 61, -76, -42, 91, -64, 81, -74, 47, -31, 39, 72, 93, 15, 97, -54, -74, 35, -26, 24, 97, -48, -69, 40, -80, -5, -81, -83, 28, 92, 9, 52, -95, -46, 91, 90, -52, -7, 34, 60, 87, 93, -6, 47, -39, -5, 10, 48, -12, -59, 48, -19, 52, 84, -57, -64, 89, 12, -95, -43, 100, 94, -73, 93, -110, 7, -29, 87, -68, 18, -72, -71, -58, -32, -12, 63, 20, 25, 85, -43, 100, 53, -54, -18, 41, -10, 5, 29, -112, -21, -52, -78, 45, 34, 47, -65, -33, 81, 33, -97, -22, 59, -17, 82, 42, -66, -37, 12, 83, -79, 87, 19, -35, 79, 4, -83, -44, 38, 35, -32, 88, 52, 61, -76, 76, 59, -49, 71, -72, 11, 37, -79, 7, 34, 24, 3, -68, -38, 30, 96, 17, -19, 37, -46, -24, -22, -82, 83, -12, -7, -64, 82, -75, -6, -92, 93, 18, -57, -74, 92, 68, -41, 7, -2, 77, 98, 5, -50, -57, -45, 79, -24, -1, -25, -66, -2, -35, -3, 70, 36, -92, -12, 6, -73, -19, -6, 14, -40, 55, 49, -4, 21, -84, -12, -90, -64, -72, 45, 2, -69, 64, 54, -34, 70, 69, -70, -16, 87, 80, -67, 54, -45, 78, 92, -23, -40, -45, 32, -81, 22, -6, -23, -29, 46, 86, -69, -32, 44, 78, 69, -40, -38, -37, -59, -69, -63, -77, 5, -59, 75, 67, -77, -3, -93, -53, -71, 25, 60, -72, -108, -75, -37, -21, 34, 18, -49, -39, -79, 29, -91, 91, -23, 88, 10, -92, 36, -4, 55, -65, -29, -1, 10, -119, -93, -9, -60, 1, -27, 33, 5, 41, 91, -16, -52, 2, 20, -22, -39, -53, 17, 29, -31, -13, 1, 30, -58, 54, 5, 32, -32, 22, -36, 80, 54, -52, 21, 22, 33, 29, -69, 26, 10, -46, 53, -12, -60, -85, 3, 73, -59, 26, -26, -42, 50, 54, -72, -86, 70, -33, 36, 105, -6, 54, -44, 87, 32, -58, -63, -87, -86, 51, 12, -35, -16, -23, -3, -5, 91, -80, 39, 31, -38, 78, 111, -53, -52, 16, -73, 51, -93, -66, -35, -53, -90, 32, 37, -37, -3, -79, 65, 32, -74, -1, 44, 84, 115, -52, 7, 21, -22, 64, 22, -68, -79, 108, 93, -22, -33, -60, 49, -74, 31, 25, 15, -74, 54, -45, 39, 84, -69, -78, 44, 14, 59, 51, 77, -88, 111, 79, 76, -73, -29, 68, 76, -12, 66, 72, -27, 66, 93, 74, 69, 14, -21, -23, -43, -7, 73, 43, -91, 24, -94, -56, 58, -87, 2, 3, 80, 75, 63, -81, -40, -52, -43, -77, -10, -77, -2, 59, -77, -52, 56, 66, 4, -29, -100, 83, -40, -61, 91, -20, 52, -2, 92, 9, -57, -68, 11, -35, 93, -57, -67, -73, 76, 95, -48, 55, -43, 70, -4, 33, -3, -94, -28, -90, -54, 79, -76, -16, -34, 24, -48, 35, -39, -40, -36, -50, 34, -69, 48, -4, 67, -9, 24, -83, -47, -83, 94, 21, -44, 65, -72, -41, 4, 30, 72, -59, -24, -10, 96, -17, 96, 51, -47, 79, -77, -84, -35, 87, 45, -44, -58, 29, 94, -17, -22, -9, 70, -73, 27, -46, -37, -85, -29, 7, -10, 75, 68, -20, 6, 28, 33, 23, -68, -48, -82, 44, -63, -52, -38, 1, 77, -79, -14, -99, 16, 87, -40, 20, 89, 35, -69, 8, 61, -56, -85, -51, 45, 28, 76, -45, 49, 42, -29, 52, 58, 10, -14, -53, -21, 64, 27, -80, 66, 54, -91, 25, -53, -30, -93, -33, 63, 67, -56, 92, 11, -78, 7, -66, 89, -17, -21, -70, 43, -10, -59, -51, 21, 27, -4, -17, -49, 71, -39, -7, 41, -9, 61, 63, -43, -71, 59, 52, 69, -48, -27, -41, -50, -38, -50, -11, 1, 20, 106, -8, -72, 38, 9, -33, 75, -92, -14, -83, -4, 6, 70, -31, 67, -30, 82, -38, 41, 90, 55, -60, 45, 31, 16, 26, 88, 8, -4, -50, -5, 57, -74, 22, 38, 56, 43, 43, -44, -29, -91, 30, -76, -34, -46, -19, 96, 24, -66, 72, 80, -89, 8, -9, -35, -72, 14, -55, -83, -55, -48, 57, -37, 69, -75, 64, -31, -43, 98, -72, -30, 31, -56, 68, 22, -72, -54, -54, 10, -5, -69, -97, -87, 17, -41, 88, 59, 70, 11, -32, 49, 38, -18, -78, -47, 9, -83, 18, 58, -6, -53, 42, 52, 13, -4, -13, 1, -26, -26, -32, 15, -65, 86, 93, 72, -25, 69, 68, 
  -49, 39, -33, -9, 51, 90, 96, 17, -82, 30, -92, -37, 99, 23, -82, 2, 89, 22, 8, -10, -37, -65, 77, 15, 13, -86, 5, 20, -74, -76, -32, 77, 34, 29, 48, 52, -9, -82, -58, 85, 54, 53, 91, 100, 60, 92, -38, 71, 94, 66, -53, -45, -90, -20, -1, -46, -78, 70, -31, -21, -9, -15, 14, 5, -52, 98, 39, 72, -35, 55, -46, 13, 15, -64, -50, -17, -72, -99, -3, 34, 66, -67, -45, -30, 34, 67, -30, 43, -23, -19, -73, -34, 66, 19, -64, 58, -34, -42, -6, -61, 25, 21, 56, -72, 54, -82, -34, -35, -72, 55, -39, 75, -88, 13, -18, 21, 9, -86, 34, -1, -39, -46, 18, -24, -61, -33, -93, 107, -69, -17, 93, 88, -88, 45, 108, -4, 39, -16, 71, -67, 50, 75, 79, -8, -99, -12, -10, -34, -61, -95, 69, -14, 87, 12, 53, 24, -23, 87, -20, 10, -43, -32, -29, -39, 63, -60, 52, -84, 46, -66, 52, 7, 54, 37, 35, -87, -52, 75, 1, 36, 4, -30, 7, -59, 5, -16, 6, -53, -23, 28, -42, 31, -65, -102, -32, -66, 2, -22, -91, 25, 83, -66, -39, 65, -72, 83, -38, -72, 82, 34, -69, -4, 74, -35, 64, 53, 69, 30, 39, -61, 33, -54, -66, 5, 68, -73, -61, 95, 16, 11, -54, 41, 7, -22, 54, -27, -60, 13, 0, -42, -65, -30, -37, 54, -5, -74, -1, -74, 79, 29, -61, 86, 57, -2, -21, -78, 50, 68, -90, 98, -11, 86, -10, 53, 74, 23, 56, -41, 0, 46, -40, 74, -83, -34, -101, -72, -26, 21, 87, 21, -62, 76, 40, 8, 87, 88, -76, 82, 75, 25, -29, -26, -45, 90, -8, -56, -20, -87, -63, -54, 13, -1, 97, 80, -34, -75, 94, 34, 118, 19, 5, -41, 84, -22, -4, -77, 20, 8, 54, -62, -59, -85, -80, -1, -38, 26, -16, -105, -67, 88, -67, 67, -56, -39, 54, 86, -58, 23, 5, -79, 19, 5, 32, 34, -91, -12, -54, -97, 41, 17, -53, -35, 62, 74, 70, -43, -22, 91, -33, -86, -94, 20, 82, 95, -56, -72, 94, -28, 83, 8, -50, 89, 19, 19, 25, 77, -17, 104, -22, 18, 50, -69, 19, -18, 100, 90, 96, -22, 37, 68, -25, 12, 79, -58, -92, -78, 3, 90, 8, 52, -45, -29, 79, -93, -22, 7, 28, 60, -59, -77, 16, -96, 5, -94, -55, -44, 57, 60, 49, 88, -103, -92, -92, -42, 73, -65, 13, 60, 31, -93, -25, -44, 87, 29, 95, -64, 20, 41, -1, 17, -73, 65, -43, -6, 30, -97, -62, -31, 16, -67, -78, 41, 99, -93, 50, -73, 14, -23, -58, 31, -2, 1, -42, -71, 25, 78, -91, 22, -10, -36, -39, 73, -9, -2, 26, -39, -70, -45, -23, -109, 13, 67, -65, -90, -25, -49, 20, 111, 38, 28, 35, 22, -16, -3, -99, -42, -75, 37, 70, -66, 2, -1, 2, -34, -64, 8, 95, 3, 31, 19, 32, 48, 34, -19, 37, -14, -12, -7, -8, -50, -69, 85, -1, -86, -45, 15, -40, 10, -24, 1, -74, 85, -56, 11, -25, 10, 95, 1, 14, 23, -83, -13, -18, 89, 39, 69, -44, -16, 39, 62, 36, -86, -13, -82, -81, 50, 35, 90, -82, -80, 34, -101, 58, -58, -92, -49, -29, -40, -19, 12, -57, 3, 7, -32, -11, -64, 7, 52, 57, -83, 16, 66, 21, -20, -13, 36, 17, -64, -31, -33, -56, 62, -18, 65, 27, -38, 64, -9, 69, -56, -42, -78, 80, 72, -13, 31, 66, 43, 64, 99, 34, 69, -1, 17, -3, -51, -65, 40, -46, 67, -52, -27, 80, -39, 4, -51, 60, -21, -2, 53, -36, 73, -64, -36, -36, 92, 67, -44, 63, -65, 15, 80, 63, 58, 26, -11, -80, -82, 4, -72, 93, 42, -52, -27, -44, -37, -55, -35, -68, -83, -70, 34, 50, 72, -73, 30, 9, -10, 34, 25, -36, -33, 57, 43, -20, 48, -83, 4, -48, -37, 6, -39, -12, -28, 33, -60, 27, -25, 77, 48, 56, -65, 9, 32, -37, -35, 36, -40, -59, -18, -3, 63, 15, -79, 66, -9, -88, 6, -92, 10, 57, 67, -1, -42, 12, 72, 1, 11, 14, -43, 62, -32, 42, 103, 65, -19, 64, -87, -104, -55, -34, 71, -77, -26, -60, -113, 106, 79, -27, -8, 66, 51, 41, -39, -20, 34, 66, -56, -60, -3, 0, -5, 70, -44, -55, 27, 75, -87, -59, 85, -14, 88, -78, -64, 51, -72, 54, -86, 119, 12, -17, 23, 74, -14, -72, -64, -28, 24, 55, 33, -48, 42, 83, 4, 34, 30, 79, -20, -6, 18, 81, 2, -27, 19, 109, -89, 6, -76, 39, -40, -19, -22, -28, 1, 73, -79, -93, -67, 52, -8, 92, 3, 38, 11, 5, 85, -19, -36, 32, 70, -51, 23, -63, -78, 68, 18, -5, -61, -55, 55, 46, -2, -96, -12, -52, -88, 63, -76, -70, -107, -72, -21, -77, -57, -35, -7, -54, -52, -11, -9, 10, 44, -72, 7, 91, -74, 46, 40, -18, 70, 24, -57, 0, 106, -36, -79, -21, 52, -21, -53, -1, 52, 44, -2, 30, 29, 83, 37, -60, 17, -19, -56, -78, 96, 29, -18, -52, -92, 49, -58, -38, -87, -74, 31, -59, 19, 27, 68, -28, -78, 16, 77, 40, 37, -23, -7, -46, -38, -39, 76, -72, -29, 20, -66, -7, 79, 31, -7, 49, -74, -1, 92, 56, -87, 71, 85, 33, 76, -73, 71, 55, -55, 24, -5, 67, 77, -60, 52, 11, -83, -38, 62, 33, 83, -96, 61, 30, 28, 27, -57, -29, 39, 90, 91, 46, 21, 37, 54, 76, 8, -4, 52, 21, 89, -12, -86, 52, -82, 3, -30, 41, -80, 8, -84, -8, -90, 31, -52, 68, -68, 77, 52, -9, 25, 95, 33, -79, 6, -45, -10, -57, -64, 80, -75, -36, 26, -54, 9, -26, -39, 17, 91, -32, 77, -50, -77, -63, 65, -11, 103, -1, 92, -15, -50, -10, -100, -10, 82, 67, 58, -31, -104, 44, -12, -98, -53, 46, 29, 22, 74, -96, -45, 28, 72, 24, -23, -67, 36, -33, 35, 75, -67, -88, -48, 70, -51, -42, 56, -50, 81, -55, 40, 32, 86, 26, -49, 92, -82, -85, 5, -40, 68, -54, 36, 18, -66, 68, -1, -15, 38, 64, -4, -72, 28, 25, -57, 90, 65, 9, -13, 61, -12, -70, -50, 90, -51, -17, 17, 38, -70, 48, -58, 47, -38, 93, -44, -50, -57, -42, -23, -59, -79, 59, -30, 61, -89, -5, -52, 22, -17, -81, 73, 4, -38, 19, -35, 62, 65, -80, -51, -75, -8, -31, -9, 25, -78, 60, 57, -14, 13, -87, 92, 54, 68, 66, 23, 69, -90, -15, 99, 12, 125, 94, 10, 69, -71, 62, 14, -31, 39, -83, -11, -86, -11, -89, -32, 61, -36, 10, 9, 84, -44, -103, 34, -54, 10, -49, -12, -13, -7, -54, -56, 78, 52, -36, 57, 14, 101, 9, 38, 29, -47, -67, 31, 56, 52, -27, -79, 58, -70, -6, -44, -61, 9, -21, -21, -36, 44, 16, -92, -89, 26, 21, 117, 27, 10, -24, 61, -92, -30, -63, -76, -87, 84, 64, -74, 87, 101, -66, 27, -17, 1, -49, 16, 51, -42, 3, -67, -31, -17, 30, 66, -67, -61, -54, 70, 41, -39, -86, 53, 55, 15, -80, -42, -61, -9, 82, 87, -70, 31, -53, 67, -59, -79, -54, -34, 87, -19, 46, 58, 41, 41, 77, 33, 33, -13, -55, 72, -63, 68, -14, -46, 88, -22, 41, -62, -32, -54, -29, 7, 
  -67, -37, -4, -63, -33, -38, 26, -67, -16, -73, -4, -12, 68, -92, 63, 70, 6, -71, -17, 55, -50, 84, 56, -82, 52, 1, 53, -44, 45, 59, 36, -45, -84, -29, -69, -39, 35, 3, -86, -5, -20, 73, -82, 87, -62, -25, -94, 30, -87, 24, -68, -75, 25, -90, 75, 12, -46, 88, 67, -71, 30, 62, -21, -58, -76, -10, 96, -42, -30, 92, -40, -35, 79, 102, -44, 32, -69, -57, 88, -3, -97, -20, 55, -33, -77, -68, 88, -21, 16, 11, -63, -15, -44, -85, 81, -4, 92, 63, 81, 21, 64, -55, -62, 51, 36, -1, -2, 68, 14, 57, 13, 37, -59, 20, -18, -66, 4, 20, 6, -64, -3, 0, -56, -48, -33, 44, 37, 80, 92, 77, 5, -26, 72, -11, 67, 25, -69, -59, -19, -47, 52, -87, -65, -3, 75, -58, 53, 43, -43, 94, 57, 0, -35, -27, 48, 72, 88, 78, 30, 37, 68, -17, 23, 74, 41, 67, -18, 80, -2, -93, 13, 0, -34, -56, 52, 56, 30, -89, -36, -37, 19, 88, -71, -7, -96, 41, -18, -93, 37, 84, -51, 5, 65, -74, 94, 68, -26, -19, 30, 77, 59, 35, 76, 90, -94, 99, -8, 39, 20, 49, -15, -58, 0, -73, 44, 45, -61, 58, -63, 80, -71, -74, -42, -40, 28, 17, -11, -13, -22, -40, -13, -77, -75, 22, 70, 98, 50, 73, 41, -85, -58, -11, -30, 78, -83, -94, -44, 77, -84, -28, -14, -9, -5, -68, -37, 49, 19, 96, 55, 102, 65, -72, 57, -3, 71, 80, 52, 78, -24, 67, 74, -9, 93, -48, -56, 56, -12, -33, -43, 23, -89, 31, 51, 59, -80, -85, -76, 13, 73, -58, -43, 93, 2, 15, -78, 48, 54, 7, 88, -6, 59, 78, 63, 31, -91, -48, 92, -9, -56, -30, -3, 27, -43, 91, -51, 93, -62, -31, 31, -22, -34, -81, -21, 8, 19, -43, -49, -16, 39, 33, -97, -31, -9, -38, -78, 18, 35, -60, 62, 54, 10, 67, -42, -81, 71, 15, 74, -75, -88, -61, -94, 38, -6, -45, 63, 87, -43, -39, -9, 62, 53, -24, -10, -62, 49, 66, -94, -85, 68, -18, -40, 37, 73, -20, 29, -23, 58, 22, 89, 91, 4, -46, -48, -82, 4, -95, -35, -22, 58, 86, -45, 12, 92, 29, -74, 63, 96, 52, -24, -55, -37, -47, 42, -42, 62, -118, -21, -68, -48, -37, 6, -83, -82, 39, -58, 54, 97, 44, -84, -23, -26, -64, 43, 34, -2, -17, 48, -70, 47, -78, -14, -8, 37, 3, -40, 11, 44, -94, -74, -95, -38, 69, -83, -51, 80, 70, -61, -31, 62, -102, 77, 51, 84, -54, 1, 19, 78, -70, -31, 5, -48, -30, -57, 12, -85, -40, -10, -18, 27, -99, -10, 40, 81, -75, -5, -69, -93, -73, 34, -76, 31, -93, -79, 92, 50, 70, 93, -27, -71, -67, 80, 82, 11, -99, 41, 50, -88, -25, -60, 20, 85, 45, -50, -29, -89, 47, -21, -10, -50, 6, -69, 21, -36, 17, -27, 15, 41, 98, -22, -19, 80, 74, -56, -40, 51, 10, -70, 83, -91, 16, 58, -32, -28, 84, -12, 80, -34, 85, -19, 59, -90, -67, -24, 59, -2, 68, 13, -44, 30, 46, 31, -77, 14, -11, 30, 62, -31, -49, -51, -111, 42, -65, -58, 18, 49, -99, 3, 47, -84, 6, 12, -6, -12, 34, -58, 45, -73, -8, 19, 59, 90, -32, -10, -64, -27, -62, -85, 79, -33, -66, -66, 33, 88, -9, 84, -24, 78, -95, -2, -2, -26, -19, 7, 18, -43, 12, 45, -18, -24, -62, -77, -74, -52, -14, -51, 93, 9, -19, -31, -95, -66, -10, -72, -11, 56, 46, -45, -16, -2, 52, -31, 57, 15, -69, -105, 25, 13, -91, -77, -47, 35, -72, -30, -11, -19, -46, 44, 11, 37, 41, 6, 57, -14, 25, -75, 25, 30, -91, -22, -68, 67, 70, 73, 64, 61, 30, -22, -10, -25, 85, 31, -90, 47, 51, -76, 14, -51, 81, -51, -65, -60, -2, 61, 7, -2, 95, 28, -52, 62, 87, 60, 96, 34, 77, -47, -30, -62, 76, 62, -53, 55, 26, 28, 43, -73, -24, 45, 14, 34, 81, -64, -96, -6, -76, 72, -23, -23, -89, -82, -12, -47, -78, -68, -19, 46, -30, 52, 59, -70, 1, -72, 25, -8, 47, 74, 45, 47, -72, 45, 17, -90, 14, -78, -1, 44, 61, -32, 17, 29, 29, -8, -84, -80, -1, 32, -47, -20, -30, -76, -28, -34, 44, 63, -80, 65, 75, -8, -95, -57, -95, -89, -13, -7, 59, -7, -54, -66, -54, -72, 73, -84, 47, 21, -86, -10, -11, 94, -92, 55, -1, 89, -12, -96, 29, 69, 78, -74, 22, -18, -8, -78, -29, -3, -12, -36, 64, -21, -52, -70, 69, 39, 12, 28, 78, -70, 16, 12, 93, -58, 27, -62, 58, -18, -43, -37, -5, -67, -13, -53, 50, -88, -68, -47, -19, -35, 82, -32, 79, -72, 60, 68, 86, 68, 15, -27, 104, -56, 6, 14, 10, 82, -14, -44, -28, 37, -79, 14, -11, 76, 57, -58, 83, 53, 71, -83, 10, 86, 80, -16, -8, -45, -33, 13, -30, 52, -84, 14, 80, 54, -57, 12, 31, 47, -59, 46, 36, 62, -35, 30, -51, -31, -63, -30, 100, 49, 10, 10, -100, -23, -94, -87, -15, 58, 67, 93, -25, 85, -33, 62, -61, 79, 75, 77, 71, 31, 51, -22, -11, 31, 37, 39, 23, 75, -24, -83, 42, 109, 57, -62, -67, 8, 15, -88, 82, 33, 36, 22, 29, 17, 8, -93, -81, 78, 82, -30, -83, 92, 36, 73, 76, -66, 35, -2, 3, 65, -89, -9, 36, -47, 27, 75, 92, 89, 90, 15, -42, -12, 76, 32, 57, 11, 53, 62, -41, 4, 61, -29, 90, 71, -80, 0, -87, 75, 23, -15, -67, 23, -14, 91, -54, 10, 41, -77, -30, -64, -62, -37, -29, -68, -21, -60, -50, 51, 24, 1, 4, 95, 73, 13, 29, -79, -44, 74, -48, -41, -14, 28, -80, 17, 69, -15, 39, -43, 85, 70, -24, 66, 13, 84, 22, -35, -48, 5, 34, 83, 90, 39, 51, -82, 34, -28, 90, -84, -34, 46, 25, -69, 82, 29, 24, 33, -82, -39, -88, -18, -6, -32, -5, 81, -58, 53, -68, 77, -17, -62, -14, 23, -72, -6, -84, 39, 60, 68, 32, 83, -81, 32, -44, -92, -92, 44, -87, -20, 86, 75, -8, 62, -89, 69, 38, 85, 41, 71, 33, 82, 74, 17, 18, 4, -62, -76, 103, -46, -74, 99, -44, 63, 30, 6, 81, 64, -28, 24, -17, 79, 44, -71, 65, -54, 23, 89, -59, 27, -6, 9, -35, 27, 96, 72, 23, 62, -9, -52, -49, -34, -51, 78, -31, -45, -4, -60, -10, -2, -45, -61, -62, -101, -84, 71, -81, 34, -65, 54, -86, -66, 30, 77, -13, -19, -91, -20, 78, -76, -81, -3, 70, -3, 95, 88, -76, 27, -66, 6, -83, -50, 47, 8, 29, 95, 15, -6, -2, -98, 83, 6, 2, 28, 8, -53, 44, 46, 26, 88, -32, -13, 71, -63, -30, 44, 77, 17, 29, -11, -65, -1, -24, -64, 37, -22, -42, -56, 46, 11, 15, -41, 71, -30, 22, -90, 51, 38, 100, -90, 83, -7, -82, 64, 91, -70, -10, -1, 45, 89, 31, -27, -19, -70, -71, -85, -35, -2, 76, -53, 85, -66, -69, -75, 52, -67, -5, -54, -29, -65, 17, -26, 75, 71, 50, -47, -92, -91, -28, 4, 74, 103, 82, -18, -8, -1, 5, -7, 42, -45, 78, 43, -59, -3, -66, -71, -31, 
  -87, 23, -17, 91, 35, -8, 58, -43, 92, 59, 63, 64, 17, 93, -12, -25, -24, 77, 28, 71, 39, 46, 93, -71, -47, -63, 29, 72, -46, -61, -30, 94, 42, 87, 52, -46, 23, -82, -92, 19, -35, -57, 45, 68, -16, 83, 22, 65, 100, -29, -54, -97, 67, 25, -33, 58, -13, 40, -55, -28, -58, 54, 52, -88, 88, -19, 55, 67, -15, 79, -69, 56, 94, 74, -23, 93, -71, 87, -89, -95, 39, -6, -68, -80, 3, -58, -58, 68, -10, -47, 53, 60, -35, -20, 34, -50, 51, -100, -78, 101, -15, 72, -74, 43, -73, 61, -52, -20, 92, 61, -27, 29, 62, -22, 94, -67, 57, -4, -50, 94, -45, 61, -39, -54, 19, -80, 47, -27, 52, -45, -80, -31, -57, 35, 13, 84, -32, -70, 6, 35, 28, 8, 74, 55, 87, 45, -55, -19, 58, -78, 58, -20, 60, -5, 0, 94, -27, -36, -82, -47, 99, -39, -72, -78, 2, -18, -11, 47, 65, 22, 26, -66, -15, 51, 31, -96, -33, 12, -81, -66, 6, 29, 33, 64, -49, 29, 15, -81, -52, -110, -54, 6, 46, -93, -59, 28, -10, 38, -31, 94, 4, 93, 64, -34, 30, -6, -48, 35, -46, 23, -62, -42, -32, 27, 73, -4, 3, -67, 80, 85, 57, -86, -68, -9, 25, -60, 22, 9, 74, 87, -36, -71, -29, 61, 22, 56, -96, -23, -7, 19, -76, 69, -3, -95, -32, -95, -63, 59, 111, 70, 24, -65, -6, -3, -82, 15, 71, -22, -69, 77, 33, 14, -60, -93, 6, -84, -61, -75, -20, -55, 69, -87, -21, -36, 9, 97, -98, 93, 25, -23, 27, -79, -56, -62, -12, 95, 94, 15, -31, -70, -49, 82, -31, -64, -33, 58, -23, -39, 15, -36, -23, 74, 83, 64, 86, -57, 47, -17, 10, 9, 62, -22, -77, -38, 96, 67, -58, -32, -20, 57, 0, 7, -65, -1, -18, -4, -67, -54, 36, 50, 111, -96, -65, 39, -59, -67, 26, 54, 9, -5, -67, -77, -77, 60, 46, 52, -79, -15, -63, -37, -7, 39, 51, -41, 78, -22, -38, 18, -89, -31, -54, -45, 68, -70, 55, -13, 122, 25, 35, 19, 13, 51, -32, 0, 54, -12, -4, 43, -93, 74, 97, -76, -85, -76, -16, -44, 37, 72, 6, 8, -68, 15, -86, 66, -46, 65, -78, -23, 40, -52, -87, -78, -42, 40, -48, -39, -65, -6, -45, 18, -7, 74, -55, -82, 93, 21, 90, -76, 24, 0, -32, 17, -36, -6, 91, -16, -12, 9, 28, -103, -36, -40, -31, -70, 89, -12, 73, 26, -31, -22, -13, -92, 61, 43, -61, 5, -77, 46, 40, 46, -18, 75, 83, 93, -15, 23, 18, -89, 23, 12, -86, 2, 79, 37, -59, -67, -74, -9, 63, -40, -51, -36, -6, -6, 14, -23, 4, 18, 75, -27, -3, -71, 71, -68, -61, -39, 94, 55, -68, -79, -80, 29, 110, 27, 19, -49, -76, -56, -1, 96, -50, 70, -41, 3, -79, -83, -26, -58, -39, -28, -44, 17, -6, 29, 34, 15, 113, 19, 67, 4, -84, -90, 96, -44, 29, -71, -55, -59, 90, -75, -30, 69, 56, -47, -84, 78, -64, 89, 80, 42, 59, 8, 31, -38, -39, -7, -12, -86, 20, 16, -25, -55, 73, -4, -6, -89, -28, -73, -39, -6, 86, 38, -57, -70, 17, -24, 91, -40, -71, -54, 39, 15, 4, -56, -56, -51, -93, 54, 31, -14, 0, -2, 43, -25, 40, -59, -68, -80, 18, -20, 14, 47, 18, 81, -26, 37, 16, 80, 12, 14, 68, 50, -39, -3, 12, -55, -53, -26, -8, -79, 9, 50, 90, -1, 91, -32, 31, -2, -67, -59, -11, -13, -9, -52, 21, 79, -50, -41, 73, -90, -55, -38, -14, -93, 51, 74, 94, 92, -95, -72, -88, 60, -52, 55, 15, 75, 39, -72, 6, 25, 12, 80, -65, 24, -67, -94, -48, 19, -50, 19, -14, 102, -54, -24, 73, -26, -10, 56, -51, 54, -74, 35, -47, 6, -58, 45, 33, -20, -27, -86, -2, -15, 88, 22, -65, 21, -54, -87, 82, 81, 69, -41, 84, -44, -1, -90, -58, -71, 92, -94, -81, 9, 92, -74, -70, -108, 66, 69, 52, 88, 22, 34, -54, 24, -99, -41, 24, 4, -21, 47, 42, 96, 31, 92, -70, 58, 52, -12, 74, -25, 17, -69, -15, -30, 4, -44, 46, -72, -36, -49, -42, 52, 58, 34, -86, 83, 23, -80, 28, -75, 44, -46, -56, -51, 15, 59, -54, -32, -66, 75, 88, -52, 61, -84, -9, 81, -12, -61, 28, 69, -50, -47, -54, 69, 9, -28, -17, 56, -25, -14, 60, -69, 94, -96, -46, 74, 65, 24, 99, -70, 71, -61, -94, -42, -77, 65, 66, 79, 90, -8, -7, -65, -53, 13, -73, 63, 73, 15, -22, -67, 94, 36, -68, -22, -41, 9, 43, -67, -12, -96, 113, -93, 62, -63, 49, -88, 84, 43, -62, 76, -4, 27, 43, -71, -84, 18, 1, 54, 52, -57, 91, 39, 16, 91, 18, 77, -5, -70, 90, 59, 72, 68, -45, 2, 55, 87, -54, 79, 74, -67, 29, 95, -54, 46, -1, -68, 48, -1, 10, 18, 45, -8, -31, 81, -20, 91, 65, 88, -25, -2, 28, 43, 72, -84, 57, 24, -71, 81, 66, -41, -69, 98, -67, 83, 26, 39, -54, -24, 69, 20, -63, 5, -90, 27, -30, -78, 25, -2, 83, 16, 94, 20, 81, 44, 87, 92, -27, 57, -25, 26, 25, 74, 12, -9, 88, 6, -15, -2, 32, 109, -85, 60, -5, 16, -4, 44, -53, -69, -29, 10, -26, -65, 47, 10, 107, -7, 48, 88, -56, -62, 49, -53, 35, 94, 72, -21, 36, -44, -81, 36, -9, -54, -103, -26, 105, -28, 16, 5, -45, -75, 63, -25, -109, 22, -29, -4, 76, 49, -60, -49, -16, 31, -71, 61, -17, 6, -97, 50, 1, 2, -12, 89, 65, 7, 0, -89, -33, -66, 47, -92, 57, 26, 35, 26, 25, -11, 89, -18, -40, 70, 109, 32, 56, -47, -85, -80, -40, -71, -52, 5, -45, 100, -62, 17, -89, 58, 78, -18, 31, 96, -45, -43, 24, -5, 18, 84, -21, -59, -91, -43, -59, 86, -71, -56, 80, 29, 15, -20, -3, 24, -37, -78, -27, 81, -48, -10, 59, 79, -47, -18, -5, -5, -20, -2, -9, 45, 55, 35, 71, -65, 76, -83, -8, 67, 41, -39, -54, 56, 52, -45, -32, -11, 99, 42, 76, 51, 6, 20, 12, 90, 58, -6, 63, -2, -67, -8, -81, -38, -2, 28, 37, 73, 64, 49, 57, 95, -6, -42, -57, -53, 104, -94, -68, -59, -1, 9, -42, 85, -24, -60, 38, 44, -45, -32, 4, -22, 47, 82, -10, -59, -82, -58, 84, -84, -43, 68, 35, -69, 14, -82, 84, -36, 3, 57, 42, 10, 103, -40, 9, -8, -72, -69, -26, 99, -57, -37, 63, -79, -11, 65, 48, 3, -87, 31, 25, 11, 21, -79, 46, -73, 0, 41, -27, -88, -30, 85, 40, 67, 91, 28, -7, -8, -10, 95, -28, 98, 64, -5, 19, 72, 93, -23, -7, -61, -20, -75, -110, -66, -65, 80, 15, 55, 21, 64, -24, -42, 86, -76, -18, -79, 65, -35, 12, -13, -68, 90, -79, -44, 20, 78, 24, -45, 54, -21, 24, 61, -51, -55, 19, 18, 73, -48, 80, -18, 35, -92, -93, 85, -26, -76, 60, -78, 34, 16, 100, 21, 92, -83, -32, -12, -66, 69, 5, 10, 80, -10, 83, -23, 85, 79, -21, -1, 99, 67, 18, -23, -11, -54, 21, 38, -19, 91, -68, -90, 61, -33, 28, 36, 77, 78, 
  77, -2, 62, 29, -52, 65, -67, -56, 55, -64, -74, 52, -43, 54, 40, 9, -28, -51, -81, -21, 30, -87, 3, -67, 49, -12, 82, -43, -65, -92, 33, -34, 22, 72, -83, -48, -56, 68, 43, -64, -53, 95, 26, -58, 44, -91, 17, 20, 102, -16, -34, 62, -83, -18, 31, -37, -15, 18, -62, 88, 62, -51, -32, 75, -94, -84, 40, 57, 30, -16, -1, 53, -18, 16, 69, -15, -63, -58, 19, 42, 30, -52, -21, 71, 39, -55, -37, -1, 47, 50, -86, -2, 65, -71, -94, 17, 0, 94, -39, 24, -34, -43, 42, 24, -83, 74, 30, 86, -27, -70, 83, -29, 74, 19, 94, 78, 21, 14, 25, -76, -74, -43, 51, -85, 63, -61, -48, 91, -70, 37, 79, 74, 93, 90, 114, 43, -72, -57, 46, -21, -71, -13, -29, 86, 63, -8, 44, -35, 6, 42, 53, 71, -71, -88, -77, 67, -55, 70, 17, -5, -28, 73, 72, 87, -56, -15, -68, -52, -81, 69, -78, 77, -15, -10, -31, 19, -74, 6, 29, -87, 43, 50, 21, -72, 83, 1, 65, 60, -3, -16, 48, 67, 39, 40, 15, -26, -81, 27, -51, 93, -7, -98, 46, 66, 67, -11, -11, -66, 64, 31, -25, -93, -11, -30, -61, -60, -30, 33, 6, 31, 71, 29, -39, 51, -41, 47, 26, -8, -51, 26, -4, -95, -6, 30, -83, -90, -92, 95, -2, 123, 91, -66, -60, -24, -75, 19, 95, -15, -99, -29, 79, 36, -3, -19, -24, 64, 27, -18, 88, -98, -22, -30, 67, 73, -86, 27, 22, -40, 32, 50, 3, 44, -2, -46, -34, 29, -34, -14, 29, -60, 94, 25, -11, 95, 86, 46, 23, 14, -81, 78, 74, 47, -26, -20, -39, -85, -94, -74, 41, -47, 49, 93, 6, -17, -84, -72, -33, -11, 5, 40, -32, -119, 36, -78, 73, -81, 10, 78, -11, 8, -20, -86, -72, 50, 33, 82, 9, 89, -26, -40, 55, 43, -46, 92, 47, -51, 56, -84, 70, -90, 13, 93, -4, -14, -89, -22, -20, 20, 9, -91, 76, 0, 80, -37, -38, -6, -84, 62, 30, 40, 56, 46, 55, -9, -12, 21, 122, 43, 37, -14, 14, 35, 83, -38, 30, 7, -84, 82, -64, 48, -79, -87, -91, -36, -61, -28, 15, -68, 59, -88, -71, -14, 25, 46, 41, -39, 74, 61, -23, 74, -78, 78, 40, 0, 45, 0, 67, 98, -25, 89, -26, 61, 89, -82, 18, 75, -92, 45, 13, -1, -34, -63, 93, -76, 26, -14, 2, -2, -86, -81, -25, 7, -43, 34, -25, 76, -85, 36, 37, -91, 86, 42, -76, -80, 49, -83, -18, 28, -92, 27, 69, -56, -52, 7, -92, -88, -68, 64, -95, 94, -58, 91, 67, -81, -3, -105, -38, 63, 24, -5, 42, 72, -1, -6, -18, -13, -93, 32, -18, 97, -47, -109, 18, 73, 44, 71, 53, -6, 94, 73, -12, 106, 78, 7, 38, 49, -44, -28, 58, 48, 41, 21, -17, -86, -3, -66, 51, -92, -31, 12, -26, 93, -23, 36, -22, 30, 74, 85, -65, -22, 53, -100, 19, -35, -87, 54, -31, -42, 8, -94, 14, -37, -78, -79, 30, -77, 30, -80, -1, 42, 32, -15, 54, 19, -37, 44, -11, 8, 43, -56, -10, 82, 45, 37, -30, 37, 21, 43, 97, 18, -13, -30, 69, -95, -38, -36, -50, 14, 96, 13, 8, 35, 9, 68, 86, -7, 49, -83, -1, 36, -74, -38, 45, 10, 23, -66, 19, -46, 94, -13, -11, -28, -45, -86, 52, 29, 38, -40, -67, -42, 33, 35, 77, -83, 55, -17, -78, 88, 54, 20, 52, 47, 67, 3, 38, 24, -2, 21, 64, -15, -12, -42, -21, -38, -15, -97, -1, 5, 75, -64, 80, 90, 60, 64, 111, 47, -89, 29, 47, -22, 82, 35, 69, -76, -88, -86, 4, -50, 78, -75, 79, -73, 72, -70, 36, 50, 80, 12, -67, 50, 44, 71, -73, -4, 63, 42, -46, -54, 58, -34, -24, 47, 79, 89, 0, -75, 59, 28, 4, 57, 10, -53, 69, -43, -61, -101, 3, -17, 11, 31, -23, -8, 1, -88, 67, -81, 0, -57, 18, -65, -93, -11, 16, 8, 36, -4, -86, -51, 76, 14, -104, 4, 34, -20, 78, -70, -86, 8, 61, 66, 24, 21, -77, 70, 25, 29, -39, 30, -19, 3, 33, -16, -87, 47, 3, 54, -26, 65, 28, 6, -71, -78, -54, 44, -104, -28, -6, 2, -64, 34, -52, -68, 36, -53, -37, 71, -36, -97, 73, -6, 78, -44, -32, -42, 41, 76, 76, 16, 112, -83, -11, 9, 96, -43, -50, 56, -61, -76, 55, -10, 71, -81, 55, -13, -89, -91, -70, 34, -8, 56, -24, -83, 6, 12, -34, 96, -63, 18, -85, -27, -41, 79, -64, -13, -25, -6, 67, 3, -1, -28, 95, -88, -90, -12, -26, 6, 44, 35, 57, -54, -61, -87, -50, 18, 104, 0, -37, 77, -59, 6, -16, -97, 70, -85, -29, 68, -91, -68, -84, -29, 7, -36, -26, -77, 29, 45, 0, -75, -102, -50, -91, 50, 96, -12, -20, -59, 40, 45, 14, 51, 32, -86, -81, -41, -80, -61, -85, 11, 35, 57, -29, 37, -16, 55, 13, 5, 15, 26, -13, 88, 20, -85, -26, 35, -7, -88, 33, 58, -97, 73, -73, -50, -90, -65, 102, -74, -82, 83, -5, 46, -89, -5, -93, -46, 3, -3, -19, -81, 29, 96, 71, -96, 34, -47, 51, 41, 73, 100, 0, 28, 63, -28, -64, -48, -90, 47, -42, 7, 67, -87, 40, 11, 71, -32, -91, 53, -60, 69, 90, -17, -59, -106, 74, -41, 11, -15, 23, 77, -36, 47, 41, -62, 92, 55, 59, -39, -70, 62, 15, 33, -21, 42, 72, 88, 70, -64, 35, 106, -46, -47, 88, -76, 78, 5, -59, -46, 2, 18, -8, -64, -32, -84, -55, -77, 28, -8, 88, 80, 10, -8, -56, 77, 99, -76, -74, 9, -26, -61, 42, -33, -68, 17, 87, -71, -62, -44, -79, 17, -86, -65, -7, 7, 77, -69, 53, 18, -16, 68, -62, -52, 16, -106, 14, 63, -111, -45, 73, 85, -5, -11, -89, 70, 59, 16, -43, -73, -55, -27, -84, -11, 90, 74, -12, 70, -10, 52, -104, -2, 10, -52, -74, -85, -72, -9, -51, 78, -8, 18, -33, 46, 27, -92, 55, 24, -37, 1, -92, -82, -31, 62, 65, 91, 19, 13, 2, -47, 67, -84, -57, -6, -61, -21, 12, 49, -76, -2, 53, 79, -4, 14, -28, -17, 26, 48, 87, 2, -104, -93, -1, 87, -39, -36, 20, -57, 36, -2, 98, 3, 55, -89, 81, 39, 92, -57, 28, 35, -76, -32, 21, -67, 92, -25, -12, -15, 18, 77, -28, 1, -11, -49, 84, -7, 19, 9, 0, -56, -12, -12, -74, 21, 29, 93, 30, 6, 32, 31, -19, 61, -20, 56, -41, 85, 93, -39, 57, -7, 27, -85, -88, -19, 32, 65, -55, 35, 73, -3, -69, 89, -42, 29, 81, -13, -7, 91, 35, -13, -5, 40, 40, -22, -5, -58, 52, 94, 27, -63, -8, 70, -42, -32, 61, 70, 36, 74, -76, -81, 101, 61, 24, -20, 7, 10, 77, -43, 36, -64, -75, 58, -26, 19, -35, -27, -81, -44, 16, -81, -29, 96, -30, -89, -49, -75, 89, -16, 85, -1, 55, 49, -43, 14, 53, -44, -82, 56, -34, 60, -70, -58, 3, 40, -47, -1, -82, -58, -26, -58, 37, -84, -8, 47, -28, 5, -48, -70, -54, -5, -44, 78, -7, 60, 79, 68, 98, 6, 62, 46, -32, 61, 27, 1, -77, 70, -54, 69, 58, -30, -32, 58, 63, -20, 
  70, -18, 48, 80, 48, 6, 53, 59, 7, 31, -68, -61, -36, 12, 91, -24, -13, 35, -25, -39, -11, -74, 68, -39, 5, 30, -89, -18, -59, 39, -26, -4, -7, 81, -22, 30, -19, 52, 92, -9, -94, -87, -53, -68, -64, -20, 90, -65, 37, -52, -27, -90, -25, -41, 70, 42, 39, 11, -16, -54, -19, -66, 88, 82, 69, 18, -20, 10, -69, 90, -49, -8, 50, -51, -64, -40, 8, -60, 53, 69, -55, 3, 62, -31, 92, -52, 21, -64, -53, 64, 3, -43, -13, -75, 18, 71, -8, 47, 52, -1, 26, 79, -81, -15, 65, -73, 67, 26, 33, 87, -54, 88, -41, 29, 85, 86, -24, -91, -35, -91, 70, -70, -30, -86, -9, -45, 35, -11, -79, -30, 28, -2, 96, 87, -27, 60, 80, 23, -80, 18, 31, 39, -19, -66, -60, 15, -93, 5, -83, -86, 4, 50, 87, 11, 50, 57, -76, -33, 27, 61, -5, -16, 53, 40, -72, -39, 12, -25, -49, -92, -42, -36, -55, 21, 58, 66, 29, 30, -67, 86, 66, 39, -77, -48, 1, 78, -78, 71, 26, -13, -30, 5, 18, 63, 27, 61, -78, 93, -69, 67, 59, -22, -35, 53, -93, -102, 75, 47, -40, 32, 100, 37, -14, -97, -26, -94, -9, 67, 72, 3, -84, -50, 1, -8, -97, 15, 27, 2, 15, 49, 43, -37, 90, 23, -33, -57, -51, 55, 11, -28, 52, 39, -67, -47, -25, 20, -39, 81, 37, 99, -83, 94, 50, -36, 95, 51, -96, -57, -49, 100, -48, -15, -61, -1, -78, 65, 79, 15, -62, 57, 35, 19, -70, 26, -67, -98, 104, -23, -66, 68, -91, -56, -63, -32, -49, 74, 2, 31, 96, -31, 40, 91, 82, -8, -60, 44, 5, 14, 41, -58, -43, 25, 60, -47, -87, -30, -84, 1, -10, -57, 48, 78, -61, 32, -18, -30, -102, -35, 1, 9, -38, -53, -47, -57, 18, -70, -58, 36, 82, -34, -51, 78, 1, -25, 7, -2, 89, 16, -82, -62, 2, -49, 21, -60, 18, 35, 15, 68, 7, -107, 11, -21, 85, 65, -35, -6, -22, -7, -83, -62, 56, 70, -65, 4, -73, 35, -56, -72, -56, 20, -39, 3, 74, 40, -54, -41, -72, 38, 46, -94, -77, 75, -87, -69, 1, 68, 78, 61, 54, -44, -40, -13, -90, 13, 71, 7, 36, -2, 79, 59, -73, -45, -46, 40, -43, 39, 65, -6, 78, -74, -19, -77, -52, 17, 55, -15, -10, -69, -22, 62, 18, -41, -28, 39, 68, 96, 17, 94, -70, -71, 15, -95, 57, 75, -75, 22, -40, 38, -34, 77, -18, -61, 79, 28, 68, 95, 29, 59, 2, -75, 16, -61, -42, 26, -27, -3, -94, -67, -36, -84, 99, -57, -16, -28, -69, 35, 26, 43, 33, 2, -49, -15, -69, 12, -22, -65, -82, 54, 84, 28, 15, -39, 81, 82, -13, -2, -70, 54, -30, -54, 79, 53, -74, 16, 86, -49, -88, 79, 16, 66, 71, -71, 69, -100, -48, -95, -11, 2, 51, 81, -18, -68, 79, 41, -91, 31, -54, -9, -53, 27, -62, -86, -44, -75, 27, -31, -41, 87, 92, -7, 71, 13, -72, 93, -38, -72, -55, -72, 24, 26, -65, -36, -21, 12, -77, -96, 54, 36, -13, 81, -43, -81, -50, -21, -78, -61, -69, 43, 59, -65, -67, 94, -42, -9, 55, -18, 80, 49, 22, -21, -69, -57, -88, 23, 65, 42, 14, 20, 57, -42, -55, 84, -39, 97, 16, -36, -55, -21, -66, -77, 80, -72, -37, -82, -24, -23, -93, 2, 86, -17, -70, -80, -67, 34, -77, 79, 94, -2, 55, 58, 66, 91, 77, -30, 85, -3, -68, 83, -82, 91, -22, 48, -29, -67, -82, 88, 25, 80, -21, -77, 51, 70, -6, 70, 71, 61, -68, 83, 94, -35, 6, -27, 109, 7, -21, 42, -62, 16, 81, 3, 20, -105, 45, 76, -12, -33, -17, 84, -87, -69, 14, 11, 67, -58, 28, -70, -48, -11, -35, 35, 4, -13, -85, 87, -52, -89, -42, 60, -26, -52, 80, 33, -37, 74, -42, -6, 12, -5, 30, -53, 29, 40, -57, 51, -91, 61, 13, 59, 30, -58, 42, -85, -10, -9, 35, -77, -38, 73, -50, -68, -47, 67, -1, -75, -54, -49, -20, 40, 80, -24, 58, -16, 41, 104, 95, 2, 21, -45, 58, 38, -91, 54, 35, 2, -6, -30, 64, 83, -87, 94, -91, 69, -91, -18, -31, 37, -42, 48, -75, 29, 74, 50, 28, -44, 45, -95, -40, 41, 23, -84, 74, -50, 30, 44, 28, -35, 37, -80, -47, 27, 61, 95, -83, 73, 20, 84, 36, 12, 72, 18, -67, -14, -44, 90, -78, -28, 85, -11, -95, 56, -2, 91, 63, -18, 24, 77, 83, -79, -70, -42, 71, -55, 20, 54, -44, -30, 41, -41, -69, -19, -67, -87, -11, -8, -4, 93, -31, -10, -76, 24, -48, 104, 64, -109, 32, -75, -37, -13, 43, -20, 111, -50, 54, 95, 85, -22, 95, -38, -6, 75, 96, 35, 78, 42, 25, -20, -5, -10, 52, -100, 85, 68, -79, 48, -90, -31, 87, -92, -24, 11, 79, -13, 98, 18, -64, 37, 37, -70, 99, -21, -59, -6, -73, -69, 69, 48, 50, -92, -58, 30, 39, 0, 9, -52, -96, 29, 105, 70, 12, -45, -69, -15, -21, 10, 6, 7, -81, 25, 32, -19, 23, 57, -68, 72, -33, -33, -20, 83, -71, -75, 28, 75, 54, -93, -39, -48, 92, -23, -40, 66, 61, -68, 20, -71, 48, 20, 108, -46, 15, 63, -36, 80, 12, -20, -20, -4, 80, 52, -77, 12, 34, 105, 67, -39, 76, 46, -30, -74, -88, 10, -43, -14, -49, 91, -89, -17, 3, -94, -5, 80, 99, 9, 80, -110, -56, 78, -2, 66, -72, 4, -17, 0, -40, 57, 42, -30, -20, -12, -15, -32, -84, -16, 4, -62, 37, -73, -6, 24, -8, 37, -30, 23, -97, 59, -31, 26, 66, 47, 4, 55, -12, 13, -37, 59, 87, 75, -49, 33, 81, 85, -90, -6, -77, -5, -58, -68, -51, 87, -91, -69, 34, 19, -25, 72, -24, -90, -80, -18, 20, 102, 5, -10, -108, -43, 13, 88, -3, 51, 101, -13, -58, 4, 26, 70, -56, 91, 98, -19, 54, -27, -55, 86, -93, -36, 88, 5, 28, -26, 30, -6, -9, -47, -58, -59, -93, -64, -45, 13, 30, -52, -57, -3, 30, -4, 72, 28, -61, 29, 48, -34, 69, 86, 17, 85, -30, -32, 87, -38, -56, -10, -38, -70, 48, 17, -8, 28, -24, 69, 8, 63, 92, 62, -86, 94, 8, -13, 51, 64, 9, 78, -20, 28, -71, 72, 25, 35, -46, 46, -51, -44, -68, -34, 5, -51, 39, -49, -89, 75, 5, 68, 1, -27, -7, 37, 32, 5, -86, -41, -82, -77, -5, -95, 56, -39, -22, 78, 68, -20, -26, 74, -14, 76, -41, -18, 84, -33, 74, -5, 3, -25, 2, -82, 90, 12, 25, -53, -91, 62, 69, -97, 65, -9, -37, -24, 42, -29, 85, -52, 29, 93, 90, -42, 44, -65, -1, -18, -64, 30, 57, 47, -77, 55, 66, 20, -43, 87, -22, 80, 26, -50, -9, -44, -59, -106, -83, -16, -53, 18, -85, 64, -51, -66, 59, 54, 30, -2, -105, -70, -57, 59, 54, -3, 64, 5, 79, 32, -33, 58, 46, -71, -70, 17, 5, -65, 22, 64, 4, 95, 3, -84, 26, 15, 10, 6, -10, 7, -84, -94, 83, -96, 33, 63, -50, -95, 42, 82, -19, -10, -61, 13, 17, 55, -68, -14, 70, 71, 15, 55, 7, -76, 19, -3, -29, 98, -68, -8, 77, 62, 55, 38, 
  -38, 54, -94, -33, 23, -68, 65, 59, 92, -93, 93, -38, -56, -33, 73, 49, -2, 17, 80, 34, 79, 85, -40, -14, 95, 24, -35, 37, -28, -80, -50, 43, 92, -68, -77, 89, -53, -14, -66, -2, 17, 60, -83, 42, -44, 60, 4, -88, -6, 30, -97, -61, 35, 85, 33, -24, 31, -33, 22, -73, 3, 24, 35, 0, 79, -64, 80, 83, -19, -40, -127, -48, -25, 27, 30, 65, 79, 24, -84, 15, -85, -17, -58, -93, -76, 39, 29, 18, -47, -10, 83, -38, -75, -67, -60, -40, -85, 27, -18, 28, 29, -17, -88, -34, 95, -53, -29, 93, 17, 87, 63, 18, 76, -37, -46, -99, -9, 1, -22, 58, -52, -29, 72, -64, -15, 92, 3, -12, -24, -85, -77, 29, 28, 7, -64, 82, -65, 63, -71, -3, 57, -23, 50, 56, -48, 34, 84, -83, -51, 96, -13, -39, -50, -2, -78, -72, 73, 94, -3, 81, -50, -13, -84, -20, 45, -17, 68, -14, -49, -60, -88, 93, 2, 77, 33, 78, -77, 24, 50, -63, 15, 66, -25, -79, -40, 66, -69, -95, 29, -33, 0, 12, -78, -84, 41, -43, -17, 103, -14, 11, 43, 71, -17, 14, 61, -14, 28, 88, -31, 20, 2, -23, 62, -72, -65, -10, 90, 3, -96, 53, -66, -10, 61, 63, -90, -51, 56, -23, 14, 35, -79, -85, -6, 9, -66, 77, -39, 18, -29, -96, 65, 85, 25, -39, 69, -11, 64, -17, -33, -75, 67, 45, -14, 4, -56, -34, 28, -47, -59, -10, 22, 13, 40, 66, 37, 28, -17, -48, -45, 20, 42, 62, -39, -53, 7, 10, -8, -9, -57, 60, -50, 64, -66, 22, 30, 29, 15, 29, -54, -35, 67, -33, -84, 96, 75, -7, -55, -33, -79, 72, -51, 19, 28, -63, -44, -94, 85, -58, 2, 76, 45, -39, -56, -10, 50, -13, -2, 48, -22, -2, 8, 11, 14, -56, 80, 15, -83, 58, -39, 83, -71, -25, -34, 86, 43, 45, -48, -42, -69, -57, -35, -81, -43, -77, -12, 26, -73, -76, 39, 88, -21, 43, 69, -40, -74, 22, -73, -77, -106, -10, -73, -65, 108, -21, 72, 62, -10, 73, 3, 0, -10, 10, 41, -69, -41, -79, -13, 77, 26, 90, -26, 86, -63, -70, 102, -31, -7, -66, 3, 68, 60, 42, 39, 45, -20, 26, -43, -42, 47, -63, -16, -30, -38, -96, -101, -45, -85, 54, -73, 61, -3, 90, 88, 79, -27, 21, 7, 109, -34, 65, -34, 64, 80, 93, 48, 94, 45, 51, 72, -84, -65, 11, 13, -55, 81, 85, -39, -37, -63, 22, -5, -86, 52, -54, 12, -44, 37, 46, -6, 85, -73, -75, 11, 22, -81, 70, -24, 23, 66, 7, 45, 26, -18, 62, 18, -65, -46, -54, 21, -44, 79, 74, 39, -14, -97, 0, 75, 66, -92, -68, -26, 103, 77, 56, -78, 92, 49, -40, -64, -99, -64, 15, -70, 39, 32, 58, 67, -25, 17, 13, 55, 18, -42, 64, -38, 58, 86, 15, -66, 84, 84, 90, 63, 63, 28, -13, -45, -54, 61, -21, 30, -38, -12, 80, 31, -33, 30, 100, -60, -80, 42, 87, 60, -30, -4, 21, 45, -70, 63, -61, 10, -63, 12, -51, 19, 86, -23, 35, 70, -102, -31, -37, -54, -17, -67, 18, 103, -47, 20, 42, 37, -110, 9, -21, 9, -80, 27, 90, 15, -8, 65, -88, 16, 88, 41, 74, -20, 31, -95, -45, 10, -2, -27, 97, 86, -14, 65, 4, 40, -67, -35, 45, 38, -78, 75, -72, -15, -3, 91, -67, -37, -44, 28, 78, 10, 43, -70, 37, 64, -75, -64, 5, 71, 88, 75, -79, 63, 52, 10, -70, -74, -13, 31, -28, -3, -38, -99, -7, -88, 40, -91, 80, 82, -70, 19, -32, 3, -81, -9, 82, -47, 37, 72, 47, -32, 7, 33, 88, -17, 47, 15, -48, -99, -53, -62, 30, -66, 47, -82, 39, 61, 14, -29, -68, -49, -21, 22, 91, -61, 54, -1, 12, -60, 55, -94, -1, -24, -40, 16, -40, 38, 90, -87, -68, 59, -26, -43, 27, 45, -10, -78, 28, 32, 50, 37, -66, -38, 22, -37, -6, 51, -23, 45, 91, -70, -71, -49, 83, 87, -76, -72, -85, 11, -32, -57, -52, 88, -32, 2, 60, -86, -74, -2, -40, 86, -88, 27, -57, -44, -85, -35, -15, -38, -23, -29, -31, -60, 31, 44, 91, -8, -1, -55, -57, 11, 36, -80, 69, 41, 93, -67, -72, -82, -30, -67, -83, -85, 79, 97, -26, -33, 6, -15, -65, 23, 28, 13, 21, 13, -52, 82, 6, -67, -46, -52, 31, -49, 27, -18, -2, -51, -10, -57, -23, 90, 12, -13, -46, -50, -54, -60, 72, 22, 52, 52, 89, -18, -4, -64, 38, -61, -95, -76, -79, 40, -21, -8, -18, -14, 23, 67, -20, -31, -51, 86, 55, 56, 56, -69, 67, -74, -110, 81, -15, 0, -30, -63, 13, -7, -36, 51, -23, -58, 19, 28, 52, 30, -52, 51, 76, 69, 106, -6, -50, 73, -57, -31, -1, -51, -87, -71, 73, -30, -62, 49, 63, 95, -74, -57, 36, -90, 2, 34, -1, 38, 26, 97, -23, 31, -81, 50, -67, 55, 79, 84, -77, -48, 6, -61, 70, -27, 81, 4, -23, 23, -14, 63, -94, -75, 61, 57, 75, -70, 63, -71, 37, 64, -8, 67, -96, 24, 22, 43, -64, -2, -81, -30, 35, -50, 36, 89, -4, 2, 51, 32, -14, -51, 92, -67, -72, 22, -19, 34, -6, 1, -46, -1, 10, -84, 19, -6, -81, -1, 22, -1, -16, -13, -44, 65, -90, 2, 39, -4, 38, -59, -38, 91, -19, 29, -43, 70, 42, 80, -44, 61, -30, 29, -34, 87, -71, -20, 31, -6, 68, -38, -29, 84, 71, 68, -71, -70, 26, 81, -82, 54, -27, -73, -74, 14, -12, 86, -33, 35, 27, 38, -65, 65, 63, -5, 19, -34, 6, -96, 45, 31, 63, -54, 53, -8, -51, 85, -67, 94, 32, -46, -27, 11, 15, 59, -1, -56, -43, 30, 47, -2, 47, -26, -11, 95, -42, 56, -46, -56, -7, -15, -53, -17, -67, -70, 79, -17, 19, -62, 92, 29, 21, -8, 63, 20, 4, -48, 96, 78, 31, -66, -78, 27, -22, 53, 17, -81, -30, 74, 12, 64, -43, -43, 53, -59, 34, 71, -89, -64, -17, -46, 78, 37, -70, -19, -64, 0, -52, -98, -94, 76, 2, -99, 75, -66, -30, 57, 87, 26, 15, -86, 24, -66, 53, 84, -3, 39, -65, -81, -66, -80, -47, -43, 71, 16, -61, -2, -50, -55, 49, 86, 55, 72, -52, 81, -89, 42, 70, -32, -21, 49, -67, -67, -35, 58, -43, 20, 70, 8, -36, -46, -34, 10, 78, -81, 12, 20, 79, -91, 78, -3, -63, -61, -72, 37, -66, -62, -27, -34, 6, -34, -20, 18, -26, 90, 68, 28, -56, 49, 20, 13, -19, -1, -56, 38, 19, -46, 30, 80, -58, -1, -92, 96, -88, 80, -64, 58, -84, -68, -46, -5, -19, 68, -52, -31, -91, 16, 33, 15, 54, 70, 81, 76, -4, -51, 30, 13, 96, 17, -82, 93, 8, -6, -72, -58, -13, -88, 42, -13, 3, 40, 5, -53, 71, 50, -9, -30, -24, -46, 17, 74, 17, -91, -32, -85, -1, 48, 41, -63, 38, -56, 73, 32, -6, -46, 40, -68, 16, -41, 53, 62, -2, -29, -55, 11, 93, -45, -44, -76, -20, -12, -66, 76, -32, 53, 87, -83, -72, -30, -77, -69, 9, -89, -85, -90, 72, 46, 34, 83, 9, 43, -89, -62, -36, 57, 24, -19, 47, -71, 72, 38, 18, -40, 105, -73, -8, 
  -10, 54, 17, 28, 68, 51, -39, -5, -8, -65, -52, -25, 28, 75, -12, -49, 49, 56, 25, -22, -41, 3, 51, 45, 46, 88, 1, 15, 47, 36, 101, -18, 58, 4, -41, -23, -14, 1, -67, -12, -69, 43, 73, 83, 18, 42, -75, 77, -17, -35, -35, 67, 19, 34, 95, 76, -11, -45, 3, 41, -26, -45, -81, 34, -68, -68, 24, -66, -11, 46, -52, -44, -22, 15, -59, -3, 46, -74, 82, 53, -48, -10, -56, 48, -39, -33, -47, 90, -44, 50, 24, -82, 38, 36, -76, 69, -18, 92, -51, 16, -89, -75, -60, 49, -76, 27, -94, -52, -71, -80, 95, 47, -36, 63, -2, 93, 27, 89, -53, 86, 32, -34, 76, 60, 10, -54, 7, -54, 59, 58, 90, 33, 91, 44, 7, 86, 53, 22, 78, -73, 30, 77, -46, 32, 32, 36, 49, -70, -42, 86, 19, -72, -87, -36, -68, 21, -90, 70, -86, -21, -100, 88, 23, 87, -89, 66, -72, -61, -7, 43, -79, 89, -49, -36, -81, -3, 60, 82, 74, 52, -32, 78, -34, -4, -22, 56, 68, 38, 6, 32, 74, 111, 1, -37, 104, -60, 77, -55, 13, -80, -78, -20, -47, -87, 100, 53, -32, 22, 74, -10, -61, -85, -80, 38, 40, -66, 83, -21, -80, 77, 73, 78, -39, 25, -82, -69, -28, 20, -15, -86, -118, 56, 12, 74, -11, 41, 59, 23, -41, -47, -88, 79, -77, -55, -74, -71, 55, 71, 7, 71, -15, -78, -29, -8, 83, -62, -87, -83, -4, 44, -6, -63, -79, -31, -47, -69, 102, -64, 31, 12, -86, -21, -44, 6, -96, 6, -36, 48, -29, -31, 37, -19, -38, -32, -52, 37, 42, 72, 31, -17, -58, -65, 48, 91, 6, 4, -14, -31, 105, -41, 19, 92, 93, -77, 51, -84, -53, -81, -26, -35, -33, 5, -27, 41, -29, -33, -15, 46, 33, -78, 16, -73, 10, 75, 31, -64, 19, -75, -76, -38, 32, -30, -64, -9, -63, -22, -68, 89, 31, -59, -25, 17, 0, 79, 9, -74, -40, 62, 2, -17, 47, -27, -1, -44, -47, 39, -10, -80, -13, -48, -10, -68, 76, 52, -39, 71, 22, 25, 82, 7, 69, 44, 27, -28, 49, 69, 11, 106, 98, -20, -28, -34, 36, 9, 57, 29, -15, 43, -62, 33, -16, 36, 45, 95, 83, 48, -67, 8, 86, -59, -10, -23, -50, 72, -60, -3, 12, -82, 49, -77, 78, 0, 19, -95, 16, -71, 65, 90, -41, -68, -65, 43, 24, 56, 49, -31, 15, 32, 9, -13, -40, 56, -20, 62, -28, -23, -60, -70, -85, 71, -57, -57, 42, -18, -14, -91, -7, 2, -61, -74, -68, -2, 12, 79, 85, 85, -29, -54, -22, -50, -6, 36, 37, -90, 32, 25, -12, 40, -9, 50, -32, -48, 59, 94, -51, 95, 14, 46, 29, -81, 38, 31, 6, -43, 38, -41, 31, 100, -10, -22, 53, 0, -48, 14, -69, 75, 16, -88, 74, 90, 30, -52, -1, -25, -33, -2, -75, -62, 63, -75, 67, -14, -28, -67, -63, 41, -76, 68, -19, -53, -39, -16, -43, 40, -25, -9, 103, 83, -48, -13, 38, 85, 26, -50, -59, 44, -1, 68, -88, -67, 31, -37, -23, 0, 12, 71, -36, 55, -44, 46, 66, -82, -53, -5, -7, 65, 66, 59, 21, 32, 43, 29, -65, 56, -7, -58, -42, 59, 77, -90, 53, -24, 33, 35, 27, 66, -10, -5, -77, -65, 87, -73, 92, 51, 33, 56, 95, -37, -81, -87, 62, 6, 7, 11, 57, 4, -56, 80, 60, 35, 60, -76, 16, 93, 44, 57, 6, 57, 22, -78, 44, 35, -78, -1, -65, 72, 76, -18, -33, 91, -55, -46, 75, 49, -63, 41, 37, 36, -45, 23, -8, 7, 71, -78, 25, 11, -86, 30, 67, 68, 87, 81, 12, 57, 19, -86, -46, -6, -48, 8, -94, -36, 90, -28, -41, -50, -18, 93, 6, 25, -54, 39, -93, -32, -44, 6, -22, -3, -21, -57, 56, 27, -37, -42, -66, 103, 45, -74, -69, -69, -79, 70, 29, 68, -36, -45, -23, 81, -61, 33, -15, -70, 39, -21, -7, 63, -75, -57, 87, 52, 97, -41, -64, 78, -41, -74, 25, 71, 16, -39, 35, -24, 26, 0, -4, -71, 18, 56, -76, -22, 64, -50, -40, 44, 3, 38, 37, -47, -10, 7, -3, -45, -32, 3, -46, -118, 73, 36, 1, 11, 88, 89, -72, -49, -16, -35, 78, 71, -74, 52, -4, -31, -26, -8, 69, 41, -13, 8, 27, 1, -57, 18, -87, 90, 8, 22, -52, -61, 55, 73, -65, 12, 92, -72, 25, 61, -99, 47, 73, 58, -80, -76, 62, 30, 82, 1, 93, -34, 45, -34, -83, 95, -35, 66, 42, 30, 80, -65, 7, -29, 68, -31, -34, -100, 0, -40, -84, -39, 38, -6, -83, 54, 66, 0, 58, -14, -65, 88, -69, 44, 74, -25, -51, -1, -51, 59, -21, 62, -15, 61, -62, -29, 82, -33, 5, 19, 21, -12, 97, 62, 37, 57, 75, -41, 50, 114, -60, 5, 68, -29, -12, 74, 16, 33, 25, -13, -89, 21, -11, -82, 59, -31, -86, -52, -6, -5, 9, 29, 67, 96, -55, 38, 21, -22, -34, 100, -41, 26, -27, 14, 16, -87, -90, 28, 20, 84, -93, -56, 33, 47, -18, 9, -29, 29, 55, -89, -28, -34, -40, 71, -76, 45, 12, -102, -31, 19, -73, 109, 98, 10, 37, 91, -73, 30, 82, -70, -41, -81, 100, -89, -8, -87, 76, 6, -86, -14, -32, -63, 100, -16, -43, -96, -73, 23, 14, -77, 52, 81, 69, 5, 25, 52, -51, -26, -30, -49, -75, -18, -87, 11, 25, 94, -53, 84, 72, 27, -9, -24, 96, -64, 28, -80, 58, -62, -107, -83, 14, 89, -58, 96, 74, -48, 4, 64, -18, 63, 29, 79, -18, -78, -57, 101, -29, 71, -75, -48, -73, -55, -16, -75, 11, 74, -65, -15, 95, 72, -94, 75, 62, 80, -20, 82, -86, -76, -33, -84, 46, -86, 69, 95, 5, -44, 86, 51, 91, 93, -47, -15, 57, 104, 80, 87, -48, -71, 21, 63, 83, 41, -36, 102, -61, 24, -18, 39, 29, -70, 24, 39, 51, 14, -40, -94, -25, 64, 58, -32, -2, 75, -68, -55, 92, 11, -12, 27, 37, -12, 87, 11, 3, 95, 52, -42, 50, 55, -84, -78, 62, 67, -93, 4, 68, -29, -62, -85, -35, 103, -34, -90, -41, 75, -74, 5, 93, -42, -4, -70, -83, -55, -87, 91, -52, -92, 1, -97, -21, -6, -44, 98, 86, -68, -37, -62, -7, -12, 19, -74, 48, 44, -35, -96, 83, -71, 84, 17, -46, -86, 76, -57, 3, -4, 23, -57, 79, -64, 10, 41, 1, -65, -92, -75, 30, 61, 9, 13, 32, 21, 82, 70, 75, -57, -13, 56, -78, -87, 91, 69, 4, -91, 99, -24, 63, -48, -90, 86, -85, -17, 22, 42, 74, 112, 14, 88, 6, 16, 28, 89, 61, 74, 29, -31, 95, 55, 85, -41, -47, 88, 84, -23, -58, -30, 96, 49, -73, 28, 71, -71, 98, -30, 42, -3, 42, 90, 86, 45, 31, -86, -24, 20, -15, -37, -94, -14, -21, 70, 70, 34, 33, -116, 88, 37, 53, 17, -23, -80, 21, -29, -8, -24, 90, 84, -22, 107, 16, 67, 43, -67, -55, -86, -77, -49, 20, 63, -79, -12, 19, 43, 24, 63, 58, 56, 95, 21, 45, -59, 70, -6, 70, -75, -35, -55, 54, -19, 81, -55, -36, 61, -4, -74, -35, 52, -46, -69, 53, 70, -73, 16, -85, -21, -29, 16, 45, -49, 71, -82, 2, 81, -74, 47, 4, 78, 
};
const TfArray<2, int> tensor_dimension30 = { 2, { 10,1280 } };
const TfArray<1, float> quant30_scale = { 1, { 0.00070602243067696691, } };
const TfArray<1, int> quant30_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(8) int8_t tensor_data31[2*40] = { 
  -53, -10, -59, -61, 112, 4, 115, 2, 48, -102, -110, -60, 74, -30, 124, -23, -107, 12, 100, 16, 86, -43, 103, -61, -47, 93, 5, -120, -82, -93, 32, 13, 1, 103, 20, 50, -9, -119, 72, 88, 
  97, 127, -95, -83, 16, 105, 16, -57, 73, -107, -96, 58, -66, 1, 34, 88, -95, 101, 102, 76, -74, -1, -18, 51, 109, -8, -85, -95, 64, 93, 118, -118, 29, 7, -61, 54, -79, 52, -54, -22, 
};
const TfArray<2, int> tensor_dimension31 = { 2, { 2,40 } };
const TfArray<1, float> quant31_scale = { 1, { 0.0029330255929380655, } };
const TfArray<1, int> quant31_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(8) int32_t tensor_data32[48] = { 14695, 6053, 73516, -5493, -3221, 14401, -1979, 2503, 5849, 241, 15402, 1041, 5651, 8889, 6127, 10371, 6333, 6402, -1800, 14767, 3631, 713, 2620, 28096, 59578, 10414, 8528, -3097, -353, 13989, 16354, 22370, 26607, 10730, 18229, -2348, 1142, 5062, 19801, 16140, 1568, 32886, 32206, 11885, 15503, 4635, 9218, 2130, };
const TfArray<1, int> tensor_dimension32 = { 1, { 48 } };
const TfArray<48, float> quant32_scale = { 48, { 5.891522960155271e-05, 9.0379944595042616e-05, 1.7529897377244197e-05, 9.1637601144611835e-05, 0.00012307318684179336, 7.2492039180360734e-05, 9.5513991254847497e-05, 0.00021764426492154598, 0.00010652090713847429, 8.6333508079405874e-05, 5.5538050219183788e-05, 0.00015251862350851297, 9.2724047135561705e-05, 8.8150198280345649e-05, 8.9766479504760355e-05, 7.5188072514720261e-05, 7.6186777732800692e-05, 8.2783990364987403e-05, 0.00015234603779390454, 5.9141621022718027e-05, 0.00010663622379070148, 0.00014637570711784065, 0.00011316801828797907, 3.5456010664347559e-05, 2.6079791496158578e-05, 8.2658836618065834e-05, 9.2924987256992608e-05, 0.00011964675650233403, 0.0002026730653597042, 6.1645863752346486e-05, 5.4858719522599131e-05, 4.3147272663190961e-05, 3.6956171243218705e-05, 7.9546844062861055e-05, 5.0014059524983168e-05, 8.9970490080304444e-05, 0.00013866937661077827, 8.4423147200141102e-05, 4.4713873649016023e-05, 5.495246296050027e-05, 0.00010165288404095918, 3.0628089007223025e-05, 3.4792945371009409e-05, 6.7323744588065892e-05, 6.0073416534578428e-05, 0.00013628620945382863, 8.3407154306769371e-05, 9.4926530437078327e-05, } };
const TfArray<48, int> quant32_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(8) int32_t tensor_data33[48] = { -1151, 3341, 1286, -45, 88, 15535, -368, -6765, -9080, -889, -12546, -129, -7830, -10739, -1328, -155, -16096, 29506, -6612, 400, -960, -353, -1316, -67, 37575, 1340, -751, -2310, -31, 1601, 90, -14760, -177, 22245, -6, 13263, -181, -6811, 276, -8, -8323, -950, 6150, 10489, -182, 15542, -99, -3353, };
const TfArray<1, int> tensor_dimension33 = { 1, { 48 } };
const TfArray<48, float> quant33_scale = { 48, { 0.00016350724035874009, 7.591298344777897e-05, 0.00032952765468508005, 9.326342842541635e-05, 0.00010009161633206531, 0.0001583248667884618, 0.00013947294792160392, 9.8275457276031375e-05, 0.00019535540195647627, 0.00010677154932636768, 0.0002318287588423118, 9.8068543593399227e-05, 7.4189396400470287e-05, 7.4803894676733762e-05, 7.6958029239904135e-05, 0.00027285583200864494, 0.00013488340482581407, 4.7601050027878955e-05, 7.1408736403100193e-05, 0.00030348452855832875, 0.00013422644406091422, 0.00017515521903987974, 0.00010024014045484364, 0.00041373129351995885, 0.00013452691200654954, 0.00016308583144564182, 0.00010723483865149319, 9.4413961051031947e-05, 0.00014003596152178943, 0.00011245163477724418, 0.00019338172569405288, 0.00027423730352893472, 0.00023674753902014345, 5.8345536672277376e-05, 0.00026437966153025627, 9.9409815447870642e-05, 9.630898421164602e-05, 5.2151513955323026e-05, 0.00028721432317979634, 0.00047545778215862811, 0.0001061873699654825, 0.00046409168862737715, 0.00034588063135743141, 0.00010246715100947767, 0.00013209057215135545, 6.4311163441743702e-05, 0.00010405961074866354, 0.0001627395540708676, } };
const TfArray<48, int> quant33_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(8) int32_t tensor_data34[48] = { -3249, 8915, 8121, -1529, 68, 18600, 6082, 2932, 17277, 2553, -4055, 3172, 6667, 2922, -568, 1463, -2771, 14455, -5103, -1577, 1836, 1782, 783, -767, 274, 5179, -3112, -2743, -1533, -4636, 16790, 5149, 1195, 2019, 779, 2299, 2137, 14245, 2305, 929, 12715, -3795, 1051, 2508, -3492, -3329, 20164, 5284, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.0001674984087003395, 9.5277449872810394e-05, 9.6137671789620072e-05, 0.00016276627138722688, 0.00027375895297154784, 4.8387613787781447e-05, 0.00014022341929376125, 0.00014043791452422738, 5.8837278629653156e-05, 0.00021891073265578598, 0.00011664924386423081, 0.00015691417502239347, 0.00010138167272089049, 0.00016126387345138937, 0.00018106670177076012, 0.00012356553634162992, 0.00014634639956057072, 6.7806497099809349e-05, 9.3859744083601981e-05, 0.00019629197777248919, 0.00020573343499563634, 0.0001505201798863709, 0.00016529590357095003, 0.00016456881712656468, 0.00019309125491417944, 0.00010499216296011582, 0.00014491147885564715, 0.00011754817387554795, 0.0001561494282213971, 9.6134128398261964e-05, 6.5206273575313389e-05, 0.00013179774396121502, 0.00018634373554959893, 0.00016532775771338493, 0.00015529619122389704, 0.00015899649588391185, 0.00013646381557919085, 6.2840517784934491e-05, 0.00020241884340066463, 0.00014341494534164667, 7.8182514698710293e-05, 7.2540096880402416e-05, 0.00020627555204555392, 0.00017094860959332436, 0.00014898901281412691, 0.00013862205378245562, 5.2900308219250292e-05, 9.9041528301313519e-05, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(8) int32_t tensor_data35[8] = { -15697, 16344, 61, -19301, -589, -19750, 307, 273, };
const TfArray<1, int> tensor_dimension35 = { 1, { 8 } };
const TfArray<8, float> quant35_scale = { 8, { 0.00020762586791533977, 0.00026279408484697342, 0.00017615669639781117, 0.00020833426970057189, 0.00013753793609794229, 0.00021614227443933487, 0.00087032717419788241, 0.00122216553427279, } };
const TfArray<8, int> quant35_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(8) int32_t tensor_data36[48] = { -420, 41588, 44445, -1152, -508, -21659, 33199, 28523, -16911, 456, -1846, 27409, 32460, -25086, -18585, -1135, -339, 45861, -1229, 608, 73336, 19493, -14650, -11582, 25892, 20067, -4753, -3017, -5884, -199, 45860, 1293, -5464, 16639, 21596, 24175, -4458, 63258, -6577, -237, 42297, -186, -4152, 23742, -52, -1424, -13362, 21995, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00015523251204285771, 6.825939635746181e-05, 5.5746273574186489e-05, 6.0600399592658505e-05, 3.7339465052355081e-05, 8.2218757597729564e-05, 6.896037666592747e-05, 6.1611397541128099e-05, 0.00019519774650689214, 3.9649603422731161e-05, 9.0717046987265348e-05, 5.6876953749451786e-05, 5.2228901040507481e-05, 0.00013840860628988594, 4.9219943321077153e-05, 4.6049364755162969e-05, 5.2890216466039419e-05, 9.5538292953278869e-05, 0.00024364519049413502, 4.2192124965367839e-05, 3.4479355235816911e-05, 4.4756518036592752e-05, 5.2237766794860363e-05, 9.1327907284721732e-05, 5.3842541092308238e-05, 6.015303370077163e-05, 0.00010610514436848462, 0.00010796697461046278, 9.8461867310106754e-05, 0.00014333528815768659, 9.0608155005611479e-05, 5.207135109230876e-05, 3.6952802474843338e-05, 5.5833308579167351e-05, 4.9506354116601869e-05, 4.8512352805119008e-05, 6.2351457017939538e-05, 6.3600433350075036e-05, 5.4174881370272487e-05, 5.5405878811143339e-05, 8.3551669376902282e-05, 0.00013194810890126973, 4.4116655772086233e-05, 5.4880692914593965e-05, 0.00012296134082134813, 9.5548690296709538e-05, 0.00014609067875426263, 7.1590766310691833e-05, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(8) int32_t tensor_data37[48] = { 926, 9616, -9668, 6142, 5040, 8790, 4680, 15906, 15461, 8164, -3349, -476, 1771, 5835, 6599, -1136, 24, 8744, 16335, 916, 3471, 16810, 4680, 8250, 22293, 11641, 2948, 15744, 3525, 8221, -3367, 11769, 2310, 11206, 11312, 7506, 86812, 19759, 7977, 24283, 4142, 1407, 7792, 2469, 5484, 3041, 3683, 4767, };
const TfArray<1, int> tensor_dimension37 = { 1, { 48 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00019946711836382747, 8.1299651355948299e-05, 7.8308279626071453e-05, 0.00010146433487534523, 9.498201688984409e-05, 7.3970644734799862e-05, 0.00010405442299088463, 5.7219298469135538e-05, 5.8015757531393319e-05, 8.6846725025679916e-05, 0.00011354713205946609, 0.00013189847231842577, 0.00012668018462136388, 0.00010647342423908412, 8.1375059380661696e-05, 8.2473634392954409e-05, 0.00011888493463629857, 8.2342710811644793e-05, 5.7571054639993235e-05, 0.00012575581786222756, 0.00013997479982208461, 4.9432113883085549e-05, 0.00011902000551344827, 8.6093372374307364e-05, 4.1338247683597729e-05, 7.7726697782054543e-05, 9.4461356638930738e-05, 5.8456276747165248e-05, 7.188390736700967e-05, 9.719592344481498e-05, 0.00014251156244426966, 6.8318258854560554e-05, 0.0001588359591551125, 6.9148853071965277e-05, 6.1513856053352356e-05, 0.00010474955342942849, 1.7997290342464112e-05, 4.7208075557136908e-05, 7.739811553619802e-05, 4.0796614484861493e-05, 8.969331975094974e-05, 0.00014051857579033822, 8.8494089141022414e-05, 8.8859320385381579e-05, 0.00011641667515505105, 9.8445219919085503e-05, 0.00011529766925377771, 7.6371346949599683e-05, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(8) int32_t tensor_data38[48] = { 27283, -33275, -1915, 4021, -734, 20951, 5474, -3261, -14086, 4266, -6334, -4656, -13635, -23746, 9694, 209, -15605, 59094, -3420, -23571, 26866, -651, -197, -1393, -528, 188, -4950, -184, -1834, -566, 112, 37902, 29936, -1694, 12940, 32524, 327, 29718, 1630, 178, -2933, -13693, -1862, 5915, 4108, 45809, 25480, -7515, };
const TfArray<1, int> tensor_dimension38 = { 1, { 48 } };
const TfArray<48, float> quant38_scale = { 48, { 4.4632590288529173e-05, 4.0564984374213964e-05, 0.00052291719475761056, 0.0001403949863743037, 0.00011774351150961593, 5.8876645198324695e-05, 6.520239548990503e-05, 0.00023360457271337509, 5.2105548093095422e-05, 0.00018857295799534768, 9.3046575784683228e-05, 7.227391324704513e-05, 8.3465383795555681e-05, 5.4212268878472969e-05, 6.8958390329498798e-05, 4.2848987504839897e-05, 4.1576080548111349e-05, 2.6937867005472071e-05, 0.00024337976356036961, 2.9216531402198598e-05, 4.9798072723206133e-05, 0.00021874370577279478, 0.00010379940795246512, 0.00010109794675372541, 0.00016140453226398677, 0.00014752300921827555, 0.00014293585263658315, 0.00018001487478613853, 0.00013738822599407285, 0.00011410448496462777, 8.3618062490131706e-05, 5.127436452312395e-05, 5.0055292376782745e-05, 0.00012845831224694848, 7.3672286816872656e-05, 5.9874480939470232e-05, 0.00033364081173203886, 8.0479927419219166e-05, 7.3344031989108771e-05, 0.00026156188687309623, 9.0280889708083123e-05, 8.1681726442184299e-05, 0.00013891489652451128, 8.8810447778087109e-05, 0.00012673849414568394, 3.3960099244723096e-05, 6.1716753407381475e-05, 0.00010768575157271698, } };
const TfArray<48, int> quant38_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(8) int32_t tensor_data39[48] = { 38144, 7460, 1716, 1279, 7099, 2714, 7648, 4584, 3328, -8276, 15657, 1388, 9397, 2252, 5512, 2574, 8357, -776, 11918, 251, 4309, -914, 3819, 7287, 2796, -4582, 2669, 13719, 814, 7024, 2186, 14810, 715, 6164, -437, -1895, 3016, 2782, 449, 1955, 15575, -995, 13335, 4317, 1583, 5758, 5894, -2308, };
const TfArray<1, int> tensor_dimension39 = { 1, { 48 } };
const TfArray<48, float> quant39_scale = { 48, { 2.8480044420575723e-05, 0.00010939326602965593, 0.00015568456728942692, 0.00016362672613468021, 0.00010539642971707508, 0.00016965076792985201, 0.000103937549283728, 0.00014983121945988387, 0.00013076176401227713, 9.2799062258563936e-05, 6.2790175434201956e-05, 0.00017539889086037874, 8.4005689132027328e-05, 0.00017340070917271078, 0.00012060048902640119, 0.00014334652223624289, 9.0300076408311725e-05, 0.00019994235481135547, 7.5249939982313663e-05, 0.00016124379180837423, 0.00015126455400604755, 0.0001241435093106702, 0.00014317459135781974, 9.865588799584657e-05, 0.00014830449072178453, 0.00013804252375848591, 0.00016500148922204971, 6.7271968873683363e-05, 0.00020340750052127987, 0.00011151919170515612, 0.00014643263421021402, 6.5617823565844446e-05, 0.00015377247473224998, 0.00013046558888163418, 0.00015385996084660292, 0.00019705099111888558, 0.00018788719899021089, 0.00014103346620686352, 0.00017092833877541125, 0.00016840315947774798, 5.9104768297402188e-05, 0.00017181111616082489, 6.4442632719874382e-05, 0.00010488933912711218, 0.00013954154564999044, 0.00013293788651935756, 0.00011026741412933916, 0.00013618601951748133, } };
const TfArray<48, int> quant39_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(8) int32_t tensor_data40[48] = { -595, 113, 14148, 2649, -552, -7391, -1885, 15423, 8654, -3677, -2986, -8489, -1956, 22801, 13600, -572, 7433, -7537, 3553, -2236, 21004, -4538, -2153, -1906, 3156, -5807, -28, -3296, 10043, -31825, -3529, 996, -4762, -1812, -2019, -2162, 11437, -7097, -151, -15851, -3390, 7197, -6873, -1133, 3146, -4898, 9473, -4206, };
const TfArray<1, int> tensor_dimension40 = { 1, { 48 } };
const TfArray<48, float> quant40_scale = { 48, { 0.00023815066379029304, 0.00013999197108205408, 7.1295558882411569e-05, 8.2821919932030141e-05, 0.00020657855202443898, 9.5797317044343799e-05, 0.00022371712839230895, 0.00010390851821284741, 0.00012825652083847672, 0.00036090050707571208, 0.00025842952891252935, 5.7329914852743968e-05, 0.00024240245693363249, 5.6705026509007439e-05, 9.677401976659894e-05, 0.00016112941375467926, 0.00011358061601640657, 9.9951364973094314e-05, 0.00012708098802249879, 0.00023156602401286364, 6.7029577621724457e-05, 0.0001342046307399869, 0.00019831808458548039, 0.00017738960741553456, 0.00014293419371824712, 0.00022102100774645805, 0.00020859965297859162, 0.00033317419001832604, 8.1697704445105046e-05, 7.5807205575983971e-05, 0.00017943185230251402, 0.00018121060566045344, 5.9872920246561989e-05, 0.00028216445934958756, 6.868900527479127e-05, 0.00010597210348350927, 0.00012253351451363415, 7.2148257459048182e-05, 6.3471707107964903e-05, 7.2998132964130491e-05, 0.00019080763740930706, 0.00011046154395444319, 0.00019112898735329509, 0.00015459702990483493, 0.00012694648467004299, 7.8509350714739412e-05, 0.00012474901450332254, 0.00012355897342786193, } };
const TfArray<48, int> quant40_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(8) int32_t tensor_data41[48] = { 1936, -1969, 4688, 2469, 4629, 104, 2331, 4908, -2882, -1821, -1364, 13001, 4505, 4762, 8258, -4419, -4241, 11222, 3211, 6197, 5011, 28444, 17826, 1123, -1941, 2317, -569, -1271, 2565, 2231, 6770, 10276, -1258, 362, 14392, 5469, 11801, 2950, 1790, -1844, 4820, -2715, 14190, -488, 389, 2298, -2574, 5679, };
const TfArray<1, int> tensor_dimension41 = { 1, { 48 } };
const TfArray<48, float> quant41_scale = { 48, { 0.00017925848078448325, 0.0001758542493917048, 0.00015950041415635496, 0.0002185207704314962, 0.00010833041596924886, 0.00020359866903163493, 0.00014228052168618888, 0.00015213339065667242, 0.00015845325833652169, 0.00018484260363038629, 0.00022047631500754505, 5.8665773394750431e-05, 0.00014231519890017807, 0.00012430737842805684, 0.00010556729830568656, 0.00012557476293295622, 0.00014154029486235231, 8.6734085925854743e-05, 0.00019294772937428206, 0.00012396382226143032, 0.00015757438086438924, 3.7515903386520222e-05, 5.4810756410006434e-05, 0.00018828526663128287, 0.00019435855210758746, 0.00011819114297395572, 0.00017574279627297074, 0.0001724079338600859, 0.00016763179155532271, 0.0001836992014432326, 9.7438809461891651e-05, 8.6516331066377461e-05, 0.0001679908309597522, 0.00024120009038597345, 6.3259183662012219e-05, 0.00010877720342250541, 7.2638344136066735e-05, 0.0001962212409125641, 0.00019515643361955881, 0.0002044203138211742, 0.00012072546087438241, 0.00017808083794079721, 6.319698877632618e-05, 0.00024159419990610331, 0.00021831334743183106, 0.00023360839986708015, 0.00017288289382122457, 0.0001303795725107193, } };
const TfArray<48, int> quant41_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(8) int32_t tensor_data42[48] = { 60526, -3557, 54162, 33111, 53930, -72, 591, 39021, 1782, 4944, -9525, 31618, 3346, 47393, 75464, 20835, -8833, 71889, 59270, 49401, 44706, -16186, 888, -262, 1756, -949, -26084, -728, -4420, 51570, 74718, 50452, 21567, 48180, -7644, 17249, 44833, 46355, 43855, 9, 55650, 115, -6012, 60750, 53865, -1439, -653, 46326, };
const TfArray<1, int> tensor_dimension42 = { 1, { 48 } };
const TfArray<48, float> quant42_scale = { 48, { 3.0536470148945227e-05, 6.1094920965842903e-05, 3.1162933737505227e-05, 2.6539702957961708e-05, 3.3241150958929211e-05, 3.4433356631780043e-05, 3.3165117201860994e-05, 3.1785177270649001e-05, 4.5061493437970057e-05, 5.177957791602239e-05, 4.0132403228199109e-05, 5.1665439968928695e-05, 3.5672444937517866e-05, 3.0558541766367853e-05, 3.9707469113636762e-05, 4.585468559525907e-05, 8.3761326095554978e-05, 5.0102564273402095e-05, 1.891049396363087e-05, 3.0046227038837969e-05, 3.2092739274958149e-05, 0.00015563319902867079, 0.00010341960296500474, 3.4307235182495788e-05, 5.1703540520975366e-05, 0.00011190851364517584, 4.1919065552065149e-05, 4.6427408960880712e-05, 6.4940970332827419e-05, 2.3324824724113569e-05, 3.0945193429943174e-05, 4.6801585995126516e-05, 4.1866594983730465e-05, 2.1602234482998028e-05, 7.4119772762060165e-05, 4.4864220399176702e-05, 7.9761965025682002e-05, 2.4124652554746717e-05, 2.8906977604492567e-05, 5.0112295866711065e-05, 2.8747612304869108e-05, 4.8226993385469541e-05, 4.4598935346584767e-05, 2.5040142645593733e-05, 2.672387745406013e-05, 3.3890908525791019e-05, 6.9744171923957765e-05, 3.3236447052331641e-05, } };
const TfArray<48, int> quant42_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int8_t tensor_data43[8*3*3*1] = { 
  /* [0][0][][] */ -57, 50, 9, 
  /* [0][1][][] */ -127, 121, 0, 
  /* [0][2][][] */ -42, 46, 0, 
  /* [1][0][][] */ 57, 127, 35, 
  /* [1][1][][] */ -68, -79, -44, 
  /* [1][2][][] */ 7, -41, 6, 
  /* [2][0][][] */ 31, 28, -47, 
  /* [2][1][][] */ 52, 69, -127, 
  /* [2][2][][] */ 21, 32, -58, 
  /* [3][0][][] */ 42, 53, 20, 
  /* [3][1][][] */ 53, 74, 26, 
  /* [3][2][][] */ -80, -127, -58, 
  /* [4][0][][] */ 4, -53, 47, 
  /* [4][1][][] */ 16, -127, 112, 
  /* [4][2][][] */ 5, -37, 32, 
  /* [5][0][][] */ 2, -56, 0, 
  /* [5][1][][] */ -1, 127, 2, 
  /* [5][2][][] */ 1, -75, 0, 
  /* [6][0][][] */ -15, -83, -1, 
  /* [6][1][][] */ -24, -127, -6, 
  /* [6][2][][] */ -14, -53, 5, 
  /* [7][0][][] */ 44, -127, 30, 
  /* [7][1][][] */ -19, -3, -11, 
  /* [7][2][][] */ -24, 75, -12, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant43_scale = { 8, { 0.016282709315419197, 0.019091496244072914, 0.021089721471071243, 0.012558460235595703, 0.031625732779502869, 0.026365341618657112, 0.001485481159761548, 0.0042622904293239117, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const ALIGN(8) int8_t tensor_data44[8*1*1*8] = { 
  /* [0][0][][] */ -24,-3,-45,-34,-19,37,-127,-8, 
  /* [1][0][][] */ 18,92,-1,127,9,-7,-10,-36, 
  /* [2][0][][] */ 127,-5,-35,-57,-68,46,97,-53, 
  /* [3][0][][] */ 11,-127,42,-83,16,-86,27,59, 
  /* [4][0][][] */ 127,-3,-61,-9,30,-4,-127,-48, 
  /* [5][0][][] */ 3,-33,4,37,3,-127,-1,10, 
  /* [6][0][][] */ 127,-27,114,2,108,-30,-4,8, 
  /* [7][0][][] */ -127,-3,-94,-4,-99,8,33,7, 
};
const TfArray<4, int> tensor_dimension44 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant44_scale = { 8, { 0.0030032673384994268, 0.0048306840471923351, 0.0035375126171857119, 0.0021063112653791904, 0.0054697110317647457, 0.009011988528072834, 0.0039576874114573002, 0.007405315525829792, } };
const TfArray<8, int> quant44_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const ALIGN(8) int8_t tensor_data45[48*1*1*8] = { 
  /* [0][0][][] */ -103,-104,22,-127,-61,-3,-4,-2, 
  /* [1][0][][] */ -127,-15,98,0,-51,23,3,17, 
  /* [2][0][][] */ 22,-11,21,127,25,-26,-17,-5, 
  /* [3][0][][] */ -107,-70,-26,-14,39,127,-45,-36, 
  /* [4][0][][] */ -6,-30,-8,-2,-9,8,-127,-70, 
  /* [5][0][][] */ -2,-35,-14,-2,-11,10,-127,-70, 
  /* [6][0][][] */ 127,7,16,-11,-67,18,2,-5, 
  /* [7][0][][] */ -127,-29,-15,5,68,12,-1,10, 
  /* [8][0][][] */ 22,42,-12,-11,-28,-127,41,17, 
  /* [9][0][][] */ 76,21,-13,-6,-23,-3,-8,127, 
  /* [10][0][][] */ 119,-11,-123,9,-88,-9,43,127, 
  /* [11][0][][] */ -127,104,8,-37,86,-68,9,23, 
  /* [12][0][][] */ 127,-35,-107,13,52,-4,-9,-21, 
  /* [13][0][][] */ 127,10,14,-13,-29,27,8,-13, 
  /* [14][0][][] */ -123,-83,96,-25,73,-13,-41,-127, 
  /* [15][0][][] */ 33,75,1,-4,-9,-127,-18,8, 
  /* [16][0][][] */ -11,-66,11,4,11,127,12,6, 
  /* [17][0][][] */ 32,-126,-73,-6,-35,127,-58,-16, 
  /* [18][0][][] */ 41,-18,-15,-17,-19,27,127,-13, 
  /* [19][0][][] */ -5,23,-2,-127,-10,35,-3,-10, 
  /* [20][0][][] */ -78,-31,74,10,56,101,-4,-127, 
  /* [21][0][][] */ -21,-6,34,-25,-18,12,-127,-80, 
  /* [22][0][][] */ 70,-10,8,127,-17,-11,56,40, 
  /* [23][0][][] */ 127,-13,-117,-10,29,-25,11,6, 
  /* [24][0][][] */ -32,21,28,34,10,2,-127,-85, 
  /* [25][0][][] */ 127,11,-86,8,14,-6,6,26, 
  /* [26][0][][] */ -1,54,-32,-127,-28,23,3,-2, 
  /* [27][0][][] */ 127,19,-110,-3,-105,47,22,79, 
  /* [28][0][][] */ -127,-22,-21,17,55,10,-2,33, 
  /* [29][0][][] */ -8,-127,-15,-125,-10,27,-17,-22, 
  /* [30][0][][] */ 1,92,127,34,37,-104,113,35, 
  /* [31][0][][] */ -75,-5,-127,46,1,-23,94,103, 
  /* [32][0][][] */ -3,-122,2,-127,-12,12,-10,-17, 
  /* [33][0][][] */ 15,-127,-3,-124,9,14,5,-27, 
  /* [34][0][][] */ -29,-50,32,-96,36,-55,127,80, 
  /* [35][0][][] */ -127,10,55,5,-112,-24,28,99, 
  /* [36][0][][] */ -127,15,117,-3,-44,17,-32,37, 
  /* [37][0][][] */ 127,12,-6,-7,-75,20,1,16, 
  /* [38][0][][] */ -75,1,83,37,64,-54,48,127, 
  /* [39][0][][] */ -127,-5,74,-2,-70,13,-9,5, 
  /* [40][0][][] */ -4,25,44,-16,26,-7,127,47, 
  /* [41][0][][] */ 127,-13,-74,3,54,14,7,-7, 
  /* [42][0][][] */ -15,-127,31,-9,16,6,-4,-19, 
  /* [43][0][][] */ 7,121,127,-7,51,-101,76,8, 
  /* [44][0][][] */ 6,-13,-3,117,0,-127,-2,3, 
  /* [45][0][][] */ 127,-31,35,-7,-61,105,10,1, 
  /* [46][0][][] */ 13,127,-15,105,0,127,26,39, 
  /* [47][0][][] */ -14,37,13,-27,27,-36,127,72, 
};
const TfArray<4, int> tensor_dimension45 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant45_scale = { 48, { 0.0052172639407217503, 0.0076210089027881622, 0.0010466622188687325, 0.0092311576008796692, 0.0063959560357034206, 0.0056246477179229259, 0.014708666130900383, 0.0088800685480237007, 0.011699141934514046, 0.0067761829122900963, 0.00187105149962008, 0.0048245666548609734, 0.0061891279183328152, 0.012467535212635994, 0.006817519199103117, 0.020315570756793022, 0.012237075716257095, 0.0039839912205934525, 0.013829194940626621, 0.019710788503289223, 0.010607576929032803, 0.0051924637518823147, 0.0014317211462184787, 0.0062791919335722923, 0.015702318400144577, 0.011183133348822594, 0.011186578311026096, 0.0051572299562394619, 0.010352658107876778, 0.0091731976717710495, 0.0038924014661461115, 0.0071135987527668476, 0.0097429128363728523, 0.003451833501458168, 0.0045781866647303104, 0.0046203546226024628, 0.0067619113251566887, 0.012392358854413033, 0.0061281546950340271, 0.0080250483006238937, 0.017763925716280937, 0.0081899547949433327, 0.010859432630240917, 0.0030262712389230728, 0.016349527984857559, 0.0059971902519464493, 0.0073303012177348137, 0.0053932634182274342, } };
const TfArray<48, int> quant45_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const ALIGN(8) int8_t tensor_data46[8*1*1*48] = { 
  /* [0][0][][] */ 49,106,-40,71,-2,-5,-23,10,63,-65,2,-26,10,8,-35,-53,1,-19,32,15,-58,-30,-34,8,17,15,26,-2,16,11,-21,28,-63,12,113,-127,-23,22,-12,115,-29,14,12,-1,-14,37,25,-43, 
  /* [1][0][][] */ 0,-48,35,52,-13,-13,-19,-22,46,-44,93,45,20,10,-46,-82,127,42,17,10,-73,33,37,-13,-49,-94,-32,-51,-12,-60,43,-41,-11,-23,-31,12,5,-19,85,-51,-13,33,-61,37,77,64,15,49, 
  /* [2][0][][] */ 77,-27,-14,-16,108,110,61,76,-29,-6,1,-31,-7,46,59,29,-26,-34,60,-68,-41,-50,-45,60,-93,-94,118,20,60,-67,-60,20,-127,86,106,19,-9,-2,-6,18,27,68,16,-62,-21,18,55,-45, 
  /* [3][0][][] */ 81,-31,16,-11,121,126,27,47,-37,-30,29,56,-127,42,69,24,7,11,76,-110,-94,18,35,90,7,-35,54,28,49,-58,2,-11,-119,63,-64,-122,23,-39,67,-51,53,-96,-111,-28,-63,42,-14,63, 
  /* [4][0][][] */ 37,42,-29,-38,-12,-10,-19,-18,4,-3,-8,-13,-33,-20,63,51,-40,-17,-34,43,30,-13,-14,4,-49,-41,-4,53,-13,12,-22,28,-31,-16,26,-127,-9,26,11,54,7,-12,-11,-24,43,2,86,-21, 
  /* [5][0][][] */ 68,58,-92,50,7,6,-8,30,-84,-60,-59,-22,35,21,43,26,39,-64,43,127,-71,-47,-56,51,32,-22,-35,67,33,31,-56,3,-3,2,-59,1,-7,18,-23,69,17,78,-6,-42,122,30,16,-61, 
  /* [6][0][][] */ -31,-74,20,-47,-42,-40,-80,-75,-35,-64,-116,42,-55,-51,97,91,-127,9,22,-19,18,56,68,11,-11,-9,-73,86,-82,-38,44,76,15,-56,88,38,26,45,-11,-86,-14,-60,-30,17,-42,-19,-10,63, 
  /* [7][0][][] */ 75,19,-18,42,14,14,9,4,82,-8,-13,-19,58,6,-12,-22,-53,-7,-29,1,1,-20,-23,-27,70,-127,16,-1,0,97,-17,18,-75,23,-59,-46,-15,27,28,24,24,68,-36,-16,-43,30,42,-25, 
};
const TfArray<4, int> tensor_dimension46 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant46_scale = { 8, { 0.0063191456720232964, 0.0056397188454866409, 0.0043555283918976784, 0.0027636829763650894, 0.0068573746830224991, 0.0055829053744673729, 0.005198752973228693, 0.0061262934468686581, } };
const TfArray<8, int> quant46_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const ALIGN(8) int8_t tensor_data47[48*1*1*8] = { 
  /* [0][0][][] */ -16,32,12,-127,-96,6,31,118, 
  /* [1][0][][] */ 100,6,-13,-1,-87,49,127,24, 
  /* [2][0][][] */ -5,112,-39,-28,-35,88,-49,-127, 
  /* [3][0][][] */ 63,-72,-88,117,-127,-43,-3,-25, 
  /* [4][0][][] */ 39,-63,46,-16,-127,-2,50,26, 
  /* [5][0][][] */ -17,50,-10,-92,-127,-4,-31,8, 
  /* [6][0][][] */ 51,-19,36,31,127,-26,-8,-122, 
  /* [7][0][][] */ 15,34,21,127,23,-6,-2,22, 
  /* [8][0][][] */ 23,26,15,-45,33,127,11,-28, 
  /* [9][0][][] */ 119,29,-12,19,-64,-53,127,77, 
  /* [10][0][][] */ 2,68,-73,-33,3,127,83,-58, 
  /* [11][0][][] */ -16,-35,-127,98,-62,28,-13,75, 
  /* [12][0][][] */ -98,-85,55,48,30,-127,-43,10, 
  /* [13][0][][] */ 39,33,32,51,-58,127,14,-40, 
  /* [14][0][][] */ 7,-95,6,-4,-63,-73,-127,105, 
  /* [15][0][][] */ -87,42,-6,5,93,-2,-127,-47, 
  /* [16][0][][] */ 91,78,-100,-127,55,122,111,35, 
  /* [17][0][][] */ -107,120,-127,41,-10,-23,22,-113, 
  /* [18][0][][] */ 35,-4,-91,127,-10,-36,-40,-60, 
  /* [19][0][][] */ 117,16,10,30,-43,8,127,48, 
  /* [20][0][][] */ 39,-73,-89,127,48,-29,-26,-63, 
  /* [21][0][][] */ 22,50,127,-104,43,-27,28,-102, 
  /* [22][0][][] */ -81,-37,-127,58,-28,33,6,121, 
  /* [23][0][][] */ 76,26,32,41,-127,108,59,-42, 
  /* [24][0][][] */ -11,1,-127,79,-38,30,43,66, 
  /* [25][0][][] */ 47,-34,-75,127,52,-1,-37,-13, 
  /* [26][0][][] */ -79,23,127,-98,-19,31,62,-8, 
  /* [27][0][][] */ -68,80,127,2,20,-10,74,18, 
  /* [28][0][][] */ -54,-96,38,-127,-20,9,-4,-25, 
  /* [29][0][][] */ -78,-78,-19,87,-7,-127,-13,56, 
  /* [30][0][][] */ -127,48,113,-29,40,37,64,25, 
  /* [31][0][][] */ -59,50,84,-127,-45,17,34,61, 
  /* [32][0][][] */ -77,87,93,-108,11,2,8,127, 
  /* [33][0][][] */ 6,111,-49,51,23,18,-127,-27, 
  /* [34][0][][] */ 88,15,127,-108,-90,-111,45,-43, 
  /* [35][0][][] */ 85,-5,30,106,79,-69,26,-127, 
  /* [36][0][][] */ 22,63,127,-106,25,-25,40,-110, 
  /* [37][0][][] */ -56,-46,99,64,1,-127,93,-12, 
  /* [38][0][][] */ 77,1,75,41,-30,-49,127,19, 
  /* [39][0][][] */ 52,-79,-25,10,-127,6,76,63, 
  /* [40][0][][] */ -40,36,-127,105,-49,49,-80,114, 
  /* [41][0][][] */ -108,-19,-49,0,127,14,-92,14, 
  /* [42][0][][] */ -82,59,-24,-31,127,34,-111,-50, 
  /* [43][0][][] */ 127,113,-37,123,-1,-96,54,70, 
  /* [44][0][][] */ -5,17,90,4,40,-127,19,-27, 
  /* [45][0][][] */ -7,-76,127,79,-31,-18,-117,16, 
  /* [46][0][][] */ 46,-120,-127,55,-85,30,-5,-18, 
  /* [47][0][][] */ -106,-28,43,-7,78,37,-127,-34, 
};
const TfArray<4, int> tensor_dimension47 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant47_scale = { 48, { 0.0024695855099707842, 0.0037885110359638929, 0.00073481135768815875, 0.0038412290159612894, 0.0051589338108897209, 0.0030386927537620068, 0.0040037180297076702, 0.0091231269761919975, 0.0044651017524302006, 0.0036188941448926926, 0.0023280221503227949, 0.0063932160846889019, 0.003886770224198699, 0.0036950453650206327, 0.0037627960555255413, 0.003151704091578722, 0.0031935675069689751, 0.0034701069816946983, 0.0063859815709292889, 0.0024790752213448286, 0.0044699353165924549, 0.0061357193626463413, 0.0047437325119972229, 0.001486231223680079, 0.0010932025033980608, 0.0034648606088012457, 0.0038951931055635214, 0.0050153057090938091, 0.0084955701604485512, 0.0025840471498668194, 0.0022995462641119957, 0.0018086304189637303, 0.0015491142403334379, 0.0033344132825732231, 0.002096469746902585, 0.0037713476922363043, 0.0058126887306571007, 0.0035388164687901735, 0.0018742986721917987, 0.0023034757468849421, 0.0042610457167029381, 0.0012838562251999974, 0.0014584370655938983, 0.0028220503591001034, 0.0025181339588016272, 0.0057127918116748333, 0.0034962284844368696, 0.0039790929295122623, } };
const TfArray<48, int> quant47_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const ALIGN(8) int8_t tensor_data48[8*1*1*48] = { 
  /* [0][0][][] */ 38,-47,101,67,29,-39,23,9,-3,56,-31,15,-48,-82,40,4,-107,65,-34,68,-43,70,2,-29,-1,-45,66,-28,-24,25,-32,105,-62,-10,-33,-83,-62,-46,-38,-12,-11,60,-127,10,55,24,27,53, 
  /* [1][0][][] */ -55,-32,60,-6,-27,30,-36,-30,46,-10,-2,-30,-17,15,1,20,1,21,15,-11,-58,-28,-72,-23,23,-37,-30,-33,22,-71,-8,-127,-7,-58,-67,-69,-40,-84,-23,21,41,-16,81,-105,-51,-16,-24,-6, 
  /* [2][0][][] */ -60,93,-7,38,16,11,22,-37,76,-44,71,83,100,16,32,-58,97,1,7,28,-13,20,14,127,-112,-43,9,-21,-1,83,-21,-87,-20,2,5,-79,-24,8,-38,-17,87,-84,23,-5,29,-121,0,-15, 
  /* [3][0][][] */ 61,-19,-62,32,85,-83,3,-120,-34,-8,-60,-89,-21,127,-12,20,-45,-16,-67,-48,32,83,-10,-54,113,44,53,-70,32,-94,53,-65,55,64,113,-75,-46,18,-31,45,23,87,-80,29,-3,26,8,38, 
  /* [4][0][][] */ -54,31,-43,69,94,-29,29,-45,-39,-5,-62,34,-45,-16,4,-60,11,63,-32,-41,-43,37,-70,-64,19,-10,20,-38,33,-38,-31,62,-7,77,-71,-75,-63,-63,-37,-1,66,-54,127,22,1,86,-56,-52, 
  /* [5][0][][] */ 54,8,83,-8,-6,19,53,32,127,-2,69,1,72,54,27,-61,-13,34,32,-44,-55,-71,15,43,20,-12,26,43,-38,-27,18,-19,-22,50,-20,58,49,0,-29,-46,-8,70,34,40,-18,-8,71,8, 
  /* [6][0][][] */ -5,-65,-18,12,35,-6,-1,11,-47,-18,107,57,96,68,-36,49,119,-127,-20,1,-10,-42,-103,32,-75,71,-36,-3,-19,-51,69,-54,96,13,-73,-22,-44,4,55,10,76,-72,-4,-74,-110,50,-43,25, 
  /* [7][0][][] */ -14,-24,-59,-33,19,105,-1,-4,-7,-53,-127,-100,46,52,-59,-47,-35,25,104,22,-14,-75,58,-13,110,-29,-76,90,-41,-8,-25,-83,-49,70,50,117,90,-57,-22,-40,-24,-7,38,-18,-4,-26,4,-55, 
};
const TfArray<4, int> tensor_dimension48 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant48_scale = { 8, { 0.0056594368070363998, 0.0058890972286462784, 0.0061772032640874386, 0.0091850850731134415, 0.0055113872513175011, 0.0057581379078328609, 0.0032286914065480232, 0.0051820087246596813, } };
const TfArray<8, int> quant48_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const ALIGN(8) int8_t tensor_data49[48*1*1*8] = { 
  /* [0][0][][] */ 41,22,-49,5,-42,55,-127,27, 
  /* [1][0][][] */ 4,-63,-126,-3,-9,-22,127,-109, 
  /* [2][0][][] */ -127,-50,-73,-50,-34,55,-127,-6, 
  /* [3][0][][] */ -57,-36,17,-12,-24,-127,-108,-20, 
  /* [4][0][][] */ -45,-127,-46,18,61,22,-41,-43, 
  /* [5][0][][] */ 76,-35,93,54,-127,63,-78,-106, 
  /* [6][0][][] */ 38,-127,-65,-32,-13,65,-45,-84, 
  /* [7][0][][] */ -26,-87,-58,-64,73,-127,1,22, 
  /* [8][0][][] */ 34,65,48,61,34,-49,-6,127, 
  /* [9][0][][] */ -26,-57,-52,8,45,-16,127,-12, 
  /* [10][0][][] */ -31,19,-127,22,23,20,99,-110, 
  /* [11][0][][] */ 4,-35,-34,1,-127,19,4,53, 
  /* [12][0][][] */ 93,63,-22,39,-79,127,83,-10, 
  /* [13][0][][] */ -47,-5,20,-20,42,-127,-4,69, 
  /* [14][0][][] */ -104,-49,10,37,11,69,-124,-127, 
  /* [15][0][][] */ 61,85,47,3,-127,42,114,-54, 
  /* [16][0][][] */ -3,-55,5,74,-9,-69,7,-127, 
  /* [17][0][][] */ -80,127,27,-13,-63,-49,-84,-81, 
  /* [18][0][][] */ 96,127,-87,-99,93,102,-92,-82, 
  /* [19][0][][] */ -28,79,-15,11,-127,7,-70,-98, 
  /* [20][0][][] */ -127,-3,6,13,24,20,104,48, 
  /* [21][0][][] */ -31,-4,53,16,-92,-107,-127,26, 
  /* [22][0][][] */ -5,-35,-47,-6,-127,3,5,60, 
  /* [23][0][][] */ 61,4,-16,-14,127,63,-86,81, 
  /* [24][0][][] */ 127,10,-51,25,-90,6,8,-5, 
  /* [25][0][][] */ 30,-60,64,109,-49,-127,26,108, 
  /* [26][0][][] */ 22,127,8,56,79,-19,21,-17, 
  /* [27][0][][] */ -127,114,62,-19,123,-68,1,95, 
  /* [28][0][][] */ -74,-73,-59,-35,79,-127,22,-16, 
  /* [29][0][][] */ -55,-25,47,41,127,-94,-85,72, 
  /* [30][0][][] */ 127,47,-118,-103,-77,-88,-76,-69, 
  /* [31][0][][] */ 26,3,39,64,-127,8,35,5, 
  /* [32][0][][] */ 127,17,51,40,-37,-59,88,62, 
  /* [33][0][][] */ 127,33,-45,10,-121,-63,27,49, 
  /* [34][0][][] */ 40,-13,-22,20,-46,127,18,-73, 
  /* [35][0][][] */ 127,39,-21,-37,40,-100,29,126, 
  /* [36][0][][] */ -34,-43,70,-95,-28,-15,79,-127, 
  /* [37][0][][] */ 81,-69,63,49,113,-9,38,-127, 
  /* [38][0][][] */ 67,127,10,-30,-26,22,26,80, 
  /* [39][0][][] */ 26,0,-76,73,-28,-63,-77,127, 
  /* [40][0][][] */ -16,-31,-3,-32,26,-127,23,43, 
  /* [41][0][][] */ -33,48,-127,-67,91,119,66,-111, 
  /* [42][0][][] */ 30,-47,-37,13,73,127,31,54, 
  /* [43][0][][] */ 0,49,-29,27,-127,-80,56,-59, 
  /* [44][0][][] */ -127,-50,-13,-34,52,54,-112,-72, 
  /* [45][0][][] */ -62,60,-55,17,33,-5,-69,127, 
  /* [46][0][][] */ -24,52,127,1,-57,-54,-52,40, 
  /* [47][0][][] */ -127,-115,-45,-53,104,117,-33,88, 
};
const TfArray<4, int> tensor_dimension49 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant49_scale = { 48, { 0.0029956423677504063, 0.0017039993545040488, 0.0017193841049447656, 0.0029110100585967302, 0.0048960698768496513, 0.00086539326002821326, 0.0025078400503844023, 0.0025116764008998871, 0.0010522813536226749, 0.0039151315577328205, 0.0020862254314124584, 0.0028063477948307991, 0.0018131709657609463, 0.0028841402381658554, 0.0032383059151470661, 0.0022099204361438751, 0.0026173472870141268, 0.0012126922374591231, 0.0016786442138254642, 0.0035106041468679905, 0.0036794606130570173, 0.0026919934898614883, 0.0029562516137957573, 0.002943247789517045, 0.0034533604048192501, 0.001877743168734014, 0.00259168422780931, 0.0021023023873567581, 0.0027926703914999962, 0.0017193206585943699, 0.0011661882745102048, 0.0023571501951664686, 0.0033326835837215185, 0.0029568213503807783, 0.0027774106711149216, 0.0028435890562832355, 0.0024406011216342449, 0.0011238777078688145, 0.0036201805341988802, 0.002564919413998723, 0.0013982632663100958, 0.0012973508564755321, 0.0036891563795506954, 0.0030573478434234858, 0.0026646093465387821, 0.0024792002514004707, 0.00094610097585245967, 0.0017713183769956231, } };
const TfArray<48, int> quant49_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const ALIGN(8) int8_t tensor_data50[8*1*1*48] = { 
  /* [0][0][][] */ -18,-28,48,-51,57,86,69,94,109,-47,-19,59,-28,-21,17,-19,45,43,13,-53,-30,22,-88,-38,32,-9,22,-74,-35,28,44,24,25,48,64,16,120,-54,-77,5,-55,-67,-31,0,-72,-86,-127,58, 
  /* [1][0][][] */ -11,0,-40,49,1,12,-40,-17,-57,25,18,86,-29,2,-26,127,39,59,11,-30,-43,-21,-67,21,13,-8,-17,-86,48,-10,-57,-66,62,-32,-33,-57,33,36,52,-41,6,69,50,-41,0,-36,-51,-22, 
  /* [2][0][][] */ 6,-71,-27,-5,-31,17,4,11,110,17,-7,-17,-29,-76,37,8,1,-61,-23,-4,-99,50,6,29,7,46,-37,-26,-20,-37,41,-47,-99,29,-50,55,-67,60,-20,-23,127,-20,-3,41,30,40,-57,-36, 
  /* [3][0][][] */ -31,-114,96,59,24,-108,-18,-14,-127,127,61,-53,54,10,-22,21,58,35,-29,46,75,86,32,-63,12,87,64,32,-29,-72,14,14,-25,6,53,10,-17,-83,-40,43,-27,-11,21,-69,-82,18,0,26, 
  /* [4][0][][] */ -11,55,-17,72,33,4,10,-2,-54,78,47,73,1,21,61,14,7,-103,-8,-14,89,-12,-97,59,72,-23,30,29,48,26,-11,-54,-52,127,3,16,59,-25,20,23,-26,43,-1,-24,2,-50,-32,19, 
  /* [5][0][][] */ -27,1,-8,-72,-127,33,118,27,13,60,-26,-28,-106,-8,59,-33,-85,40,-59,-85,-1,104,-3,36,107,27,-6,15,-26,-18,125,-54,-11,104,77,89,-22,52,87,38,-26,-40,-27,36,-64,50,26,55, 
  /* [6][0][][] */ 2,-22,-11,27,-55,-53,15,3,23,-13,41,6,-52,-25,33,56,5,-60,7,-59,69,-24,-1,-31,8,-2,9,38,41,2,10,127,44,-15,-13,22,3,-8,21,15,0,36,-27,-51,-3,-24,-21,37, 
  /* [7][0][][] */ -26,-16,-44,-4,6,-26,5,10,40,5,23,-1,-6,12,1,-1,30,-7,2,-5,-59,10,9,-26,0,-5,-52,-12,-13,-17,17,29,18,-9,29,11,-21,127,-12,-40,-40,-1,-46,-33,22,64,-69,-12, 
};
const TfArray<4, int> tensor_dimension50 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant50_scale = { 8, { 0.0044078095816075802, 0.006006273441016674, 0.0047021820209920406, 0.0052992375567555428, 0.0054938825778663158, 0.0047207796014845371, 0.0086245620623230934, 0.0091210557147860527, } };
const TfArray<8, int> quant50_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const ALIGN(8) int8_t tensor_data51[48*1*1*8] = { 
  /* [0][0][][] */ -80,-127,-34,28,-35,-11,52,-49, 
  /* [1][0][][] */ -12,127,44,-84,5,-88,-72,95, 
  /* [2][0][][] */ -127,-65,36,8,69,4,31,-15, 
  /* [3][0][][] */ 2,-40,-127,-58,34,-50,-34,55, 
  /* [4][0][][] */ -60,-114,102,-24,127,-57,55,2, 
  /* [5][0][][] */ -22,66,54,-93,101,34,-53,127, 
  /* [6][0][][] */ -127,100,54,74,-52,1,43,-126, 
  /* [7][0][][] */ 41,-16,59,29,52,-127,-4,104, 
  /* [8][0][][] */ -7,70,-11,-36,20,108,127,-72, 
  /* [9][0][][] */ 82,127,10,-70,-82,-67,-55,117, 
  /* [10][0][][] */ 31,-9,30,2,-21,35,-127,-79, 
  /* [11][0][][] */ -69,14,-104,-72,127,21,38,56, 
  /* [12][0][][] */ 85,36,-27,-5,127,91,13,6, 
  /* [13][0][][] */ -127,-121,-8,55,-99,47,68,9, 
  /* [14][0][][] */ -10,104,-90,127,-57,125,-16,34, 
  /* [15][0][][] */ -17,-84,-35,-93,127,65,-33,63, 
  /* [16][0][][] */ 68,-84,1,45,37,-15,34,-127, 
  /* [17][0][][] */ -84,-84,-127,100,9,97,74,-107, 
  /* [18][0][][] */ 80,-11,127,10,-34,-115,-81,-35, 
  /* [19][0][][] */ -23,127,29,30,98,-117,-68,-35, 
  /* [20][0][][] */ -68,-13,-127,-40,34,-7,-3,-4, 
  /* [21][0][][] */ -127,-22,46,64,-90,-117,120,-47, 
  /* [22][0][][] */ 55,-8,-127,-70,-37,-9,-6,52, 
  /* [23][0][][] */ -29,34,127,-23,-92,37,-10,-101, 
  /* [24][0][][] */ -89,101,84,109,127,95,0,-40, 
  /* [25][0][][] */ -52,-127,-73,36,-63,37,51,-3, 
  /* [26][0][][] */ 102,120,-127,-61,-121,-26,-65,37, 
  /* [27][0][][] */ 58,54,-64,21,-127,19,-31,-14, 
  /* [28][0][][] */ -25,72,25,-76,77,99,-127,-118, 
  /* [29][0][][] */ 42,-3,-1,-74,-127,5,17,-55, 
  /* [30][0][][] */ -90,-3,40,127,51,21,-37,-18, 
  /* [31][0][][] */ 13,-118,-2,-83,-127,58,-63,-113, 
  /* [32][0][][] */ -127,-2,28,-12,7,-32,1,23, 
  /* [33][0][][] */ 49,-72,-127,-112,-1,15,-55,14, 
  /* [34][0][][] */ 50,86,117,-6,-127,-66,73,-70, 
  /* [35][0][][] */ 107,29,18,11,-110,-43,-127,-51, 
  /* [36][0][][] */ 127,10,79,-37,11,-18,70,79, 
  /* [37][0][][] */ 127,117,-11,-7,83,81,-125,36, 
  /* [38][0][][] */ -42,96,112,127,-29,67,33,-78, 
  /* [39][0][][] */ 30,53,127,-40,90,-56,-37,15, 
  /* [40][0][][] */ 71,42,35,6,-80,-127,28,-51, 
  /* [41][0][][] */ 32,-50,18,127,-24,68,7,77, 
  /* [42][0][][] */ -18,-112,69,-49,127,-33,92,28, 
  /* [43][0][][] */ -8,-32,-106,-36,120,42,-76,127, 
  /* [44][0][][] */ 99,-21,127,-4,6,31,-52,11, 
  /* [45][0][][] */ -31,22,28,-30,-99,-127,-19,100, 
  /* [46][0][][] */ -57,84,77,35,-6,-25,44,-127, 
  /* [47][0][][] */ 40,-11,18,127,-14,-108,76,60, 
};
const TfArray<4, int> tensor_dimension51 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant51_scale = { 48, { 0.0059862155467271805, 0.0024398870300501585, 0.0023501128889620304, 0.0030450501944869757, 0.0028505090158432722, 0.00221993587911129, 0.003122781403362751, 0.0017172106308862567, 0.0017411132575944066, 0.002606360474601388, 0.0034076673910021782, 0.0039584101177752018, 0.0038018040359020233, 0.0031953782308846712, 0.0024421501439064741, 0.0024751194287091494, 0.0035678604617714882, 0.0024711904115974903, 0.0017277671722695231, 0.0037740629632025957, 0.0042007891461253166, 0.0014835090842097998, 0.0035719140432775021, 0.0025837516877800226, 0.0012406037421897054, 0.0023326589725911617, 0.0028348835185170174, 0.001754333614371717, 0.0021573107223957777, 0.0029169507324695587, 0.0042769201099872589, 0.0020503019914031029, 0.0047668321058154106, 0.0020752290729433298, 0.001846094848588109, 0.0031436430290341377, 0.00054011738393455744, 0.0014167634071782231, 0.0023227978963404894, 0.0012243487872183323, 0.0026917897630482912, 0.0042171087116003036, 0.0026557997334748507, 0.0026667607016861439, 0.0034937853924930096, 0.0029544434510171413, 0.00346020283177495, 0.0022919834591448307, } };
const TfArray<48, int> quant51_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const ALIGN(8) int8_t tensor_data52[8*1*1*48] = { 
  /* [0][0][][] */ 46,48,-79,51,13,22,-90,-29,6,-21,0,-37,-16,-1,44,5,47,-17,47,-23,19,-34,41,1,14,-26,-19,18,-13,-1,-18,0,47,21,21,14,127,59,32,-26,3,-20,-6,-21,80,30,20,-48, 
  /* [1][0][][] */ 65,26,9,-5,30,91,-13,-23,33,61,-37,-76,113,-17,17,52,23,37,30,-92,127,-24,41,58,47,30,42,22,30,-68,61,78,60,110,14,120,72,32,25,28,87,16,38,35,25,49,115,-71, 
  /* [2][0][][] */ -21,12,82,127,-50,23,-2,60,34,74,23,-78,-39,115,26,43,-83,-96,80,5,1,62,-58,-82,-29,-39,26,-8,-111,21,2,-7,-37,-29,-87,-45,18,26,-89,-19,-25,-57,-36,23,71,-77,-29,28, 
  /* [3][0][][] */ -26,52,-79,-11,18,-80,6,72,106,-84,-42,11,-7,-20,12,64,23,9,-13,-26,-5,22,-78,38,-23,-30,38,-9,64,-33,43,-53,37,-18,-29,-50,-127,-3,-81,18,-26,-58,38,-4,-54,16,-10,-36, 
  /* [4][0][][] */ 56,-22,36,-22,-62,72,27,68,-125,-50,55,46,77,-58,-71,-67,90,67,62,-31,18,-97,-19,46,-33,3,-51,-127,-56,-58,95,41,85,3,112,93,65,68,56,37,10,39,-51,-31,88,72,93,-52, 
  /* [5][0][][] */ 35,78,17,96,28,27,-52,-103,-100,30,-14,0,26,63,37,-72,78,107,-28,32,-15,-70,-18,-72,-105,-82,-41,59,-2,46,-30,40,-1,-84,67,6,-41,127,-35,-117,-15,-36,-15,-45,-5,-16,-41,96, 
  /* [6][0][][] */ 113,52,-1,127,-89,24,15,66,21,-88,66,87,82,-41,-27,-51,62,26,-72,25,74,-26,-26,-3,8,65,-42,-45,13,-40,65,58,20,-44,-4,93,98,-81,4,10,-88,76,-105,52,59,105,103,-53, 
  /* [7][0][][] */ 20,15,127,42,-35,59,-85,12,-38,95,-8,-10,45,58,15,-4,-51,-11,-59,5,-11,35,0,-40,-9,43,48,-14,4,2,19,-12,-90,-17,64,32,92,-1,37,-10,-21,-33,-32,-49,0,-28,10,25, 
};
const TfArray<4, int> tensor_dimension52 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant52_scale = { 8, { 0.0065308669582009315, 0.0029061539098620415, 0.0025179630611091852, 0.0029045506380498409, 0.003048999235033989, 0.0034119756892323494, 0.002650789450854063, 0.0039041114505380392, } };
const TfArray<8, int> quant52_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const ALIGN(8) int8_t tensor_data53[48*1*1*8] = { 
  /* [0][0][][] */ -127,41,-16,-14,61,33,7,-49, 
  /* [1][0][][] */ -5,-51,-30,-11,-56,-127,13,16, 
  /* [2][0][][] */ -72,69,3,-55,-52,41,-64,127, 
  /* [3][0][][] */ 56,44,53,-18,-50,-127,44,-20, 
  /* [4][0][][] */ 17,60,-122,32,-127,87,45,34, 
  /* [5][0][][] */ -31,45,30,-33,-84,-127,-60,-8, 
  /* [6][0][][] */ -55,127,101,-37,-70,-34,19,-41, 
  /* [7][0][][] */ -7,-2,37,66,1,-127,-5,57, 
  /* [8][0][][] */ 127,26,-79,78,-85,-67,-108,-7, 
  /* [9][0][][] */ 93,-44,-69,-75,8,-21,-47,127, 
  /* [10][0][][] */ -89,3,10,127,4,71,26,-97, 
  /* [11][0][][] */ 25,18,57,-17,10,119,127,94, 
  /* [12][0][][] */ -69,-87,-44,-92,127,-27,-20,38, 
  /* [13][0][][] */ -25,-4,-10,50,19,-127,44,69, 
  /* [14][0][][] */ 81,86,121,20,77,-127,-97,-29, 
  /* [15][0][][] */ -42,75,127,61,-9,20,45,-75, 
  /* [16][0][][] */ -99,-43,47,-74,127,6,-56,-1, 
  /* [17][0][][] */ 36,-48,-46,1,-11,127,-25,41, 
  /* [18][0][][] */ -27,127,81,-49,-64,48,87,-92, 
  /* [19][0][][] */ 16,107,84,127,-28,32,39,34, 
  /* [20][0][][] */ 9,7,65,-127,-62,-1,69,-16, 
  /* [21][0][][] */ -105,79,37,-127,121,73,123,7, 
  /* [22][0][][] */ 75,-33,-95,72,54,-54,-57,127, 
  /* [23][0][][] */ 37,-80,-127,-40,64,-12,-63,93, 
  /* [24][0][][] */ 43,-20,-98,18,-58,35,-127,122, 
  /* [25][0][][] */ -15,-22,55,11,127,-16,-85,-46, 
  /* [26][0][][] */ 11,102,127,-32,-34,-18,53,-68, 
  /* [27][0][][] */ -38,37,127,-86,22,19,89,-121, 
  /* [28][0][][] */ 61,-9,91,127,74,-29,35,101, 
  /* [29][0][][] */ 70,74,107,20,-60,31,-127,91, 
  /* [30][0][][] */ 42,-8,-87,63,-127,-40,-40,57, 
  /* [31][0][][] */ 23,127,97,-64,-73,38,107,-121, 
  /* [32][0][][] */ 64,-15,-12,29,108,127,33,-37, 
  /* [33][0][][] */ 20,-37,-127,6,22,-18,-38,72, 
  /* [34][0][][] */ 24,-56,24,-127,-4,75,-13,11, 
  /* [35][0][][] */ -26,19,89,-6,11,-127,-2,-23, 
  /* [36][0][][] */ -6,15,-32,-127,-13,10,11,-42, 
  /* [37][0][][] */ 64,-14,-22,-89,-85,127,-61,-78, 
  /* [38][0][][] */ 83,-58,-25,98,60,28,-29,127, 
  /* [39][0][][] */ 127,86,33,74,-10,94,-44,-4, 
  /* [40][0][][] */ 49,-116,-127,-38,13,18,-60,114, 
  /* [41][0][][] */ -6,-59,-127,-106,-6,-77,-43,-20, 
  /* [42][0][][] */ 60,110,91,127,-85,-34,30,51, 
  /* [43][0][][] */ 127,-38,-114,-120,-67,-40,29,68, 
  /* [44][0][][] */ -5,83,113,-79,-92,-10,80,-127, 
  /* [45][0][][] */ 41,23,-127,59,-41,33,19,67, 
  /* [46][0][][] */ 51,-44,-77,-127,17,-32,-34,52, 
  /* [47][0][][] */ 81,-122,127,-63,78,-20,8,9, 
};
const TfArray<4, int> tensor_dimension53 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant53_scale = { 48, { 0.00053397135343402624, 0.0020510104950517416, 0.0029189244378358126, 0.0030678317416459322, 0.0019760739523917437, 0.0031807762570679188, 0.0019487214740365744, 0.0028091804124414921, 0.0024516477715224028, 0.0017398863565176725, 0.0011772507568821311, 0.0032885477412492037, 0.0015750196762382984, 0.0032510838937014341, 0.0022611343301832676, 0.0026875990442931652, 0.0016930329147726297, 0.0037487121298909187, 0.0014108584728091955, 0.0030231541022658348, 0.0028360537253320217, 0.0023275623098015785, 0.0026843755040317774, 0.0018496958073228598, 0.002780555747449398, 0.0025881545152515173, 0.0030936072580516338, 0.0012612798018381, 0.0038136800285428762, 0.0020908694714307785, 0.0027454602532088757, 0.0012302662944421172, 0.0028830748051404953, 0.002446094760671258, 0.0028847150970250368, 0.0036945021711289883, 0.0035226903855800629, 0.0026442315429449081, 0.0032047294080257416, 0.0031573849264532328, 0.0011081532575190067, 0.0032212806399911642, 0.0012082325993105769, 0.0019665665458887815, 0.0026162595022469759, 0.0024924478493630886, 0.0020673999097198248, 0.0025533470325171947, } };
const TfArray<48, int> quant53_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const ALIGN(8) int8_t tensor_data54[8*1*1*48] = { 
  /* [0][0][][] */ 127,-23,22,-29,23,53,8,38,107,-79,57,9,-42,64,19,-45,11,-26,-24,-17,10,-58,8,-21,-54,-33,-38,-36,-29,75,-23,36,26,-37,14,-29,63,-63,-53,6,28,-20,-70,-1,57,-27,55,-35, 
  /* [1][0][][] */ 47,0,-8,59,51,58,19,32,65,-81,-2,4,41,21,-36,-12,-35,-43,-67,-5,5,-48,47,76,-3,-61,-4,40,-23,53,-53,127,-25,44,-21,-23,-57,-14,-9,-25,-47,-18,-35,41,20,-5,8,-85, 
  /* [2][0][][] */ -37,-27,-83,35,-84,-31,-12,48,-108,-86,-89,-33,-37,49,-127,-3,75,-89,31,-19,124,86,-26,3,50,97,16,-98,-52,3,65,3,-29,43,73,-67,68,-6,84,98,-45,103,46,-3,-83,71,-40,73, 
  /* [3][0][][] */ -2,-20,-10,36,-24,4,-10,44,73,91,-127,-29,22,-21,-22,78,-56,-17,-6,49,-22,1,74,20,8,12,-51,53,-36,25,-37,-27,13,28,33,17,52,-7,44,2,-57,85,69,20,27,-11,-31,-41, 
  /* [4][0][][] */ -27,-74,17,-46,2,92,-59,-70,1,-48,73,36,-58,-24,-16,27,68,12,-27,45,-74,-27,115,-17,-92,-17,-7,14,19,-23,-12,61,-53,46,-23,55,-34,37,-4,19,-37,39,-34,41,127,55,-11,4, 
  /* [5][0][][] */ -70,-66,57,-127,-20,21,-36,-55,-4,71,-56,71,-83,19,49,9,73,56,73,13,29,-1,-15,-68,42,-76,2,-50,-13,-36,35,-77,-8,-46,54,-8,-18,32,38,65,92,12,16,-28,-15,-12,-31,31, 
  /* [6][0][][] */ -65,-65,39,29,-58,-62,4,-69,-100,14,-127,40,18,-45,52,17,-32,19,17,124,-19,-1,82,48,-78,-20,58,19,16,-33,-34,-68,-34,58,68,-92,-44,78,56,-27,-71,59,80,-60,-7,-45,-37,4, 
  /* [7][0][][] */ 23,-2,13,-14,9,25,-43,-43,-127,-29,99,26,7,-26,30,4,15,44,2,-19,-44,13,-12,-41,36,4,-39,14,-11,-22,-27,-49,-100,-53,-34,5,57,-30,-25,0,57,4,47,-19,17,-41,40,19, 
};
const TfArray<4, int> tensor_dimension54 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant54_scale = { 8, { 0.0064658746123313904, 0.0088484436273574829, 0.0031239800155162811, 0.0053005288355052471, 0.0042757042683660984, 0.0063975281082093716, 0.0039102556183934212, 0.0054946304298937321, } };
const TfArray<8, int> quant54_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const ALIGN(8) int8_t tensor_data55[48*1*1*8] = { 
  /* [0][0][][] */ -12,12,127,-18,-4,54,-4,-85, 
  /* [1][0][][] */ 88,-61,63,-76,-16,-69,127,24, 
  /* [2][0][][] */ 62,63,75,-73,-68,24,127,-26, 
  /* [3][0][][] */ 1,25,5,-22,19,-65,127,7, 
  /* [4][0][][] */ 127,-47,-60,-40,-97,-64,-27,78, 
  /* [5][0][][] */ 28,74,127,-2,23,-43,29,-43, 
  /* [6][0][][] */ 113,111,-18,127,-80,25,23,95, 
  /* [7][0][][] */ -30,-7,-2,37,35,-122,-127,-38, 
  /* [8][0][][] */ 111,69,-43,77,-59,28,-127,-55, 
  /* [9][0][][] */ 127,-23,-38,47,2,-41,22,-83, 
  /* [10][0][][] */ 72,23,-8,13,-29,127,36,8, 
  /* [11][0][][] */ 124,-28,-9,-127,100,-65,-58,78, 
  /* [12][0][][] */ -58,108,77,-39,13,67,-88,127, 
  /* [13][0][][] */ 127,-1,-94,12,29,-85,31,-96, 
  /* [14][0][][] */ 111,31,-1,-19,-127,29,-79,-14, 
  /* [15][0][][] */ 12,14,-92,-29,-127,-52,112,96, 
  /* [16][0][][] */ -3,-54,119,-5,127,-46,-64,-36, 
  /* [17][0][][] */ 21,-17,84,-11,127,-55,-68,-2, 
  /* [18][0][][] */ 111,-41,127,49,-30,29,-38,-1, 
  /* [19][0][][] */ 68,47,56,-67,-41,-127,19,-45, 
  /* [20][0][][] */ 43,-37,56,127,11,-65,-77,80, 
  /* [21][0][][] */ 88,-15,-70,-127,53,-60,7,106, 
  /* [22][0][][] */ -46,-127,-58,-59,54,-30,110,-69, 
  /* [23][0][][] */ -12,21,29,-43,-108,-127,6,-26, 
  /* [24][0][][] */ 127,8,61,51,-12,-29,-97,73, 
  /* [25][0][][] */ 101,61,-18,-72,-23,-14,-26,127, 
  /* [26][0][][] */ -84,-31,23,-127,105,1,-45,-82, 
  /* [27][0][][] */ 111,127,-9,-54,11,62,28,6, 
  /* [28][0][][] */ 22,127,-6,10,3,-58,-10,120, 
  /* [29][0][][] */ 119,23,100,113,51,-39,-127,57, 
  /* [30][0][][] */ 127,-113,-80,108,55,7,-76,94, 
  /* [31][0][][] */ 99,-82,23,54,-85,-108,-127,58, 
  /* [32][0][][] */ -92,-72,27,-127,80,-16,-35,-84, 
  /* [33][0][][] */ 22,2,29,30,32,-73,127,42, 
  /* [34][0][][] */ -68,84,118,-93,127,-86,-82,113, 
  /* [35][0][][] */ -67,17,19,110,0,127,35,-23, 
  /* [36][0][][] */ 90,31,-32,-127,44,-9,24,46, 
  /* [37][0][][] */ 42,41,-10,5,-69,127,58,44, 
  /* [38][0][][] */ -22,-68,25,109,17,54,3,127, 
  /* [39][0][][] */ 18,0,-127,41,-6,-36,-28,67, 
  /* [40][0][][] */ 62,16,-90,4,-48,51,-53,127, 
  /* [41][0][][] */ 35,1,17,-47,-105,-127,-14,0, 
  /* [42][0][][] */ -85,61,-89,110,-13,91,-29,-127, 
  /* [43][0][][] */ -14,1,-27,-127,-21,7,-11,-77, 
  /* [44][0][][] */ 67,26,23,69,24,127,-50,36, 
  /* [45][0][][] */ 2,77,-25,18,127,-34,-74,-12, 
  /* [46][0][][] */ 66,-77,3,127,78,31,-52,85, 
  /* [47][0][][] */ -15,-88,45,-15,127,18,47,28, 
};
const TfArray<4, int> tensor_dimension55 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant55_scale = { 48, { 0.0026928877923637629, 0.002641748171299696, 0.0023960748221725225, 0.0032827006652951241, 0.0016273800283670425, 0.0030585352797061205, 0.0021373911295086145, 0.002285404596477747, 0.0023803440853953362, 0.0027767745777964592, 0.0033120776060968637, 0.00088129914365708828, 0.0021379122044891119, 0.0018673918675631285, 0.001585871446877718, 0.0018864310113713145, 0.0021262711379677057, 0.0013029518304392695, 0.002898532897233963, 0.001862230827100575, 0.0023671411909162998, 0.00056357792345806956, 0.00082338764332234859, 0.0028284916188567877, 0.0029197267722338438, 0.0017755115404725075, 0.002640073886141181, 0.0025899764150381088, 0.0025182273238897324, 0.0027595979627221823, 0.0014637622516602278, 0.0012996806763112545, 0.0025236210785806179, 0.0036233977880328894, 0.00095030304510146379, 0.0016340918373316526, 0.0010912003926932812, 0.0029477088246494532, 0.002931712893769145, 0.0030708783306181431, 0.0018135829595848918, 0.0026751968543976545, 0.00094936875393614173, 0.0036293184384703636, 0.0032795846927911043, 0.0035093526821583509, 0.0025971115101128817, 0.0019586107227951288, } };
const TfArray<48, int> quant55_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const ALIGN(8) int8_t tensor_data56[8*1*1*48] = { 
  /* [0][0][][] */ 37,-43,47,-16,18,-70,-51,-33,8,22,-9,-62,22,-16,87,-36,-15,-15,62,9,28,-107,-30,69,-48,-12,14,-73,14,55,-24,5,-12,-20,7,-19,76,29,-20,53,31,40,127,41,-12,-35,16,-22, 
  /* [1][0][][] */ 77,-65,48,0,-72,-27,-119,-67,36,-35,-14,-29,112,36,-78,33,-47,-81,37,50,28,127,63,-87,-24,31,-4,29,-12,44,6,6,31,29,35,79,-116,-23,67,29,-118,-20,54,-103,7,112,-46,70, 
  /* [2][0][][] */ 33,77,-6,6,-49,-39,30,-7,-36,67,69,4,-86,-63,68,24,36,0,-13,53,-47,78,-21,-93,-23,-22,31,27,-11,-26,-127,22,-47,-23,-27,6,-60,-45,9,68,20,-79,6,-7,-11,54,29,-45, 
  /* [3][0][][] */ 28,23,-27,-40,-9,28,42,-23,-8,9,-14,28,3,-7,36,3,-1,34,9,16,-16,-127,-4,-21,-33,3,-40,38,10,1,49,29,30,-21,-20,-12,-25,-14,25,25,-9,-21,40,-32,30,40,11,7, 
  /* [4][0][][] */ 53,54,-38,-19,-82,-6,-27,-22,-55,24,-4,-43,-21,1,59,-25,6,32,12,-26,21,127,-29,57,-38,7,10,28,3,37,26,22,-9,17,9,10,-66,9,-1,34,-22,25,-110,-55,85,6,22,-36, 
  /* [5][0][][] */ 42,-29,48,-33,-51,35,51,-18,17,54,-79,-27,-5,-13,41,-7,-41,-127,-15,0,-24,107,10,-1,46,15,-53,-34,6,-5,17,-49,41,-44,0,24,52,48,34,-32,13,-4,-61,11,15,38,-30,44, 
  /* [6][0][][] */ 37,10,4,-17,-10,-32,62,10,-17,-26,1,-4,40,32,38,-21,3,9,23,30,-21,127,7,6,30,6,-35,-21,15,-17,-4,-8,16,-14,5,-24,1,-5,-2,38,-31,-1,-8,20,-1,-22,5,-23, 
  /* [7][0][][] */ 34,-41,25,12,-50,-78,18,17,50,78,-26,15,-63,-38,-118,-14,-22,127,14,-29,35,15,-12,52,26,2,-1,-27,-3,28,-107,-73,-9,-5,-27,15,4,34,-12,20,-31,37,10,17,-11,-33,-20,22, 
};
const TfArray<4, int> tensor_dimension56 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant56_scale = { 8, { 0.0052462760359048843, 0.0038377717137336731, 0.0040546604432165623, 0.01001530047506094, 0.0058286762796342373, 0.0068926075473427773, 0.007356712594628334, 0.0053888969123363495, } };
const TfArray<8, int> quant56_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const ALIGN(8) int8_t tensor_data57[48*1*1*8] = { 
  /* [0][0][][] */ -76,74,70,59,-127,-15,-21,106, 
  /* [1][0][][] */ 120,58,-57,127,-2,-56,119,79, 
  /* [2][0][][] */ -33,-49,-71,39,127,-5,-43,3, 
  /* [3][0][][] */ 24,126,68,-99,46,96,127,90, 
  /* [4][0][][] */ -13,-23,127,-16,-62,-18,46,-46, 
  /* [5][0][][] */ -110,-113,-39,-41,77,111,-14,127, 
  /* [6][0][][] */ -127,60,-10,-19,-99,44,-99,29, 
  /* [7][0][][] */ 127,72,57,102,-21,-56,102,56, 
  /* [8][0][][] */ -59,-18,-66,-127,-50,-105,-48,58, 
  /* [9][0][][] */ 9,89,127,-75,67,-37,-32,16, 
  /* [10][0][][] */ -36,-102,82,23,-127,77,120,-31, 
  /* [11][0][][] */ -98,-127,62,60,20,-7,22,-55, 
  /* [12][0][][] */ -127,-10,51,-45,71,-61,-1,1, 
  /* [13][0][][] */ -19,-16,15,127,0,-60,-38,17, 
  /* [14][0][][] */ -77,-14,-26,44,10,-127,40,12, 
  /* [15][0][][] */ -18,48,-80,20,-88,127,31,66, 
  /* [16][0][][] */ -89,-66,6,48,-100,27,-36,-127, 
  /* [17][0][][] */ -1,-44,60,63,9,5,127,-43, 
  /* [18][0][][] */ 42,18,65,99,-40,105,127,-27, 
  /* [19][0][][] */ -44,-24,-41,118,-127,17,-41,0, 
  /* [20][0][][] */ -48,-55,-127,88,-87,117,-92,20, 
  /* [21][0][][] */ -41,52,-18,-48,48,32,-127,-3, 
  /* [22][0][][] */ -1,28,69,11,127,15,49,13, 
  /* [23][0][][] */ 120,38,-39,104,-127,-3,39,3, 
  /* [24][0][][] */ -66,67,-41,114,-55,-16,127,114, 
  /* [25][0][][] */ -53,-23,-28,127,-102,-24,-71,125, 
  /* [26][0][][] */ 98,28,-71,127,-73,-27,12,4, 
  /* [27][0][][] */ 44,-29,115,69,-53,53,127,-83, 
  /* [28][0][][] */ 127,-106,-26,-6,24,11,74,-57, 
  /* [29][0][][] */ -26,-127,-38,52,76,80,45,37, 
  /* [30][0][][] */ -55,-127,-118,127,42,-48,95,76, 
  /* [31][0][][] */ 127,28,-70,94,-23,54,-37,11, 
  /* [32][0][][] */ 9,-1,-127,59,-2,0,-112,-4, 
  /* [33][0][][] */ 63,67,99,-83,-18,-127,68,-63, 
  /* [34][0][][] */ -87,-37,31,-13,-62,-39,-22,127, 
  /* [35][0][][] */ -50,103,113,-7,-127,-79,3,4, 
  /* [36][0][][] */ 114,83,-121,127,-66,3,-14,88, 
  /* [37][0][][] */ -36,-27,-79,52,-29,17,-127,-82, 
  /* [38][0][][] */ 42,-37,34,38,-92,-10,-68,127, 
  /* [39][0][][] */ -104,-98,-86,-18,112,-2,-127,-65, 
  /* [40][0][][] */ -69,-127,49,-21,-50,-80,19,34, 
  /* [41][0][][] */ 24,-23,-5,-100,-18,36,-41,-127, 
  /* [42][0][][] */ 32,-31,-104,52,123,45,-24,127, 
  /* [43][0][][] */ 50,-23,-127,-79,-5,72,-40,89, 
  /* [44][0][][] */ 5,11,-10,-18,-127,-38,10,25, 
  /* [45][0][][] */ 127,63,-60,-59,106,-14,-107,-90, 
  /* [46][0][][] */ -2,3,23,-127,-98,-86,-74,-23, 
  /* [47][0][][] */ 72,32,127,34,4,-18,30,-28, 
};
const TfArray<4, int> tensor_dimension57 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant57_scale = { 48, { 0.0033831873442977667, 0.0019753256347030401, 0.0051667597144842148, 0.00037740924744866788, 0.0051830429583787918, 0.0013736599357798696, 0.0050994139164686203, 0.0026832800358533859, 0.0035743024200201035, 0.0015443526208400726, 0.0039874385111033916, 0.0054392912425100803, 0.0014807013794779778, 0.0021060802973806858, 0.0046365899033844471, 0.0029109937604516745, 0.0020316848531365395, 0.0044034076854586601, 0.0026552465278655291, 0.00088546157348901033, 0.0014552129432559013, 0.0043352236971259117, 0.001516402349807322, 0.0013542582746595144, 0.0016437687445431948, 0.0013158409856259823, 0.0012806982267647982, 0.0051017040386795998, 0.003178297309204936, 0.0017266586655750871, 0.0018925841432064772, 0.0016131661832332611, 0.0014124356675893068, 0.0026829128619283438, 0.0035764493513852358, 0.0024355172645300627, 0.0011623322498053312, 0.0015350118046626449, 0.0017620277358219028, 0.0025895221624523401, 0.0024618320167064667, 0.003608417697250843, 0.0022444529458880424, 0.005247422493994236, 0.002998454961925745, 0.0025277954991906881, 0.0015206842217594385, 0.006384954322129488, } };
const TfArray<48, int> quant57_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const ALIGN(8) int8_t tensor_data58[8*1*1*48] = { 
  /* [0][0][][] */ -19,32,-3,63,32,-63,12,-77,33,16,-14,22,-96,-26,40,-35,45,12,1,-127,-38,47,-77,85,86,19,-65,23,-24,85,-71,21,0,26,-36,63,-34,48,-11,102,8,61,59,-14,-2,26,-33,-20, 
  /* [1][0][][] */ -47,-25,48,22,33,-31,10,2,-16,-24,50,29,-7,3,7,65,28,-53,3,127,36,50,50,-4,-26,-10,32,-18,-10,-32,14,92,98,101,-38,-33,97,23,53,-1,94,-4,-54,3,-24,30,91,46, 
  /* [2][0][][] */ 66,12,19,-127,-36,-42,-17,-25,9,45,2,-18,14,-3,-8,-8,18,20,56,116,26,-17,4,4,15,17,0,34,-4,-4,-45,41,-17,37,-27,-33,-15,-4,5,43,-12,-10,-47,13,0,-49,-31,-17, 
  /* [3][0][][] */ 27,-79,3,-103,-25,24,-21,-27,43,-4,23,-23,-50,41,-39,-5,37,35,76,59,44,60,27,30,-38,-29,-1,86,-20,7,5,-3,17,24,-40,-15,127,-52,1,0,-46,-57,-29,20,-30,10,-62,5, 
  /* [4][0][][] */ 33,43,-37,66,55,-31,-35,1,56,44,-6,11,93,40,-11,-13,-15,-37,-42,28,-57,-93,127,-79,-18,-35,43,3,18,-34,-17,5,26,-41,16,-5,-10,32,-20,-59,45,-22,12,23,13,37,-77,9, 
  /* [5][0][][] */ -51,-38,-15,-46,-22,66,-26,9,11,-39,-78,-49,-28,22,127,54,-15,-49,1,126,44,-1,5,-58,25,-74,99,84,-43,44,22,-101,14,-4,21,45,64,120,24,-69,47,90,-28,40,25,46,-46,-31, 
  /* [6][0][][] */ -5,-11,-21,-113,-28,14,-13,-36,3,-12,-45,5,-25,54,-31,-21,35,27,33,127,-55,-14,-24,24,14,-52,-14,46,-26,32,-26,38,-75,-22,-31,21,1,-32,-31,26,-31,-53,-34,28,-38,-18,-83,-19, 
  /* [7][0][][] */ 2,-15,-17,74,12,127,2,-12,-33,1,-1,29,37,6,1,7,32,-28,-43,-4,-36,-41,-1,-18,-44,-96,2,-40,5,-13,19,-11,-1,-27,47,-7,3,27,79,-17,-11,-70,38,16,-36,18,-4,17, 
};
const TfArray<4, int> tensor_dimension58 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant58_scale = { 8, { 0.0017754115397110581, 0.0018471154617145658, 0.0031518116593360901, 0.0024260960053652525, 0.0018780670361593366, 0.0019032516283914447, 0.0017936208751052618, 0.003102476941421628, } };
const TfArray<8, int> quant58_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const ALIGN(8) int8_t tensor_data59[48*1*1*8] = { 
  /* [0][0][][] */ -12,-9,-91,93,-108,127,-46,0, 
  /* [1][0][][] */ -37,-10,8,-59,-127,14,-77,-40, 
  /* [2][0][][] */ -127,-122,-122,-93,-47,51,-11,-56, 
  /* [3][0][][] */ 51,4,36,71,-48,-21,86,127, 
  /* [4][0][][] */ -127,-68,116,-83,46,-21,7,-74, 
  /* [5][0][][] */ -88,41,3,34,-127,72,-45,-31, 
  /* [6][0][][] */ 38,-5,-127,58,-55,5,41,7, 
  /* [7][0][][] */ 35,2,-127,-26,-2,124,36,-36, 
  /* [8][0][][] */ -59,31,-81,35,100,127,-94,45, 
  /* [9][0][][] */ -36,-55,69,-102,7,-25,-127,-56, 
  /* [10][0][][] */ -25,-84,20,-59,-5,-25,17,-127, 
  /* [11][0][][] */ -90,-15,42,-106,99,-117,-127,-30, 
  /* [12][0][][] */ 51,12,18,5,39,-126,84,127, 
  /* [13][0][][] */ -113,-127,-9,-93,4,-40,-37,-18, 
  /* [14][0][][] */ 86,30,-127,92,-109,-68,-52,-16, 
  /* [15][0][][] */ -108,102,-53,-2,-123,-9,127,-63, 
  /* [16][0][][] */ 127,-44,13,51,11,-45,-9,17, 
  /* [17][0][][] */ -29,52,127,23,-40,17,64,-68, 
  /* [18][0][][] */ -68,56,-31,65,127,48,-2,15, 
  /* [19][0][][] */ -52,69,48,111,-110,127,11,-37, 
  /* [20][0][][] */ 99,127,62,56,123,-44,-90,14, 
  /* [21][0][][] */ -53,51,-27,-50,18,6,127,-44, 
  /* [22][0][][] */ 15,-23,-14,-127,38,-22,-25,46, 
  /* [23][0][][] */ 0,127,-42,18,-99,36,-9,60, 
  /* [24][0][][] */ 34,47,56,-6,-34,90,-127,9, 
  /* [25][0][][] */ 113,-25,89,28,-28,127,12,54, 
  /* [26][0][][] */ 118,22,-68,60,76,103,127,-19, 
  /* [27][0][][] */ 51,-77,84,-84,-94,-106,110,-127, 
  /* [28][0][][] */ -34,-119,-103,0,-127,7,-44,0, 
  /* [29][0][][] */ 85,6,72,-37,109,8,-127,79, 
  /* [30][0][][] */ -49,63,6,46,-88,-98,81,127, 
  /* [31][0][][] */ -127,-27,89,-20,58,26,47,-30, 
  /* [32][0][][] */ 17,15,71,-27,-125,-86,127,-36, 
  /* [33][0][][] */ 85,78,22,-27,-1,-33,72,-127, 
  /* [34][0][][] */ 20,-124,-76,-35,27,-77,-127,-19, 
  /* [35][0][][] */ -63,57,127,-62,69,-103,-18,24, 
  /* [36][0][][] */ -28,28,-82,60,70,-39,-127,17, 
  /* [37][0][][] */ -122,44,76,9,83,41,127,36, 
  /* [38][0][][] */ 103,54,127,40,34,86,-80,21, 
  /* [39][0][][] */ -58,-1,75,40,127,-112,34,-18, 
  /* [40][0][][] */ 66,-30,-91,-60,-2,127,5,84, 
  /* [41][0][][] */ 58,61,29,36,14,127,-97,31, 
  /* [42][0][][] */ -82,-23,18,37,-127,24,30,61, 
  /* [43][0][][] */ -36,-73,-86,62,-58,127,54,37, 
  /* [44][0][][] */ -7,-52,-127,89,-88,28,-49,55, 
  /* [45][0][][] */ -127,35,-120,87,26,31,-102,3, 
  /* [46][0][][] */ -127,-5,87,-37,-28,-4,-27,-42, 
  /* [47][0][][] */ -100,-108,8,-127,48,97,-71,-46, 
};
const TfArray<4, int> tensor_dimension59 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant59_scale = { 48, { 0.0018106471979990602, 0.0028403978794813156, 0.0029842965304851532, 0.0034222390968352556, 0.0015627414686605334, 0.0043921130709350109, 0.0019644806161522865, 0.0027890331111848354, 0.0024846773594617844, 0.0042235055007040501, 0.001937759225256741, 0.0013658099342137575, 0.0029029110446572304, 0.0049238610081374645, 0.00071087531978264451, 0.0025022628251463175, 0.0014641446759924293, 0.0023118960671126842, 0.0019062334904447198, 0.0021848464384675026, 0.0041237366385757923, 0.0012657633051276207, 0.0040231146849691868, 0.0032602068968117237, 0.0043553747236728668, 0.0028360888827592134, 0.0021586602088063955, 0.0021638288162648678, 0.0012888095807284117, 0.0041791349649429321, 0.0031029509846121073, 0.001245965133421123, 0.0034902549814432859, 0.002514151856303215, 0.0011362700024619699, 0.0012015876127406955, 0.0026011534500867128, 0.00079201854532584548, 0.004484731238335371, 0.0022094044834375381, 0.0028100267518311739, 0.0037159502971917391, 0.0032348830718547106, 0.0032842615619301796, 0.00087224075105041265, 0.0033009685575962067, 0.0023943241685628891, 0.0021557153668254614, } };
const TfArray<48, int> quant59_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const ALIGN(8) int8_t tensor_data60[8*1*1*48] = { 
  /* [0][0][][] */ 46,3,53,0,85,43,-13,19,-12,6,29,42,-38,-41,-20,-28,-41,-1,-50,-2,22,-28,-40,25,-9,20,55,-4,-20,18,-25,2,13,-42,-4,-54,13,-127,-24,66,-39,-11,-68,-20,57,-33,-43,-4, 
  /* [1][0][][] */ -74,41,45,43,28,-5,41,20,54,-37,24,-113,13,-13,17,28,24,44,-5,60,0,-47,-27,44,31,-19,-9,44,-45,-11,-8,85,-12,-10,11,127,-18,26,18,-47,0,56,4,27,-118,11,-45,-31, 
  /* [2][0][][] */ -41,-11,28,3,-68,4,12,-127,-62,11,13,64,32,-13,-44,-63,-63,86,33,46,13,-23,22,-32,-28,37,-85,37,-23,64,-47,-4,-60,-32,45,6,43,0,25,-12,-5,28,-7,-67,-121,-51,90,-3, 
  /* [3][0][][] */ -79,22,-33,54,25,14,55,-27,36,-52,14,-59,-6,40,11,-7,-43,67,89,53,24,86,-95,3,25,8,19,18,29,11,2,-6,-13,-6,-30,79,-30,-36,-20,-113,-36,10,11,23,-127,64,-35,-44, 
  /* [4][0][][] */ 4,-65,15,10,-61,38,-24,-20,39,-3,-8,-6,-14,-28,67,-26,12,20,-3,-4,19,25,34,-35,58,-13,32,52,-59,1,34,30,24,41,-8,-18,-41,104,25,-23,4,7,-50,-10,-41,13,127,17, 
  /* [5][0][][] */ -62,23,-27,2,44,-4,49,106,83,-62,-25,-98,33,12,-127,-77,73,20,26,-27,12,98,11,16,29,-20,91,9,66,12,53,34,61,22,-28,37,74,42,-29,45,-49,41,44,47,-37,32,-21,75, 
  /* [6][0][][] */ 19,-20,0,23,31,36,-13,24,-38,-3,-20,32,-16,4,-14,67,4,21,90,0,2,127,-15,3,8,18,24,-27,10,-4,-14,-8,-58,-22,24,0,39,40,-25,-19,-15,-5,-4,-8,-40,-14,-17,-21, 
  /* [7][0][][] */ -7,2,29,63,30,65,11,-3,-13,26,101,-11,-30,-2,-2,-61,-2,-45,-87,-36,-17,-27,61,29,4,-30,10,27,-1,-19,-64,37,0,50,-4,3,17,127,1,44,-16,27,45,27,-33,-21,0,5, 
};
const TfArray<4, int> tensor_dimension60 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant60_scale = { 8, { 0.0025229784660041332, 0.0024354653432965279, 0.0018460077699273825, 0.0026634691748768091, 0.0026084184646606445, 0.0023762197233736515, 0.0036001682747155428, 0.0030128518119454384, } };
const TfArray<8, int> quant60_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const ALIGN(8) int8_t tensor_data61[48*1*1*8] = { 
  /* [0][0][][] */ -5,-98,-87,37,-17,-63,-127,-24, 
  /* [1][0][][] */ 27,-37,-107,127,-53,-57,-11,20, 
  /* [2][0][][] */ 76,61,58,-78,-127,78,-5,-38, 
  /* [3][0][][] */ 62,79,100,-85,67,-5,-127,-37, 
  /* [4][0][][] */ 69,64,127,-68,31,-45,0,-88, 
  /* [5][0][][] */ -37,4,-46,-3,6,9,-127,17, 
  /* [6][0][][] */ 11,-58,33,-20,38,-40,-127,-50, 
  /* [7][0][][] */ -1,30,-71,-127,68,-19,74,-92, 
  /* [8][0][][] */ 83,-93,7,-127,84,-14,-54,-41, 
  /* [9][0][][] */ 86,84,-42,78,127,12,-21,-8, 
  /* [10][0][][] */ 7,-91,-53,67,-127,93,13,37, 
  /* [11][0][][] */ 33,-80,3,33,43,67,-127,-35, 
  /* [12][0][][] */ -115,127,-48,-82,-52,-76,-63,73, 
  /* [13][0][][] */ 40,-93,-97,114,-127,-4,-62,-57, 
  /* [14][0][][] */ -8,-30,57,6,-51,103,65,127, 
  /* [15][0][][] */ 7,127,-90,111,-46,55,-5,-41, 
  /* [16][0][][] */ -46,-1,-127,-24,8,-77,34,25, 
  /* [17][0][][] */ 103,85,-8,39,127,-96,15,-26, 
  /* [18][0][][] */ 45,107,22,-65,-15,-1,127,40, 
  /* [19][0][][] */ -81,-74,3,50,53,-57,127,61, 
  /* [20][0][][] */ -31,-55,66,-76,-108,-127,85,-102, 
  /* [21][0][][] */ 34,24,-39,57,-72,127,25,49, 
  /* [22][0][][] */ -42,44,-93,15,5,-50,127,-43, 
  /* [23][0][][] */ 27,-7,-1,30,104,-30,-127,26, 
  /* [24][0][][] */ 29,0,75,-92,-62,127,-42,-16, 
  /* [25][0][][] */ -78,-44,54,-96,-99,127,-21,-65, 
  /* [26][0][][] */ 127,-48,-91,37,106,35,25,18, 
  /* [27][0][][] */ 47,-79,-98,127,-52,-44,-80,-34, 
  /* [28][0][][] */ -107,-83,92,-127,43,1,38,-85, 
  /* [29][0][][] */ -6,18,106,-25,-56,-19,-127,-20, 
  /* [30][0][][] */ -48,91,127,-115,-90,-92,5,-111, 
  /* [31][0][][] */ -18,108,-127,-34,-105,23,69,-126, 
  /* [32][0][][] */ 127,-16,47,-62,-99,21,-93,55, 
  /* [33][0][][] */ -71,115,-52,122,-92,-88,106,127, 
  /* [34][0][][] */ 127,71,65,1,51,-82,-7,93, 
  /* [35][0][][] */ 78,-3,-29,-74,127,51,-54,-105, 
  /* [36][0][][] */ -51,7,29,48,-4,15,127,-24, 
  /* [37][0][][] */ -58,47,127,-20,84,103,17,60, 
  /* [38][0][][] */ 18,-91,39,127,-43,-22,-69,26, 
  /* [39][0][][] */ 73,-25,-43,43,127,-112,64,2, 
  /* [40][0][][] */ 12,110,-95,9,-127,-6,-6,104, 
  /* [41][0][][] */ 72,-6,42,-20,127,-18,-55,82, 
  /* [42][0][][] */ 125,-127,-122,58,-58,-26,34,110, 
  /* [43][0][][] */ -49,-89,88,20,80,101,-127,123, 
  /* [44][0][][] */ 79,-116,-100,70,-54,127,62,100, 
  /* [45][0][][] */ 127,85,100,62,35,-74,20,106, 
  /* [46][0][][] */ -83,73,77,-1,-127,8,-21,-35, 
  /* [47][0][][] */ -74,-40,-29,-127,-32,-18,-37,-13, 
};
const TfArray<4, int> tensor_dimension61 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant61_scale = { 48, { 0.0010052755242213607, 0.0011750847334042192, 0.0038391272537410259, 0.0026807019021362066, 0.00097828148864209652, 0.0026451670564711094, 0.0015387940220534801, 0.00177339231595397, 0.0032632804941385984, 0.0032650846987962723, 0.0017252516699954867, 0.0012773453490808606, 0.00093587511219084263, 0.00069085205905139446, 0.0012402767315506935, 0.0027603227645158768, 0.0049037826247513294, 0.0022804026957601309, 0.0015580818289890885, 0.0018866389291360974, 0.0028443068731576204, 0.0029795945156365633, 0.0026495710480958223, 0.0026553580537438393, 0.0039380169473588467, 0.0026409130077809095, 0.0029878653585910797, 0.00087518262444064021, 0.0013969843275845051, 0.0026906169950962067, 0.0018750539747998118, 0.0030025697778910398, 0.0013623858103528619, 0.0024470349308103323, 0.0019113887101411819, 0.0014350620331242681, 0.0016682065324857831, 0.00095923314802348614, 0.0013465438969433308, 0.0039812824688851833, 0.0025912215933203697, 0.003427538787946105, 0.00095951987896114588, 0.0026570155750960112, 0.0016838375013321638, 0.0026299436576664448, 0.0042109848000109196, 0.0049093253910541534, } };
const TfArray<48, int> quant61_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const ALIGN(8) int8_t tensor_data62[8*1*1*48] = { 
  /* [0][0][][] */ 62,26,24,-85,36,-47,-45,17,-57,18,47,48,-66,59,-62,18,36,31,43,41,-37,90,-50,14,-56,-59,-30,-88,40,43,-37,37,120,27,93,112,46,-11,-46,-61,-2,35,32,6,37,-127,-96,35, 
  /* [1][0][][] */ -35,-53,-3,27,13,1,95,-60,47,17,-45,-59,41,-88,-12,80,-29,5,-127,47,27,-33,11,0,-26,-30,42,57,50,-11,-19,0,13,19,44,14,-46,32,88,-27,21,-4,5,26,-32,-40,50,-39, 
  /* [2][0][][] */ 28,-67,25,5,75,-25,4,0,-8,16,16,-24,-21,-69,7,-50,14,-10,-26,116,3,-27,-127,-10,-7,63,13,79,-47,63,-104,-18,14,27,29,-33,-50,89,-43,66,-19,91,58,-11,12,-38,33,-17, 
  /* [3][0][][] */ -4,7,-43,75,-67,-13,39,52,44,22,-15,13,-54,-20,-23,54,-16,-46,-3,-85,51,-57,42,-24,16,-29,57,-12,71,33,2,29,-63,47,-7,-27,54,11,-127,-65,-2,14,-19,29,-56,10,59,-47, 
  /* [4][0][][] */ -45,-37,-25,25,6,58,-42,26,-24,90,-23,4,10,-58,-22,6,6,-16,-71,-68,-9,-5,25,23,-28,-45,26,101,-29,-23,-12,-1,-75,-27,31,127,15,3,33,-78,-38,97,22,-18,30,-45,-18,-8, 
  /* [5][0][][] */ -1,-77,40,27,-65,-27,95,0,29,18,-49,-3,-64,-10,127,27,-41,-52,-17,-20,50,29,-5,-68,-102,38,69,27,66,31,-16,65,35,37,-26,83,70,26,8,123,18,31,-30,-33,-95,60,46,-50, 
  /* [6][0][][] */ 14,12,-11,20,9,-21,55,-25,-2,-1,15,-11,-4,2,76,-14,2,28,22,-42,-23,6,77,-26,-2,-35,-25,4,31,-4,1,5,-54,12,4,-11,72,127,33,-32,0,-38,-6,25,7,2,-29,8, 
  /* [7][0][][] */ -29,2,-38,-45,-84,6,18,117,17,-11,-15,4,66,-7,127,-53,-28,-11,-56,-110,-5,30,-7,2,-1,-113,-3,-27,75,20,6,13,116,19,86,-70,-58,52,17,31,15,80,-40,-84,-22,-76,-45,17, 
};
const TfArray<4, int> tensor_dimension62 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant62_scale = { 8, { 0.0015743677504360676, 0.0030420375987887383, 0.0026126930024474859, 0.002696487819775939, 0.0019932694267481565, 0.0021052351221442223, 0.0031830829102545977, 0.0023256510030478239, } };
const TfArray<8, int> quant62_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const ALIGN(8) int8_t tensor_data63[48*1*1*8] = { 
  /* [0][0][][] */ -126,-102,-127,69,104,-18,84,101, 
  /* [1][0][][] */ -12,87,59,-16,-22,-127,20,-76, 
  /* [2][0][][] */ 38,-69,-84,-20,4,127,21,20, 
  /* [3][0][][] */ 81,-72,-6,78,51,66,-127,101, 
  /* [4][0][][] */ -127,37,-28,50,72,-61,101,-13, 
  /* [5][0][][] */ 77,-127,-87,29,-87,48,-4,31, 
  /* [6][0][][] */ -30,16,17,77,-49,-16,15,127, 
  /* [7][0][][] */ 90,-32,35,-127,-118,-39,-110,-33, 
  /* [8][0][][] */ -82,43,69,-127,38,-5,36,20, 
  /* [9][0][][] */ 37,-31,43,-34,-18,-3,127,-11, 
  /* [10][0][][] */ -56,17,-69,-4,29,-12,-127,2, 
  /* [11][0][][] */ 121,36,-50,110,-30,-76,96,127, 
  /* [12][0][][] */ -44,-15,6,93,-17,22,-25,127, 
  /* [13][0][][] */ 115,-117,-81,-111,127,-104,-96,3, 
  /* [14][0][][] */ 125,-38,104,-26,-40,-42,-127,19, 
  /* [15][0][][] */ 115,47,-64,45,-105,118,-127,10, 
  /* [16][0][][] */ 7,-27,-7,32,13,127,-46,38, 
  /* [17][0][][] */ -12,68,-19,-26,0,-127,63,33, 
  /* [18][0][][] */ -63,20,-74,16,-2,127,-52,-9, 
  /* [19][0][][] */ 49,-53,83,87,127,80,-16,-31, 
  /* [20][0][][] */ -33,6,-14,94,127,16,62,54, 
  /* [21][0][][] */ 70,83,-34,127,-30,79,-86,-1, 
  /* [22][0][][] */ 12,127,6,-55,80,5,-64,75, 
  /* [23][0][][] */ -44,-33,3,48,-7,-51,-127,-33, 
  /* [24][0][][] */ 127,24,-73,108,34,-66,-3,-78, 
  /* [25][0][][] */ -39,65,-93,-86,-127,-75,24,32, 
  /* [26][0][][] */ -56,-17,-16,-82,20,3,-43,-127, 
  /* [27][0][][] */ 26,-127,85,125,-63,-55,-107,16, 
  /* [28][0][][] */ 21,-18,-35,-127,-33,105,97,72, 
  /* [29][0][][] */ 88,42,-70,-114,127,-10,89,-123, 
  /* [30][0][][] */ 78,127,24,-26,59,-21,-49,38, 
  /* [31][0][][] */ -96,109,1,65,-127,53,65,-14, 
  /* [32][0][][] */ -113,-44,-14,83,-34,127,81,13, 
  /* [33][0][][] */ 126,96,-35,77,-127,-85,-94,-33, 
  /* [34][0][][] */ 32,89,84,-30,-127,60,-30,-20, 
  /* [35][0][][] */ -22,35,78,-21,40,-127,62,66, 
  /* [36][0][][] */ 29,27,-48,127,83,-88,69,74, 
  /* [37][0][][] */ 0,87,-126,-39,90,59,122,-127, 
  /* [38][0][][] */ -29,70,40,-102,-127,-123,-97,-76, 
  /* [39][0][][] */ 81,105,56,-85,0,-127,30,-53, 
  /* [40][0][][] */ -49,-25,-102,38,-48,11,-127,10, 
  /* [41][0][][] */ 41,-36,-127,-6,-7,-5,-14,56, 
  /* [42][0][][] */ 5,3,9,-127,-41,117,-59,-93, 
  /* [43][0][][] */ -46,-23,4,89,-19,28,-29,127, 
  /* [44][0][][] */ 90,7,68,-77,68,48,-94,127, 
  /* [45][0][][] */ -97,96,52,-37,127,40,1,-5, 
  /* [46][0][][] */ -110,-103,27,-4,127,30,20,-20, 
  /* [47][0][][] */ 77,10,1,-22,71,127,-70,-77, 
};
const TfArray<4, int> tensor_dimension63 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant63_scale = { 48, { 0.0014878085348755121, 0.0015241793589666486, 0.003571867011487484, 0.0013782326132059097, 0.0014980924315750599, 0.0011445394484326243, 0.0037693346384912729, 0.0010478943586349487, 0.0012895695399492979, 0.002501392737030983, 0.0017747003585100174, 0.0025240345858037472, 0.0044048149138689041, 0.0011104518780484796, 0.00080373691162094474, 0.0011259514139965177, 0.0043412423692643642, 0.0025213100016117096, 0.0021259977947920561, 0.0031063156202435493, 0.0016736038960516453, 0.0018802896374836564, 0.0011631050147116184, 0.0014954375801607966, 0.0013124239630997181, 0.0030792828183621168, 0.004607323557138443, 0.00089117337483912706, 0.0018367391312494874, 0.0020978900138288736, 0.004443176556378603, 0.0020322117488831282, 0.0017082119593396783, 0.00086541223572567105, 0.0012401558924466372, 0.0016402681358158588, 0.0036154896952211857, 0.001366086071357131, 0.00011244382767472416, 0.0023129726760089397, 0.0012920980807393789, 0.0016177860088646412, 0.003503887914121151, 0.0041524064727127552, 0.0028911000117659569, 0.00082547811325639486, 0.0018863716395571828, 0.0041849440895020962, } };
const TfArray<48, int> quant63_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const ALIGN(8) int8_t tensor_data64[16*1*1*48] = { 
  /* [0][0][][] */ -66,21,74,-92,-37,-34,127,-11,97,11,-80,-63,-93,49,92,-76,-59,4,82,-72,-38,-3,-14,0,-73,14,-84,-121,-62,19,-11,39,-107,-9,-92,22,74,77,-87,94,48,74,58,73,43,73,-20,-56, 
  /* [1][0][][] */ 4,-19,-4,-8,1,-34,42,-5,69,78,-70,-19,12,16,-28,11,2,7,14,32,-31,-16,7,-37,-127,-36,70,108,-24,-66,-1,-14,0,9,-6,15,0,-89,5,8,-2,-24,-12,-33,-26,31,46,5, 
  /* [2][0][][] */ -34,51,66,-53,-42,-25,55,20,-91,-4,-19,-19,-28,71,2,46,-19,26,56,42,-20,59,21,-29,127,-35,11,77,9,-10,32,-109,20,28,-48,25,9,11,-14,20,-42,-4,7,34,18,-90,71,51, 
  /* [3][0][][] */ 58,-14,61,-50,32,16,2,20,15,-26,-26,-10,27,-41,33,45,16,9,36,-63,31,-29,39,-58,-32,62,38,-8,-37,-58,0,64,-104,0,-58,-3,-16,-21,-2,32,-14,4,-12,-14,-18,-127,-16,-10, 
  /* [4][0][][] */ 3,-76,-35,-46,17,-47,-5,-3,73,-13,32,-60,47,-7,-58,19,-79,2,-31,18,-26,-25,127,-14,8,-20,3,-31,4,7,3,15,79,-23,-37,11,23,2,-18,24,-24,-35,19,-52,-5,-11,16,2, 
  /* [5][0][][] */ 16,-12,20,2,-8,4,25,19,99,70,-127,-16,39,10,-17,-9,-58,1,10,7,59,17,-91,53,35,-18,-7,2,-32,29,-84,37,23,11,-9,5,-23,68,63,-25,10,54,-39,-55,-42,-102,-25,29, 
  /* [6][0][][] */ -30,-32,76,67,-21,6,31,61,-2,-41,73,15,28,-4,25,-61,119,11,-44,-13,86,-26,78,83,-88,13,2,-5,7,-20,14,4,31,13,23,-10,-18,98,58,22,23,99,-15,-31,-17,-127,106,46, 
  /* [7][0][][] */ 19,-59,58,-16,52,-18,-68,-21,-71,63,-81,-35,17,-41,-27,55,59,-10,-58,127,-23,-65,-43,18,7,-120,-49,-39,37,-41,18,11,-27,-26,-16,-7,-13,-23,-56,8,-40,-61,89,-31,22,70,20,13, 
  /* [8][0][][] */ -13,-57,-23,9,-28,-77,-49,14,-12,-63,53,49,15,-1,32,7,-50,-36,1,-32,15,33,-127,21,51,-5,13,65,-63,41,101,21,17,-39,-14,-10,-13,45,118,113,-9,15,-16,1,-12,78,-19,-40, 
  /* [9][0][][] */ -40,9,-60,7,2,-15,26,29,84,127,-97,7,-36,-30,5,-11,-6,9,-41,17,21,54,-29,-25,-21,16,23,-84,41,35,84,-45,39,-58,-11,-9,1,59,118,21,-94,-27,0,53,25,-41,-41,29, 
  /* [10][0][][] */ -65,-43,-20,-19,25,4,-22,10,127,-27,41,-26,22,13,-50,-24,-14,8,-7,-4,-32,21,-67,-25,-70,33,-14,-38,93,-51,-3,-33,-5,-3,-14,7,35,-89,-15,-9,31,35,-12,-16,65,-111,53,-8, 
  /* [11][0][][] */ 28,74,-22,-51,-84,-1,-4,35,1,3,50,78,27,-1,21,34,18,94,-14,-40,99,26,14,-32,-46,38,9,-5,13,-41,63,-41,34,-41,-66,121,-126,35,-62,73,103,-41,3,-21,40,127,7,56, 
  /* [12][0][][] */ 73,38,-10,-6,55,5,49,-4,111,-30,6,-3,-19,8,-2,26,-1,-10,-19,-20,48,24,6,13,-35,34,-60,97,-17,38,1,-25,49,11,-4,-24,-7,20,-127,16,-36,2,75,28,-28,18,4,19, 
  /* [13][0][][] */ -8,83,-22,-40,-105,-32,49,-4,-61,20,-5,-46,1,-117,15,31,9,13,-35,-30,-12,-36,-15,11,55,46,36,48,-5,-49,35,127,17,49,66,14,59,-42,-95,7,-37,-56,16,-25,53,-29,63,25, 
  /* [14][0][][] */ 46,101,90,25,-46,-102,-82,-127,68,68,-87,43,-1,77,21,56,70,44,8,-47,-69,15,68,-75,-17,67,78,-45,-103,57,21,-41,58,79,73,18,-31,-50,-79,-60,-6,41,54,-15,50,-114,71,-17, 
  /* [15][0][][] */ -21,-79,19,58,71,-40,33,-26,-29,25,-21,-67,-66,-24,-100,103,-3,24,-16,-19,22,-62,-4,3,52,36,24,11,-12,17,19,6,70,-50,16,33,-5,-41,40,17,46,49,-69,34,-5,93,-127,9, 
};
const TfArray<4, int> tensor_dimension64 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant64_scale = { 16, { 0.0021331210155040026, 0.0047159884124994278, 0.0037654272746294737, 0.0039473539218306541, 0.0051387567073106766, 0.003999530803412199, 0.0029937024228274822, 0.0033718736376613379, 0.0035134172067046165, 0.0038972874172031879, 0.0052684559486806393, 0.003022174583747983, 0.0052865701727569103, 0.003754079807549715, 0.0028523504734039307, 0.0030647760722786188, } };
const TfArray<16, int> quant64_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const ALIGN(8) int8_t tensor_data65[96*1*1*16] = { 
  /* [0][0][][] */ 51,-81,17,-111,-39,-9,-24,44,-81,-72,26,8,127,18,-12,-34, 
  /* [1][0][][] */ 5,-66,58,52,-34,50,17,-39,49,43,116,8,50,31,127,-11, 
  /* [2][0][][] */ 47,-30,32,97,14,21,103,56,118,-127,0,60,38,66,-78,-55, 
  /* [3][0][][] */ -22,39,-66,49,74,2,-31,23,127,-37,4,-17,35,22,-67,0, 
  /* [4][0][][] */ 28,-19,-127,-36,114,-23,117,98,-27,80,31,3,16,4,30,-46, 
  /* [5][0][][] */ 8,8,45,8,-1,-127,59,-49,-51,14,-76,-67,-81,-7,-57,-6, 
  /* [6][0][][] */ -30,-25,127,19,-25,54,67,-37,96,-35,39,-3,46,-5,54,-27, 
  /* [7][0][][] */ 127,62,33,-45,25,3,-32,54,-67,-118,-42,90,24,55,39,-57, 
  /* [8][0][][] */ 78,-43,-30,123,-61,-77,33,-8,-24,14,-127,36,-72,-97,15,-74, 
  /* [9][0][][] */ -42,-127,-11,-29,-12,24,-74,46,-48,6,-23,-21,14,-53,1,-81, 
  /* [10][0][][] */ -5,-72,-60,66,18,22,127,-24,-85,63,-14,48,1,-29,30,-33, 
  /* [11][0][][] */ -66,3,-54,23,-65,78,59,42,40,-32,-20,-26,-127,-78,91,50, 
  /* [12][0][][] */ 86,-48,-127,-123,-34,3,14,-106,7,-25,44,38,87,-25,-22,65, 
  /* [13][0][][] */ 75,27,-10,-56,-25,-42,-34,17,20,-63,-70,-49,-4,1,2,-127, 
  /* [14][0][][] */ 87,-31,17,-86,-1,-102,-52,-45,-28,-94,-50,-98,-47,-127,-11,99, 
  /* [15][0][][] */ -10,111,55,-4,-27,37,-36,-127,16,-41,19,24,31,-35,-72,-53, 
  /* [16][0][][] */ -127,59,-2,12,5,-21,-114,47,-85,-10,-53,53,11,41,-11,-48, 
  /* [17][0][][] */ -74,-38,127,-10,21,-34,-17,72,-85,45,-3,53,-18,-10,-21,16, 
  /* [18][0][][] */ -24,2,11,-30,-4,-36,-12,12,-92,-39,-79,30,-107,9,-127,-16, 
  /* [19][0][][] */ -46,-95,-127,-113,-43,-6,111,-24,28,65,114,11,85,-102,-10,102, 
  /* [20][0][][] */ -29,10,36,127,-26,-60,-103,19,-68,-60,-43,-38,-50,-7,-67,14, 
  /* [21][0][][] */ -41,19,-1,58,56,22,-127,48,-21,-10,21,9,38,21,34,-71, 
  /* [22][0][][] */ -6,12,-106,45,77,-18,59,46,-72,71,-5,-11,-1,29,25,127, 
  /* [23][0][][] */ 10,127,-18,-92,22,16,47,-11,-23,-28,70,-46,-10,-19,53,19, 
  /* [24][0][][] */ 11,-89,-99,9,69,-32,-127,-20,7,-22,31,18,61,43,74,59, 
  /* [25][0][][] */ 78,69,-79,-22,-65,87,61,4,-118,-127,90,60,-78,32,-61,74, 
  /* [26][0][][] */ 34,2,75,114,2,-80,127,12,105,15,-13,-82,16,30,44,49, 
  /* [27][0][][] */ 127,-42,51,-111,-11,-33,20,97,-95,-28,-34,63,101,-56,-17,13, 
  /* [28][0][][] */ -54,-108,27,-71,-19,96,36,-13,100,-55,34,82,85,35,-39,-127, 
  /* [29][0][][] */ -86,55,-127,56,19,-29,-29,-19,1,-60,-22,27,-33,-34,-23,-71, 
  /* [30][0][][] */ 60,54,26,37,1,91,-90,59,-127,11,4,-65,-70,-97,52,-27, 
  /* [31][0][][] */ 18,50,-38,33,-31,79,31,35,-127,68,59,67,39,81,-42,10, 
  /* [32][0][][] */ 39,-85,-24,-35,127,-24,52,30,-19,13,7,-31,58,-3,54,73, 
  /* [33][0][][] */ -66,53,-18,12,25,42,54,98,-41,-109,-1,-23,-37,-31,-9,127, 
  /* [34][0][][] */ -24,57,-108,-43,-46,113,91,16,48,57,50,-52,-13,-127,-22,58, 
  /* [35][0][][] */ 34,127,-59,8,27,-86,-35,34,-17,-37,-14,-40,61,4,98,-38, 
  /* [36][0][][] */ -97,4,31,18,-127,49,31,-89,-48,-93,127,21,31,15,-70,-7, 
  /* [37][0][][] */ 17,77,-77,-1,-10,18,-16,-48,-87,77,-30,-70,-21,-14,-102,-127, 
  /* [38][0][][] */ 97,75,-111,77,-101,35,51,-32,45,-7,7,-24,30,127,-22,-111, 
  /* [39][0][][] */ 75,82,-68,-78,12,-91,36,-89,44,125,-79,-9,-127,27,8,-34, 
  /* [40][0][][] */ 127,-64,18,-34,87,29,11,18,45,-62,-1,-75,-42,-44,-11,23, 
  /* [41][0][][] */ 53,-84,36,116,105,95,-73,-81,116,38,-102,127,88,-7,69,-75, 
  /* [42][0][][] */ 127,-10,93,-43,-14,-30,66,-14,-26,-38,27,-32,-81,61,-39,2, 
  /* [43][0][][] */ 11,-21,16,127,-3,-62,15,71,89,-42,-97,-50,-39,104,-87,35, 
  /* [44][0][][] */ -38,18,1,-13,-65,-19,46,40,-46,46,31,127,-10,-4,-30,-61, 
  /* [45][0][][] */ -1,-27,127,79,-33,64,75,101,-18,-67,55,-8,-64,11,7,38, 
  /* [46][0][][] */ 6,52,41,64,-83,-71,10,-35,-1,-60,-127,-11,7,-11,-79,-5, 
  /* [47][0][][] */ -34,55,-13,-11,-39,-26,-51,89,-59,61,-127,54,-76,12,-45,5, 
  /* [48][0][][] */ 19,-12,-99,-56,127,-13,16,62,94,13,96,-18,-31,113,69,-6, 
  /* [49][0][][] */ -15,-52,63,127,11,55,32,-24,112,50,-33,56,-43,-32,-7,-14, 
  /* [50][0][][] */ 22,-45,-15,0,12,-9,29,127,-56,-82,22,31,83,29,34,28, 
  /* [51][0][][] */ -96,-46,26,-23,44,50,127,-69,-32,34,-126,-64,-94,114,-73,-66, 
  /* [52][0][][] */ -98,-99,-35,-3,30,-32,127,28,54,35,90,125,59,-41,-83,-11, 
  /* [53][0][][] */ 100,32,-23,-62,-5,15,54,-10,-64,-35,-127,124,-26,-88,5,-35, 
  /* [54][0][][] */ -8,91,54,-31,46,127,29,-34,6,-20,111,23,46,6,-80,-47, 
  /* [55][0][][] */ 36,-36,-97,-7,51,-127,-111,57,-20,22,-75,-105,-90,28,-21,58, 
  /* [56][0][][] */ 21,-38,55,-38,-72,51,-6,35,102,21,104,127,53,-56,88,-13, 
  /* [57][0][][] */ 43,17,109,-92,-53,44,-60,-127,-70,-12,11,-31,8,104,-99,120, 
  /* [58][0][][] */ 26,22,-53,3,44,44,-37,-127,72,12,6,-31,-46,-4,-9,-95, 
  /* [59][0][][] */ 16,72,-47,-42,-25,-127,-12,25,49,68,-49,-5,-64,-105,-2,-46, 
  /* [60][0][][] */ -111,-61,67,80,127,2,16,-105,67,-23,81,-25,-24,4,34,9, 
  /* [61][0][][] */ -101,45,113,3,72,-40,127,13,52,-49,26,-12,-47,-1,27,-32, 
  /* [62][0][][] */ 6,33,-106,-10,-98,105,-13,122,-127,50,5,62,-11,-70,-76,-126, 
  /* [63][0][][] */ 67,94,127,10,21,12,59,-29,72,53,14,-12,8,-62,72,17, 
  /* [64][0][][] */ -20,-48,102,11,-70,-45,30,111,48,93,-6,36,-12,56,21,127, 
  /* [65][0][][] */ -57,-92,75,50,-6,30,0,127,-62,24,83,51,61,-5,-16,-38, 
  /* [66][0][][] */ 32,17,-8,40,127,43,8,-25,-12,67,8,14,-41,-20,-45,-112, 
  /* [67][0][][] */ 127,-20,-32,-54,-83,80,-77,80,-39,-4,-12,-15,22,-118,30,44, 
  /* [68][0][][] */ -30,-78,77,36,43,-127,-31,-4,-24,-120,-31,15,44,118,46,-84, 
  /* [69][0][][] */ -62,127,-14,-20,24,33,66,-18,26,-23,9,5,39,-2,1,58, 
  /* [70][0][][] */ 122,83,-94,61,106,-30,-127,92,74,-64,-60,3,-22,49,11,-50, 
  /* [71][0][][] */ -9,-18,-44,13,-79,127,0,-30,-63,3,2,-5,-54,-27,95,61, 
  /* [72][0][][] */ 62,44,88,74,-42,-127,25,-23,-16,14,-56,-114,-15,-10,-68,99, 
  /* [73][0][][] */ -44,6,34,-118,-103,-127,52,19,-40,11,-85,-26,-36,19,54,48, 
  /* [74][0][][] */ -78,127,1,-2,125,-106,34,-23,91,-65,-67,-20,92,-95,-26,-80, 
  /* [75][0][][] */ 18,18,-22,7,-35,2,-127,22,-9,-77,-22,25,23,6,-17,-37, 
  /* [76][0][][] */ 2,-16,12,-52,-12,-63,3,-13,30,-39,2,-10,6,37,-127,10, 
  /* [77][0][][] */ -39,-39,76,-47,51,42,127,-96,92,119,19,-33,58,-51,58,73, 
  /* [78][0][][] */ -91,-14,127,9,-41,-15,15,-19,-32,-4,71,62,-49,-30,-45,-78, 
  /* [79][0][][] */ 19,-62,51,103,-2,127,30,38,-83,-22,16,12,-48,57,56,71, 
  /* [80][0][][] */ -58,-76,-71,7,5,75,-56,51,-59,-20,13,61,-4,28,-54,-127, 
  /* [81][0][][] */ -127,-27,21,-39,-22,14,-35,38,4,-38,-49,-18,55,-85,-3,-47, 
  /* [82][0][][] */ -83,86,-15,38,-76,4,41,-51,37,-14,-73,57,82,-83,14,-127, 
  /* [83][0][][] */ -34,-40,19,-5,-31,-127,35,-81,58,-46,-18,37,-14,21,-20,31, 
  /* [84][0][][] */ -62,-8,9,-43,-8,-54,-3,57,36,-21,4,-42,15,-100,21,-127, 
  /* [85][0][][] */ 54,-31,-127,79,-17,-7,34,81,2,-58,33,0,-90,64,2,41, 
  /* [86][0][][] */ 1,-33,27,1,74,-9,127,-19,34,6,5,19,-10,42,35,38, 
  /* [87][0][][] */ 34,-1,-16,-48,-15,76,-37,40,2,-127,66,-10,-62,3,-44,13, 
  /* [88][0][][] */ -26,-39,60,127,-19,12,112,-22,31,40,78,25,-54,15,-53,89, 
  /* [89][0][][] */ -35,-7,35,82,27,-14,-43,-21,-97,127,48,-10,-35,-65,122,15, 
  /* [90][0][][] */ 78,-121,70,-20,-8,-9,-49,29,-44,19,-43,-17,2,-127,27,-76, 
  /* [91][0][][] */ -127,-94,-97,34,93,123,-14,-7,32,5,93,100,104,-14,79,-127, 
  /* [92][0][][] */ -87,-15,2,-89,-52,-14,25,0,116,-127,-46,-57,-43,105,-100,49, 
  /* [93][0][][] */ 80,28,39,-3,-124,-24,127,39,-4,-46,52,30,11,18,-7,53, 
  /* [94][0][][] */ -105,-31,-45,-12,-30,-22,-94,-61,-71,127,10,37,118,53,70,17, 
  /* [95][0][][] */ 16,-63,-100,122,53,81,-47,-93,21,-103,-5,-67,127,83,36,50, 
};
const TfArray<4, int> tensor_dimension65 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant65_scale = { 96, { 0.0034088518004864454, 0.0022656666114926338, 0.0045307646505534649, 0.0096382731571793556, 0.0022263829596340656, 0.0037912048865109682, 0.0032496748026460409, 0.0020102350972592831, 0.0052048121578991413, 0.003945621196180582, 0.0019130429718643427, 0.003072201507166028, 0.0054930802434682846, 0.0026354093570262194, 0.002190200611948967, 0.0064271246083080769, 0.002130779204890132, 0.0031441126484423876, 0.0026554740034043789, 0.0027670334093272686, 0.0027103708125650883, 0.0027670850977301598, 0.0056716352701187134, 0.0040925084613263607, 0.0035513876937329769, 0.0063488367013633251, 0.0034331060014665127, 0.0028775667306035757, 0.0041133039630949497, 0.0054404824040830135, 0.0037944226060062647, 0.0032319168094545603, 0.0045390753075480461, 0.0032229667995125055, 0.0023436448536813259, 0.0023570058401674032, 0.0021972283720970154, 0.0018622447969391942, 0.0019033912103623152, 0.0028571935836225748, 0.004409037996083498, 0.003048459067940712, 0.0044199572876095772, 0.0029248655773699284, 0.0095873093232512474, 0.003807079279795289, 0.0032462135422974825, 0.0021966802887618542, 0.003461968619376421, 0.0032249889336526394, 0.0032015028409659863, 0.0035607358440756798, 0.0029535000212490559, 0.0031384986359626055, 0.0037180304061621428, 0.0029273296240717173, 0.0039578969590365887, 0.0026466459967195988, 0.0029450287111103535, 0.0035453164018690586, 0.0021744973491877317, 0.0040427236817777157, 0.0029619107954204082, 0.0055003003217279911, 0.0023276826832443476, 0.0045030135661363602, 0.0026443253736943007, 0.0037886665668338537, 0.0022276232484728098, 0.0073493653908371925, 0.0022222544066607952, 0.0046473043039441109, 0.0030099204741418362, 0.0024615891743451357, 0.0048008030280470848, 0.0033619743771851063, 0.0034783396404236555, 0.0023715861607342958, 0.0029147493187338114, 0.0044243400916457176, 0.0032459755893796682, 0.0037277508527040482, 0.006071645300835371, 0.0031400932930409908, 0.0026716566644608974, 0.003354775020852685, 0.0053067612461745739, 0.0073384428396821022, 0.0023530423641204834, 0.0036744819954037666, 0.0052913874387741089, 0.001386387855745852, 0.0016813901020213962, 0.0058504631742835045, 0.0036619130987673998, 0.0022463577333837748, } };
const TfArray<96, int> quant65_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const ALIGN(8) int8_t tensor_data66[16*1*1*96] = { 
  /* [0][0][][] */ -30,1,43,-31,-40,1,11,-62,18,14,-44,58,-6,111,-32,-18,-19,5,-4,64,26,-5,17,-1,-7,-8,35,-81,36,49,38,-5,-29,-75,-33,-20,-27,-11,-44,-9,38,-10,35,-13,15,-15,55,-50,19,6,-9,-4,2,-41,-1,3,-14,31,-10,-1,-29,-78,-43,-27,21,38,-127,5,26,-16,-34,-81,82,17,2,-27,-18,31,35,-59,51,53,6,28,5,14,-1,-7,-38,-1,47,42,-31,-10,-18,-7, 
  /* [1][0][][] */ -8,18,2,12,-7,21,9,-34,8,57,-15,19,-34,12,-7,11,-127,26,16,23,18,-18,17,-10,6,17,-35,-32,-14,5,8,76,-37,14,61,104,-36,-17,17,36,-83,-20,-15,-4,-38,-6,10,68,42,8,-12,-70,8,24,-70,17,-14,14,75,-97,-70,40,-33,16,10,-16,-49,-51,-12,-12,33,30,19,29,5,-35,-5,61,-78,13,-7,11,-36,-1,1,-52,-20,32,-69,-10,7,-32,-20,23,0,-19, 
  /* [2][0][][] */ 49,-9,14,-45,3,-7,-15,43,5,18,29,-20,-6,-32,-17,-60,19,-26,-16,22,-114,-42,-72,0,-9,-56,2,55,-1,5,-15,5,42,-38,26,-60,-72,40,23,32,30,-50,32,-45,-67,113,12,-6,42,-36,19,24,-32,83,50,37,-16,60,-122,-69,-19,6,-44,54,3,2,6,28,63,0,-127,-20,21,28,-22,4,-1,-39,-48,26,29,-24,34,13,15,-70,5,-32,34,-68,-12,-31,8,-12,29,-32, 
  /* [3][0][][] */ 41,-28,-9,-8,-11,-3,-3,53,0,-16,45,8,28,-88,9,8,-44,-6,47,-16,-127,-55,49,10,-41,2,3,10,4,-16,1,21,10,-22,-25,0,-28,-35,46,16,-13,-7,-65,9,25,19,-16,-34,41,-31,45,-46,39,19,28,38,-26,-13,-25,28,-21,-39,40,29,-8,-10,81,-6,30,-32,-28,35,-17,9,41,-86,-75,-27,-7,30,-17,14,-14,-23,22,25,46,35,40,-58,-16,-38,-26,-23,-22,11, 
  /* [4][0][][] */ -19,-2,2,-13,-127,-7,42,-83,6,-48,-41,61,18,-7,28,24,51,-33,-85,-50,-6,-68,73,1,-42,2,-19,29,17,17,26,-4,42,-5,87,-79,6,-8,-13,62,45,7,-51,-38,45,-41,-83,75,15,6,-7,53,-54,48,-11,-37,28,-14,47,-19,-98,30,-39,-62,23,0,-3,-115,0,-3,103,-5,11,61,-30,-92,-15,0,15,-24,6,6,5,36,31,4,73,-11,-56,20,10,-20,-5,-81,-16,6, 
  /* [5][0][][] */ -6,-2,33,14,18,-44,19,62,13,-12,-127,-63,-1,3,-75,-10,-77,-11,11,-7,40,-1,20,-3,-9,24,27,21,21,15,33,35,-8,34,56,-44,68,18,-23,-29,0,-21,-15,4,-11,28,-18,-54,42,-3,-8,12,-15,-50,18,10,31,8,-17,12,5,-20,10,-31,29,-8,-67,-21,-60,11,8,19,-30,-30,-6,4,3,-34,15,19,-6,0,22,19,61,-3,-39,3,-30,38,12,5,3,3,-21,-1, 
  /* [6][0][][] */ -25,-4,14,27,1,-14,-12,9,8,8,41,-54,-11,-24,-35,-41,127,-76,-9,-71,-61,65,-29,9,30,25,39,55,42,-18,-15,-22,-34,79,56,-4,-4,-28,53,-66,-27,56,43,17,4,3,-58,-37,-7,56,-40,16,-24,17,7,59,0,83,-58,-64,-48,53,9,-3,24,-36,-51,61,-42,66,83,-9,3,-53,16,-13,55,-119,-85,31,-4,-11,-11,-27,40,31,-10,3,38,56,-13,-9,-20,22,-19,-30, 
  /* [7][0][][] */ -47,40,-18,13,-69,1,34,-100,27,-74,33,10,-58,29,-35,-43,-31,-37,76,30,-123,-4,45,2,34,-39,3,43,-10,38,-5,11,-26,45,-8,-17,-40,9,44,-35,-3,20,-45,68,-33,51,-6,127,-63,28,0,-44,0,-18,-22,-86,-5,13,-62,4,-15,65,-20,-43,46,-75,-104,28,18,-8,15,73,-10,-7,-5,23,-22,24,-18,2,13,-29,11,5,-76,36,-31,-13,-108,-85,21,38,-45,21,-33,-34, 
  /* [8][0][][] */ -1,-25,6,57,-87,7,-46,22,21,61,12,77,26,15,-32,16,116,43,53,-26,-69,61,-68,41,-56,17,-62,-22,-50,-6,8,57,2,-6,28,-37,-84,-9,-41,41,24,61,11,94,60,-46,-87,-27,-29,-54,0,-32,-48,67,-5,81,-55,-43,-4,14,-72,-25,-59,43,-71,-16,-59,0,13,0,83,127,-53,55,-12,-24,78,43,-17,-41,-6,6,-48,-8,-52,-26,60,-33,40,-15,19,-18,84,-4,32,26, 
  /* [9][0][][] */ 37,16,-72,-26,40,-12,-18,41,-38,17,127,23,-12,-55,48,-49,38,7,-1,0,-56,-36,-27,12,22,-30,-18,-9,38,1,-44,52,48,-2,2,6,15,-22,68,1,-19,3,-3,-46,-41,16,18,31,-23,-74,-53,-2,-45,32,11,20,-36,-44,83,-42,-20,-7,51,4,6,-29,8,80,-33,-11,43,-60,41,-20,-31,-52,12,-58,-89,51,30,11,41,-4,11,-30,12,18,68,-31,-9,22,-12,-73,-10,9, 
  /* [10][0][][] */ -7,-11,23,1,27,5,34,6,-37,-49,-30,-34,-15,-23,53,13,64,-57,8,40,-29,-82,-5,-39,7,-14,44,12,-28,25,27,3,-14,-61,78,12,-32,25,69,-23,-4,30,-18,-39,-52,59,32,-84,-42,47,32,-56,16,-62,-33,-38,29,-33,26,4,22,-38,6,-13,25,-31,-127,56,0,-32,31,-48,10,-7,-23,23,-19,41,-22,-29,25,4,26,41,-12,13,-43,-27,73,4,-18,20,-4,-40,43,-62, 
  /* [11][0][][] */ -16,84,8,9,11,30,58,0,26,10,-24,-2,-40,-43,-113,-31,-22,6,-50,-1,75,-58,-43,45,-97,13,39,2,-30,41,2,65,-31,-7,-89,-38,-19,106,-11,45,-62,8,-51,39,-22,4,-17,4,-30,-76,-26,20,-32,127,47,32,-60,-70,-16,-35,-10,-47,-54,-37,94,-23,-17,-11,-67,-30,-114,-30,-109,-32,-12,43,59,-44,-54,-50,-16,68,-15,-53,-32,-15,23,-13,65,54,69,-24,-83,-17,-75,-3, 
  /* [12][0][][] */ -127,-39,-4,11,-19,-92,-75,58,10,88,-44,-75,73,-15,-14,-70,-26,-33,5,23,-53,-23,11,61,-24,-26,-18,-51,50,2,-12,-33,73,71,52,-19,46,-30,-21,-43,-57,40,-75,-83,-16,-115,64,-99,88,-108,-38,17,-18,-67,27,99,50,53,3,-8,-31,3,-62,-107,-35,-7,-47,47,-5,47,84,-27,56,34,-1,35,31,2,0,20,70,-1,-59,59,34,-16,-20,18,-37,-24,37,63,79,-5,-37,33, 
  /* [13][0][][] */ -29,22,-35,13,32,11,15,2,10,-24,-50,-24,4,57,-26,-10,34,-46,11,-82,23,-4,-4,0,44,-2,-57,84,-25,11,-5,66,-3,25,-68,17,-23,15,66,10,-19,59,52,58,-31,-17,-46,-4,-94,46,17,35,-19,-64,3,-48,21,88,62,-61,-9,-11,50,-15,0,-51,-52,-63,72,13,-42,66,-34,64,-24,33,42,46,-10,66,-72,27,23,8,127,58,15,18,54,-22,8,11,20,2,-56,-66, 
  /* [14][0][][] */ 7,23,-26,2,26,77,1,25,16,-23,-10,-22,-12,46,27,18,38,42,11,-74,-1,-9,-28,23,32,-29,12,-7,11,12,-24,-31,-39,23,-26,-9,33,8,-62,1,-16,30,31,-66,-8,-13,-54,110,-45,12,-6,-21,24,-25,8,17,-45,-28,88,8,-1,-32,10,33,0,-62,-127,42,81,10,23,35,-41,-71,-36,-78,-1,-28,-7,37,1,13,19,-28,27,6,20,33,-20,4,7,31,-28,-10,43,-38, 
  /* [15][0][][] */ -12,50,-24,52,46,33,41,-23,0,23,21,31,-42,-75,17,13,53,10,0,-7,-46,40,-13,15,9,7,51,-29,16,35,-1,-15,38,49,23,3,15,20,-28,-19,-19,38,4,48,17,-17,30,-10,-6,-37,-71,8,23,-45,-15,-10,-26,-38,96,23,-8,-2,44,-16,39,19,-52,80,-51,22,127,55,59,-67,-24,-66,24,-35,-3,-27,63,30,-8,-11,21,-48,26,-29,-21,30,42,33,3,-10,-43,-7, 
};
const TfArray<4, int> tensor_dimension66 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant66_scale = { 16, { 0.0032386970706284046, 0.0022982796654105186, 0.0026708068326115608, 0.0033558376599103212, 0.0025948814582079649, 0.0039373543113470078, 0.0027565392665565014, 0.0022509091068059206, 0.0028408083599060774, 0.0029867792036384344, 0.0028842096216976643, 0.0027821622788906097, 0.0018098099390044808, 0.0024064714089035988, 0.0030663332436233759, 0.0031172169838100672, } };
const TfArray<16, int> quant66_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const ALIGN(8) int8_t tensor_data67[96*1*1*16] = { 
  /* [0][0][][] */ -4,-95,29,-95,39,38,-79,48,-74,-84,-41,-69,-42,-62,65,127, 
  /* [1][0][][] */ 2,64,17,-38,127,-18,-20,34,-5,-93,18,14,19,32,-23,-107, 
  /* [2][0][][] */ 10,54,-17,-9,-25,-28,-16,78,45,-35,-77,44,-127,55,-48,101, 
  /* [3][0][][] */ 127,-14,-28,-9,29,-102,34,-51,-29,-31,55,-43,2,72,119,-44, 
  /* [4][0][][] */ -27,59,13,-18,51,26,76,13,-50,49,-21,13,127,38,-54,-67, 
  /* [5][0][][] */ -15,-70,72,22,17,127,105,-47,-44,43,27,-40,87,-56,18,10, 
  /* [6][0][][] */ -47,-93,-15,103,93,-104,33,-96,-127,-71,-61,-89,-31,-40,-81,-46, 
  /* [7][0][][] */ 73,-20,127,-38,-26,-39,50,2,11,-63,-17,-119,-65,-57,21,68, 
  /* [8][0][][] */ -63,12,52,16,-127,-25,-1,-79,-58,29,-34,45,-125,-67,-56,10, 
  /* [9][0][][] */ 18,34,-105,-48,-27,-127,-63,43,-65,12,-60,-37,-68,9,58,27, 
  /* [10][0][][] */ -78,127,-58,2,-12,-70,123,71,-25,-41,-25,10,44,-34,30,93, 
  /* [11][0][][] */ -91,-8,-58,14,-41,59,-38,10,74,-19,17,78,127,-19,0,-3, 
  /* [12][0][][] */ -113,53,127,-96,-21,77,57,-59,-24,57,125,-6,15,-19,41,109, 
  /* [13][0][][] */ -21,-112,91,31,-6,-81,-21,-111,-91,-54,127,-114,24,-63,31,-66, 
  /* [14][0][][] */ -127,81,-98,-8,39,14,47,-14,-21,-27,28,-52,-25,39,-16,84, 
  /* [15][0][][] */ -68,127,36,-12,7,28,-29,-29,-11,-69,10,-14,19,-35,11,52, 
  /* [16][0][][] */ 7,-16,-105,11,67,-9,127,-85,69,46,96,-112,-14,22,-114,-44, 
  /* [17][0][][] */ 25,100,87,9,27,10,4,-98,-47,-52,-87,-54,70,127,-49,125, 
  /* [18][0][][] */ 20,-43,-24,48,-34,-22,-24,22,43,-45,90,127,-69,-25,-44,57, 
  /* [19][0][][] */ 35,-7,56,-27,-31,-127,23,-54,7,46,-124,-97,-8,54,-19,-55, 
  /* [20][0][][] */ 39,-4,0,-66,-6,23,-12,32,-75,72,-56,127,23,124,13,37, 
  /* [21][0][][] */ 18,-56,-5,-119,105,-123,-100,127,19,-47,-33,22,124,125,-6,-40, 
  /* [22][0][][] */ 52,127,-41,-5,-53,-100,73,-3,70,28,-13,-16,-88,-16,-110,11, 
  /* [23][0][][] */ -45,41,-52,50,-12,94,-26,-66,-22,-26,-17,19,1,-127,42,-72, 
  /* [24][0][][] */ -38,-16,91,-45,127,110,-31,-27,15,9,61,-13,28,73,59,3, 
  /* [25][0][][] */ -45,-72,5,78,-25,-8,-60,37,-116,-6,127,-13,0,-33,-91,19, 
  /* [26][0][][] */ -126,1,89,-28,-46,89,79,-127,7,-64,4,-11,-75,115,-67,-20, 
  /* [27][0][][] */ -45,-15,43,8,-127,-28,71,-37,-22,34,17,-11,-8,20,19,13, 
  /* [28][0][][] */ 62,-127,-36,83,-34,-43,85,96,-10,48,1,25,-85,-9,-75,-24, 
  /* [29][0][][] */ 105,71,50,15,71,59,98,48,104,20,-92,34,33,127,88,76, 
  /* [30][0][][] */ -76,-12,-96,68,61,-71,-20,34,-127,-51,-29,-49,-36,14,-100,-10, 
  /* [31][0][][] */ 25,-127,-45,69,41,41,-36,3,-30,69,-22,2,-30,-1,-34,-44, 
  /* [32][0][][] */ 10,-20,89,-37,-59,-27,86,51,13,-109,-127,-45,-22,13,-106,84, 
  /* [33][0][][] */ 127,106,54,-33,72,-43,-64,81,73,-10,104,68,-85,59,39,21, 
  /* [34][0][][] */ 6,-21,-127,3,-14,37,20,-69,-9,80,-13,-77,-53,-76,-112,-72, 
  /* [35][0][][] */ -44,-93,127,-40,67,-30,-48,54,103,-32,51,55,-50,-64,-21,-1, 
  /* [36][0][][] */ -44,-66,-82,-69,8,-106,-31,-127,-111,-11,59,44,-9,-126,-20,1, 
  /* [37][0][][] */ -38,-72,-45,67,94,-68,40,-54,-127,-69,-46,-105,-39,13,-67,-10, 
  /* [38][0][][] */ -22,-9,51,26,127,-84,50,-63,1,-53,-24,118,33,-49,-42,-63, 
  /* [39][0][][] */ 31,-19,127,8,-49,73,-1,3,-59,-51,-22,21,-52,-104,9,10, 
  /* [40][0][][] */ 41,-43,-15,46,-101,31,-127,17,-102,60,45,-49,44,-124,51,-32, 
  /* [41][0][][] */ -127,56,-95,57,-14,29,106,-22,33,-57,20,-53,-104,11,-22,-76, 
  /* [42][0][][] */ -59,-125,98,-35,43,-79,-77,93,-112,-127,-65,58,29,-52,-22,44, 
  /* [43][0][][] */ -37,36,-46,-37,39,75,-5,-15,15,98,-49,94,95,-14,64,-127, 
  /* [44][0][][] */ -4,45,99,25,20,-87,50,12,-9,-82,-59,-33,112,4,8,127, 
  /* [45][0][][] */ -43,-53,-18,-25,51,-44,-29,-127,-47,-26,-1,13,43,-40,-1,-37, 
  /* [46][0][][] */ 29,36,-2,-127,-7,-65,-81,50,-14,45,41,-6,-6,98,-43,99, 
  /* [47][0][][] */ -47,12,-16,-21,-41,27,-14,-66,-29,15,80,22,57,-34,42,-127, 
  /* [48][0][][] */ 19,-40,21,43,51,-78,-39,-127,66,-15,61,-30,-28,-119,-100,-69, 
  /* [49][0][][] */ -13,-127,15,7,22,104,-61,3,48,9,27,38,18,52,49,-12, 
  /* [50][0][][] */ -5,-58,7,48,27,-50,-15,2,29,16,-34,-44,-2,17,-23,127, 
  /* [51][0][][] */ -2,16,83,68,104,58,60,-115,14,41,17,31,-20,127,-49,110, 
  /* [52][0][][] */ 22,-101,39,41,22,109,93,-27,-41,-50,17,-108,127,34,-18,43, 
  /* [53][0][][] */ 63,70,-2,52,-47,-59,127,34,-28,18,54,-12,12,70,-9,-2, 
  /* [54][0][][] */ -5,127,7,102,114,-72,-103,20,70,-21,27,-54,44,-92,-9,-10, 
  /* [55][0][][] */ -29,7,40,62,16,-3,-127,20,5,-34,21,54,-34,-6,-15,-24, 
  /* [56][0][][] */ 85,106,-18,84,-118,-4,-43,79,103,127,38,25,38,49,40,49, 
  /* [57][0][][] */ 23,122,-35,-42,40,86,-52,-9,98,42,56,-52,58,-86,127,47, 
  /* [58][0][][] */ 36,-5,24,-107,8,35,-111,12,5,-46,-96,11,16,-127,72,21, 
  /* [59][0][][] */ 47,-112,-20,90,26,-42,77,127,-35,-39,-120,-26,-36,-25,-45,-41, 
  /* [60][0][][] */ 24,28,-69,-19,38,-50,-46,54,-32,34,-17,-127,-6,-24,-22,-45, 
  /* [61][0][][] */ 127,24,74,-20,-15,-23,60,-99,-49,13,-52,-15,0,67,-48,50, 
  /* [62][0][][] */ 51,-93,125,28,-18,48,-9,-26,-127,61,-8,27,3,-9,9,-58, 
  /* [63][0][][] */ 34,-13,12,-9,25,0,115,-26,0,-19,21,-48,-31,-29,127,63, 
  /* [64][0][][] */ 21,71,-79,30,-52,-6,64,8,9,21,57,75,-25,47,-48,127, 
  /* [65][0][][] */ 17,55,32,-2,37,-1,-92,106,125,-113,-38,-30,-25,-3,127,-4, 
  /* [66][0][][] */ -20,-35,83,-42,-75,-48,66,-34,14,11,58,36,127,-9,-59,-26, 
  /* [67][0][][] */ 48,61,-115,59,-19,5,36,26,67,-127,-35,-4,-18,-31,32,6, 
  /* [68][0][][] */ 80,-28,85,57,-67,-9,18,3,-9,-40,-127,49,76,119,11,27, 
  /* [69][0][][] */ 122,18,-49,72,56,-119,-56,10,-2,-54,4,-46,80,41,127,-23, 
  /* [70][0][][] */ -38,-127,80,-45,-67,-23,-26,41,94,-124,6,15,-53,48,-94,36, 
  /* [71][0][][] */ -87,-76,-10,-10,-53,127,-28,74,28,-14,54,18,106,-49,42,-51, 
  /* [72][0][][] */ -35,-12,-49,19,8,42,-127,-38,14,12,109,81,-112,-61,15,74, 
  /* [73][0][][] */ 49,-82,32,-44,-78,57,12,-14,-39,-24,-127,-38,82,-48,27,27, 
  /* [74][0][][] */ -111,-3,-79,30,25,-10,-50,127,10,18,-23,77,4,-10,117,-69, 
  /* [75][0][][] */ 27,-52,127,-66,-7,28,-55,-46,26,99,35,85,14,-49,-18,-40, 
  /* [76][0][][] */ -38,-42,-28,43,121,83,20,-19,-53,-75,-101,-127,62,-19,107,7, 
  /* [77][0][][] */ 111,26,5,64,25,-32,-127,96,-34,-39,-29,43,-21,10,112,-20, 
  /* [78][0][][] */ 43,43,17,-103,-22,9,88,25,-6,28,43,69,-3,-89,-33,-127, 
  /* [79][0][][] */ 24,-22,-8,82,-17,33,-76,-17,-20,-127,7,40,-10,-72,-86,-34, 
  /* [80][0][][] */ -127,39,37,120,110,-16,120,-68,108,-32,59,-12,14,73,-66,-51, 
  /* [81][0][][] */ 19,-8,-70,43,-107,93,-51,24,19,-3,75,-127,26,58,61,-27, 
  /* [82][0][][] */ 37,-49,-5,8,-19,-55,-112,127,47,-66,-96,-51,67,-8,78,-18, 
  /* [83][0][][] */ 37,47,-43,48,-33,27,-41,127,72,-47,-18,-38,-22,-14,48,16, 
  /* [84][0][][] */ 86,102,2,-40,23,113,80,104,60,127,-5,-57,24,47,102,25, 
  /* [85][0][][] */ 104,39,-22,-69,-13,-20,-31,-24,33,29,50,3,56,-63,127,-5, 
  /* [86][0][][] */ -14,-23,63,-6,-40,32,-30,-127,-59,32,-13,94,13,-64,44,-24, 
  /* [87][0][][] */ -53,-77,89,7,77,-127,-27,-70,120,-51,-49,13,-64,-3,-29,36, 
  /* [88][0][][] */ -43,21,108,101,-7,0,-56,-21,-65,-127,41,53,-27,43,-79,15, 
  /* [89][0][][] */ 21,31,-82,5,31,19,-58,29,127,-68,13,-3,-124,-60,-30,-39, 
  /* [90][0][][] */ 75,77,58,-37,66,90,21,63,-85,24,8,-66,-28,-9,127,-8, 
  /* [91][0][][] */ 23,89,33,-14,-10,-22,17,95,77,-91,0,-24,-10,80,-93,127, 
  /* [92][0][][] */ 89,-86,-32,-15,-47,31,77,-26,57,26,-13,70,-32,127,-82,40, 
  /* [93][0][][] */ -34,2,36,69,54,-50,47,50,-33,-62,-127,-124,-28,23,109,58, 
  /* [94][0][][] */ -106,91,41,118,-86,65,-77,-18,-94,-53,-73,57,68,-127,-80,66, 
  /* [95][0][][] */ -121,-105,-10,108,-59,51,-118,87,41,14,75,41,64,-80,42,-127, 
};
const TfArray<4, int> tensor_dimension67 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant67_scale = { 96, { 0.0036449788603931665, 0.0021724933758378029, 0.0018822880228981376, 0.0019105335231870413, 0.0023916533682495356, 0.0015752316685393453, 0.0024205942172557116, 0.0021523030009120703, 0.0012157000601291656, 0.0019797568675130606, 0.0034134516026824713, 0.001997178653255105, 0.0018208072287961841, 0.0015915002441033721, 0.0030108713544905186, 0.0066301785409450531, 0.0015320177190005779, 0.0038724846672266722, 0.0025578942149877548, 0.0024763159453868866, 0.0025821966119110584, 0.0016539073549211025, 0.0018087072530761361, 0.0051824063993990421, 0.0010500046191737056, 0.0018080263398587704, 0.0026772634591907263, 0.0023646759800612926, 0.0037058871239423752, 0.0014896233333274722, 0.0021719702053815126, 0.0070038307458162308, 0.0021000904962420464, 0.0030990478117018938, 0.0021520687732845545, 0.0016348271165043116, 0.0022171044256538153, 0.0029637645930051804, 0.0022544695530086756, 0.0021762584801763296, 0.0027382266707718372, 0.0025893987622112036, 0.0011868629371747375, 0.0014411763986572623, 0.0029924006666988134, 0.0046239374205470085, 0.0032262413296848536, 0.0032825574744492769, 0.0021493579261004925, 0.0027350238524377346, 0.0038592363707721233, 0.002725295489653945, 0.0015259044012054801, 0.0030599280726164579, 0.0033777446951717138, 0.002311154967173934, 0.0035335500724613667, 0.001702653244137764, 0.0028680185787379742, 0.0033117274288088083, 0.0030146641656756401, 0.0050646685995161533, 0.0023812598083168268, 0.0022427011281251907, 0.00427635433152318, 0.0030073081143200397, 0.0025362421292811632, 0.0026609969791024923, 0.0031504561193287373, 0.0020407626871019602, 0.0015008228365331888, 0.0014665155904367566, 0.0026428301353007555, 0.0055887144990265369, 0.0027939914725720882, 0.0023299753665924072, 0.001794016920030117, 0.0024078772403299809, 0.0021692446898669004, 0.002227128716185689, 0.0025184119585901499, 0.0018787946319207549, 0.0026627862825989723, 0.0039402125403285027, 0.0011715618893504143, 0.0025275400839745998, 0.0030567464418709278, 0.0016786778578534722, 0.0016093007288873196, 0.00233083451166749, 0.0018926252378150821, 0.0033145912457257509, 0.0039469930343329906, 0.0046421010047197342, 0.0014066159492358565, 0.0020495166536420584, } };
const TfArray<96, int> quant67_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const ALIGN(8) int8_t tensor_data68[16*1*1*96] = { 
  /* [0][0][][] */ -13,27,-56,19,31,-81,34,4,-49,-21,-59,53,-38,34,127,32,-25,72,-29,43,32,-66,20,47,-10,25,0,31,61,27,-22,3,5,-19,-28,-32,15,6,5,-6,50,-79,7,19,-11,26,19,16,18,19,3,-18,85,50,-48,-13,-12,-7,-14,48,30,77,-80,-44,13,-7,-5,11,33,-18,5,22,35,-58,49,-5,-47,10,11,-64,-20,-44,-76,-47,-2,-42,43,1,-76,-3,14,-26,54,-34,-6,40, 
  /* [1][0][][] */ 24,2,-4,-64,-29,39,-48,-4,-74,-35,68,65,36,-35,-49,-72,-77,52,-10,-35,-54,52,2,-46,111,-94,-27,-43,-39,43,12,21,81,-56,-17,37,-44,-68,127,2,-25,18,36,-13,35,-35,-19,6,9,51,-31,-72,-52,41,6,49,-3,-56,-2,-4,-31,32,47,-5,13,-4,28,18,-29,7,-69,7,-18,4,10,47,-12,-14,68,40,49,54,-51,-4,-40,-85,-52,-19,50,-22,-6,2,-33,-8,45,5, 
  /* [2][0][][] */ -42,-27,-33,-21,-25,-23,28,36,-8,-127,-40,28,54,-45,40,-76,-62,43,11,-48,74,-45,-58,-18,-83,-94,-51,-20,17,62,16,8,35,-20,-2,-14,66,11,59,3,-66,-14,-21,12,5,30,-35,-2,-23,-6,21,-13,28,-14,29,-45,-22,5,-24,48,23,27,-53,12,-82,55,82,-49,75,-18,2,-28,-4,-16,10,-61,22,-24,34,28,61,-24,11,7,-126,-82,-20,24,49,4,33,-10,-4,49,81,29, 
  /* [3][0][][] */ 15,10,-61,61,-14,-28,-39,-23,-2,-51,5,-52,16,-69,-11,55,-17,-21,-7,-15,59,33,-54,-27,19,81,25,48,9,8,33,14,-57,3,1,29,-8,-36,32,-31,-27,19,-14,28,-15,7,-6,4,24,-13,27,-10,37,24,27,20,72,34,-1,20,-26,-25,35,-21,-27,41,-123,-40,-54,-55,-127,-10,-33,10,-11,39,81,52,19,34,76,-18,-18,-14,-16,-25,-9,35,46,32,66,-46,-28,22,-51,16, 
  /* [4][0][][] */ -6,107,76,-114,11,7,-1,-27,103,-66,-50,44,-42,-18,25,34,-126,32,-7,41,22,18,-62,-6,-21,-78,-1,-62,28,28,-32,13,-29,-31,-82,53,-92,9,41,-7,47,-22,0,-44,27,-75,-52,40,-5,-3,49,-64,43,-25,-40,-73,-75,-3,-35,40,-56,26,41,-5,-32,-33,-81,-52,-3,12,-15,-7,-11,-85,36,8,-86,-29,44,33,66,75,-38,-64,7,14,19,-13,60,-1,-127,-38,11,-5,-44,-37, 
  /* [5][0][][] */ -3,26,23,-71,-14,10,-21,-16,-19,11,-48,-72,-43,44,-4,-9,27,-11,25,41,-29,-12,-86,30,-56,-22,-35,-85,-8,62,-33,28,59,58,-33,36,127,-9,111,106,-26,-27,60,23,-46,50,-56,5,-47,-50,-26,-1,103,-16,-31,-58,60,34,-16,16,40,-29,-9,37,-21,-3,-102,35,56,-8,14,-68,-28,12,-18,-6,23,-15,-4,-7,-37,36,-31,-2,-4,86,33,6,35,5,-68,-22,28,-9,46,-60, 
  /* [6][0][][] */ 52,-15,29,-52,-17,-1,35,1,107,-15,-7,-33,37,-13,2,-37,83,-33,14,-36,-43,-58,23,-16,-29,-32,12,102,33,80,0,32,103,-45,57,-46,37,54,36,62,-32,28,-56,8,-76,55,-26,15,15,-48,-28,-18,48,3,-17,-100,-41,48,112,39,66,-44,-12,-91,21,30,48,9,28,-29,19,-127,43,-25,-25,-2,-66,-13,-54,-46,50,-11,-27,-3,19,52,23,-50,-16,-7,-12,-12,-23,9,51,67, 
  /* [7][0][][] */ 38,-25,105,-8,17,24,31,10,-73,86,61,30,-22,30,44,-10,-94,21,42,68,83,58,-19,33,57,-44,27,61,44,41,127,-16,80,-42,-5,-14,-38,18,41,-34,49,-115,-19,0,-11,51,-82,78,1,33,-26,-5,32,13,-31,-46,-18,-58,-24,63,-65,51,10,92,-26,-43,-49,12,-21,-45,-24,84,50,-42,17,66,-23,-68,95,22,-46,-31,52,-48,7,63,-59,-19,-109,18,-30,40,10,1,-74,-30, 
  /* [8][0][][] */ 15,87,-90,-80,-25,0,-57,23,72,-80,2,-19,33,-57,21,-27,35,-2,-25,-5,-78,95,0,-53,79,-47,-24,-34,7,45,11,-40,-83,-35,-21,37,-60,-106,30,-6,10,17,46,19,41,-49,36,-51,9,17,73,15,-2,2,-23,71,4,-14,0,1,-42,34,33,-23,1,-91,25,-29,-10,23,54,25,-22,21,-3,-2,-79,-10,-7,14,25,51,-54,23,59,-6,-1,-5,-9,31,-127,-23,17,-41,20,-13, 
  /* [9][0][][] */ -34,26,0,-56,15,-6,19,18,86,39,-18,6,0,-43,14,-8,82,-15,1,-53,36,-12,10,10,-54,-6,32,26,1,-11,-4,-34,-7,8,56,-23,-65,6,-16,-66,31,23,-2,-36,14,-8,-40,-4,-31,-7,35,-43,-90,-2,22,7,-2,-14,65,5,42,-7,24,25,-3,2,47,-127,-1,-16,-49,-7,10,26,14,-55,65,-24,-56,69,14,-43,37,-5,-63,-45,-4,-40,-81,-34,-27,-9,-7,19,6,-15, 
  /* [10][0][][] */ 28,47,31,-13,41,80,37,69,39,58,-37,-17,-19,20,21,65,81,-22,17,46,-10,79,14,40,-7,47,-6,-33,-43,-23,11,12,8,-26,-10,-30,6,60,34,49,66,40,-50,41,-13,18,-26,28,-12,-17,-68,-6,-91,8,-14,17,-27,3,-23,-55,31,-16,60,31,0,56,-34,-41,-37,-8,-21,36,-30,36,21,-14,-28,-25,14,-27,-1,17,-22,-7,-127,-38,-14,39,-21,18,-55,-6,3,-27,-56,-3, 
  /* [11][0][][] */ -8,-14,95,13,-48,32,68,-58,-2,18,-26,0,-51,70,35,-53,16,21,89,1,16,-40,-2,33,-57,-20,-11,-92,28,51,-13,-28,-17,54,8,14,-12,74,95,21,-49,-44,-32,-56,-18,35,-26,5,-65,10,-23,-8,-127,-14,14,-39,-35,13,-71,30,-55,-2,-39,-7,33,60,70,30,4,40,-48,19,3,47,-27,0,-8,-45,5,-12,-11,-30,24,11,-42,-66,-34,-30,46,36,2,-18,39,9,113,-24, 
  /* [12][0][][] */ 4,17,42,30,-2,-39,32,-45,-84,-112,59,-109,35,-57,-40,-50,68,35,-49,14,127,79,-79,-32,-55,-24,14,-27,-29,24,-41,-38,22,6,4,-70,80,-4,69,-24,66,9,-40,-24,70,-29,-49,-43,-68,-39,31,22,115,-38,20,42,19,-83,-1,-1,30,4,-27,53,-11,-23,121,4,37,-59,65,-42,49,-31,31,-22,-13,-3,-28,-12,56,-57,124,-18,30,14,-39,22,-17,-43,-39,5,6,26,-5,-90, 
  /* [13][0][][] */ 42,78,114,-30,-50,8,17,-61,66,5,-43,21,8,-72,30,43,-67,38,48,-8,38,-31,-24,33,-40,-22,-53,113,-3,82,38,-2,53,-8,-31,-7,-41,32,-21,-78,-40,31,-17,-8,2,8,-21,20,27,-20,12,-54,11,-14,-32,-45,-37,14,69,-3,-26,-3,-32,14,9,19,34,-49,0,-54,14,-12,31,-56,17,-25,0,10,51,-12,4,59,34,-67,18,14,27,-22,-12,-12,-127,4,25,42,-11,90, 
  /* [14][0][][] */ -30,-62,-50,-49,27,-17,-3,41,18,-12,20,49,3,-36,0,-38,-21,22,-21,16,9,-19,30,36,38,-24,13,40,11,-13,-49,8,17,-23,-127,1,4,-14,-18,25,50,-40,-12,-20,42,-16,24,-13,22,40,13,15,22,8,-27,-6,-27,-43,-5,27,27,34,35,-53,-1,-77,12,5,15,-25,-20,42,-22,-39,19,46,12,-3,48,-28,-23,3,89,-33,54,-69,26,-29,-62,-19,-44,3,9,41,29,-22, 
  /* [15][0][][] */ -20,-45,90,-106,43,0,50,-14,-33,88,0,10,-47,15,6,-23,-16,27,80,37,1,60,58,-8,-22,-43,32,41,-72,-9,91,-38,30,-30,7,27,-20,43,19,-29,94,-72,0,51,51,37,-24,87,-1,42,100,-80,47,-12,9,-83,-77,-48,50,-17,-93,41,4,-31,118,-69,18,-39,-13,-52,18,2,5,-17,10,13,-114,-124,12,-11,-16,-74,-43,-45,50,36,-12,-67,-37,-15,-66,127,-5,42,30,11, 
};
const TfArray<4, int> tensor_dimension68 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant68_scale = { 16, { 0.0033460177946835756, 0.0031662592664361, 0.0031831287778913975, 0.0030062617734074593, 0.0030996203422546387, 0.0033204890787601471, 0.0038297225255519152, 0.0023232889361679554, 0.0037318633403629065, 0.0053151962347328663, 0.0025991660077124834, 0.0047172061167657375, 0.0023660531733185053, 0.0036832494661211967, 0.0051660258322954178, 0.0027781585231423378, } };
const TfArray<16, int> quant68_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const ALIGN(8) int8_t tensor_data69[96*1*1*16] = { 
  /* [0][0][][] */ 108,57,-127,53,34,-57,-2,-9,88,61,-1,-70,-79,-53,46,41, 
  /* [1][0][][] */ -32,-77,16,105,-66,-83,-51,127,-33,-80,-115,-59,-15,-44,-9,-8, 
  /* [2][0][][] */ 11,-7,-52,25,-8,-127,-18,34,-27,-1,-70,-60,27,17,79,2, 
  /* [3][0][][] */ 95,98,-109,74,27,-36,69,36,3,-42,-2,36,-127,-40,-14,61, 
  /* [4][0][][] */ 47,53,-114,107,-108,-10,90,8,-91,-8,-41,28,-62,127,37,-106, 
  /* [5][0][][] */ 24,86,-46,-55,46,33,92,-61,-31,-3,-114,-30,-127,81,68,25, 
  /* [6][0][][] */ -26,13,-40,79,-6,-1,-78,-47,-34,58,-127,21,-68,10,-27,10, 
  /* [7][0][][] */ -9,15,-26,38,102,45,96,65,39,-19,80,15,127,-48,50,61, 
  /* [8][0][][] */ 30,4,-42,-127,-19,-50,15,-60,-77,115,-93,-50,-105,37,72,-64, 
  /* [9][0][][] */ -36,4,18,-101,91,98,-84,-95,-77,34,-127,-66,-5,46,-4,90, 
  /* [10][0][][] */ -37,-17,79,-67,59,70,-45,-44,-2,52,20,-65,-127,-9,-30,43, 
  /* [11][0][][] */ -127,29,-23,83,-78,-69,-95,49,-83,-45,98,-1,-33,-11,-68,21, 
  /* [12][0][][] */ -26,50,127,49,-37,-35,-5,-7,-112,-23,-59,-59,-59,-63,-92,-6, 
  /* [13][0][][] */ 127,-33,80,-11,-45,-37,-126,32,74,24,40,81,-19,-30,53,26, 
  /* [14][0][][] */ -47,127,69,8,9,-30,-32,23,-87,-46,7,20,117,-65,0,3, 
  /* [15][0][][] */ -54,21,48,-39,-16,-127,-9,15,43,41,-30,37,13,29,-90,-17, 
  /* [16][0][][] */ 15,-2,127,127,25,-37,-76,-1,-43,19,98,30,-12,56,-32,73, 
  /* [17][0][][] */ 10,-23,33,99,-36,-38,-8,-35,-20,-15,-1,36,-24,127,5,13, 
  /* [18][0][][] */ -33,-7,127,86,23,41,-42,-74,74,21,-35,-94,-70,-72,-1,30, 
  /* [19][0][][] */ 15,-8,7,65,-76,11,-66,-117,40,14,127,62,-35,-48,-73,38, 
  /* [20][0][][] */ 105,-47,-40,36,23,-35,-24,-65,-97,12,-124,127,-35,-12,44,-30, 
  /* [21][0][][] */ 67,58,-33,-27,73,-8,-64,-18,32,-40,-41,-15,-127,-56,-9,29, 
  /* [22][0][][] */ -12,25,94,-46,1,-127,-38,-13,-74,6,37,102,63,0,34,-127, 
  /* [23][0][][] */ 127,-75,10,-38,25,3,13,4,35,-40,25,-10,-103,38,15,-43, 
  /* [24][0][][] */ 20,-2,21,-22,-15,-127,-12,21,17,7,5,-11,35,-11,-29,-19, 
  /* [25][0][][] */ -32,-12,34,40,12,17,12,-33,9,74,40,-47,-64,18,-20,127, 
  /* [26][0][][] */ 42,0,-127,9,-38,48,44,-21,48,39,62,44,37,89,16,65, 
  /* [27][0][][] */ 16,-80,98,-9,-82,-125,54,59,2,-32,34,-28,-127,-58,-125,71, 
  /* [28][0][][] */ 52,77,-113,76,6,-34,67,127,61,-74,85,102,-100,-45,-6,19, 
  /* [29][0][][] */ 42,-73,-31,-86,24,16,-83,73,12,-39,-127,22,-16,-63,34,19, 
  /* [30][0][][] */ -56,-68,48,-52,-18,62,-45,69,116,-50,63,-2,4,-1,-127,17, 
  /* [31][0][][] */ -9,3,-15,2,-54,-127,-36,16,57,-65,44,-30,-126,-90,-50,2, 
  /* [32][0][][] */ -21,-78,-19,13,-90,17,-31,-29,0,-4,-105,106,-38,-127,-62,-52, 
  /* [33][0][][] */ -77,3,-68,-57,9,22,-20,-5,-127,41,-117,41,55,27,-63,-39, 
  /* [34][0][][] */ -12,65,-13,21,127,93,69,18,1,-5,92,-32,17,77,111,-23, 
  /* [35][0][][] */ -31,-107,1,-6,4,-66,37,127,-2,-53,-56,65,-59,-25,-28,40, 
  /* [36][0][][] */ -25,45,127,70,-73,78,59,-45,49,17,35,39,-8,-50,-57,-11, 
  /* [37][0][][] */ -10,4,72,-2,127,-22,-38,-38,-17,68,-24,-23,53,102,1,-51, 
  /* [38][0][][] */ -11,13,9,-9,12,0,23,-51,-27,-47,95,-12,-127,84,-80,-13, 
  /* [39][0][][] */ 127,21,5,-3,47,-29,35,-33,-24,4,-47,-48,-47,-2,-32,17, 
  /* [40][0][][] */ 20,93,-127,100,-52,8,86,27,14,-122,11,52,-83,-105,62,103, 
  /* [41][0][][] */ -20,-21,-48,45,-127,-38,-60,-10,-24,40,-33,-15,24,23,77,31, 
  /* [42][0][][] */ 50,73,-37,-8,115,83,127,69,-89,-57,-11,-102,-11,-66,4,-79, 
  /* [43][0][][] */ 48,-83,110,54,-127,-123,86,-32,29,-51,-25,-15,3,121,62,5, 
  /* [44][0][][] */ 69,111,40,20,-99,-85,-36,-5,1,13,-6,127,44,-9,22,-25, 
  /* [45][0][][] */ 36,40,-39,45,82,17,22,-65,-127,-46,-54,-82,-64,31,-81,-11, 
  /* [46][0][][] */ 62,73,86,-85,60,17,-110,-120,-127,0,29,38,-63,-51,-127,42, 
  /* [47][0][][] */ 25,55,52,-23,45,-32,30,48,17,3,-127,49,-33,-69,-57,-4, 
  /* [48][0][][] */ 12,-11,-10,-32,-65,34,47,97,-13,51,-107,19,-68,-115,4,127, 
  /* [49][0][][] */ -60,103,-1,3,-35,-16,-68,-57,-96,-78,-120,57,-127,109,-15,48, 
  /* [50][0][][] */ 4,-1,106,58,74,127,-68,-88,-1,20,64,8,46,9,29,91, 
  /* [51][0][][] */ -37,68,-12,9,-1,36,-127,18,19,-57,-85,56,56,-85,47,-4, 
  /* [52][0][][] */ -22,4,60,-91,-36,7,-69,55,-127,21,-40,-1,-67,-15,75,-72, 
  /* [53][0][][] */ 58,56,-21,37,40,-6,86,127,-46,-61,-27,14,15,40,-79,-54, 
  /* [54][0][][] */ 19,-3,60,25,12,-20,73,88,-82,-62,-91,-127,5,-26,-10,115, 
  /* [55][0][][] */ 55,57,-18,-15,-11,51,4,127,22,-33,-7,-96,82,52,15,122, 
  /* [56][0][][] */ 15,108,-73,81,123,55,-93,-73,-48,88,-52,80,104,-66,127,-45, 
  /* [57][0][][] */ -2,-22,112,59,14,-26,3,112,-45,-28,70,117,-127,-66,-11,5, 
  /* [58][0][][] */ 54,-31,43,-59,71,127,31,-98,29,20,-58,-47,-61,-45,16,-8, 
  /* [59][0][][] */ 26,-29,82,-39,83,25,72,12,33,-58,82,-41,7,-127,36,76, 
  /* [60][0][][] */ -16,35,-5,38,-50,14,6,-30,63,3,85,-127,-3,-91,-118,-99, 
  /* [61][0][][] */ -41,-44,-127,-127,60,-46,43,-54,-10,-36,-62,30,42,-9,25,57, 
  /* [62][0][][] */ -9,6,45,-24,127,6,-31,-28,-9,-43,93,22,18,-53,25,-13, 
  /* [63][0][][] */ -32,-30,127,85,-52,-28,-26,-15,32,22,-32,20,-15,39,81,-67, 
  /* [64][0][][] */ -35,24,-54,-56,27,127,-30,70,-11,7,-25,80,42,32,39,-16, 
  /* [65][0][][] */ -83,-14,71,-27,8,39,25,-39,52,-74,30,-78,-127,101,-16,87, 
  /* [66][0][][] */ 127,56,20,-84,55,-23,-56,-47,32,-15,-53,119,-36,-78,17,-92, 
  /* [67][0][][] */ -12,25,34,-18,-21,37,-62,8,-66,-38,-108,87,-82,-127,-12,-56, 
  /* [68][0][][] */ -20,-24,61,-4,2,-104,-14,-74,12,-127,11,39,21,-59,15,92, 
  /* [69][0][][] */ 115,-50,-9,64,53,94,13,-127,89,26,-91,-81,-93,62,-9,69, 
  /* [70][0][][] */ -29,-54,-33,5,-44,87,13,-113,74,45,61,13,63,16,127,4, 
  /* [71][0][][] */ 72,-19,-51,74,56,127,33,94,-11,63,99,-44,-14,50,-8,-62, 
  /* [72][0][][] */ -8,80,-37,-14,-16,127,-57,100,74,90,-90,-92,-4,36,-71,-38, 
  /* [73][0][][] */ -59,-45,-62,-4,-34,54,20,-69,74,35,37,-18,45,-9,127,-56, 
  /* [74][0][][] */ -61,-101,42,-56,86,-70,-2,-119,-72,-127,59,42,-50,-16,-4,73, 
  /* [75][0][][] */ 3,46,57,-41,104,-127,-15,-5,27,5,-65,26,-2,55,23,11, 
  /* [76][0][][] */ -39,-69,-16,-25,127,-70,94,-77,-24,-101,-3,34,4,-65,-56,46, 
  /* [77][0][][] */ -14,-18,-4,-38,15,13,17,71,122,-27,-16,55,-5,-30,75,127, 
  /* [78][0][][] */ 77,-28,67,-33,-34,1,-54,8,-47,-35,-127,-25,63,47,1,-43, 
  /* [79][0][][] */ 54,-19,-6,10,127,-36,-3,-66,-91,-40,-48,20,-109,-106,-11,44, 
  /* [80][0][][] */ 30,65,-72,-63,-35,-43,33,34,-30,-115,-41,38,53,-127,-2,-126, 
  /* [81][0][][] */ -5,-4,8,20,4,-22,19,127,13,11,-69,20,-21,16,-50,-11, 
  /* [82][0][][] */ -39,5,11,-57,-15,43,24,15,-42,-26,127,2,3,43,52,14, 
  /* [83][0][][] */ -58,-87,-65,-27,-5,38,-109,-2,-7,1,27,-25,-122,11,127,16, 
  /* [84][0][][] */ 66,39,37,42,62,-24,-88,-38,-83,-127,-45,-64,-39,33,8,-28, 
  /* [85][0][][] */ 73,2,48,95,46,50,-56,-60,16,-86,-15,-3,127,60,5,47, 
  /* [86][0][][] */ 25,-113,-16,-40,5,55,-109,-40,-53,-74,-127,122,61,-26,-84,-35, 
  /* [87][0][][] */ -101,-38,-23,-23,74,64,62,37,30,-6,-62,8,-127,-5,24,-100, 
  /* [88][0][][] */ 20,50,-32,-43,-31,47,-87,98,-127,109,-39,73,-41,-50,27,-85, 
  /* [89][0][][] */ 81,90,94,-127,-103,-7,-76,2,-57,-29,-76,-12,-63,60,-93,78, 
  /* [90][0][][] */ -44,41,-24,-80,-62,-60,-123,-27,-64,-45,-121,127,-74,83,39,1, 
  /* [91][0][][] */ 47,34,-38,-54,48,-37,-87,127,-5,60,45,22,-89,-96,-46,-21, 
  /* [92][0][][] */ 56,-27,113,10,33,-104,5,53,-19,-89,127,-85,-43,55,-26,-99, 
  /* [93][0][][] */ -63,-127,-48,24,97,95,15,66,17,-76,-112,-24,27,102,51,27, 
  /* [94][0][][] */ -58,-72,127,-63,16,42,-81,66,-75,-27,14,-57,-5,-52,32,-36, 
  /* [95][0][][] */ 26,36,127,-58,63,115,43,89,70,10,25,-10,-92,2,-30,107, 
};
const TfArray<4, int> tensor_dimension69 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant69_scale = { 96, { 0.001364293391816318, 0.00097174948314204812, 0.0019205212593078613, 0.0021465406753122807, 0.0017476410139352083, 0.0015289289876818657, 0.0015789455501362681, 0.0011723933275789022, 0.0011182171292603016, 0.0033228425309062004, 0.00186606973875314, 0.0011338245822116733, 0.0011174354003742337, 0.001604428282007575, 0.0022862826008349657, 0.0017316038720309734, 0.0011674977140501142, 0.0020793040748685598, 0.0013054974842816591, 0.001557330833747983, 0.0011865319684147835, 0.0016982902307063341, 0.0013041733764111996, 0.0023314226418733597, 0.0026077679358422756, 0.0020396306645125151, 0.0013027305249124765, 0.0010775229893624783, 0.0023167787585407495, 0.0019591210875660181, 0.0016870521940290928, 0.0014320914633572102, 0.0012779971584677696, 0.0016699363477528095, 0.001085609314031899, 0.0018637045286595821, 0.0015672907466068864, 0.0027626506052911282, 0.0029587666504085064, 0.0023714690469205379, 0.0020245618652552366, 0.0028269002214074135, 0.0013690554769709706, 0.0015291298041120172, 0.0012641248758882284, 0.0022727577015757561, 0.0011666178470477462, 0.0015382986748591065, 0.0024522931780666113, 0.0012350081233307719, 0.001318500260822475, 0.0024677810724824667, 0.0016044112853705883, 0.0025723963044583797, 0.0021102512255311012, 0.0016970235155895352, 0.0017702631885185838, 0.0010634842328727245, 0.001606608391739428, 0.001757428515702486, 0.0020079647656530142, 0.0015888430643826723, 0.0027777336072176695, 0.0016400223830714822, 0.0019238243112340569, 0.0018546433420851827, 0.0013584104599431157, 0.0010549663566052914, 0.001569838379509747, 0.001338349306024611, 0.0010204671416431665, 0.0013091181172057986, 0.0021146205253899097, 0.0010480417404323816, 0.0017470481107011437, 0.0017454265616834164, 0.0027239371556788683, 0.0025840145535767078, 0.0016421211184933782, 0.0013358595315366983, 0.0016675728838890791, 0.0029293915722519159, 0.0017001745291054249, 0.003209421643987298, 0.0014690225943922997, 0.0022271857596933842, 0.0015976590802893043, 0.0020602606236934662, 0.0013809434603899717, 0.0012903128517791629, 0.00092539901379495859, 0.0022263007704168558, 0.0015946070197969675, 0.0020095205400139093, 0.0019869185052812099, 0.0018868951592594385, } };
const TfArray<96, int> quant69_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const ALIGN(8) int8_t tensor_data70[16*1*1*96] = { 
  /* [0][0][][] */ 91,5,-43,16,-23,-94,-17,-5,59,-4,32,45,1,-53,-67,-74,127,-14,-12,53,-76,11,58,-30,3,113,38,75,-49,54,51,-89,-5,-52,7,-74,-13,-25,-76,17,14,21,11,-80,-35,-7,68,-16,-36,75,20,-1,46,50,30,-5,95,32,50,-36,-16,95,62,-58,-23,-36,52,61,-12,-13,-13,66,-20,9,49,4,31,-6,63,-23,-64,8,9,28,-22,-23,-79,-69,-55,0,11,58,8,-19,-42,53, 
  /* [1][0][][] */ 19,7,-57,1,22,63,35,23,-23,26,-5,-6,-18,13,65,22,-23,9,6,-33,35,-6,-41,-41,-73,-12,10,18,20,-13,-1,-16,24,20,-4,-78,75,-39,-49,-17,-13,-18,-53,28,-122,-8,-24,-38,51,-36,7,36,81,-6,5,118,11,9,-67,-17,-13,87,-68,78,-29,-47,45,6,22,10,3,26,28,1,58,-10,34,-20,-8,-127,13,10,-28,4,56,41,4,0,-30,-62,-39,6,66,18,-33,40, 
  /* [2][0][][] */ -26,-33,-127,0,-87,4,48,-4,39,-19,18,104,8,15,-16,63,73,39,-40,-7,-20,24,52,24,-5,55,38,-38,0,59,67,-25,-89,-1,-54,-18,20,18,34,-1,12,23,-9,-20,17,1,16,-29,41,-5,-37,8,-67,2,-28,-77,-86,-22,57,16,4,24,-32,46,47,-65,26,50,-3,6,-50,27,1,-21,10,-53,-8,-19,-83,-17,-52,-1,60,4,-11,7,-22,37,-11,21,-71,44,24,29,96,61, 
  /* [3][0][][] */ 16,-70,51,-39,30,-110,91,31,-15,-26,7,-21,57,-2,-35,127,-72,-2,16,6,-65,0,-47,83,99,-53,-5,22,24,28,13,-9,-15,-6,-40,17,22,39,4,46,-14,-21,-85,-4,-16,5,16,41,35,116,13,-22,9,-46,0,-24,9,28,-31,-5,27,3,-14,-58,2,-39,86,11,-32,20,64,41,-10,36,45,-56,31,6,29,39,118,42,43,-27,85,-48,-31,-22,-4,7,-87,9,-65,54,-1,-9, 
  /* [4][0][][] */ 41,37,1,-9,56,-33,-15,-10,44,-14,-57,55,-35,0,-2,-23,-117,19,59,-14,0,-7,10,-38,-18,-127,-13,18,33,30,-13,-71,-35,9,23,15,46,6,-44,-68,-12,-33,17,-66,6,1,-103,-101,-29,63,31,24,-66,-9,-2,-84,55,14,-10,-48,11,17,34,38,-50,14,-27,-39,-6,1,5,61,87,-22,26,-21,8,-3,-56,-13,80,46,46,15,-11,-48,-7,121,17,56,-21,20,12,-34,-14,-63, 
  /* [5][0][][] */ -82,100,-98,27,-95,-94,-75,0,7,6,2,-5,-16,39,8,45,-9,-4,27,-23,54,5,-74,16,2,-51,-3,48,-5,-70,127,-15,16,-5,-33,-50,40,40,84,-14,15,71,-28,2,-24,-4,56,-6,-44,23,12,-35,-7,-13,-10,41,21,-9,28,-19,66,1,70,-23,10,49,-38,-7,52,9,10,16,51,10,-9,8,11,32,93,-17,86,-47,-8,-63,25,17,60,0,6,-41,-57,40,-36,-21,-68,40, 
  /* [6][0][][] */ 17,-74,119,28,-47,31,-3,41,24,-27,47,39,22,30,-36,62,-23,-27,-75,-26,92,30,-41,-6,-19,23,52,-23,-18,-4,89,62,20,-7,-52,13,-32,11,-39,-62,15,-3,62,71,12,-16,-68,8,33,11,42,-18,-71,22,-3,10,127,34,-12,9,-4,-20,-32,6,11,63,96,-91,60,-3,-32,29,51,-15,3,-47,7,-39,-46,-46,-91,67,50,7,-40,44,95,-99,82,18,44,-71,18,-28,-95,-14, 
  /* [7][0][][] */ 23,37,-51,-32,5,-12,-47,90,57,-22,71,22,31,-2,62,-59,67,11,66,-43,-47,28,-35,-19,-41,-38,20,10,79,-35,-19,-43,45,-32,42,52,-37,-2,53,-68,-29,30,-47,-75,-27,15,37,33,-51,-74,42,48,-101,8,3,-2,23,1,18,35,-45,69,0,11,16,59,34,-86,25,-20,-16,-53,-76,12,24,-127,42,-7,-80,58,-24,19,-7,-23,51,35,-59,-15,-16,50,45,1,-18,-55,-77,-16, 
  /* [8][0][][] */ -12,-44,-26,16,40,47,0,-66,-19,-2,-24,-40,24,-59,-27,-34,64,-7,16,25,32,-19,-17,79,20,-64,-10,7,16,-31,16,33,75,-49,-51,-3,-9,5,44,-22,25,-24,22,36,35,-12,10,13,-75,43,35,22,-4,-28,-8,-15,-8,-9,-45,-46,43,42,6,127,-18,2,63,-53,9,3,-18,75,34,-26,-17,86,-3,-2,1,-54,-64,20,6,-16,24,15,4,20,55,11,86,25,-66,29,-6,-31, 
  /* [9][0][][] */ -11,-64,15,-16,-23,-50,16,23,60,-14,24,47,-6,-20,3,-123,39,-20,14,-25,-88,20,31,-4,-29,36,-32,51,29,14,49,-55,-15,-30,-52,123,35,-7,-36,-40,-4,20,-20,-21,34,-6,-13,-44,15,-22,39,61,22,-38,30,16,19,-3,-82,-21,-75,-29,89,35,-32,2,-17,34,60,-19,53,-28,13,45,-20,82,-13,-35,50,-9,9,73,-25,-17,43,-20,119,31,60,50,-24,-35,-13,127,63,9, 
  /* [10][0][][] */ -12,-63,6,24,-69,-54,42,-69,-22,93,-112,-13,-38,-48,-7,127,-74,48,-13,-16,-23,71,-71,9,60,-13,-81,71,2,36,17,-7,48,-12,-38,-17,-46,45,-38,-53,-11,6,-21,-84,-81,20,44,-34,-2,-60,33,42,85,21,7,13,70,36,127,10,31,-55,66,41,9,41,-3,-94,41,41,35,-30,27,36,18,2,-17,-20,-56,26,4,0,0,7,62,5,48,-32,-19,-54,66,0,-5,-6,90,41, 
  /* [11][0][][] */ -29,-48,18,12,-22,8,-57,60,35,17,-1,40,36,-60,51,-12,22,37,5,-1,29,-43,11,-23,10,-57,24,-65,-5,69,28,22,-89,-52,-31,-55,89,-4,-33,1,-16,4,-35,83,-50,-10,-65,66,-76,30,-11,1,89,58,-2,-62,5,-5,-13,68,23,-36,58,-1,-29,-47,97,4,57,-36,-64,1,37,-28,-34,68,-1,-16,-84,-10,48,-106,-85,23,40,73,60,-6,43,39,-80,34,2,48,22,-127, 
  /* [12][0][][] */ 41,44,-17,9,-1,-68,41,79,-10,6,-20,-120,-5,11,-13,10,-39,-9,-11,-23,-20,39,-101,48,85,28,1,24,19,-80,-28,-2,36,-43,48,53,30,30,-47,-30,-18,70,10,80,-58,-13,-1,11,3,22,31,35,33,23,12,-89,3,3,28,58,17,23,20,70,26,-25,-42,-20,28,26,-51,45,-68,-30,10,-35,21,-9,44,-55,26,12,8,-13,50,-17,-127,37,41,-3,-31,-39,-18,51,19,44, 
  /* [13][0][][] */ 37,53,8,-31,45,-108,-39,-94,18,-30,2,59,127,-54,-89,-55,-58,-21,35,-20,-7,-11,-32,40,12,-48,60,0,39,60,38,40,-17,-21,-6,-5,31,-18,25,-48,-9,-27,34,-13,-86,2,-71,-21,21,-37,-23,39,-88,-4,-4,69,-28,-15,49,-58,-27,-6,-5,-86,-13,-8,-72,60,-18,19,-13,-65,7,-9,16,85,62,-19,-15,-77,29,-76,-18,25,-13,12,-28,1,-10,-17,78,-9,29,3,7,6, 
  /* [14][0][][] */ -60,8,-75,0,101,43,127,-14,-18,70,-14,4,25,44,-22,39,26,-28,6,51,-89,29,78,-18,-32,6,61,49,-28,-40,-33,-82,-48,74,4,-3,20,23,49,-16,-14,20,20,30,-47,18,23,74,-26,-20,-4,27,-74,-24,-25,-95,-26,23,39,-69,66,-45,-34,2,-32,-28,3,9,19,-1,-13,9,4,-6,-5,-10,-8,22,4,19,-19,-52,29,-29,12,104,42,19,39,-3,45,-40,9,87,-46,-73, 
  /* [15][0][][] */ -68,5,27,40,-35,-59,-25,48,-54,9,26,-21,1,1,-2,51,-8,2,18,45,29,-17,35,-33,-47,-9,4,21,-43,44,74,-40,2,75,65,30,-127,24,-39,-59,8,-15,4,-3,57,11,-34,57,16,8,8,35,-20,-11,-7,-13,18,5,-8,-25,-21,33,-65,52,-51,5,-64,1,-45,-23,1,14,-54,-5,26,-63,38,-29,49,-27,-44,26,-95,-5,-80,-31,-18,68,-63,-32,49,-10,-1,86,38,8, 
};
const TfArray<4, int> tensor_dimension70 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant70_scale = { 16, { 0.0035922289825975895, 0.0039423629641532898, 0.0041291066445410252, 0.0033167514484375715, 0.003604835132136941, 0.0038310966920107603, 0.0032346916850656271, 0.0038906519766896963, 0.0040743337012827396, 0.0040277522057294846, 0.0041856481693685055, 0.0038464744575321674, 0.0036225516814738512, 0.0040772831998765469, 0.0041390075348317623, 0.0040598027408123016, } };
const TfArray<16, int> quant70_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const ALIGN(8) int8_t tensor_data71[96*1*1*16] = { 
  /* [0][0][][] */ -34,4,33,-120,-32,87,100,-9,63,-70,-71,2,84,127,11,-2, 
  /* [1][0][][] */ 63,-36,14,-85,37,127,28,-76,1,62,48,1,2,6,107,111, 
  /* [2][0][][] */ -46,-48,-46,-9,54,10,-38,-127,-17,-26,38,55,2,5,-2,-8, 
  /* [3][0][][] */ -92,-7,70,90,79,76,86,-114,-19,52,69,-75,19,-6,-127,-99, 
  /* [4][0][][] */ -127,54,24,29,-91,84,96,-31,48,-36,-23,98,-18,-43,-106,-121, 
  /* [5][0][][] */ 127,-46,64,110,94,-62,-117,63,-34,88,-54,-31,52,-41,100,-19, 
  /* [6][0][][] */ -14,80,53,60,-127,55,-21,51,-63,7,-23,-14,-2,21,100,37, 
  /* [7][0][][] */ 2,94,-20,-41,-37,127,-39,-13,-71,-71,-98,114,26,-54,-3,-38, 
  /* [8][0][][] */ 96,-16,-96,-61,107,121,-41,56,-20,-127,56,103,37,14,7,93, 
  /* [9][0][][] */ 80,123,-11,27,116,49,127,122,8,-79,-109,18,108,19,-34,-42, 
  /* [10][0][][] */ -14,-90,-5,17,40,73,21,95,53,127,105,-41,-15,50,-25,-18, 
  /* [11][0][][] */ 54,-4,-63,-51,45,-51,11,20,8,16,-78,37,-5,109,127,60, 
  /* [12][0][][] */ -6,17,-2,-37,-127,45,26,4,-15,-5,17,-55,40,20,-44,-42, 
  /* [13][0][][] */ 122,127,-24,3,104,45,30,9,28,14,5,-96,-2,-18,-17,-6, 
  /* [14][0][][] */ -92,-27,-32,82,92,9,-7,27,10,-50,-16,24,-2,38,-127,-16, 
  /* [15][0][][] */ -32,-10,22,-87,127,58,-45,24,11,59,-52,10,1,7,18,14, 
  /* [16][0][][] */ -32,3,-13,79,-93,-121,-42,93,-18,-28,25,-38,-8,-33,-127,-125, 
  /* [17][0][][] */ 50,1,53,-60,-36,-39,82,38,-44,64,-13,34,48,17,127,52, 
  /* [18][0][][] */ 127,18,57,104,-15,31,-48,-54,-12,15,0,57,29,-6,96,-38, 
  /* [19][0][][] */ 65,54,-24,-112,122,45,-4,-32,-94,126,-14,127,36,-106,-123,-43, 
  /* [20][0][][] */ -42,23,-4,26,-12,-115,-93,-73,93,-46,-71,28,85,50,-66,-127, 
  /* [21][0][][] */ -5,-42,67,18,-8,48,9,-38,-22,-50,-98,-49,27,-3,54,127, 
  /* [22][0][][] */ 7,99,66,10,-118,-17,89,25,60,-43,28,127,72,76,-20,42, 
  /* [23][0][][] */ 3,98,38,-73,-2,89,33,-127,-66,30,-117,-12,54,-74,65,-25, 
  /* [24][0][][] */ 46,-13,-21,-51,-5,18,-127,-10,17,76,-97,-42,-11,60,-49,35, 
  /* [25][0][][] */ -45,-7,23,24,-89,107,45,-37,-34,-4,23,-41,65,127,-71,67, 
  /* [26][0][][] */ 91,103,-127,34,51,-7,4,82,41,-7,1,-34,-73,31,29,121, 
  /* [27][0][][] */ 38,127,51,-75,52,5,53,-73,40,-51,-57,-67,-30,37,-44,11, 
  /* [28][0][][] */ -27,110,34,-70,-4,2,127,-2,104,-18,18,117,48,82,-107,10, 
  /* [29][0][][] */ -86,4,2,127,-6,-24,-71,53,-18,50,15,-53,-58,-17,23,-15, 
  /* [30][0][][] */ 73,-48,34,23,4,25,-127,11,-63,-23,-16,-49,35,-72,4,34, 
  /* [31][0][][] */ -97,-77,-20,41,-44,-32,127,49,77,-86,39,-66,0,-74,10,34, 
  /* [32][0][][] */ 45,20,-26,-127,-92,-85,12,14,56,27,22,-22,-45,-91,28,50, 
  /* [33][0][][] */ -29,13,49,9,105,34,-37,21,41,13,1,89,-42,26,6,127, 
  /* [34][0][][] */ -37,16,-54,94,-21,2,-73,-3,-18,-84,78,-40,-19,1,127,11, 
  /* [35][0][][] */ -18,107,28,59,-35,-118,-5,-76,77,88,-127,53,-22,0,-96,-2, 
  /* [36][0][][] */ -16,-127,62,-29,36,-35,44,58,74,-107,74,11,-100,-81,-33,-15, 
  /* [37][0][][] */ -41,-3,81,-15,-93,44,127,-72,-13,36,-53,50,66,50,-24,-20, 
  /* [38][0][][] */ 95,31,39,-37,36,-5,44,-113,-127,78,67,113,-9,116,27,66, 
  /* [39][0][][] */ -30,62,-127,-50,70,-17,-69,85,-43,-59,37,-107,-17,-38,-15,-125, 
  /* [40][0][][] */ -25,2,-127,-75,40,61,98,41,116,73,35,-85,-31,9,-60,-7, 
  /* [41][0][][] */ -26,-63,-33,-15,38,-26,-58,12,-37,16,15,-48,-65,-84,-16,-127, 
  /* [42][0][][] */ -35,-33,22,47,127,17,18,-28,-35,-4,-21,-34,-34,-76,56,12, 
  /* [43][0][][] */ -127,-44,5,-92,-18,70,66,-73,0,-10,50,5,-43,-16,24,-41, 
  /* [44][0][][] */ -65,-44,-127,96,90,31,29,37,50,85,-8,-100,9,-34,-95,50, 
  /* [45][0][][] */ -77,29,21,-38,-28,-100,18,-13,-101,17,-122,-2,14,47,-127,25, 
  /* [46][0][][] */ -16,-90,64,-11,10,28,-15,38,-13,-46,70,-31,51,-43,-127,-45, 
  /* [47][0][][] */ 14,-20,-6,-10,72,74,-127,-4,21,-11,-77,27,26,47,15,74, 
  /* [48][0][][] */ -49,44,-34,93,10,127,-44,34,-5,75,-38,2,-13,-61,44,-24, 
  /* [49][0][][] */ 55,9,-13,53,25,-82,-67,20,32,-103,-50,47,-65,22,106,127, 
  /* [50][0][][] */ 127,-35,33,98,-58,-7,1,0,98,-87,66,-73,-63,29,39,-4, 
  /* [51][0][][] */ 60,-64,127,-57,110,-52,18,124,24,45,17,-11,-60,-111,25,-115, 
  /* [52][0][][] */ 51,-127,71,82,19,-2,-23,18,67,-29,7,0,11,86,42,38, 
  /* [53][0][][] */ 121,-12,-51,-32,93,-41,-101,15,-127,59,-13,-16,84,102,3,26, 
  /* [54][0][][] */ 11,2,-73,25,45,-66,-71,113,-11,4,127,20,-67,-65,72,101, 
  /* [55][0][][] */ -26,-66,-22,30,-37,28,127,39,81,-81,29,-40,-19,-15,-59,80, 
  /* [56][0][][] */ 59,-71,51,92,60,-72,-52,-25,88,20,63,124,-18,120,-109,127, 
  /* [57][0][][] */ 26,-62,39,-127,57,47,69,3,36,33,-119,45,107,65,22,15, 
  /* [58][0][][] */ 4,68,-47,69,-122,-76,86,24,-57,43,3,-60,127,48,69,-47, 
  /* [59][0][][] */ 49,3,-83,-9,127,-74,-34,2,40,39,66,-30,-105,-75,8,-76, 
  /* [60][0][][] */ -8,-8,-68,98,127,-49,109,25,63,0,-21,-88,63,79,-116,-42, 
  /* [61][0][][] */ 56,127,-16,12,78,-27,20,-5,37,-28,-30,-54,-2,75,-5,4, 
  /* [62][0][][] */ 28,-90,-31,-12,127,12,-5,46,72,-37,96,26,-90,-34,-32,102, 
  /* [63][0][][] */ 106,-49,-43,-31,1,17,-22,104,25,37,29,16,46,85,-62,127, 
  /* [64][0][][] */ -8,105,-23,-78,-40,7,111,-127,14,6,-84,-111,-56,-126,42,-53, 
  /* [65][0][][] */ 39,62,-127,-14,-111,-63,-98,59,100,44,-17,126,-14,-13,-41,62, 
  /* [66][0][][] */ -16,70,9,0,-6,-29,-109,-41,-13,84,-35,127,-83,19,123,74, 
  /* [67][0][][] */ 26,52,-51,66,17,-127,-68,-21,-15,-29,-18,-13,-71,-76,26,-4, 
  /* [68][0][][] */ -89,63,52,-127,96,10,27,3,41,-77,118,-58,-99,-65,-118,-66, 
  /* [69][0][][] */ 4,-11,-1,-1,66,-110,34,53,-30,37,-43,-13,23,-127,27,-13, 
  /* [70][0][][] */ 53,-89,-66,48,54,-100,-127,-14,38,4,12,-48,-48,-6,36,89, 
  /* [71][0][][] */ -44,0,4,29,-73,44,-95,25,49,-26,127,-94,-35,37,55,-37, 
  /* [72][0][][] */ 33,-117,63,25,127,-80,9,-70,34,14,70,80,7,-9,-95,24, 
  /* [73][0][][] */ -8,82,-48,18,-127,-53,-26,-38,-7,-38,-22,-54,-76,4,-4,-18, 
  /* [74][0][][] */ 19,97,-34,-57,-99,-74,39,-32,-83,83,-127,-37,-14,26,12,-99, 
  /* [75][0][][] */ 62,91,39,-41,90,52,-10,-35,30,30,49,127,2,-108,-125,-14, 
  /* [76][0][][] */ 43,-9,-30,83,53,-20,31,-1,-6,-6,56,85,-73,-47,127,15, 
  /* [77][0][][] */ -127,88,-66,-34,12,63,8,3,-92,64,12,-25,-17,-106,-87,-106, 
  /* [78][0][][] */ 12,127,50,124,-42,52,65,42,51,78,21,-70,-19,-25,-22,67, 
  /* [79][0][][] */ -71,-7,-41,58,127,41,-55,64,42,-37,74,33,38,89,-25,13, 
  /* [80][0][][] */ -84,1,-42,52,19,-77,19,127,8,4,-5,-17,-25,66,-6,-79, 
  /* [81][0][][] */ -47,-11,-23,127,-41,-43,15,37,-32,-66,76,-68,-38,8,57,27, 
  /* [82][0][][] */ -13,-16,26,127,71,52,-89,-7,12,-6,69,67,19,9,-118,34, 
  /* [83][0][][] */ 51,68,6,-61,-38,-14,-57,-28,-127,-55,22,70,0,-39,2,-28, 
  /* [84][0][][] */ -17,-127,-61,0,22,-70,-40,55,25,-106,25,-62,-77,-82,66,-107, 
  /* [85][0][][] */ -16,-48,-19,1,61,127,-60,-109,-67,45,1,-61,45,13,94,-87, 
  /* [86][0][][] */ 60,-111,89,74,40,-94,22,18,-20,-39,120,21,-70,49,-127,-45, 
  /* [87][0][][] */ -38,16,-42,-74,127,52,63,6,-8,0,10,28,-10,22,57,35, 
  /* [88][0][][] */ -11,29,127,-58,-11,37,-87,8,-92,16,2,-34,32,9,82,-6, 
  /* [89][0][][] */ 42,-42,-53,15,-11,4,127,5,-38,29,87,-60,102,5,-23,-38, 
  /* [90][0][][] */ 16,-46,9,17,-24,-82,-17,7,1,-52,40,17,5,50,-35,127, 
  /* [91][0][][] */ 27,64,-3,58,-67,-34,10,127,90,-34,-66,-36,-24,11,-19,35, 
  /* [92][0][][] */ 13,127,2,32,23,53,-82,-40,15,56,-14,-38,57,37,-11,32, 
  /* [93][0][][] */ -5,-20,90,-25,-1,72,-98,10,-95,30,30,70,45,127,-60,-21, 
  /* [94][0][][] */ -42,4,17,-58,113,-6,3,26,-34,71,2,72,-78,16,-127,-23, 
  /* [95][0][][] */ -76,44,-2,32,-5,48,6,85,25,-27,-25,-127,64,38,-68,-108, 
};
const TfArray<4, int> tensor_dimension71 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant71_scale = { 96, { 0.0016735501121729612, 0.0023255490232259035, 0.0020888203289359808, 0.0016195562202483416, 0.001362444250844419, 0.0017721488839015365, 0.0019527524709701538, 0.0019598612561821938, 0.0024469690397381783, 0.0018494075629860163, 0.0021321144886314869, 0.0025655396748334169, 0.0030713924206793308, 0.0026073034387081861, 0.0018556620925664902, 0.0031898121815174818, 0.002261860528960824, 0.0023463577963411808, 0.0030425377190113068, 0.0017703796038404107, 0.0039296895265579224, 0.0034308750182390213, 0.0038565313443541527, 0.0033070880454033613, 0.0017479496309533715, 0.003133424324914813, 0.0015294089680537581, 0.004587685689330101, 0.0024127343203872442, 0.0027882193680852652, 0.0029794690199196339, 0.0026829591952264309, 0.0028044176287949085, 0.0022866285871714354, 0.0024791688192635775, 0.0017846946138888597, 0.0021056067198514938, 0.0023707489017397165, 0.0035525092389434576, 0.0029499712400138378, 0.0036701778881251812, 0.0028062069322913885, 0.0024765701964497566, 0.0022134794853627682, 0.0031844400800764561, 0.0033960060682147741, 0.0016640227986499667, 0.0026362510398030281, 0.0037205477710813284, 0.0018625058000907302, 0.0025396435521543026, 0.0025454680435359478, 0.002167093800380826, 0.001929567544721067, 0.0020078362431377172, 0.0037019762676209211, 0.0022353318054229021, 0.0014305661898106337, 0.0020888589788228273, 0.002790338359773159, 0.0028289586771279573, 0.0039877342060208321, 0.0023898885119706392, 0.0016002511838451028, 0.0022147700656205416, 0.0022096764296293259, 0.0017891951138153672, 0.0018543183105066419, 0.0011364504462108016, 0.0034628454595804214, 0.0026779426261782646, 0.0022518795449286699, 0.0022557377815246582, 0.002587396651506424, 0.0032890199217945337, 0.0018263676902279258, 0.0018576880684122443, 0.0015090375673025846, 0.0020066166762262583, 0.0035309595987200737, 0.0038692539092153311, 0.0024176107253879309, 0.0027587215881794691, 0.0033128939103335142, 0.0025552303995937109, 0.0028841602616012096, 0.0022855992428958416, 0.0032763516064733267, 0.0022099765483289957, 0.0036953233648091555, 0.004410062450915575, 0.0024539157748222351, 0.0026313052512705326, 0.0018792346818372607, 0.0021161481272429228, 0.0025809141807258129, } };
const TfArray<96, int> quant71_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const ALIGN(8) int8_t tensor_data72[16*1*1*96] = { 
  /* [0][0][][] */ 40,-48,85,20,-30,-64,64,-3,-6,35,59,-19,112,-19,55,-56,15,32,2,-3,22,33,5,-24,35,10,-26,33,13,-10,27,30,6,127,-6,-41,-16,4,12,37,-12,13,-97,27,4,-22,-65,5,7,36,40,5,16,-19,-40,-5,53,-46,56,-22,-24,-39,72,21,20,11,-24,53,-60,-7,-20,11,40,41,6,27,52,58,-18,42,-20,52,33,0,26,60,-44,97,10,-70,-12,-10,-100,-74,-3,-45, 
  /* [1][0][][] */ 21,-2,-82,-14,-12,-10,-5,-57,-38,5,-81,-40,28,-75,-75,9,11,32,60,-43,27,-9,26,-37,-19,-7,43,-13,-31,-6,33,-32,-54,25,29,-54,23,-82,-27,3,-8,8,5,34,16,41,-28,-15,35,-74,-127,-38,86,8,67,37,43,-5,34,13,-7,-50,10,-12,23,-11,10,9,-44,85,-34,47,23,64,4,-17,17,50,51,47,29,0,58,-34,-36,59,25,-60,-47,-19,-16,17,-7,-6,-36,-5, 
  /* [2][0][][] */ -36,0,28,-25,3,-49,58,16,-62,17,-36,96,-88,19,22,-10,-45,-69,-34,12,39,-2,26,-63,7,-36,-32,-27,33,-63,-40,30,-9,-67,17,24,62,43,58,41,-26,-32,-59,27,-42,-16,-6,-32,112,-28,-68,82,-58,-13,-22,-27,-6,-35,-6,-30,-15,46,-40,43,21,33,-15,-47,16,15,45,-53,-8,-64,5,-29,-13,-39,7,22,-15,52,32,-18,56,4,127,-42,-34,27,-16,1,-48,45,37,38, 
  /* [3][0][][] */ 80,5,26,-46,-9,-45,67,36,19,-7,1,-96,47,-13,-17,9,8,35,-26,71,-25,25,-25,0,-28,37,40,-10,-15,43,24,-31,-76,39,16,7,-15,-28,15,-50,-60,30,-15,15,4,-1,20,28,-44,-51,26,-52,-57,-55,37,59,18,-58,18,24,18,8,19,-39,16,-4,1,23,127,-73,-123,-1,15,-48,-14,102,-81,-39,-29,10,36,8,73,62,-4,-13,5,45,31,-8,46,-28,-1,-70,95,-4, 
  /* [4][0][][] */ 10,21,9,40,17,-99,16,4,-7,41,-51,5,-17,10,-35,-58,-11,26,26,-34,1,56,-8,-28,-39,-26,-17,12,0,51,20,5,20,-71,9,-73,58,2,9,-3,-7,7,-24,2,34,-7,-23,3,-14,-100,26,72,10,-22,20,25,-33,28,-17,12,11,53,15,5,55,-11,-20,56,-67,-28,-127,-13,11,-23,4,-75,29,41,23,-11,19,-6,-43,-3,-17,3,-43,-32,25,6,-30,12,17,-15,-82,-3, 
  /* [5][0][][] */ -13,-114,-28,-4,22,83,-87,-46,20,-5,21,4,39,-5,-34,-79,-44,-12,-26,-27,12,72,51,42,-28,74,-56,-92,13,-4,20,55,8,-50,12,42,-22,32,-17,59,-18,57,-70,-24,36,-39,-2,15,-52,24,-30,30,-9,57,-9,-58,-38,-11,17,47,28,27,-42,-83,-27,76,-37,-54,25,-127,23,54,13,7,42,26,-95,-8,-117,-3,-6,-1,35,20,14,-38,-45,-31,95,69,-23,-80,-54,-31,-67,-85, 
  /* [6][0][][] */ 17,-30,64,92,10,51,39,118,63,14,112,-107,82,84,-6,8,51,41,23,36,14,53,10,-69,30,38,17,-27,-52,-4,26,40,-33,87,-30,22,-99,91,19,39,-38,17,-80,-21,10,-8,-18,-63,-2,-5,122,-74,29,74,42,19,54,-41,-34,54,19,4,-9,97,44,-49,9,-82,-90,-36,81,-25,52,-6,22,-25,-76,57,-64,9,0,93,26,34,-18,86,34,-91,22,66,-55,-14,-127,-49,121,13, 
  /* [7][0][][] */ -12,23,31,-3,85,-3,-22,-25,10,12,20,25,-40,-21,-48,-9,-7,-28,-11,-31,-20,-22,2,39,41,-15,28,-1,16,18,1,18,-23,-36,28,-27,127,15,2,-14,-3,-4,70,4,25,-5,-31,78,20,44,-52,12,-22,-64,-63,-26,9,-26,3,-23,5,-55,5,50,-1,112,-1,-25,76,47,43,-12,-3,-54,-16,5,-32,12,-15,-22,23,-66,27,7,38,-7,21,0,17,-3,-41,22,57,10,-95,-29, 
  /* [8][0][][] */ -57,3,-50,48,127,-75,-4,20,-14,37,40,16,9,-61,-92,33,20,72,-17,23,-43,-51,35,-69,63,-30,-64,-17,-69,8,8,9,34,-43,-37,-122,-24,8,28,88,25,-17,77,14,62,-67,-55,51,24,-74,-92,67,-64,111,16,-28,-90,99,-27,21,30,67,49,23,45,18,-8,-61,72,118,-19,13,-16,-24,-30,-15,26,-54,14,14,3,-7,4,80,-23,21,24,89,6,-31,-24,54,24,46,52,14, 
  /* [9][0][][] */ 1,19,2,-26,78,-100,4,29,18,-73,-20,-58,-8,-17,44,-26,-51,-5,-4,-38,21,-9,23,-62,8,9,19,37,46,54,16,6,-2,-16,12,-87,8,13,-60,4,-91,24,-127,4,27,3,12,-26,-96,-3,63,33,17,20,-6,-22,-27,43,47,-8,-24,42,-101,-56,59,-54,24,2,-85,27,9,-23,6,13,10,35,16,-1,-36,0,-1,72,23,15,18,11,-55,-43,23,-64,-70,12,-117,-72,-26,-66, 
  /* [10][0][][] */ 80,-69,-9,48,19,16,25,53,-8,-78,78,29,34,24,-44,48,40,101,62,21,-3,-11,6,24,55,23,-30,-1,16,62,66,-15,-42,26,32,9,111,8,3,-57,-26,73,76,-65,23,-11,-63,51,3,-15,-59,-32,45,-24,11,20,56,-73,23,34,-1,117,51,84,7,86,-12,-10,-2,-45,-94,87,55,21,1,-50,-2,107,-45,9,31,67,45,12,31,14,58,2,127,-8,-29,-60,-19,-19,-27,-20, 
  /* [11][0][][] */ 12,2,50,-51,-48,58,34,-43,-28,13,-13,-31,20,43,-12,-18,17,-33,2,13,3,-35,27,-2,16,-7,6,-8,-33,-28,11,-5,-19,-2,11,17,12,66,-14,-10,17,-5,40,-24,-12,-7,11,17,11,-24,31,20,-17,-3,-1,20,8,-12,10,18,7,32,71,-41,-12,-4,-13,-16,127,16,26,-7,-11,-29,-6,39,66,-37,36,-1,13,-8,4,7,-18,28,-9,30,1,-7,39,-47,44,2,34,14, 
  /* [12][0][][] */ 8,9,-49,0,-98,-20,-31,92,53,-28,-14,-35,15,78,-67,-2,23,24,-34,10,-42,-65,26,-53,-27,33,-9,-11,1,18,14,-10,-6,27,38,-80,31,32,-39,47,-31,-17,45,31,41,14,98,-127,48,-13,82,-20,32,0,58,28,-59,19,94,26,39,-100,-100,-11,-4,-90,44,-3,14,-89,-4,-7,-44,-24,95,1,-36,-21,-67,19,22,-10,60,31,-14,68,-22,-77,23,54,-45,38,96,-119,-127,-78, 
  /* [13][0][][] */ 0,49,46,-18,-35,53,5,-13,0,-33,35,-50,3,-60,11,47,15,18,37,56,-10,9,8,9,-28,35,86,-4,4,-8,27,-83,-42,-38,27,37,59,22,-27,-5,-17,-9,83,-36,-11,27,-31,-58,-45,-19,2,-17,-13,-20,25,-25,5,67,19,20,-29,-4,25,-4,-5,-47,28,-68,127,-48,112,10,32,12,-13,44,12,-2,46,0,44,51,6,20,4,7,-40,-51,38,-11,61,26,-13,69,-26,28, 
  /* [14][0][][] */ 12,-42,22,41,-16,-72,-7,72,-17,-31,-24,-84,-9,17,6,-18,-16,1,-22,37,46,38,26,-75,-13,-17,6,17,27,-38,-4,-29,34,1,22,46,-84,-2,3,-25,2,-9,-94,22,0,-18,24,-77,22,-127,50,43,19,57,-33,31,44,38,-2,4,-6,49,-48,-53,14,69,-71,15,82,7,-17,6,20,11,38,35,-48,1,23,22,-1,34,36,15,42,-12,11,-65,-58,46,27,-10,-73,-61,6,0, 
  /* [15][0][][] */ 8,-90,63,12,-26,66,-35,50,-6,0,26,-62,-24,-24,46,-127,-8,-68,0,-22,35,9,58,121,80,41,37,-7,26,15,-13,19,-42,-102,18,-38,-59,52,-22,23,53,-6,30,-22,7,40,63,31,-45,41,-35,-49,31,-5,-74,-54,-7,38,-6,-36,2,-67,40,56,-89,24,-32,-26,-66,5,21,22,-26,-55,20,23,2,65,-8,-1,-16,8,-31,11,36,1,48,12,-37,2,52,4,99,18,28,-41, 
};
const TfArray<4, int> tensor_dimension72 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant72_scale = { 16, { 0.0022987232077866793, 0.0016694407677277923, 0.0016610462917014956, 0.001627508201636374, 0.002386059146374464, 0.0013146416749805212, 0.0017663845792412758, 0.0024939374998211861, 0.0014712443808093667, 0.0018181282794103026, 0.0026089912280440331, 0.0026707758661359549, 0.0014099326217547059, 0.0017460398375988007, 0.0020707196090370417, 0.001533417496830225, } };
const TfArray<16, int> quant72_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant72 = { (TfLiteFloatArray*)&quant72_scale, (TfLiteIntArray*)&quant72_zero, 0 };
const ALIGN(8) int8_t tensor_data73[96*1*1*16] = { 
  /* [0][0][][] */ 1,5,86,11,-4,-127,-98,-106,-13,108,56,63,63,-27,52,79, 
  /* [1][0][][] */ -17,-1,66,-40,82,73,11,-127,-13,22,1,71,114,-71,-50,69, 
  /* [2][0][][] */ 114,43,-84,104,-116,-57,26,109,54,105,62,-127,-89,-8,-45,-8, 
  /* [3][0][][] */ -19,-56,-12,15,127,92,-34,-22,52,2,14,34,-91,9,-11,111, 
  /* [4][0][][] */ -17,-44,46,-2,28,-48,-70,33,26,-65,23,127,14,22,3,104, 
  /* [5][0][][] */ 72,4,-81,20,50,-50,-127,27,-30,53,-37,-17,81,-1,109,-26, 
  /* [6][0][][] */ 100,45,31,41,99,-30,127,72,-41,-4,-63,57,25,100,-25,47, 
  /* [7][0][][] */ -84,-38,54,-41,-127,15,7,33,53,14,0,-57,81,44,7,-79, 
  /* [8][0][][] */ 127,-47,-101,55,21,-65,-58,105,34,-73,-28,3,-95,-17,52,117, 
  /* [9][0][][] */ 63,-79,44,5,-23,62,-67,15,19,-116,127,-23,-9,7,27,41, 
  /* [10][0][][] */ -6,63,24,2,-1,11,50,50,7,42,-98,-54,94,94,-127,-16, 
  /* [11][0][][] */ 31,-25,25,-13,-27,6,-50,-6,127,-57,-4,83,19,-109,35,58, 
  /* [12][0][][] */ 24,4,-15,-82,42,-18,39,-41,-17,43,-26,127,-50,-23,17,38, 
  /* [13][0][][] */ 93,-44,-94,89,-48,-80,-23,127,-56,88,-22,46,85,-5,3,-6, 
  /* [14][0][][] */ -50,-80,26,-16,71,25,127,-88,-43,97,-34,-68,94,64,21,-80, 
  /* [15][0][][] */ -41,-103,-13,-68,-72,122,-12,32,-127,6,24,42,65,48,-49,-46, 
  /* [16][0][][] */ 91,104,91,-33,-63,44,53,-127,-27,49,19,11,117,0,126,-46, 
  /* [17][0][][] */ -110,-42,127,-81,-61,-29,-29,-63,-82,75,-38,24,50,-49,-82,-63, 
  /* [18][0][][] */ 3,-20,-28,76,6,39,-37,-83,44,-80,43,127,-122,0,29,32, 
  /* [19][0][][] */ -41,127,-2,107,43,-51,-19,84,-64,-20,15,8,108,7,-87,-70, 
  /* [20][0][][] */ 2,18,52,49,70,30,-44,-19,-78,-15,-39,-48,127,52,13,-122, 
  /* [21][0][][] */ 122,-36,45,-46,-20,13,100,-106,-25,127,-43,-21,67,46,60,1, 
  /* [22][0][][] */ 56,-44,35,43,16,33,-27,-63,-4,19,22,39,48,61,-48,127, 
  /* [23][0][][] */ -16,-47,-19,68,-63,32,0,-58,66,87,-2,127,4,17,14,-1, 
  /* [24][0][][] */ -69,-54,3,-127,36,-31,32,-45,-13,-8,-25,68,41,16,34,41, 
  /* [25][0][][] */ -13,-127,-103,-9,-12,0,-32,73,-71,85,51,73,98,55,-10,-28, 
  /* [26][0][][] */ -78,-9,-8,47,-70,-127,15,-61,10,49,16,97,-84,26,31,11, 
  /* [27][0][][] */ 14,-48,-33,-2,-34,4,-8,-30,37,-50,-5,31,-127,21,-28,61, 
  /* [28][0][][] */ 39,30,-127,-33,75,-38,-5,81,88,4,11,67,67,34,108,3, 
  /* [29][0][][] */ -57,-32,58,58,57,-25,-17,-124,-72,76,13,4,-8,47,-127,23, 
  /* [30][0][][] */ -81,32,-39,23,-60,-90,14,-28,57,-45,28,50,-127,-10,-18,22, 
  /* [31][0][][] */ 109,35,-5,-127,-118,-113,113,-54,-7,-4,-100,-74,-19,-100,-3,-48, 
  /* [32][0][][] */ 41,51,-69,19,29,-127,62,91,57,42,-48,-72,20,21,-125,-95, 
  /* [33][0][][] */ 60,-52,-127,-10,82,-26,49,24,-1,66,59,-18,-4,-103,-8,25, 
  /* [34][0][][] */ 59,35,29,-49,-78,-3,-27,-114,-57,-25,-24,53,127,-66,82,-21, 
  /* [35][0][][] */ -55,41,92,-81,18,-32,34,5,48,43,-127,11,-11,-65,-125,-48, 
  /* [36][0][][] */ 77,-53,36,-39,-127,82,-5,55,-39,8,-11,-34,0,32,-47,36, 
  /* [37][0][][] */ 24,-7,-1,-19,-60,-44,-56,-1,53,-127,-9,3,8,-103,-26,17, 
  /* [38][0][][] */ -16,19,-50,-9,67,63,1,70,90,-42,96,94,-127,-1,-56,9, 
  /* [39][0][][] */ 6,79,11,20,127,10,-74,116,13,86,10,6,39,30,11,-45, 
  /* [40][0][][] */ 127,-63,54,-61,27,-45,80,29,-7,-62,5,72,18,52,43,-44, 
  /* [41][0][][] */ -61,24,-33,68,-26,86,-10,81,-60,46,-7,8,-127,-52,-94,-57, 
  /* [42][0][][] */ 33,-33,38,-20,8,-46,-117,-26,-1,7,-20,80,-35,20,-4,127, 
  /* [43][0][][] */ 127,32,62,-52,77,-41,76,-89,-95,69,33,56,-19,63,-15,26, 
  /* [44][0][][] */ 100,80,-93,13,-7,17,-15,66,127,-52,-49,-71,-1,45,-34,-22, 
  /* [45][0][][] */ -70,-37,127,-81,-62,-41,-125,-73,-1,-10,-19,40,-24,53,-87,89, 
  /* [46][0][][] */ 127,-19,-4,13,15,111,10,-17,56,-55,81,14,33,94,44,21, 
  /* [47][0][][] */ 26,-60,1,83,-127,-116,-45,-7,74,-77,51,105,-23,120,-12,84, 
  /* [48][0][][] */ -16,18,-13,32,24,-7,-127,-71,-115,41,75,-53,-69,-92,25,4, 
  /* [49][0][][] */ -65,29,-51,26,38,-30,31,39,14,3,3,17,22,127,43,-84, 
  /* [50][0][][] */ -127,63,-16,-22,20,-56,2,17,69,-27,-34,-31,-40,-29,-7,14, 
  /* [51][0][][] */ -20,-116,-71,29,123,39,-31,70,-9,-41,121,-83,-127,-2,-15,-30, 
  /* [52][0][][] */ 4,23,-55,-127,-18,15,80,39,46,-13,-9,-61,23,-95,53,-10, 
  /* [53][0][][] */ 63,7,2,-127,-2,-14,-51,-67,-53,53,47,26,11,7,69,47, 
  /* [54][0][][] */ -17,5,79,-40,57,39,-10,-114,-39,52,-31,-127,44,-15,15,-44, 
  /* [55][0][][] */ 31,0,-14,53,44,33,81,75,-121,42,84,-65,40,87,-8,-127, 
  /* [56][0][][] */ 3,-6,62,76,125,-12,-31,71,56,123,-3,-62,32,127,-16,-4, 
  /* [57][0][][] */ 72,64,22,15,-4,-33,93,-17,44,55,48,71,20,127,-60,70, 
  /* [58][0][][] */ -3,-65,48,57,-72,47,5,10,-5,44,-89,-100,67,127,-84,-36, 
  /* [59][0][][] */ -2,-54,0,61,22,-45,5,-96,85,-119,31,124,32,-127,29,-24, 
  /* [60][0][][] */ -71,127,6,-84,-27,24,18,-5,-60,109,10,59,52,-86,-80,-24, 
  /* [61][0][][] */ 96,-33,-76,-54,8,-89,7,-43,73,-64,99,-54,-2,-127,62,-89, 
  /* [62][0][][] */ -13,37,-127,-25,41,4,12,49,55,-61,-1,23,22,50,60,-63, 
  /* [63][0][][] */ -9,45,21,127,-46,30,56,-103,-8,-39,-68,45,0,-64,-33,10, 
  /* [64][0][][] */ 15,58,31,32,-55,26,-32,22,87,-19,-24,21,17,127,-76,-1, 
  /* [65][0][][] */ 127,81,73,-106,-120,-95,-111,95,50,86,-34,111,-3,33,104,66, 
  /* [66][0][][] */ 127,-44,-50,40,-62,-32,-3,11,21,28,6,-17,105,1,-91,34, 
  /* [67][0][][] */ 118,-127,27,-43,75,-11,-66,27,25,69,1,-30,-27,-12,-45,-55, 
  /* [68][0][][] */ -62,88,-85,-127,-9,122,26,50,38,-64,-87,-2,61,-116,-18,-117, 
  /* [69][0][][] */ -25,34,67,2,-41,-34,11,3,-34,-30,-89,56,-47,-127,-54,-2, 
  /* [70][0][][] */ -127,57,-98,-60,29,-37,23,25,-95,-127,-48,-44,-84,16,-115,17, 
  /* [71][0][][] */ 120,10,2,64,23,-127,-93,41,41,54,92,70,-39,-115,4,4, 
  /* [72][0][][] */ -127,74,-29,12,-68,-16,8,63,-70,-10,11,-67,6,28,61,-35, 
  /* [73][0][][] */ -127,29,-35,25,-45,-90,-42,-43,45,-76,16,9,-2,45,-72,-7, 
  /* [74][0][][] */ 119,-28,95,28,-127,52,-63,5,21,-104,-87,106,-50,107,-54,104, 
  /* [75][0][][] */ -32,-77,74,-38,4,11,-18,127,79,-57,-55,8,-44,62,63,-80, 
  /* [76][0][][] */ -71,-2,127,8,12,4,-81,18,0,-39,-7,-12,19,12,-11,-26, 
  /* [77][0][][] */ -21,-18,-102,41,44,95,-127,-53,-30,-34,-30,-44,-32,68,20,-113, 
  /* [78][0][][] */ -52,-59,96,-80,-15,127,33,-39,48,43,-80,81,-95,42,-53,-86, 
  /* [79][0][][] */ -38,-45,53,69,-118,-91,22,10,24,-110,-113,-117,-110,127,12,94, 
  /* [80][0][][] */ 2,1,-56,-5,13,21,-32,48,50,-127,43,73,-52,18,-10,109, 
  /* [81][0][][] */ -36,-15,-20,32,20,-69,-10,18,7,43,-50,-70,127,-29,-65,29, 
  /* [82][0][][] */ 117,83,28,24,37,-107,29,-22,61,95,5,-34,-8,127,10,60, 
  /* [83][0][][] */ -56,-1,-18,-62,-55,44,-9,-43,120,73,127,-86,42,-15,73,17, 
  /* [84][0][][] */ 3,-127,-13,-75,117,16,-2,-32,-81,-77,-84,60,-42,-36,-76,-68, 
  /* [85][0][][] */ -52,-34,-37,69,-69,20,-22,16,39,70,-54,-127,-12,-22,-45,-33, 
  /* [86][0][][] */ 6,7,5,-33,-45,44,-21,-43,-50,-34,-46,4,-30,48,-36,-127, 
  /* [87][0][][] */ 15,3,3,-11,11,21,36,-66,-65,104,-56,-29,127,-37,20,-48, 
  /* [88][0][][] */ -91,61,60,48,-28,30,-19,49,5,-65,-89,-127,-17,8,-32,-121, 
  /* [89][0][][] */ 1,-38,-82,39,-42,-61,127,57,-107,67,-44,17,13,21,-10,33, 
  /* [90][0][][] */ -57,65,94,-25,-75,46,-10,-107,-66,103,-76,-13,-67,-127,-5,-39, 
  /* [91][0][][] */ -69,-55,29,-3,40,110,98,22,34,69,-62,-43,127,-98,-16,-29, 
  /* [92][0][][] */ -127,73,54,-50,29,-9,-41,46,-29,89,15,-64,113,-38,-94,-38, 
  /* [93][0][][] */ 63,11,40,41,28,-74,119,-13,-41,-29,127,-18,-37,77,-70,-45, 
  /* [94][0][][] */ -49,-60,56,-127,12,-36,68,5,-29,-6,-121,-92,10,-75,100,12, 
  /* [95][0][][] */ 12,-22,-43,127,12,16,-92,-40,4,15,11,-22,-19,41,109,88, 
};
const TfArray<4, int> tensor_dimension73 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant73_scale = { 96, { 0.0020320788025856018, 0.0016371037345379591, 0.0011957089882344007, 0.0039184847846627235, 0.0027554593980312347, 0.0022719218395650387, 0.001805177191272378, 0.0019150436855852604, 0.0018386171432211995, 0.0013623487902805209, 0.0023447044659405947, 0.0032677899580448866, 0.0023621181026101112, 0.002172399777919054, 0.0014558350667357445, 0.0013091634027659893, 0.0029659571591764688, 0.0014917849330231547, 0.0020985992159694433, 0.0025289696641266346, 0.0022266637533903122, 0.0018533855909481645, 0.0025958425831049681, 0.003738773288205266, 0.0026430992875248194, 0.0020735419820994139, 0.0016463485080748796, 0.0040379413403570652, 0.0025835391134023666, 0.0026369001716375351, 0.0014397708000615239, 0.0025385709013789892, 0.0027766195125877857, 0.0023755959700793028, 0.0032579042017459869, 0.0017602399457246065, 0.0016730994684621692, 0.0040279040113091469, 0.0024828687310218811, 0.0028385058976709843, 0.0024613090790808201, 0.0022294465452432632, 0.0023711365647614002, 0.0017761343624442816, 0.0022426876239478588, 0.0021020569838583469, 0.0017131555359810591, 0.001119726337492466, 0.0025336684193462133, 0.00343090551905334, 0.0022581806406378746, 0.0026060098316520452, 0.0034739987459033728, 0.003678889712318778, 0.002111406996846199, 0.0020266205538064241, 0.0017052128678187728, 0.0018304446712136269, 0.0014069522731006145, 0.0018618667963892221, 0.0020457194186747074, 0.0027754632756114006, 0.0043695433996617794, 0.0019205802818760276, 0.0019985244143754244, 0.0010241072159260511, 0.0019949888810515404, 0.0017693075351417065, 0.0014299009926617146, 0.0017414758913218975, 0.0014385121176019311, 0.0016369459917768836, 0.0025858278386294842, 0.0026753600686788559, 0.0013177373912185431, 0.0023600785061717033, 0.0043937568552792072, 0.0031943279318511486, 0.0013241918059065938, 0.0015523047186434269, 0.0027738257776945829, 0.0048884991556406021, 0.0012900214642286301, 0.0015174461295828223, 0.00097240111790597439, 0.0042025563307106495, 0.0024528347421437502, 0.0019540339708328247, 0.0041180811822414398, 0.0034319942351430655, 0.0015433725202456117, 0.0017804431263357401, 0.0034121745266020298, 0.0026995826046913862, 0.0023718539159744978, 0.0017680071759968996, } };
const TfArray<96, int> quant73_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant73 = { (TfLiteFloatArray*)&quant73_scale, (TfLiteIntArray*)&quant73_zero, 0 };
const ALIGN(8) int8_t tensor_data74[16*1*1*96] = { 
  /* [0][0][][] */ 11,8,-35,-38,11,65,-24,29,21,-97,-14,3,4,46,-17,-7,-43,9,-51,28,-28,-4,-40,28,-28,-9,-8,-2,14,-43,-33,44,-3,55,17,-23,17,12,6,-22,-7,-50,-34,-21,-8,76,12,-36,-1,28,28,-3,-31,21,7,-27,27,-14,7,-12,17,-17,-9,97,-71,-53,-24,-70,-15,-20,45,-17,-19,-48,35,31,14,1,-37,-27,-31,-2,29,-4,30,-3,-127,7,-19,-21,-16,58,23,-11,-22,30, 
  /* [1][0][][] */ -17,-1,-4,-9,72,-5,-19,-28,20,103,-16,-9,-19,-107,-25,-81,1,-20,-3,6,-4,43,-2,10,-2,-43,-28,-7,11,13,71,21,28,-6,-14,-25,-4,26,-16,43,18,17,-7,-23,9,15,10,-11,7,-30,-8,3,-72,15,-27,23,27,-36,-27,-18,-58,-18,-2,-24,8,8,24,2,-28,-12,-127,8,27,-8,-41,19,33,39,64,37,3,3,-10,17,-13,-13,41,-91,-1,-16,-9,20,-10,-22,-63,-6, 
  /* [2][0][][] */ 8,-48,34,46,-38,31,-38,-80,-66,-57,42,-58,-42,-70,-81,9,14,5,-45,33,68,-109,-91,-12,33,-17,-34,-56,-2,67,3,39,-22,0,25,45,31,52,30,-30,31,-21,-83,2,19,-49,-70,0,-24,21,-8,5,-1,5,-23,60,-56,43,-23,22,26,-34,-34,-35,95,15,-32,-115,20,-126,-27,-54,-14,46,37,35,13,51,10,4,50,-15,37,82,-127,-45,100,7,-23,-65,1,-111,-1,53,-45,-17, 
  /* [3][0][][] */ 0,60,42,0,-16,126,-18,-2,0,56,12,-49,41,121,9,-44,3,-26,-10,33,-34,24,7,43,-5,-18,29,-24,-6,6,-26,31,-7,0,-19,-14,-23,33,19,40,-32,-4,-97,21,78,20,30,-40,-24,-75,-5,-27,5,-8,-84,57,44,13,13,26,18,-11,0,57,24,127,-20,46,-4,62,-18,24,-8,-4,28,-3,-10,-15,34,8,-66,10,-9,16,-19,36,-48,75,49,-67,-83,-33,57,-27,-32,-37, 
  /* [4][0][][] */ 8,-23,21,-4,-35,-74,-80,-70,-122,-21,12,2,-16,-33,48,-127,101,-14,-69,-42,5,-7,-5,64,62,35,-13,-64,-20,-8,5,-3,5,26,-26,1,34,-51,6,-52,-26,41,16,-49,-30,-25,41,40,15,-38,27,-35,25,29,4,-9,-103,-52,21,-34,24,27,-46,2,-36,110,-23,-29,17,-69,-4,-10,3,-26,23,75,43,-31,-62,46,-56,27,-45,91,-108,-24,52,21,-54,-27,-66,40,-48,116,-21,72, 
  /* [5][0][][] */ 29,26,-3,14,-42,104,5,12,-84,-70,25,-9,-43,-76,-93,52,-6,4,-28,16,-36,-28,-31,18,37,47,-74,-70,-16,-17,-10,-14,-28,27,-50,21,76,-17,1,86,14,16,14,20,32,-37,-15,59,-13,28,-29,34,-6,6,-19,-55,53,-37,34,-32,57,18,22,-3,24,56,127,-9,29,-2,0,35,-3,-46,-37,-19,-12,-25,-21,35,-7,-1,25,-64,-10,-4,-2,-32,-40,-42,28,78,40,11,-73,37, 
  /* [6][0][][] */ 32,-16,70,37,7,70,-23,-26,-43,85,43,-23,66,6,2,-72,26,6,-61,-1,7,-127,-93,20,81,50,-1,-58,-21,55,-13,49,-43,-80,44,-32,-10,-43,73,4,3,-20,21,-6,31,-31,11,-37,-23,-71,56,-13,-59,51,-12,47,4,-44,56,29,43,21,-8,36,-19,38,31,53,91,-22,-69,10,5,23,75,-44,59,11,-32,-57,-13,4,-79,39,-127,1,-31,12,23,48,-18,-98,-4,-57,53,-2, 
  /* [7][0][][] */ -33,13,-93,34,-12,11,-3,55,7,79,39,12,-55,57,38,91,27,48,65,-64,-41,18,40,-52,-58,14,-95,29,-42,-23,-1,-12,35,-89,-47,37,18,0,-40,-73,-10,100,-26,27,-15,38,102,-47,40,-49,-66,79,30,-18,67,-38,8,61,32,-6,34,75,-2,26,-34,-127,-115,-55,69,55,20,9,63,-22,52,16,12,29,14,102,-57,-8,20,5,-49,-1,-52,75,-26,61,5,-98,-16,-20,-38,-9, 
  /* [8][0][][] */ 11,-10,-35,-12,-51,-25,22,55,34,-67,-76,36,63,-127,-21,-96,28,13,15,11,-74,37,23,-13,-29,6,-78,-19,-32,7,20,-28,41,-114,-30,-4,17,-17,-70,-52,2,11,53,53,-23,-88,-45,32,10,-20,16,-49,6,-28,16,-4,-123,-47,-25,-68,85,18,34,-31,-97,-20,-103,36,-24,66,94,8,-80,-16,2,21,66,-28,-28,79,18,1,34,-59,84,6,69,57,8,-47,8,-69,3,34,-47,-30, 
  /* [9][0][][] */ -64,-14,1,12,0,88,-4,-14,66,127,12,2,-54,-27,44,-68,33,35,31,5,13,-8,-34,24,-42,25,62,-17,12,-9,4,8,5,11,-4,-25,-9,10,48,-8,20,-9,-14,-38,3,26,92,30,29,2,-57,27,14,32,-16,-8,-56,-39,28,-52,31,6,-19,-84,-24,-77,0,-52,-43,-2,13,-48,-15,2,0,-18,10,19,1,-37,23,3,-53,-18,-28,18,14,-97,-44,-7,73,38,-13,-2,-53,5, 
  /* [10][0][][] */ -58,-6,64,17,53,-10,103,102,-101,-4,1,-79,39,-5,-18,-40,-25,17,3,-12,7,-32,36,41,82,108,-37,-24,-17,19,-22,29,-27,33,5,-23,91,-13,36,13,16,6,-96,-45,85,-84,20,-74,78,12,111,42,-43,38,-85,27,-13,12,-10,20,-31,-9,-70,-71,-46,-10,-127,-103,53,-21,12,29,62,12,60,62,-15,68,-36,58,-80,12,-34,-94,-106,11,80,100,10,-9,43,47,-21,-31,42,51, 
  /* [11][0][][] */ 22,6,4,-35,-10,-36,-23,9,-5,78,-15,-13,-32,5,-68,-30,-14,-7,3,47,-22,46,-23,11,-21,38,8,21,22,15,43,6,8,50,9,-19,-7,11,-43,49,-36,7,-14,6,44,-7,14,-73,-4,-6,-23,-31,-56,-12,-13,13,22,-28,0,-33,-46,53,-16,127,-18,-34,51,60,-2,11,7,34,-2,-17,-12,-27,18,38,-64,8,-54,4,16,35,-70,-45,3,37,-8,35,-69,27,11,-39,-43,-2, 
  /* [12][0][][] */ -22,15,-3,18,-24,-11,-5,-74,8,28,51,-14,15,-30,-10,-24,0,-3,17,-7,42,-43,-26,-12,87,14,27,-30,26,63,38,13,8,30,5,0,0,12,54,40,-5,-25,14,-28,-1,19,24,47,-33,3,19,31,-20,49,-18,35,4,-29,47,77,1,5,-23,-20,7,43,-45,8,38,-40,-30,-8,19,-14,-8,8,-32,58,33,-42,14,19,-127,-21,5,-13,-12,-81,-21,22,-60,2,-16,-12,-9,12, 
  /* [13][0][][] */ 7,21,65,15,33,-39,-51,105,-12,21,-23,-18,-29,15,47,36,-25,-7,76,2,34,32,21,-32,24,-67,60,23,57,19,-1,-11,-17,48,46,-46,-29,-21,-50,-59,26,0,-31,-43,58,50,-47,-1,-25,-55,-73,53,70,-40,14,-50,-29,-45,5,52,-29,24,-36,-100,38,110,62,111,-74,55,0,71,38,47,-1,-127,-61,74,45,61,45,-16,-36,18,51,-14,45,97,11,8,8,17,14,-50,-25,-44, 
  /* [14][0][][] */ 63,11,62,63,-60,-6,24,-68,-69,40,89,-30,35,-23,24,7,-25,-111,-71,57,80,-83,104,3,-72,28,2,-36,81,-4,-90,22,-11,30,34,26,5,-23,58,11,-12,-46,-77,9,-1,18,-61,74,-9,-35,50,11,-85,26,73,12,2,122,26,-48,-90,-48,-7,-38,-36,-8,17,-121,21,-127,-44,-36,31,-31,-41,21,111,-19,32,-84,-54,-19,-43,-14,13,-61,96,-68,-26,13,-68,78,50,-14,27,36, 
  /* [15][0][][] */ 30,-7,-45,-55,-69,27,37,78,-11,-44,32,-48,-6,-34,12,-22,-13,4,36,13,22,17,-91,-72,-51,-66,17,43,-12,-56,-13,-37,-17,-13,-25,-50,-38,-20,-15,-41,3,17,6,61,-17,-5,55,-9,16,65,-47,-7,15,1,-8,25,3,75,-1,45,-62,82,-30,64,57,-10,-6,27,77,47,-73,13,9,-43,-46,39,7,-7,-46,32,-65,5,37,-97,127,-38,-15,6,-46,3,-16,8,19,-24,-6,84, 
};
const TfArray<4, int> tensor_dimension74 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant74_scale = { 16, { 0.0031127806287258863, 0.0022959820926189423, 0.0015938279684633017, 0.0012942883186042309, 0.0016961956862360239, 0.001482233521528542, 0.0016814529662951827, 0.0014015741180628538, 0.0017091532936319709, 0.0022123290691524744, 0.001746003981679678, 0.0021356835495680571, 0.0025469355750828981, 0.0011813265737146139, 0.0015286867273971438, 0.0015860183630138636, } };
const TfArray<16, int> quant74_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant74 = { (TfLiteFloatArray*)&quant74_scale, (TfLiteIntArray*)&quant74_zero, 0 };
const ALIGN(8) int8_t tensor_data75[96*1*1*16] = { 
  /* [0][0][][] */ -21,-79,-1,127,-13,6,-4,10,-27,-36,-20,-109,33,119,29,46, 
  /* [1][0][][] */ 106,-14,110,-17,42,-28,127,-118,-47,31,37,44,-109,23,-12,-73, 
  /* [2][0][][] */ -6,-11,-14,-69,39,-27,-24,25,-16,32,37,-69,104,127,40,15, 
  /* [3][0][][] */ 13,6,-65,28,-2,-25,-127,-23,-40,65,-10,45,40,114,21,37, 
  /* [4][0][][] */ 66,-127,-26,-50,7,-19,12,-67,-13,-14,-86,-51,19,-60,28,13, 
  /* [5][0][][] */ -22,71,79,-2,31,58,-59,92,-95,4,84,25,11,-26,-26,-127, 
  /* [6][0][][] */ 31,-56,33,-45,18,62,-72,123,90,59,-54,2,-17,127,-46,127, 
  /* [7][0][][] */ 84,37,6,58,24,-127,-46,-4,-80,-51,-2,47,32,-69,-63,-4, 
  /* [8][0][][] */ -19,21,-54,-53,43,3,54,34,127,39,124,-55,32,-58,-9,-29, 
  /* [9][0][][] */ -13,25,4,42,-23,-127,-12,21,77,78,-12,-25,34,-59,-66,42, 
  /* [10][0][][] */ -63,-10,-57,-76,-1,-21,52,70,-1,-66,127,-11,-4,-19,-56,38, 
  /* [11][0][][] */ 38,1,-3,87,18,-62,-17,-17,19,-43,13,84,-127,-37,-20,60, 
  /* [12][0][][] */ -17,-77,83,73,37,-70,-60,-127,-6,80,89,12,49,-46,-105,51, 
  /* [13][0][][] */ -26,1,-27,-13,-85,-78,62,-6,8,63,104,-53,76,6,72,-127, 
  /* [14][0][][] */ -11,-48,-56,-26,-33,-76,-85,-12,-8,-24,-34,-127,-76,-61,34,43, 
  /* [15][0][][] */ 83,127,-44,46,-3,-23,6,19,10,-29,-37,-117,11,35,-29,60, 
  /* [16][0][][] */ -79,-74,110,49,-27,-32,-3,127,-27,-87,73,-66,63,7,41,84, 
  /* [17][0][][] */ -30,-17,44,32,52,51,-43,-37,1,7,-9,127,-59,-38,-45,79, 
  /* [18][0][][] */ -42,29,-19,24,-17,-28,-16,46,24,-32,-127,-6,7,25,-74,13, 
  /* [19][0][][] */ 15,-76,-73,-82,-36,-118,-82,-2,22,-34,-55,-127,-77,-78,46,63, 
  /* [20][0][][] */ -26,-66,79,-41,44,39,41,15,50,35,-11,-108,95,-68,-26,-127, 
  /* [21][0][][] */ 92,36,-88,-36,36,-127,38,83,-68,-42,-41,98,43,15,86,-7, 
  /* [22][0][][] */ -42,-46,27,127,48,-55,-22,-83,59,67,82,-3,-15,-51,17,77, 
  /* [23][0][][] */ 3,58,-92,-97,105,-52,-63,-9,-127,69,95,44,104,-86,-64,19, 
  /* [24][0][][] */ -127,-26,59,79,38,20,99,93,-57,35,-7,69,16,-47,-17,51, 
  /* [25][0][][] */ 39,-19,-53,40,36,-57,-43,17,-127,47,13,7,-28,-33,-93,-39, 
  /* [26][0][][] */ 47,-54,52,72,-41,-27,-74,31,40,32,43,-52,4,-54,127,-41, 
  /* [27][0][][] */ 87,-1,16,51,58,80,41,36,82,127,39,-61,-9,22,-30,47, 
  /* [28][0][][] */ -64,89,-13,26,7,-16,46,32,-43,-70,26,72,-114,-127,-17,-43, 
  /* [29][0][][] */ 37,-60,74,37,-127,-48,-17,50,-2,-58,-92,35,-90,-18,62,116, 
  /* [30][0][][] */ -86,-48,74,-56,-93,19,5,-34,-59,40,-75,-2,10,48,-127,-119, 
  /* [31][0][][] */ 66,51,-52,127,112,-102,6,-39,17,-76,-40,-24,4,-25,35,30, 
  /* [32][0][][] */ 8,44,-75,-121,67,25,37,-18,-36,16,-10,0,90,-127,-99,32, 
  /* [33][0][][] */ 32,-30,12,33,-3,51,1,16,8,-27,2,1,-56,-127,-44,4, 
  /* [34][0][][] */ 1,12,-65,110,-127,-98,0,-77,116,-59,10,103,-104,56,-9,-63, 
  /* [35][0][][] */ 12,-61,7,-127,-120,-63,82,-30,88,53,71,-51,31,102,47,102, 
  /* [36][0][][] */ -47,-64,23,46,-56,-56,-100,-101,-127,37,70,94,-120,47,-32,114, 
  /* [37][0][][] */ -76,76,-124,-41,-127,120,-39,3,87,-17,-20,-55,10,-11,59,53, 
  /* [38][0][][] */ -55,127,-48,14,-52,-54,64,63,-9,80,-45,-16,-16,70,12,77, 
  /* [39][0][][] */ -46,41,-35,91,67,-17,102,127,-112,108,-92,26,-97,-46,-29,78, 
  /* [40][0][][] */ 18,-89,69,-68,-19,40,-77,-51,102,-45,117,-107,127,-35,33,-85, 
  /* [41][0][][] */ 26,-48,85,11,-110,-7,-125,26,-19,-127,-118,-19,59,92,92,62, 
  /* [42][0][][] */ -55,3,3,56,-11,-127,-42,18,9,-5,-29,-12,41,5,-28,-87, 
  /* [43][0][][] */ 75,-71,38,39,48,27,44,10,-36,-6,-54,47,127,-18,-91,-14, 
  /* [44][0][][] */ -61,-27,36,68,-12,-11,-56,-27,16,51,-53,-81,-23,-7,-127,31, 
  /* [45][0][][] */ -92,127,58,-21,61,-25,-40,-59,-4,20,-46,75,3,-81,21,27, 
  /* [46][0][][] */ -75,12,11,-40,-127,-13,-50,15,29,22,40,-36,-44,-40,-14,-16, 
  /* [47][0][][] */ 73,-127,-65,-50,-42,90,-96,-33,-7,16,98,90,35,27,36,-47, 
  /* [48][0][][] */ -26,-65,14,-127,97,29,32,21,-21,-96,-26,2,-116,41,-67,-28, 
  /* [49][0][][] */ 65,81,121,10,64,-34,-127,63,4,6,67,-34,-39,64,83,-14, 
  /* [50][0][][] */ 32,54,24,-49,75,9,127,-36,50,26,18,120,-25,54,-50,24, 
  /* [51][0][][] */ 17,-64,56,52,-59,-38,-57,45,88,-5,-40,99,108,-44,7,127, 
  /* [52][0][][] */ 119,-80,-37,74,105,127,-81,-15,-20,-6,51,-35,2,-43,-4,64, 
  /* [53][0][][] */ 35,-127,67,-47,-3,-62,34,95,73,37,-47,-15,26,45,72,34, 
  /* [54][0][][] */ 18,24,73,18,-123,-1,127,93,114,-79,-116,-83,-10,42,-111,-125, 
  /* [55][0][][] */ 46,-42,-39,-3,-64,42,24,127,-2,87,-37,6,-27,71,-23,-64, 
  /* [56][0][][] */ 90,37,82,-127,-94,-21,-78,65,-47,85,-88,50,-46,-50,-55,43, 
  /* [57][0][][] */ -45,67,-23,36,-59,104,120,-79,2,-127,-35,40,30,-40,14,-96, 
  /* [58][0][][] */ 51,43,110,-31,29,-7,-33,-45,-74,21,-127,-40,-53,-125,9,-79, 
  /* [59][0][][] */ 7,-46,13,44,43,44,-78,51,-127,-29,5,-52,60,-14,35,-31, 
  /* [60][0][][] */ -11,9,46,3,22,127,60,-1,-49,54,-48,7,33,9,13,62, 
  /* [61][0][][] */ 72,-68,11,61,-78,63,-9,-30,-61,27,36,-127,4,31,-112,47, 
  /* [62][0][][] */ -17,41,-9,6,-15,-65,-81,62,22,-127,69,52,-35,-25,5,103, 
  /* [63][0][][] */ 68,116,-124,17,57,62,99,124,-30,-84,-88,69,-14,115,127,-22, 
  /* [64][0][][] */ -86,13,-52,9,-26,-36,-78,111,46,-74,99,44,-94,-10,0,127, 
  /* [65][0][][] */ 66,44,-3,127,-66,68,-10,38,82,39,-4,54,40,-38,41,1, 
  /* [66][0][][] */ -30,-125,41,-127,-15,17,-48,-69,20,85,59,53,-17,-14,20,-38, 
  /* [67][0][][] */ -68,-70,-37,-18,-19,5,-15,-31,-58,-4,-33,127,-45,-115,89,-99, 
  /* [68][0][][] */ 68,44,-47,39,-71,-82,-78,-32,-30,-13,4,24,127,111,-11,21, 
  /* [69][0][][] */ -24,127,24,64,-31,-17,1,41,-50,-24,34,39,37,-84,-8,-57, 
  /* [70][0][][] */ 7,23,-16,70,4,-10,-6,80,-17,-55,-49,-127,-19,-71,59,37, 
  /* [71][0][][] */ 41,28,-80,-55,40,90,-90,-69,-21,41,-36,-42,58,40,-100,-127, 
  /* [72][0][][] */ 85,-37,1,-88,-100,15,-90,-5,127,-21,25,-113,122,124,-28,99, 
  /* [73][0][][] */ 127,-94,-67,-42,27,32,1,28,-61,-38,0,7,10,-41,55,-58, 
  /* [74][0][][] */ -68,63,-76,87,50,59,21,-106,-127,-103,-36,-14,-61,11,2,-58, 
  /* [75][0][][] */ 30,5,-52,53,18,-47,-20,6,88,-15,-5,-71,-68,127,-39,-83, 
  /* [76][0][][] */ 11,-127,16,15,-53,72,-97,-53,82,-70,-30,10,-17,-33,-122,87, 
  /* [77][0][][] */ -31,32,-55,-10,64,25,-56,42,127,-73,58,96,-91,6,-55,69, 
  /* [78][0][][] */ 127,13,-84,-1,21,20,38,57,-49,-48,14,20,82,19,40,2, 
  /* [79][0][][] */ -44,2,25,-21,-127,-36,-32,74,-25,-6,-55,-91,12,-19,-99,-87, 
  /* [80][0][][] */ -127,107,-6,127,-107,-37,33,-32,-20,-38,40,3,-15,-5,-10,-98, 
  /* [81][0][][] */ -74,-7,103,-4,-88,30,-70,-127,-18,83,-44,-103,45,24,-11,54, 
  /* [82][0][][] */ 80,-8,113,-29,6,53,-49,44,106,-127,-55,-63,96,1,34,-28, 
  /* [83][0][][] */ -57,-11,-127,-20,107,4,119,116,113,97,28,-24,-25,18,-86,-49, 
  /* [84][0][][] */ -20,81,15,-110,-84,-29,56,36,-51,-38,29,-18,29,-127,-9,-17, 
  /* [85][0][][] */ 101,43,51,9,-25,-127,16,14,8,-18,36,1,69,-5,-83,92, 
  /* [86][0][][] */ -40,-41,-114,-9,47,-110,86,-5,-127,84,-33,66,-52,104,19,-69, 
  /* [87][0][][] */ -89,-74,-31,55,48,-81,-38,63,28,-15,-125,24,22,127,-3,75, 
  /* [88][0][][] */ 34,61,31,-127,-6,41,25,-49,66,-13,-6,-16,64,111,-15,-16, 
  /* [89][0][][] */ -73,24,43,-21,-93,-71,-1,65,-63,-127,32,13,-31,-61,40,74, 
  /* [90][0][][] */ 39,76,-81,-30,-33,-45,-92,24,-45,12,77,-50,-127,-10,12,-8, 
  /* [91][0][][] */ 104,35,10,-27,-47,-127,-13,-97,-5,35,-109,-86,13,-4,59,-30, 
  /* [92][0][][] */ -56,-14,-22,23,68,22,55,42,35,-5,24,-34,41,-12,51,-127, 
  /* [93][0][][] */ 54,50,-23,62,-56,-35,72,-54,31,-27,62,94,-127,-87,-18,0, 
  /* [94][0][][] */ -59,-127,23,4,126,9,-16,-117,10,19,35,12,4,-87,-12,-38, 
  /* [95][0][][] */ -12,109,-23,85,63,-45,83,-60,127,67,53,-46,-75,-47,77,-12, 
};
const TfArray<4, int> tensor_dimension75 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant75_scale = { 96, { 0.0016783835599198937, 0.00031781129655428231, 0.0016122085507959127, 0.0016408809460699558, 0.0026591038331389427, 0.002268131822347641, 0.00095306220464408398, 0.0021779334638267756, 0.0021185122895985842, 0.0020062015391886234, 0.0030409866012632847, 0.0013773422688245773, 0.0045440881513059139, 0.0023348086979240179, 0.0019723607692867517, 0.001435466343536973, 0.0015029081841930747, 0.0021273409947752953, 0.0035871861036866903, 0.0017924731364473701, 0.0011936376104131341, 0.0025209872983396053, 0.0020829089917242527, 0.0011883395491167903, 0.0023103936109691858, 0.0028278250247240067, 0.001833083457313478, 0.0021917626727372408, 0.0010930108837783337, 0.0011558231199160218, 0.0012662113877013326, 0.0016242529964074492, 0.00029118973179720342, 0.0031812039669603109, 0.0010588129516690969, 0.0013008893001824617, 0.0013738740235567093, 0.0019873615819960833, 0.0020171036012470722, 0.0018009394407272339, 0.0016530182911083102, 0.00094129767967388034, 0.0030319755896925926, 0.0015367585001513362, 0.0037812504451721907, 0.001949286088347435, 0.0025151707231998444, 0.001995735801756382, 0.0016721395077183843, 0.0012730705784633756, 0.0019700070843100548, 0.0012121234321966767, 0.0011916331714019179, 0.0018790778703987598, 0.0033356102649122477, 0.0023871632292866707, 0.0016504032537341118, 0.0012319881934672594, 0.0013875160366296768, 0.003243584418669343, 0.0017684510676190257, 0.0021625007502734661, 0.0011377965565770864, 0.0039853043854236603, 0.00094501825515180826, 0.0021232878789305687, 0.0022791547235101461, 0.0012504432816058397, 0.0012413969961926341, 0.0024727294221520424, 0.0023271390236914158, 0.0013035164447501302, 0.00079399131936952472, 0.0025581656955182552, 0.0013113209279254079, 0.0024311186280101538, 0.0017916650976985693, 0.0016393341356888413, 0.0031344410963356495, 0.0035413019359111786, 0.0016841212054714561, 0.0020512416958808899, 0.0017302306368947029, 0.0017968437168747187, 0.0017084100982174277, 0.0018619479378685355, 0.0017437497153878212, 0.0017698792507871985, 0.0018483197782188654, 0.0015800112159922719, 0.0016616088105365634, 0.0038165028672665358, 0.0018601373303681612, 0.0014496382791548967, 0.0013519468484446406, 0.0014487400185316801, } };
const TfArray<96, int> quant75_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant75 = { (TfLiteFloatArray*)&quant75_scale, (TfLiteIntArray*)&quant75_zero, 0 };
const ALIGN(8) int8_t tensor_data76[32*1*1*96] = { 
  /* [0][0][][] */ -70,-14,82,-18,26,54,-23,98,35,-14,10,54,-4,16,-59,-6,12,-19,21,-8,-12,88,-10,-57,64,45,57,7,-57,-52,-13,50,3,24,48,61,-39,-16,-54,86,15,-49,12,-28,80,5,25,59,39,41,-1,-9,1,20,21,6,80,-3,2,65,66,84,26,5,55,-1,8,11,-59,56,33,-57,-62,127,-20,-76,31,59,40,14,1,-77,13,-25,-26,60,32,-10,87,41,35,-5,29,-39,-42,31, 
  /* [1][0][][] */ -12,8,12,32,-14,39,-14,-56,-15,-15,4,52,29,16,9,-53,14,20,-3,-17,-36,4,25,30,39,11,31,21,28,18,-20,-24,36,1,-53,-14,-1,16,12,61,-55,34,-20,25,-45,4,15,24,0,38,-4,38,5,33,25,-27,-1,4,5,9,-28,22,-17,27,7,51,21,57,39,3,28,24,65,15,7,50,68,27,-18,33,32,-6,-127,-49,-34,-56,39,13,28,61,40,-9,7,5,6,5, 
  /* [2][0][][] */ -5,-49,56,-43,-62,51,-5,50,40,15,-6,103,28,-8,-20,78,73,11,13,-8,53,11,54,-13,-29,2,12,-42,25,33,-2,60,2,46,-31,-2,37,-25,-70,-48,-57,17,85,13,34,123,-49,-69,127,-14,-38,34,-11,-26,81,-46,71,-12,-9,21,51,-5,-6,-3,44,-38,-101,-21,39,40,-51,25,30,-9,89,62,66,2,-23,19,22,-25,-117,0,12,30,17,-24,81,0,-14,-31,15,-33,38,-66, 
  /* [3][0][][] */ -54,66,26,-30,-59,-7,66,24,-96,65,-15,-33,-91,92,34,-54,47,-29,-6,37,93,-55,-118,-18,-73,21,48,-76,-44,-93,-27,38,-65,-31,28,-19,-18,31,-26,-60,30,-55,-81,2,-13,-40,37,-84,-54,4,-58,-13,21,-9,9,-100,85,78,-2,-15,-79,-34,-80,-40,28,107,-14,82,9,-29,-32,-76,56,-65,101,-53,11,127,-42,-64,37,35,-60,12,75,7,80,-18,82,-15,-71,-28,18,-40,-74,30, 
  /* [4][0][][] */ 5,30,24,51,20,-45,88,-30,-48,-13,-10,-64,1,5,-30,36,38,-50,-17,-27,42,-2,-15,-10,12,-58,30,-79,4,-68,78,0,-127,0,50,63,1,-65,69,24,-3,-92,-12,-56,-29,-19,75,-7,38,-3,-22,69,73,40,-10,17,8,19,65,-32,-15,98,-17,-8,-7,-42,19,11,1,-16,-9,28,-4,11,78,24,9,-9,17,39,54,-27,39,-17,21,3,28,19,-1,-19,12,-7,15,12,17,-15, 
  /* [5][0][][] */ -6,89,-37,11,-31,37,-11,-47,25,43,-26,-5,116,-31,-12,-43,-7,-7,-17,15,38,56,83,11,-5,-18,63,27,-32,27,-23,-48,-16,-127,75,69,38,-10,94,13,43,48,62,20,12,-10,-13,-10,0,21,1,-65,11,62,4,-50,6,13,64,50,5,-36,20,93,51,-42,37,-44,-7,32,53,-83,-5,-93,50,-11,54,20,-52,-18,25,-31,16,15,47,12,22,30,-9,-55,-78,-5,13,25,8,7, 
  /* [6][0][][] */ -6,4,-28,-41,-2,7,-8,13,-24,-13,-35,-21,-31,28,-21,-61,69,15,-18,39,-87,39,47,32,63,-33,-25,-39,24,-13,-46,70,2,51,-31,23,-2,-10,-104,-65,-42,-24,-14,-3,14,-52,86,-119,75,127,-21,-7,7,42,-3,-41,23,-6,15,10,1,-2,-45,18,36,-22,-44,-2,23,16,88,53,65,-27,-55,37,34,-1,25,-54,66,-28,11,-13,50,13,-63,-39,-34,-43,66,-20,-27,-22,-19,9, 
  /* [7][0][][] */ 14,-6,54,-9,15,-94,23,-22,-12,47,-16,43,75,-34,72,46,-13,15,-26,36,-1,-21,71,-18,29,-54,39,-76,18,4,39,-30,-40,78,13,-63,-9,-51,18,2,-28,-28,-25,62,98,-34,-42,7,-7,23,48,61,38,3,-55,15,-29,50,-19,-114,-127,94,34,67,3,111,-38,-10,3,-21,-22,-40,-7,34,-5,21,52,-46,50,-12,6,83,-13,-23,70,-11,3,-41,-36,-3,47,16,57,-46,0,20, 
  /* [8][0][][] */ 37,-91,10,-1,-51,71,36,-55,-10,-30,-4,23,-1,37,25,8,-22,-43,-53,17,-1,-42,-127,20,54,16,-6,-78,10,46,10,-8,77,-65,14,30,-22,-77,4,37,35,38,59,-41,-10,93,3,-61,-31,59,33,36,30,109,67,25,-32,16,-6,55,83,40,-21,11,43,-41,-82,85,-48,-32,2,3,-23,-22,-66,-15,-16,56,-2,-8,27,25,13,-8,32,8,20,28,-2,-83,28,8,-8,7,-48,-11, 
  /* [9][0][][] */ -6,28,-35,-7,-58,125,35,48,-68,2,28,2,-15,-30,61,70,12,55,-32,96,-89,17,-29,53,-30,25,12,-4,25,-1,8,-9,30,-37,-6,-63,5,52,18,1,-27,-31,-79,-70,-8,-9,40,31,-12,43,-18,5,23,19,-25,-18,22,58,6,37,32,-7,-12,-3,-7,14,-50,-38,-65,4,-33,127,39,-2,-4,0,24,-30,-5,14,102,26,27,-11,-54,-1,16,4,-35,45,4,-10,0,5,-3,-43, 
  /* [10][0][][] */ 47,-41,-36,112,-2,33,32,56,3,-29,1,26,93,79,-15,9,-11,-66,-24,-68,-24,46,31,6,-51,-3,-17,-3,6,-21,-13,-4,6,2,46,1,67,10,-78,-73,20,15,-46,-71,-11,15,17,-37,16,-18,2,-42,11,-61,-49,-14,-31,-15,-31,37,127,65,0,57,19,35,-28,27,23,6,2,58,41,-30,-66,-3,2,73,-36,-12,-46,-22,53,29,31,64,19,-3,-57,39,-31,-10,0,40,-26,-1, 
  /* [11][0][][] */ 72,30,-14,-62,6,-3,-46,-10,-70,4,65,-94,-25,-50,29,42,-1,-28,-38,12,-55,-31,-25,-5,-60,18,-102,29,-16,-62,-21,-64,28,-10,11,77,3,-106,16,-48,-25,-62,41,102,64,-52,1,43,-72,23,24,-82,-38,-39,13,-119,-19,-27,-3,21,60,80,-127,29,48,-44,-11,-34,-56,23,-11,-47,83,62,-34,-11,12,-15,42,-3,-13,-24,-30,-64,-41,32,-4,-31,13,87,-56,9,19,66,-4,-36, 
  /* [12][0][][] */ 8,-61,9,-2,-31,0,59,10,33,-21,27,-15,34,47,-10,-57,2,48,2,-37,-29,-11,-26,16,-48,27,-75,55,15,-25,-42,-23,-25,-40,-19,-53,-20,-39,-38,-28,15,-56,-127,82,81,-3,59,-39,96,5,-85,-1,-38,-36,-6,50,-9,-49,11,-32,-51,-6,0,69,10,-78,-13,24,-29,-80,36,62,-44,-80,82,78,72,-69,8,29,28,54,10,23,-60,-101,4,38,-24,69,-23,-16,-9,13,-85,8, 
  /* [13][0][][] */ 23,-2,-73,-30,-35,29,-53,-63,-58,-10,23,-40,-17,-12,-127,55,-80,41,-10,-102,-8,23,-25,16,57,-17,-20,0,-8,-72,-73,2,-66,10,-33,5,-64,64,31,21,33,-40,-49,-46,7,-16,62,-60,20,-16,6,29,-31,8,-58,-54,-29,-7,11,-14,-10,56,22,51,-69,39,-68,-27,-29,9,22,-41,31,-41,-35,2,-2,11,43,5,-63,6,-30,-15,-49,-64,-11,-6,34,63,75,16,-17,-74,29,12, 
  /* [14][0][][] */ -14,11,7,-57,-1,10,17,-41,78,62,-22,35,15,23,65,-32,-5,98,32,82,76,37,77,-18,-50,-49,-1,-21,-14,-49,-3,3,8,-24,73,-39,1,109,-11,-56,-24,-47,36,-87,106,54,48,-30,9,31,20,39,-6,-6,-21,82,0,-81,-7,6,16,-13,127,-33,-29,14,11,46,-94,1,18,-47,78,43,-15,-63,35,-45,70,18,28,52,-66,34,-13,-59,12,4,0,-34,-18,16,35,59,17,-22, 
  /* [15][0][][] */ 2,-21,20,-45,2,-7,-14,-19,15,-7,29,15,-4,31,-6,-6,16,-21,52,-20,48,32,24,16,-34,6,41,18,-47,64,-17,15,5,-91,-60,-20,0,50,54,-36,8,13,40,-44,30,21,1,-11,-29,12,-30,31,27,-13,54,-3,10,-50,9,38,-4,-10,-12,-36,67,55,-1,21,-44,-22,127,-38,-8,10,-23,65,9,-24,3,11,5,16,29,-6,7,37,-11,-26,-68,26,-20,0,11,28,-3,-22, 
  /* [16][0][][] */ -9,-70,-36,-6,64,-57,13,26,-42,7,-51,0,9,-17,34,28,43,-30,2,25,-17,-23,30,-23,39,42,13,49,13,10,-99,-37,49,-26,5,-12,8,32,116,127,-22,-16,-85,-32,6,-57,8,-2,71,-6,-8,23,-12,8,-61,2,30,30,-96,4,-25,-41,-22,-1,-49,-35,11,-124,-10,-64,-11,85,6,-42,-7,-50,-18,34,-24,-14,-1,17,-79,-30,7,67,-7,-28,-5,-2,44,-22,21,107,13,23, 
  /* [17][0][][] */ -78,-45,109,12,52,-25,-70,-107,-59,-40,9,15,65,-39,-2,5,-8,-97,-64,-15,37,-37,-25,-44,47,-89,22,22,1,69,-58,-28,-76,43,21,-64,118,-42,-64,-29,23,17,101,-10,36,-39,76,-6,-101,-82,53,-69,-62,34,-62,48,127,-115,-57,-4,22,-70,7,74,101,91,62,19,-64,-10,24,62,-6,-9,-84,-24,22,14,-43,-47,-27,4,50,-42,-12,-16,64,-17,-86,41,45,10,-1,57,-22,13, 
  /* [18][0][][] */ -93,17,44,7,-83,65,1,-19,-13,-83,-17,-33,71,55,117,52,50,-13,-46,59,26,-24,22,-25,13,20,41,20,-24,-12,-33,-10,84,10,4,114,-62,-43,-62,-85,41,-4,-72,-37,1,-51,42,-55,-16,-99,72,-12,-34,-41,20,127,86,32,9,-24,-60,-24,5,54,-26,-21,-17,28,94,14,45,-95,20,-24,72,75,-41,47,23,-11,5,3,19,32,-58,-32,-35,-59,115,-21,-29,-10,-2,-105,78,24, 
  /* [19][0][][] */ 7,127,53,10,18,-26,-4,-7,17,-31,12,8,27,-11,19,55,30,-14,34,-10,12,-16,31,-32,53,-21,-8,5,-35,18,-21,-7,46,-2,32,-17,35,-4,-14,-2,2,18,-80,-15,38,42,-24,27,33,24,10,-1,11,-7,-1,16,-38,-61,3,-30,60,-21,-25,-24,29,27,-17,-28,22,-5,5,-41,-50,3,-12,38,-12,3,-2,10,-30,9,-17,-11,12,5,4,-19,13,19,39,-4,-31,-42,-13,18, 
  /* [20][0][][] */ -37,-73,7,17,-52,24,6,37,48,0,19,-22,10,12,65,-12,-56,-9,39,47,-64,-17,33,9,37,-14,-127,-2,-25,48,41,-34,-120,-65,6,-18,38,10,8,22,-8,39,-84,35,-10,-18,-9,-34,-125,8,36,-65,7,42,33,19,26,-91,6,-63,-14,-32,-16,-16,31,0,-7,40,64,-20,-81,4,13,-75,-58,-34,-38,61,-3,19,33,61,14,5,-65,15,2,4,33,-10,33,18,0,0,54,3, 
  /* [21][0][][] */ 6,-58,25,46,17,-16,80,-75,0,-97,8,20,-16,0,-25,34,20,-45,13,-38,-127,-89,3,-4,-19,62,-72,-20,2,11,-18,-16,-33,-74,34,-24,-42,88,54,65,-1,-5,14,-6,-75,55,-65,57,70,6,-30,-60,-2,2,-14,1,37,-13,3,-27,75,-77,-6,-41,-16,-14,-13,33,4,-35,25,-109,-2,44,-2,-51,13,28,20,-85,38,62,-42,-3,14,-39,49,32,98,52,-43,0,30,-26,18,48, 
  /* [22][0][][] */ -46,-42,18,52,-40,-4,55,4,35,60,12,6,1,7,-38,52,50,-13,35,-36,56,-26,-30,-15,42,-73,-16,-14,-45,-52,46,40,102,-16,20,-5,24,24,-17,-9,5,-38,-7,2,-26,-43,-26,46,-31,-8,-33,-127,32,-17,-23,7,8,-25,56,-12,-14,-14,14,-17,-29,55,-11,-43,36,-28,1,19,50,-49,9,32,1,-3,-54,14,38,-13,33,53,-31,32,38,33,-6,30,95,8,-1,24,-3,-36, 
  /* [23][0][][] */ -36,2,11,-93,-11,-3,29,15,-11,-62,60,30,32,-22,-38,-21,-40,-16,-50,-58,49,-27,-26,73,11,44,91,-12,-1,64,53,32,-12,57,19,69,31,18,-53,-61,-6,81,-4,-64,-10,71,3,66,72,18,-53,-4,18,43,76,32,35,2,77,5,-30,-36,-35,35,97,45,42,-127,0,-44,-110,-19,41,53,-14,-32,19,85,37,13,56,60,56,13,-6,18,2,-20,-8,-16,5,-13,7,-75,-29,-29, 
  /* [24][0][][] */ 43,-19,-26,59,-31,56,16,63,-53,-24,-23,-45,41,32,-9,71,6,-33,4,-9,66,-26,-64,-44,-10,-28,67,-20,-16,-107,-3,9,-51,-62,38,-55,-47,-77,27,10,70,-60,15,-30,-32,-5,-42,25,-19,-6,-30,13,48,38,43,43,-19,22,41,80,-114,-73,6,40,24,-53,-127,28,52,30,76,43,1,72,-31,18,-63,-14,71,35,38,20,-58,34,70,122,21,29,-24,-45,36,13,-28,80,-4,-19, 
  /* [25][0][][] */ 83,-1,-78,51,109,12,82,-33,57,29,36,37,-24,-57,3,-62,-5,68,75,66,45,-103,7,53,9,-12,72,-28,-9,-17,-65,-65,-69,4,68,38,10,-24,-32,-27,22,13,34,-76,74,8,-60,-51,-55,-36,-23,39,-22,23,33,9,66,49,-87,28,-23,-50,-21,-45,110,20,58,9,100,103,-10,-127,-9,32,47,11,-43,-8,14,-29,108,-13,51,50,-49,68,6,96,18,44,104,-9,9,21,44,95, 
  /* [26][0][][] */ 3,-47,-36,55,16,-80,-17,1,-1,-42,0,-20,39,51,101,14,51,85,-79,111,101,73,-108,-13,62,-3,-3,27,-10,-64,48,34,-32,-44,9,58,-86,85,28,62,-6,-31,12,-127,75,6,-24,-33,8,52,-28,62,-32,6,-60,-61,8,-69,31,-9,-46,-54,-55,101,22,40,-29,10,36,-85,-10,32,-1,16,70,-29,29,78,34,-2,25,16,16,6,-72,-27,0,47,47,27,76,-47,-36,-19,-50,-66, 
  /* [27][0][][] */ 74,38,-17,15,7,-56,48,70,-17,4,-10,-2,18,10,-44,-17,-47,35,-11,-36,-29,31,-7,-9,-42,127,23,14,16,27,-4,-43,16,83,-1,54,-57,50,-36,15,43,-15,16,-68,51,-21,4,-42,-87,-2,13,13,-20,-35,20,78,-61,-10,47,-37,42,-26,3,23,33,42,31,-8,-50,3,15,85,31,22,-24,10,17,-22,24,-46,-28,9,-43,14,72,88,-26,59,102,22,-31,-7,21,19,8,23, 
  /* [28][0][][] */ -11,83,9,95,-47,11,-6,-11,-29,22,-22,-17,0,-44,34,-17,63,2,-51,-51,10,-108,-60,-20,-4,26,-29,11,17,11,-17,-64,-45,40,30,-68,-127,7,-9,-33,-37,32,52,88,-15,72,-1,9,27,-4,1,-48,14,-43,6,72,35,3,-2,15,-27,31,-39,-13,-1,-18,-8,-68,101,-55,66,2,37,-51,-73,-75,-30,39,6,56,-43,58,10,-18,-11,53,-40,-32,-34,30,-17,0,23,-25,23,-37, 
  /* [29][0][][] */ 8,76,76,-11,34,-84,1,61,51,-119,-12,-9,6,-20,-20,-19,-26,-18,-40,2,-64,44,-10,13,33,12,-9,13,-35,111,59,-29,8,-25,51,-45,-21,17,-20,13,-1,119,-44,-68,-41,-93,18,-80,-1,-127,-4,8,39,57,25,-42,41,-18,-35,17,-20,89,16,-32,22,-19,-45,-10,-45,-96,18,49,37,-23,-40,-42,34,-22,-22,20,60,-27,-26,28,-12,-21,39,22,-24,-8,34,-4,72,-18,-32,58, 
  /* [30][0][][] */ -14,16,-22,5,-6,-19,95,-95,-30,50,47,74,23,25,-23,8,20,44,-29,-53,34,73,27,29,5,21,8,-20,-6,-18,15,5,83,-9,62,-60,68,-6,3,92,21,25,45,119,33,-74,-8,-114,92,43,-85,-86,-43,-7,-21,107,70,47,-56,13,13,-31,-17,-21,12,111,-81,94,-18,-71,-123,28,-13,19,27,-62,-3,11,48,43,2,-12,-5,0,-76,-115,-47,67,-41,127,21,-24,-4,33,8,9, 
  /* [31][0][][] */ -26,76,-30,-8,-8,-17,-24,33,-71,73,11,-18,-19,-17,-15,-14,-15,-23,-33,-13,-41,16,-94,-14,-6,-53,-5,-21,43,15,52,-7,-27,-31,-15,63,24,-56,-19,-78,10,-39,-86,65,10,103,-13,55,17,-70,52,-62,-17,72,-24,-12,16,105,7,-45,94,-67,3,47,2,6,27,46,-49,-41,11,-23,23,-3,-127,59,14,-50,23,3,-1,21,-61,-32,-61,11,11,4,12,46,70,8,21,20,-11,-72, 
};
const TfArray<4, int> tensor_dimension76 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant76_scale = { 32, { 0.010539121925830841, 0.013771876692771912, 0.0083233416080474854, 0.0084237819537520409, 0.011417909525334835, 0.011344511061906815, 0.01130540668964386, 0.0086349043995141983, 0.010249074548482895, 0.010476621799170971, 0.010408087633550167, 0.009723183698952198, 0.010115323588252068, 0.011651773005723953, 0.010125250555574894, 0.015112672001123428, 0.010918381623923779, 0.0079540042206645012, 0.0087000196799635887, 0.012744958512485027, 0.010916405357420444, 0.0088763236999511719, 0.011578214354813099, 0.011319744400680065, 0.0096971262246370316, 0.0087270839139819145, 0.0079364068806171417, 0.011859620921313763, 0.01041119359433651, 0.010287858545780182, 0.0082656322047114372, 0.0094734895974397659, } };
const TfArray<32, int> quant76_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant76 = { (TfLiteFloatArray*)&quant76_scale, (TfLiteIntArray*)&quant76_zero, 0 };
const ALIGN(8) int8_t tensor_data77[1280*1*1*32] = { 
  /* [0][0][][] */ 0,-73,-6,-3,-8,46,-51,10,14,2,86,26,-20,22,61,27,56,-16,22,-58,42,24,127,-38,43,53,-3,37,40,-16,-54,11, 
  /* [1][0][][] */ -6,93,-27,23,77,27,-9,-5,18,37,38,-73,-72,23,15,1,38,7,-69,-4,-63,-127,-8,65,74,-55,40,-48,-35,21,31,15, 
  /* [2][0][][] */ 22,-8,36,-127,19,-33,3,81,3,-59,68,-83,57,-39,-46,105,-60,-1,53,67,-2,18,-1,-48,-27,34,-21,43,70,-18,-81,97, 
  /* [3][0][][] */ -11,-13,113,-51,9,8,51,33,-45,-34,17,-42,37,21,7,-37,25,-23,-62,76,127,71,23,2,25,22,41,-7,-26,-4,5,-101, 
  /* [4][0][][] */ -56,62,127,37,38,34,99,-7,-6,36,-52,16,-4,71,9,-48,103,-2,47,-4,16,4,13,7,11,-12,-5,76,-22,50,-13,-2, 
  /* [5][0][][] */ -1,-34,-50,-117,23,24,-1,61,35,110,-49,-6,-37,-83,-32,51,-29,-26,-20,20,51,63,-35,22,-10,18,125,2,24,-80,95,127, 
  /* [6][0][][] */ -44,-77,12,5,34,38,-90,37,-74,-20,-66,-24,-14,39,-79,-23,38,94,22,127,42,46,27,-69,-45,8,-25,-32,18,37,76,-2, 
  /* [7][0][][] */ 115,-43,87,-81,-91,-27,-96,20,-29,8,43,-69,85,-29,-127,-21,-33,-115,14,67,-50,-45,84,-12,44,43,-74,12,-22,66,15,-26, 
  /* [8][0][][] */ -78,42,-49,-33,-51,14,40,-12,48,-127,88,-60,25,-31,-55,35,-30,-94,-53,44,-13,-108,-54,17,10,42,-68,15,-29,-22,66,68, 
  /* [9][0][][] */ 3,127,-34,-17,24,-1,-39,14,16,-79,7,-71,16,-71,-38,76,39,-27,45,40,37,-25,-58,10,-74,-88,37,0,39,-60,77,-18, 
  /* [10][0][][] */ 14,-30,-9,39,-55,-13,10,21,51,-80,-9,7,69,5,-18,57,49,-63,-113,-16,-3,-127,-8,-47,-17,34,28,43,-22,-51,-11,88, 
  /* [11][0][][] */ -43,57,17,18,-23,3,13,-74,40,127,-21,26,25,8,-56,-27,-4,45,-86,59,-23,-77,-55,-11,55,52,-15,48,3,15,31,-10, 
  /* [12][0][][] */ 17,-84,21,-16,-71,32,55,-1,-23,26,-2,-1,-44,47,24,2,73,-90,-69,-10,127,12,7,13,-33,15,41,-72,73,10,5,-24, 
  /* [13][0][][] */ -10,9,11,-33,60,-34,-7,32,-13,-40,-24,-1,70,-2,-8,-24,2,-87,-76,28,70,-59,-22,-12,127,24,-119,55,-13,18,23,-46, 
  /* [14][0][][] */ -61,-25,62,-34,18,9,-41,-126,64,-7,-71,46,58,37,119,-80,-79,-12,-59,-45,-85,-84,127,-98,25,54,-22,22,49,56,60,36, 
  /* [15][0][][] */ 8,36,-50,-18,-25,-48,-17,-40,-127,49,-37,-13,-67,-36,-17,60,-3,62,99,26,51,13,-37,-60,8,-5,5,10,-13,-6,-10,1, 
  /* [16][0][][] */ -77,-17,-60,-64,-33,-105,-40,81,-57,7,5,9,16,-7,-6,-65,-74,-55,67,-33,-50,62,-76,-5,-32,0,-127,33,8,78,-59,-10, 
  /* [17][0][][] */ -23,44,20,10,34,-40,57,127,47,-23,18,17,-40,50,-19,-76,-23,-70,-4,-70,72,23,-14,23,15,34,38,31,-1,39,60,-10, 
  /* [18][0][][] */ 38,100,-10,63,3,10,24,13,-41,-4,30,44,27,-32,47,-12,17,33,-29,43,23,-85,27,-10,34,-4,36,33,24,-43,-25,127, 
  /* [19][0][][] */ -9,-29,9,-17,34,-19,-48,-3,-22,13,19,37,40,-9,-77,43,-20,-28,-42,25,-34,-127,9,-104,-19,-69,75,-3,10,-12,-7,-71, 
  /* [20][0][][] */ -127,72,-35,-126,35,55,-51,122,-15,34,-43,24,-17,-86,-76,90,7,-121,-38,-18,-40,-18,-71,-47,-26,-58,-14,-5,-46,66,42,35, 
  /* [21][0][][] */ 55,-5,7,-11,79,44,111,-125,55,-40,-36,-4,41,26,24,59,15,-70,13,24,32,-23,48,54,12,-29,-99,127,-2,-51,-19,-38, 
  /* [22][0][][] */ 28,-11,53,18,-14,29,2,17,-26,10,19,-39,-29,33,14,-21,-59,127,-99,-63,-12,40,11,5,31,23,25,60,-57,56,39,15, 
  /* [23][0][][] */ 73,63,63,19,121,16,-101,13,-37,-28,80,116,-14,-13,54,-48,37,-19,-24,54,53,-8,127,-6,-79,-40,-5,-13,39,-37,-43,32, 
  /* [24][0][][] */ 5,69,-127,-91,-54,-45,95,-60,-53,26,-59,27,-22,-38,-99,-60,-54,-60,-40,-29,65,65,-35,-23,69,-8,-42,-11,35,12,-9,-49, 
  /* [25][0][][] */ 14,-5,-22,116,61,-40,48,38,22,13,-127,19,72,-45,-4,24,-52,-13,100,41,-7,-45,-2,16,-37,13,67,23,-1,22,-69,-41, 
  /* [26][0][][] */ 43,-72,2,10,26,-5,-75,29,48,-126,87,-54,50,-4,10,105,57,-43,53,34,75,-120,-54,54,24,-14,-5,-80,-127,-25,41,42, 
  /* [27][0][][] */ -93,-53,15,-127,-34,-90,30,-3,-55,-24,32,-17,-24,-43,-26,-20,66,21,35,-53,-14,-110,-80,-26,15,54,-19,-13,-29,-112,-24,85, 
  /* [28][0][][] */ -41,71,6,-34,-20,-15,-60,28,-64,25,1,-22,-20,-38,-7,-1,-29,-38,-81,-37,79,127,108,24,-67,39,-44,50,8,-24,-7,-1, 
  /* [29][0][][] */ -99,7,77,-20,96,-1,-60,71,13,-54,-99,-60,10,20,55,-47,-46,-40,59,-60,-7,-127,39,-10,-99,24,7,-72,84,49,70,-32, 
  /* [30][0][][] */ 1,44,41,2,-88,13,34,-24,127,34,17,80,2,13,20,-44,-25,14,-41,-5,6,19,108,20,0,-5,-14,-18,21,-56,-17,-46, 
  /* [31][0][][] */ -9,4,55,-90,45,-12,9,-38,94,-41,-7,51,-11,63,76,67,-33,38,-12,18,-82,122,38,19,-127,-44,0,27,32,-17,-15,-34, 
  /* [32][0][][] */ 121,50,91,-30,-35,13,75,116,27,126,69,79,77,-93,17,-89,-23,-41,-59,-53,42,-109,-39,21,59,26,42,45,-127,0,-127,15, 
  /* [33][0][][] */ 41,-40,-31,13,-17,14,-33,15,-55,43,-15,45,8,23,-106,1,36,-32,15,4,-46,35,21,65,-96,35,5,16,24,127,42,-65, 
  /* [34][0][][] */ 26,127,13,7,-90,9,-28,-94,-28,67,64,70,28,20,46,-13,-103,62,104,8,-57,25,-30,27,68,-38,-103,-22,7,-70,33,-48, 
  /* [35][0][][] */ -60,70,-30,-40,-28,-93,-56,0,-13,-14,95,-127,-111,-53,61,124,0,-2,0,-15,45,42,53,32,49,-7,51,-10,10,-80,33,74, 
  /* [36][0][][] */ -75,30,27,60,-11,-74,1,25,25,-57,-23,44,-25,-12,-127,-8,97,50,-48,66,28,-21,30,20,-28,80,10,36,49,-22,15,30, 
  /* [37][0][][] */ 77,-41,-35,8,-47,75,-73,15,16,-32,-33,20,73,-29,-47,120,13,51,116,-77,-127,75,35,-6,30,20,67,-72,71,-22,103,-43, 
  /* [38][0][][] */ 35,47,-127,-27,-12,-12,18,15,18,1,-14,5,47,-80,-27,-54,16,10,5,11,-45,23,-32,-39,-16,-15,-16,-12,87,-5,42,-24, 
  /* [39][0][][] */ 38,-85,-58,-40,-54,6,-83,5,-22,8,73,44,8,80,25,126,52,-45,11,71,-7,13,-45,-23,-18,-77,-60,19,28,-120,123,127, 
  /* [40][0][][] */ -14,34,-60,-1,58,-6,127,55,-49,25,29,-10,4,-96,-15,2,43,32,-1,-24,-16,24,57,26,28,-20,37,-18,24,22,10,21, 
  /* [41][0][][] */ 29,22,116,56,-34,-45,-22,-6,-64,-95,-20,43,84,-73,-28,-13,-18,71,35,58,37,-53,-52,30,40,84,-81,-127,55,97,-51,-42, 
  /* [42][0][][] */ -23,127,43,44,8,-38,41,49,49,21,26,22,-96,-85,-9,17,-18,64,-17,39,-63,-17,39,70,-49,-17,38,36,76,-42,-10,20, 
  /* [43][0][][] */ 2,69,-37,-59,14,31,4,-65,3,16,-28,-51,-26,-74,-7,-13,59,3,-10,-65,89,-127,-15,-20,69,-24,-65,61,41,13,63,74, 
  /* [44][0][][] */ -76,-35,62,6,-102,-25,-11,44,118,-22,45,-59,65,72,-113,3,15,3,-9,-1,83,-7,-3,-11,-5,-57,-21,-26,10,99,37,-127, 
  /* [45][0][][] */ -41,76,-111,0,17,65,30,-13,-27,-39,-41,11,61,-57,13,-17,12,1,8,36,63,-59,60,127,3,-60,-30,74,21,-60,8,-38, 
  /* [46][0][][] */ -113,-25,-64,2,-12,-29,20,-14,-22,42,-42,41,-38,92,-29,-2,32,-84,-46,127,-34,53,24,-18,-38,-44,60,-7,-74,64,2,-76, 
  /* [47][0][][] */ -34,-40,-59,21,38,-50,9,37,31,123,-29,16,-82,-10,-53,-104,5,-89,-80,-90,-8,46,-20,71,29,-58,28,-17,-96,54,127,-64, 
  /* [48][0][][] */ 39,-57,-90,-127,36,-55,-10,58,6,97,20,-40,-94,-81,85,-90,43,-83,-57,-51,-11,21,79,-38,-21,-13,10,-1,16,30,-1,22, 
  /* [49][0][][] */ 89,21,26,127,27,21,-93,-54,-73,102,7,-61,-120,-3,115,88,-18,-37,-58,-19,39,73,-90,36,-50,-88,-65,2,32,-34,37,65, 
  /* [50][0][][] */ -5,-27,-12,5,-56,-40,52,5,98,44,28,34,40,49,41,24,16,1,66,13,-60,67,16,23,39,-21,-22,39,127,-57,-45,7, 
  /* [51][0][][] */ -19,16,26,-13,-18,32,104,-20,-17,19,30,0,-44,-4,-37,85,-4,-62,87,-25,1,87,-127,54,-3,93,22,-6,0,20,-60,86, 
  /* [52][0][][] */ -14,-25,109,76,-3,-24,3,12,22,12,-55,105,11,-8,59,-2,61,-98,46,68,45,25,60,-28,-8,-15,-32,89,36,-25,27,127, 
  /* [53][0][][] */ -38,71,47,-83,-67,-35,8,51,20,108,52,65,24,59,127,4,-58,-36,-68,-38,-16,-68,62,-6,-29,-67,9,91,-43,-26,-71,-31, 
  /* [54][0][][] */ -47,100,-29,-15,-69,24,61,67,-94,-58,-38,30,-111,19,-97,29,51,-8,75,-22,-22,11,-38,19,-21,-28,-81,-43,127,17,3,7, 
  /* [55][0][][] */ 85,-46,-14,-33,12,18,0,-12,-85,-8,-18,-51,5,-16,76,26,20,13,3,-44,-8,1,7,-63,-2,-22,-58,127,9,5,31,4, 
  /* [56][0][][] */ 20,-49,-11,62,-47,92,-5,84,24,-1,-127,-63,120,40,-4,-46,-38,7,-37,67,9,-18,-11,-9,-33,-3,98,-78,-23,-32,-77,107, 
  /* [57][0][][] */ 127,43,-39,72,46,-33,-32,44,68,75,76,27,17,33,-58,-84,71,-25,68,15,-28,95,-31,-8,-44,-7,-16,106,-18,-23,26,11, 
  /* [58][0][][] */ 36,127,18,-37,-41,-14,50,-28,-22,-23,-63,-5,4,41,-11,3,24,-35,6,70,-18,18,3,-23,40,19,2,7,60,21,-75,-42, 
  /* [59][0][][] */ -86,0,-11,46,-24,117,8,48,-105,-84,-12,39,-77,52,32,-6,-13,-127,-62,5,83,57,2,37,-19,60,8,-6,0,45,38,16, 
  /* [60][0][][] */ -44,-49,37,-3,41,43,0,-57,-80,-31,73,-127,2,-21,-88,-43,78,-27,64,-79,35,-16,-71,-6,63,-17,-125,-7,64,-58,95,-60, 
  /* [61][0][][] */ 46,-39,-55,-43,27,72,-13,-16,-127,-24,124,-47,65,92,18,-28,84,-79,84,-107,85,37,34,40,102,-47,42,-59,14,20,9,-113, 
  /* [62][0][][] */ -72,-32,-44,17,23,-59,34,77,-50,41,-39,33,23,-5,2,-122,-88,-68,37,-42,77,-22,-9,-23,-16,-70,-95,24,41,-127,3,-29, 
  /* [63][0][][] */ -21,-24,-84,-127,17,2,24,-67,-39,66,47,44,83,-32,-49,-96,84,-110,-67,22,-49,10,-45,-53,37,117,43,19,44,35,-45,83, 
  /* [64][0][][] */ -50,69,96,24,43,60,46,16,-25,-70,-54,54,-52,-39,-2,-97,27,16,-56,21,76,109,43,58,13,0,-11,37,-57,9,127,-1, 
  /* [65][0][][] */ -52,-43,127,38,-56,-12,-88,-1,-25,23,30,48,-5,-12,39,-16,-6,31,49,83,-60,-16,8,-31,-46,10,-12,-62,-67,26,15,47, 
  /* [66][0][][] */ -30,-110,-94,-46,-65,-79,71,5,31,127,117,-57,48,-21,40,35,-22,97,-51,-31,63,39,22,56,4,-10,-63,-62,-39,24,22,18, 
  /* [67][0][][] */ -26,98,84,-82,85,17,-127,-53,127,-21,-115,100,-29,-7,-50,-48,-105,-1,-38,-90,20,-18,12,48,32,-100,-32,-100,9,65,59,60, 
  /* [68][0][][] */ 18,-32,40,76,30,-14,5,-78,-6,30,5,-5,-53,-71,55,-32,16,31,-19,64,-16,16,37,-38,127,11,9,-41,-13,-22,-11,41, 
  /* [69][0][][] */ -39,-11,-31,0,14,-21,-34,-45,64,-3,-44,-21,-54,22,-2,27,-34,39,6,40,-17,-28,-40,41,-1,-34,14,25,-49,-14,21,-127, 
  /* [70][0][][] */ 26,92,-6,20,53,45,-27,-42,-18,-47,-76,2,11,-82,47,15,-109,9,31,-27,-7,7,-71,-127,51,82,-35,21,52,-43,-15,-81, 
  /* [71][0][][] */ 28,-73,37,62,-3,40,-21,56,-22,50,97,-9,80,-32,39,-38,13,-13,-127,-24,-33,-5,14,7,-10,50,100,14,-11,43,41,36, 
  /* [72][0][][] */ 49,-16,69,-34,38,17,-27,11,-21,-28,16,1,-38,-64,-47,-27,81,83,-42,-10,-49,-31,-52,-35,30,72,-55,-15,38,1,127,104, 
  /* [73][0][][] */ -26,47,-89,-127,24,33,76,-74,24,59,-22,63,38,-54,-79,-51,-44,59,-90,-26,59,-38,-37,10,-111,86,-61,85,6,41,74,104, 
  /* [74][0][][] */ 90,47,-10,48,42,71,-68,-60,12,-20,27,-18,39,2,6,29,74,-45,-17,127,-39,-28,-13,-30,63,-52,-61,1,-32,37,-40,28, 
  /* [75][0][][] */ -2,-70,19,-26,-12,-52,82,127,43,-62,50,7,8,14,-32,44,67,9,-25,-2,-16,53,-118,62,55,17,-24,93,5,-27,-37,-27, 
  /* [76][0][][] */ 31,85,73,-20,84,-41,-66,-96,123,110,107,-74,48,-102,-16,-15,-95,116,-41,124,28,29,25,43,24,-66,5,-3,-53,20,-127,93, 
  /* [77][0][][] */ -78,-14,35,-6,39,24,80,-20,13,-10,32,6,-73,-24,-61,31,36,9,-127,-23,16,-22,-61,-29,-8,27,-22,10,60,32,21,-23, 
  /* [78][0][][] */ -90,-31,12,54,18,71,-63,58,-67,15,16,-27,-10,-96,23,-8,-62,127,-14,19,58,-33,11,5,-36,-69,-52,19,-67,6,3,18, 
  /* [79][0][][] */ 47,-127,101,56,-24,22,32,26,-9,83,85,54,-19,-119,-49,-45,-53,-55,-24,-16,73,98,-40,-68,-4,-68,-121,96,-23,27,118,70, 
  /* [80][0][][] */ -59,-92,105,31,37,-122,-89,46,94,-67,54,75,88,-110,127,78,111,-114,11,100,55,-58,-71,29,-52,26,-59,-54,-53,-87,-8,36, 
  /* [81][0][][] */ -10,-8,-31,-5,-20,12,-27,20,25,-59,-76,-84,111,18,-127,56,-36,-25,-8,-45,-41,-10,-40,-75,-83,17,-22,23,26,29,-48,-4, 
  /* [82][0][][] */ -10,-77,-6,-51,87,59,4,79,-127,29,9,5,-7,20,56,-121,3,74,12,-54,48,74,17,-27,19,30,-85,19,-33,106,-26,-42, 
  /* [83][0][][] */ 32,69,0,-22,-1,39,-36,26,-36,-49,12,-74,30,84,-13,1,65,2,-13,42,-54,4,-26,-63,10,-51,-13,-59,-9,-47,-3,-127, 
  /* [84][0][][] */ -9,-25,25,22,-2,70,-64,-42,0,20,-20,19,18,-18,71,-38,52,-127,16,16,-29,58,-39,24,-9,-40,-13,44,90,-45,-36,57, 
  /* [85][0][][] */ -63,127,10,38,-46,-8,-117,0,1,25,12,-49,9,22,-1,53,38,-69,47,-88,21,27,44,-50,100,2,-103,-18,-23,17,-71,0, 
  /* [86][0][][] */ 127,31,126,-46,32,-3,-20,-51,49,74,-62,40,-62,1,1,51,56,-14,-30,-11,7,53,5,46,24,116,37,63,42,-30,-59,47, 
  /* [87][0][][] */ -40,-10,18,2,-9,-32,-6,-8,7,-6,-36,-13,-4,127,34,3,6,-29,-54,76,42,-85,-46,53,9,-48,-78,72,-28,-4,63,8, 
  /* [88][0][][] */ -14,5,-57,50,-4,-63,-52,-65,14,5,-14,-75,-27,-65,-11,-27,-101,61,2,76,10,35,-2,-32,70,-24,-33,-33,-3,-64,127,-44, 
  /* [89][0][][] */ 21,-23,-1,21,26,-37,53,-15,-107,-33,-81,3,-55,60,-60,1,-47,-13,-22,73,39,-49,-127,-41,53,-36,1,-7,6,-58,-92,73, 
  /* [90][0][][] */ -52,71,9,15,-33,-105,-90,108,-66,25,28,-5,62,-60,0,-108,-17,-32,-34,127,2,-60,-32,-50,-10,-42,78,13,28,-29,-18,-30, 
  /* [91][0][][] */ 9,114,76,30,-5,37,-47,40,45,0,-51,-122,-22,-58,-7,-30,-30,-127,51,20,16,-17,-36,-40,29,-93,15,-25,24,-27,-59,-49, 
  /* [92][0][][] */ -79,-1,-127,-39,13,-15,68,20,-30,-5,-32,-37,53,-122,13,-19,-8,-49,-100,110,-125,-16,-87,2,-57,-13,-27,-46,5,30,-86,82, 
  /* [93][0][][] */ -92,57,-54,-57,8,-12,-127,55,106,60,87,-31,-68,7,7,-70,-42,8,-5,2,-73,73,-22,13,36,14,125,-32,-53,29,-11,-38, 
  /* [94][0][][] */ -12,-86,-50,-2,30,-32,32,-51,-74,34,7,22,-8,-48,5,7,40,-5,31,10,127,-25,-29,51,-25,-72,58,-31,34,-1,-18,11, 
  /* [95][0][][] */ 49,91,39,22,-66,57,46,-44,-43,-48,-10,1,13,27,67,-127,81,-18,3,-67,8,26,-46,48,-73,-14,13,-94,59,7,-112,27, 
  /* [96][0][][] */ 94,-37,10,-42,-89,-27,40,122,127,-65,119,6,84,25,-33,-100,-10,2,-28,31,-46,-89,127,15,65,18,50,58,76,-2,-86,-69, 
  /* [97][0][][] */ 32,40,51,0,34,-76,-18,-127,73,74,22,-7,-74,22,83,12,-15,-56,-31,62,19,-31,-31,-19,11,-58,-45,17,-33,110,-69,-26, 
  /* [98][0][][] */ -55,-4,-1,11,-42,24,5,56,-17,14,17,-10,29,-41,6,26,-2,75,47,-29,-26,-60,5,-63,26,10,-127,20,-18,23,16,29, 
  /* [99][0][][] */ -14,26,75,-34,6,-8,-39,-34,-127,27,-3,-41,-29,-19,21,-21,-5,31,-82,-5,-94,36,8,56,-17,84,74,-36,10,50,-32,-7, 
  /* [100][0][][] */ -45,-76,25,-56,7,-24,54,-27,74,14,6,-12,-50,-61,-127,-58,62,-71,33,31,46,34,10,72,-80,10,-20,2,-81,-7,-42,71, 
  /* [101][0][][] */ 15,20,-25,-7,8,86,2,8,-11,-30,127,33,53,-24,-2,87,-14,-17,73,-7,-44,78,-15,52,-9,0,13,-1,57,26,73,64, 
  /* [102][0][][] */ 73,-83,43,-22,-26,54,10,18,49,3,48,-119,57,-51,-26,3,16,-18,14,112,50,24,-59,-9,33,16,-29,-127,26,-110,103,10, 
  /* [103][0][][] */ -52,28,-25,44,43,-79,-75,127,67,-76,-41,-104,43,10,-106,-55,27,76,38,-47,-19,-19,40,11,-79,-48,87,32,-12,-21,-13,-44, 
  /* [104][0][][] */ 15,40,-127,10,-16,-38,-28,114,-44,67,48,-11,-35,-22,66,-24,-57,40,34,-51,-5,-26,-43,-111,-4,-35,79,15,-38,20,-52,9, 
  /* [105][0][][] */ -18,42,-50,-119,-37,2,12,-40,20,11,-42,-28,126,31,-32,-91,2,-28,49,-31,-12,36,-66,-10,-37,-47,0,6,45,127,-44,-29, 
  /* [106][0][][] */ 66,-78,-35,-38,9,-57,40,-12,-27,30,-21,-3,5,4,-8,-37,4,51,127,66,18,115,-15,65,-8,29,19,46,-70,-95,-39,80, 
  /* [107][0][][] */ -18,67,-31,37,-31,-8,17,26,-11,0,-63,-25,52,-127,-77,-53,-25,39,8,61,8,30,-86,25,29,22,-32,-4,-88,91,-40,-33, 
  /* [108][0][][] */ 24,-40,109,-79,98,2,2,-58,2,-3,-19,47,8,111,-127,112,91,-16,52,-88,-83,67,64,98,102,-9,-40,-14,-24,-75,-73,-30, 
  /* [109][0][][] */ 4,-57,62,-127,77,-27,48,-13,11,19,36,28,54,-34,-53,34,42,-50,-41,-18,-8,-45,60,-31,12,-85,-18,-4,43,-55,-3,10, 
  /* [110][0][][] */ -62,106,-27,38,-32,74,-52,-73,100,70,62,79,-71,50,49,-10,24,64,29,58,-57,90,-33,-97,-21,78,38,-49,115,25,-12,127, 
  /* [111][0][][] */ 48,49,-90,82,7,-82,-61,-42,-88,127,100,-44,63,-76,20,26,-34,-39,75,-47,-90,-7,-35,-91,20,-36,63,-31,39,-24,52,24, 
  /* [112][0][][] */ -73,23,-25,109,102,-77,-51,-22,-90,25,65,-88,8,-80,-47,19,120,-127,-9,-76,-53,-88,-11,-98,9,64,6,-10,87,69,27,-76, 
  /* [113][0][][] */ 117,-3,75,-26,-37,68,-51,11,-127,5,-59,-56,-15,-41,-25,-79,1,-67,-1,27,-24,-18,11,-2,-28,-33,-58,-43,-10,19,-6,-11, 
  /* [114][0][][] */ -96,-49,7,88,-35,-87,-37,6,54,65,110,1,-127,11,-9,26,-16,-35,-71,102,64,16,-8,-104,15,-124,-73,34,-91,9,-48,-14, 
  /* [115][0][][] */ -8,-51,19,-38,8,26,-3,-11,-45,-6,-22,-21,-1,48,17,-92,18,-31,-55,-24,-14,43,-18,-114,11,35,1,-22,32,42,-14,-127, 
  /* [116][0][][] */ 44,6,-7,4,-126,-1,-59,41,73,69,-40,-25,69,9,-35,-11,-62,-12,-62,-70,16,-6,73,-37,-78,5,-27,-18,-11,-22,-64,-127, 
  /* [117][0][][] */ -26,-45,-27,27,-99,-26,-18,-8,10,-21,25,-23,25,-22,13,-95,20,127,56,-69,51,-2,-61,0,-32,-26,-19,-10,-34,-4,94,98, 
  /* [118][0][][] */ 39,-35,3,-46,87,-66,24,-49,28,-74,32,15,-14,48,30,37,127,-1,-46,-48,31,-25,-77,-3,-71,-16,34,-27,6,-41,21,44, 
  /* [119][0][][] */ -127,-48,-24,36,-83,8,-55,89,-11,35,-51,20,23,-114,-20,-29,-20,-48,32,20,17,36,-27,32,4,-54,-15,60,53,-99,73,54, 
  /* [120][0][][] */ -37,88,-52,28,-14,-53,-40,28,29,-53,32,-46,44,19,45,-36,62,38,-89,27,-20,-38,-79,-91,9,-60,54,-127,1,4,44,53, 
  /* [121][0][][] */ 40,44,107,-59,-81,22,-9,-67,24,14,-33,-127,-15,31,9,-23,49,103,6,45,16,-10,-33,-12,8,-9,-63,-41,40,40,65,30, 
  /* [122][0][][] */ -93,-14,83,-41,-23,70,13,33,29,-54,71,-4,27,3,63,34,11,1,-72,127,18,106,116,-22,-127,19,104,86,-7,35,-1,-2, 
  /* [123][0][][] */ 43,87,-127,25,2,12,-3,-42,-38,-73,18,-47,50,-31,43,-54,-43,-6,-12,-25,-53,-75,-9,46,-31,-30,-34,-7,31,-24,-46,24, 
  /* [124][0][][] */ 1,-33,-127,-68,-20,-46,-43,95,-76,73,102,-24,-3,-70,-10,-42,23,-34,-30,20,-13,-39,-88,-49,-49,-60,-6,14,24,-35,36,-19, 
  /* [125][0][][] */ 26,-59,-21,-52,12,42,64,52,13,37,-6,69,-17,15,37,19,-1,30,23,34,69,69,-17,-9,68,-2,45,13,-35,-40,127,-12, 
  /* [126][0][][] */ -30,-49,26,-10,26,-10,-64,117,12,-127,-46,-21,37,21,-86,-36,2,6,-73,29,-11,-30,-10,-16,3,14,-86,7,-83,28,13,-12, 
  /* [127][0][][] */ 3,46,-80,20,117,31,-41,43,127,-84,-53,-6,39,-16,73,-107,-69,-51,66,9,107,-6,12,-26,-63,-1,-14,-13,88,33,120,66, 
  /* [128][0][][] */ 79,73,42,-73,-35,2,3,88,10,127,-27,-84,23,26,-45,-42,-63,65,7,1,31,-9,-17,-19,-23,40,20,106,-12,-3,20,-19, 
  /* [129][0][][] */ 51,0,54,39,-44,27,11,16,29,-58,-2,42,76,49,91,3,-6,75,-61,-22,-17,56,-57,72,-34,6,-66,-53,127,58,-66,-4, 
  /* [130][0][][] */ 28,2,-4,-11,-30,-84,-3,16,25,80,93,26,-63,-50,-6,-46,54,-29,-20,-13,23,13,35,-44,-5,24,-1,61,127,-109,35,21, 
  /* [131][0][][] */ -99,-25,-41,37,58,8,32,-23,-12,6,19,30,-78,21,-18,-127,-4,72,36,16,-10,-77,25,3,44,26,5,19,11,40,-8,-20, 
  /* [132][0][][] */ 46,19,-39,-69,-24,98,55,-2,-54,38,57,-75,31,-39,31,-43,100,-74,-34,21,-14,-38,-26,-55,-60,-11,-33,23,-127,15,47,-49, 
  /* [133][0][][] */ -23,63,90,24,69,-93,-7,-11,-64,-127,78,-60,-48,-23,-39,118,-1,23,5,38,50,-33,-104,34,26,-21,40,17,2,-23,11,45, 
  /* [134][0][][] */ -72,83,-62,70,66,3,47,16,30,71,-17,-26,-52,-56,14,90,-72,-11,0,-78,-88,17,-64,-6,-90,-63,127,-9,-49,-57,34,-56, 
  /* [135][0][][] */ -45,-105,-21,-27,-5,-12,98,75,4,-37,-37,-81,-19,-52,58,-50,-52,-119,45,-13,-94,26,-32,-29,88,127,68,37,-41,-7,-14,-82, 
  /* [136][0][][] */ -34,50,-49,101,-27,42,-31,2,-103,8,-15,-38,32,-9,21,-56,-61,-79,5,66,10,-10,-42,58,-97,0,-67,56,-34,-36,33,-127, 
  /* [137][0][][] */ -42,27,-86,5,-39,-6,7,22,-42,-18,-13,-51,-51,71,0,3,-17,32,37,-127,-39,90,10,-60,-63,-27,59,-22,91,-25,-1,17, 
  /* [138][0][][] */ -20,51,-79,29,12,-8,-19,-21,4,14,-5,35,-30,18,65,-33,-89,27,1,41,-59,-19,20,46,-19,-33,34,31,-16,22,-127,-48, 
  /* [139][0][][] */ -127,-89,-72,67,12,-13,-34,-96,-75,18,35,29,2,-93,13,29,20,0,23,-68,17,47,36,76,-14,53,29,-58,-92,121,0,5, 
  /* [140][0][][] */ -43,-36,-32,-2,-19,-51,10,-13,108,-4,-12,-43,-29,21,28,46,-6,21,1,-14,33,-49,-21,20,30,-7,25,-4,91,-32,127,-41, 
  /* [141][0][][] */ -101,127,-2,-89,-11,-25,-60,-98,83,-47,84,51,-19,-98,-30,10,-28,-73,-69,62,-81,68,-19,4,-40,-102,-22,23,-42,70,-9,-6, 
  /* [142][0][][] */ -107,-11,57,-1,-82,-2,28,99,65,6,-3,-5,-28,-29,81,78,3,-118,-52,-5,9,-13,-127,-82,61,27,2,69,101,19,83,-50, 
  /* [143][0][][] */ 20,70,-56,-18,-41,73,-29,-8,-22,127,65,21,-41,-102,-99,74,-29,-91,-116,-123,-73,-95,-43,125,64,116,-86,-15,91,-55,-51,15, 
  /* [144][0][][] */ 18,-12,-44,103,-93,-17,28,127,-22,18,-58,-9,-94,-16,-38,31,58,-54,-2,31,110,-61,30,-69,-15,8,64,20,-83,-11,17,5, 
  /* [145][0][][] */ -95,78,-37,-13,-58,-27,-18,-2,-25,-6,-10,-28,127,27,-6,31,2,58,-17,-21,43,-76,68,-55,18,-22,3,-6,47,16,10,32, 
  /* [146][0][][] */ -1,-24,-82,-26,65,-127,19,43,-16,24,-2,32,-104,-6,-29,102,-60,-64,66,2,-15,-48,-69,-1,38,56,20,-58,9,-48,-15,-85, 
  /* [147][0][][] */ -4,11,7,-118,-44,60,-76,74,-32,51,-15,-43,-70,2,-2,67,20,-50,13,39,33,60,23,-127,-64,-52,61,-44,51,-3,75,-29, 
  /* [148][0][][] */ -57,-3,13,-41,-33,-91,68,69,-66,-16,-14,19,-27,-7,14,-98,45,-49,-36,-43,-27,56,54,-26,7,-11,21,-2,1,1,-127,12, 
  /* [149][0][][] */ 4,-63,-37,-42,-8,7,-8,-40,-64,12,12,82,54,-47,-5,-72,-24,29,29,-25,47,-1,7,50,-127,0,-11,49,4,-108,79,65, 
  /* [150][0][][] */ -24,23,74,127,-24,38,-82,-31,53,52,-4,3,-19,-19,-21,40,-66,21,-40,-69,-75,-14,57,-107,-114,-26,13,90,113,0,26,-97, 
  /* [151][0][][] */ 66,-67,-127,87,-65,-39,25,-2,-34,36,35,73,-32,-17,56,25,-12,-42,-33,37,14,-87,-56,2,-5,4,41,50,-30,48,54,29, 
  /* [152][0][][] */ 0,31,35,2,0,38,52,-41,22,-47,-26,3,-6,35,23,21,-16,-15,-41,-2,53,-4,19,127,-4,-22,-15,21,-31,-13,-1,-10, 
  /* [153][0][][] */ -22,-74,16,15,-11,-32,62,127,0,-25,-42,69,-56,-5,-14,127,43,19,20,79,76,30,8,49,-59,-49,-20,-8,-8,127,7,41, 
  /* [154][0][][] */ -66,48,-19,57,-49,-38,11,-76,-38,20,-10,23,-47,13,50,41,-30,25,-50,-61,-26,97,127,35,-29,-83,31,-106,86,55,-15,18, 
  /* [155][0][][] */ 49,127,-118,17,69,-33,17,-71,-20,72,-28,-49,11,-18,-18,-29,47,-12,-51,-6,76,-17,69,-72,14,-65,-3,-27,-88,-67,33,25, 
  /* [156][0][][] */ 92,71,-29,-7,77,49,10,72,66,-4,-12,-32,-18,-17,11,37,-26,50,-22,-68,8,23,-49,-39,26,-18,127,4,-39,-17,65,15, 
  /* [157][0][][] */ -40,-25,42,-37,-64,-16,-24,127,-80,-36,-12,-29,7,5,-22,62,-58,63,-39,33,-28,65,-26,-68,-36,41,17,-23,-63,111,15,63, 
  /* [158][0][][] */ -94,-18,52,-9,28,-6,25,82,10,-50,-11,-5,25,7,84,5,-82,-51,-52,42,-43,-10,-127,40,-71,-58,-22,11,-65,20,40,62, 
  /* [159][0][][] */ 32,9,45,-9,25,61,61,-5,-11,-79,57,-2,127,-52,42,-19,-7,-6,-58,-39,9,8,67,-78,-27,11,-99,-35,12,32,-13,54, 
  /* [160][0][][] */ -127,36,17,-26,-69,-22,-30,51,99,-14,40,33,47,-24,46,-54,17,-28,-52,12,8,36,47,-35,86,38,-72,54,-1,-41,46,7, 
  /* [161][0][][] */ 10,31,5,24,-14,66,45,-49,-60,7,-127,13,-32,69,29,23,25,53,-69,31,110,2,61,-55,39,4,-101,-52,26,14,10,-41, 
  /* [162][0][][] */ -4,34,11,-36,-3,41,18,-96,-100,7,9,50,69,20,55,-89,-39,-8,127,28,8,15,-11,7,112,62,-59,62,69,78,53,33, 
  /* [163][0][][] */ -37,-26,-15,19,-34,-53,67,-6,46,-27,25,-41,54,-32,32,11,-1,-43,-63,44,74,99,-42,67,0,32,-127,-19,-27,-59,-35,63, 
  /* [164][0][][] */ -66,-6,3,-23,72,-86,-10,-66,-13,-57,45,37,-34,-52,6,13,-4,-26,-66,106,-127,76,11,-7,44,77,21,-74,-29,0,80,46, 
  /* [165][0][][] */ 72,127,-31,39,113,-26,-25,67,10,20,12,25,22,-24,-39,-80,-30,-6,2,-12,24,73,60,-89,-68,32,-53,-77,-109,-10,-60,11, 
  /* [166][0][][] */ -68,8,-12,24,38,12,-55,-35,38,13,70,24,3,44,-33,-34,20,-15,-32,45,-33,-37,31,-51,-54,50,-127,27,34,-69,-5,37, 
  /* [167][0][][] */ 18,34,-14,62,-2,117,-19,52,-21,-11,-4,14,20,-11,-70,16,-65,-10,-27,-44,127,-4,4,52,36,96,95,19,44,0,-26,-55, 
  /* [168][0][][] */ -27,23,-28,87,81,-49,-45,-80,49,-52,88,127,44,60,94,-6,-17,-53,-6,-24,-6,-75,-69,33,40,-56,-47,15,-25,66,58,-117, 
  /* [169][0][][] */ -56,-57,24,-7,2,33,-127,34,-39,38,59,-26,-12,-9,51,-32,40,-62,10,72,20,-4,7,-43,-96,58,25,41,-56,79,20,0, 
  /* [170][0][][] */ -52,76,20,114,-79,3,-50,-6,116,-52,-71,-92,-30,15,-35,-13,-102,64,-22,-14,98,15,-127,-6,-56,57,34,-24,26,-52,-114,-23, 
  /* [171][0][][] */ 8,-1,-14,-60,7,-5,5,-32,-113,-47,70,44,5,7,-9,-47,8,-46,33,14,14,-12,3,39,-33,8,-127,-38,-34,-84,-7,-51, 
  /* [172][0][][] */ -10,-24,-53,80,-7,26,65,44,15,1,43,-36,-66,9,-3,-19,-78,-18,21,-61,-39,-27,-34,-2,-24,65,-127,-38,-41,-7,89,-23, 
  /* [173][0][][] */ -59,18,-16,-34,24,13,-58,-26,-5,-1,11,-7,14,40,16,127,-33,-11,-6,36,-60,35,40,-44,-29,-31,-5,28,-25,-35,79,10, 
  /* [174][0][][] */ 26,26,14,-18,-13,-34,7,-34,-117,-12,6,-3,-98,-16,-58,34,23,1,25,-66,71,127,15,12,38,-62,19,0,23,22,51,-20, 
  /* [175][0][][] */ -22,-127,-22,28,-99,15,21,10,-36,22,34,46,-27,-10,-52,-8,-33,57,-52,0,74,-34,22,75,-27,31,-21,91,-39,-15,-49,-15, 
  /* [176][0][][] */ -14,38,53,-13,-55,-1,44,-8,-32,-26,-22,-42,28,40,-4,17,8,-62,-34,40,-2,-87,-54,-8,-73,-19,22,-29,-7,2,-127,121, 
  /* [177][0][][] */ -15,-38,-11,-7,70,24,-19,40,74,42,15,32,-67,-90,-17,121,5,33,123,86,-6,-42,-16,96,-72,46,127,83,-38,1,22,-12, 
  /* [178][0][][] */ 32,20,-30,90,-89,-38,44,127,79,-35,38,45,78,52,12,-70,27,-12,-7,-7,51,-3,-18,51,-28,53,35,-69,21,-13,-75,-75, 
  /* [179][0][][] */ 42,-8,9,81,-78,-123,49,-2,-33,-24,-69,-23,-48,-15,-24,-77,-14,-38,-127,85,-24,73,45,58,98,-31,0,-60,-71,-14,-10,-42, 
  /* [180][0][][] */ 66,-22,113,29,0,4,-81,127,17,59,73,6,-67,63,38,60,-23,24,10,-22,-8,-85,25,59,-111,-45,24,67,104,-45,29,31, 
  /* [181][0][][] */ -86,50,41,40,1,-46,42,7,-42,-72,13,127,-50,-74,-57,86,5,-58,21,14,-99,-11,109,-10,-7,52,-59,33,30,118,122,20, 
  /* [182][0][][] */ 22,24,68,-14,51,56,-115,-1,-58,-44,-63,62,58,-30,-51,-70,29,-65,-8,25,-20,-7,99,79,11,43,80,76,39,1,12,127, 
  /* [183][0][][] */ -27,-83,20,-32,-36,6,-30,-101,-49,15,62,87,-12,-62,7,-5,70,-14,-127,-30,38,29,-28,75,-28,-53,8,68,43,38,-51,34, 
  /* [184][0][][] */ -7,-7,7,39,9,34,-26,-21,7,-20,40,-15,42,-41,-19,-21,-20,46,-41,127,17,-3,-5,32,22,31,12,9,26,41,21,-9, 
  /* [185][0][][] */ 48,32,-39,47,-11,-85,-10,-44,3,34,73,-109,1,-53,-13,44,-82,-21,4,-65,31,58,-127,28,-87,-5,13,-30,71,35,-76,-85, 
  /* [186][0][][] */ -26,-120,115,28,-31,22,-95,-11,-62,-45,25,127,2,-53,6,-84,-23,-110,9,-69,100,16,10,-47,3,11,-70,97,39,50,51,-59, 
  /* [187][0][][] */ 69,99,72,63,-91,5,26,-15,-36,-55,20,47,-34,64,38,67,57,-19,2,2,18,127,27,-17,-24,-37,-38,53,1,-59,-4,-41, 
  /* [188][0][][] */ -36,-48,-42,-5,-8,-126,-17,48,-16,45,82,28,51,27,-98,-84,-107,5,42,46,52,14,-5,13,-127,-59,-13,-55,-73,1,80,70, 
  /* [189][0][][] */ 11,26,-23,62,-32,-23,51,-34,-66,22,1,-2,15,3,-28,84,-3,-127,5,25,-3,-2,-23,-35,43,-9,-16,1,-39,60,50,54, 
  /* [190][0][][] */ -52,64,22,36,-58,46,-59,124,21,-4,-95,-8,-101,-73,-29,94,-79,114,127,-57,2,-13,34,-17,109,-37,60,-25,-49,-51,-80,-46, 
  /* [191][0][][] */ -6,2,-79,2,21,-24,-13,15,-36,-19,-45,63,9,37,28,67,-23,-57,-8,45,-23,-127,5,8,16,-18,-10,44,-1,-22,-52,-11, 
  /* [192][0][][] */ -20,2,-116,-18,24,50,-21,-50,-5,-29,-12,-81,4,-87,-83,-50,-5,14,68,-19,-53,-71,48,-57,-37,-60,-20,127,-27,-40,49,-40, 
  /* [193][0][][] */ -21,49,44,43,-36,59,29,41,-12,-19,12,-88,-90,-87,-11,-84,127,34,-62,19,32,11,34,-14,11,38,7,49,-42,12,60,-6, 
  /* [194][0][][] */ 9,-54,49,40,-46,-34,-15,-16,-86,-31,95,87,-4,18,39,127,-32,13,-27,16,112,-57,51,29,85,-18,4,16,-43,-10,-19,-119, 
  /* [195][0][][] */ -52,111,85,33,-37,-50,1,-85,-72,104,-62,-54,-74,-35,-102,-38,-112,8,12,-75,82,86,-29,-20,84,127,20,20,16,6,-49,-116, 
  /* [196][0][][] */ 21,-116,-66,41,14,-95,-62,61,-94,56,-28,-42,-44,19,-34,125,48,16,47,-3,-23,13,127,-34,-77,-47,-114,70,29,38,-8,-75, 
  /* [197][0][][] */ -19,-36,78,-82,66,-54,14,46,2,-50,-29,-12,-91,47,-28,66,49,-5,-60,97,29,127,8,-15,-61,-24,23,47,60,-8,83,-27, 
  /* [198][0][][] */ -25,-64,98,9,66,-14,31,-45,22,47,-47,-32,-28,28,9,24,13,41,-65,0,37,-61,127,27,46,-39,48,88,20,1,-61,67, 
  /* [199][0][][] */ 9,22,127,1,-59,15,-22,-56,-2,-89,-63,35,-38,35,-36,-22,40,-53,-71,99,-30,-53,-121,22,-31,-16,-24,22,83,105,63,-68, 
  /* [200][0][][] */ -61,-1,-120,78,33,-44,-33,119,-63,23,16,-81,60,8,-111,30,10,12,-72,5,-94,-30,68,-38,29,1,89,-70,-14,34,-127,3, 
  /* [201][0][][] */ -43,73,18,-4,-21,-40,-35,-16,56,30,21,72,-67,5,-3,-4,-66,7,-33,3,-127,-19,40,34,-14,61,21,71,-47,-2,11,126, 
  /* [202][0][][] */ 47,-26,43,70,8,7,-11,96,70,58,12,-10,-13,80,0,53,-127,39,-24,-36,27,-31,6,22,32,-13,-20,60,-29,83,-19,-98, 
  /* [203][0][][] */ 127,-19,-90,-89,-127,60,-2,-18,-39,-91,-65,-57,25,-73,3,32,24,-4,6,-9,95,100,53,6,-92,24,-22,-75,2,105,2,-63, 
  /* [204][0][][] */ 127,9,-112,103,21,-109,15,38,-82,-121,12,-76,-123,18,-98,32,15,-41,-18,-105,63,53,10,82,61,-80,-25,-11,40,62,-30,2, 
  /* [205][0][][] */ -8,-61,66,92,-8,99,20,71,-127,76,50,-48,-100,-49,16,-19,69,-79,28,-39,53,-53,39,25,68,6,-48,82,10,-12,-93,77, 
  /* [206][0][][] */ -58,-55,127,55,14,-56,9,117,-66,-97,35,65,-16,102,42,-42,6,107,7,81,1,-45,-63,-79,19,-56,12,49,68,-93,48,-83, 
  /* [207][0][][] */ -30,26,50,95,-11,5,-32,-33,30,-110,7,-70,21,80,-8,19,66,109,-91,95,107,-127,13,126,-1,-57,3,62,4,-20,55,-127, 
  /* [208][0][][] */ -24,-86,-29,-43,8,0,57,18,24,44,-43,58,-7,-38,57,26,-1,3,66,-30,16,32,7,-53,15,40,-41,15,100,127,-65,-61, 
  /* [209][0][][] */ 15,3,-24,-24,-34,-6,3,39,-11,-63,-20,-63,7,42,-59,8,-9,-127,43,-55,-79,38,75,22,-13,33,-43,26,15,8,-66,-2, 
  /* [210][0][][] */ 127,20,66,-91,114,-104,-13,-24,-24,44,-86,-77,-42,-48,-65,4,-122,-43,-35,-121,-65,90,-48,-74,-118,31,-39,99,29,103,51,15, 
  /* [211][0][][] */ -119,127,24,37,-52,39,-37,-26,-92,-38,41,110,25,-103,33,60,52,-29,33,-31,64,37,-20,-71,-62,-45,-5,-71,123,-23,-42,-75, 
  /* [212][0][][] */ -48,8,0,-23,22,86,38,-33,-127,34,15,22,28,-1,24,-15,-71,20,70,11,122,67,93,-28,14,-5,55,-19,-92,74,-4,-20, 
  /* [213][0][][] */ -72,3,-38,-61,30,-24,-15,14,-34,-85,-19,-38,-7,-86,-14,-31,109,-89,21,22,127,-37,12,13,25,-8,-86,62,34,-14,-127,26, 
  /* [214][0][][] */ -20,19,55,-18,-1,-53,0,44,-21,30,13,9,2,15,-10,-73,-34,-19,24,-56,18,28,28,-90,-100,15,-25,-52,-4,-15,127,19, 
  /* [215][0][][] */ 12,8,95,12,81,-40,-16,51,-47,-3,-14,49,54,59,41,-26,-70,-69,29,0,96,-15,-8,61,-26,-102,-72,78,-80,111,103,127, 
  /* [216][0][][] */ -71,-40,118,-85,34,35,0,-90,-114,125,83,11,-51,50,-26,127,-37,2,24,78,61,35,-86,-9,93,77,82,42,9,68,59,0, 
  /* [217][0][][] */ -77,27,-17,-25,-67,-31,-9,-31,-49,-54,-14,-1,7,-69,-79,-16,25,10,-8,55,-17,49,-34,83,43,-4,-47,58,2,-127,-50,-50, 
  /* [218][0][][] */ -27,18,-19,-25,-42,-3,-20,-11,40,-8,-125,-78,-37,39,-90,71,9,127,-12,19,-88,41,15,-19,-26,-99,-52,-11,2,-60,-7,12, 
  /* [219][0][][] */ 19,11,3,-34,0,-59,48,3,70,-119,-54,109,-87,-39,-8,-58,26,-88,-97,48,-67,46,-9,51,-67,-75,-126,37,69,127,-108,-103, 
  /* [220][0][][] */ -78,-41,-127,59,45,-26,7,89,-75,60,-36,-35,-5,49,31,-24,-21,-59,7,-48,-3,69,81,-91,-69,-4,-86,2,108,45,-9,125, 
  /* [221][0][][] */ -26,-3,7,-75,70,-127,70,-63,-30,47,-18,-53,-33,-57,17,-34,-50,-13,-73,0,-33,-13,-41,-33,-39,8,-43,26,-10,-19,-48,28, 
  /* [222][0][][] */ -25,23,-91,-83,-49,84,56,-66,5,120,-24,72,53,64,-37,18,34,-91,-51,115,0,-13,-66,19,13,-79,-98,55,90,-17,127,35, 
  /* [223][0][][] */ 53,-92,-30,16,40,-8,81,123,-97,-39,-44,42,-50,-75,-3,-25,10,27,122,63,-99,61,72,-127,-11,-98,-33,-45,-46,-81,-97,9, 
  /* [224][0][][] */ 62,73,9,-56,9,80,85,-8,-82,-31,-44,26,-67,78,-48,96,105,127,-33,23,-29,-74,28,-48,8,72,-48,3,-60,14,-23,-43, 
  /* [225][0][][] */ 71,8,-23,17,-29,33,-114,-25,57,3,-38,-104,62,-31,8,-17,-81,89,68,53,-110,3,-127,-35,8,31,-36,-7,-55,1,33,68, 
  /* [226][0][][] */ 69,80,-29,-82,-10,-79,-48,-23,17,21,-39,-64,-28,59,-127,-5,70,-21,40,-34,27,-100,-10,-42,-56,-45,10,-54,-1,47,28,-71, 
  /* [227][0][][] */ 53,-40,2,-110,39,-33,25,3,-30,91,-25,-48,5,24,19,-23,-15,127,-42,-67,16,-49,80,39,25,-88,57,-38,91,21,-87,32, 
  /* [228][0][][] */ -12,-60,51,-22,54,49,13,-31,87,12,49,94,-1,37,33,-11,-10,15,-125,76,-20,7,37,-30,127,-9,67,-42,-119,-41,-62,-85, 
  /* [229][0][][] */ -42,-45,-16,8,5,33,115,22,8,-67,-52,-56,-18,-72,-70,-33,40,28,-28,-60,62,27,-34,0,-46,-3,-127,-60,-12,-85,36,-40, 
  /* [230][0][][] */ -46,61,-3,19,-127,-14,-24,-30,0,52,-13,-27,-58,-10,33,-7,11,-80,38,72,46,-112,-2,11,34,36,-16,-25,-42,-56,9,-7, 
  /* [231][0][][] */ -9,-30,105,-58,49,-2,-15,36,-63,-45,-24,-32,127,-4,41,37,2,-51,-43,25,-24,-8,22,-24,-50,20,-121,-20,-22,12,3,-46, 
  /* [232][0][][] */ -17,-12,2,20,2,23,-37,-11,-13,-97,2,127,26,31,71,37,48,70,1,-34,9,-2,27,21,-52,37,-28,-27,-2,45,24,60, 
  /* [233][0][][] */ 71,8,56,52,-120,26,13,44,-67,23,-1,-15,96,91,-111,43,27,-55,18,73,-15,-5,11,-45,-118,-28,-15,-20,127,-71,-14,-27, 
  /* [234][0][][] */ -33,-127,43,-11,51,-1,49,53,-4,-44,2,5,14,-34,-2,-4,-9,4,-65,24,-43,19,62,-31,39,-41,-87,-9,3,72,6,-55, 
  /* [235][0][][] */ -25,-25,-88,-71,73,74,4,15,36,-91,20,36,-21,7,27,-4,-14,42,-74,127,40,15,25,15,-32,-79,-44,35,14,-47,7,6, 
  /* [236][0][][] */ 26,24,51,-3,34,95,-54,-49,-48,56,-32,-48,104,-127,62,106,22,9,32,45,57,-80,102,68,38,47,-13,-12,40,-3,-66,-18, 
  /* [237][0][][] */ 46,-28,14,-35,-10,2,-49,-3,-14,63,46,44,127,7,-20,-60,40,4,-69,-19,21,-21,46,-7,49,38,71,1,56,-27,-13,-70, 
  /* [238][0][][] */ -13,-8,-32,-87,-47,83,37,-51,23,21,-46,-34,19,24,127,-6,28,97,66,-2,96,-77,43,-9,-49,123,-115,126,-90,-11,39,63, 
  /* [239][0][][] */ -48,-30,-11,-115,69,-59,-125,-41,-42,-73,61,62,-113,113,-50,4,52,-15,32,127,108,6,-31,42,4,18,-50,54,-48,-43,38,-24, 
  /* [240][0][][] */ 72,67,-43,2,69,50,-127,15,-7,-11,-96,83,45,14,6,-58,103,-81,-45,30,0,57,14,-53,-67,15,-38,-35,-102,-19,19,-72, 
  /* [241][0][][] */ 18,91,-30,-19,67,-1,52,101,74,-33,-104,-11,-5,76,43,127,22,66,-85,-98,-76,65,-13,-119,116,-32,60,-80,108,35,-27,-36, 
  /* [242][0][][] */ 61,78,-16,4,-38,23,-24,-88,41,19,12,-82,29,2,2,60,49,-9,10,-127,-51,-21,31,-48,6,12,-66,3,103,-40,83,71, 
  /* [243][0][][] */ 4,-1,-45,-105,41,-127,19,91,-15,-9,-53,-56,3,54,60,-14,49,-67,25,53,17,88,-31,21,36,43,5,-75,74,-49,3,4, 
  /* [244][0][][] */ -79,-103,-60,25,-42,56,35,9,30,50,50,-41,43,-102,-37,58,20,82,-9,82,-50,58,-43,-15,127,-98,-107,99,5,44,-56,18, 
  /* [245][0][][] */ 9,127,-34,92,-47,-20,66,-26,2,0,40,44,-27,19,53,-33,5,-71,-59,-1,-11,-20,2,19,-85,-50,-25,56,33,35,1,-6, 
  /* [246][0][][] */ 75,-14,0,-35,-74,-27,-34,44,-75,53,26,77,-124,46,-38,72,-62,-127,-69,101,17,-20,-109,51,124,-38,-60,-11,57,117,96,-54, 
  /* [247][0][][] */ 86,-62,12,84,50,-77,72,-16,105,-14,3,-75,3,22,-61,-39,32,-114,-33,31,73,-54,-41,13,-127,41,81,49,62,43,-98,19, 
  /* [248][0][][] */ -108,-55,-52,-52,62,53,-77,-12,7,93,-61,88,-127,58,-80,36,81,52,21,-36,-71,42,5,-73,-65,-2,-26,101,83,68,10,-5, 
  /* [249][0][][] */ 28,9,17,-3,1,-35,47,111,-10,-53,-47,127,60,-29,-92,30,-113,19,58,-93,103,36,66,-32,-4,-44,-71,-57,-46,-13,-27,13, 
  /* [250][0][][] */ 22,-6,-71,17,4,19,-25,76,-54,23,3,17,127,-59,-30,5,5,-53,-88,107,38,-101,-31,-26,25,11,-7,6,-9,-91,-5,59, 
  /* [251][0][][] */ 7,-46,59,-54,-13,-29,58,102,4,28,59,-127,-72,-20,29,57,44,-56,9,5,-49,80,-21,-80,-68,42,-81,-44,55,-24,22,11, 
  /* [252][0][][] */ 57,13,-10,-57,10,-54,92,25,-38,37,-12,-40,-111,93,-21,-11,3,-56,60,-58,-15,-63,60,5,-52,127,-10,-93,32,11,67,-16, 
  /* [253][0][][] */ -11,127,-19,0,69,0,8,30,6,-6,-19,31,6,27,-51,-37,41,-34,-17,2,65,28,-10,-18,-82,-1,-39,-58,-47,-22,36,60, 
  /* [254][0][][] */ -27,-124,-74,28,-11,50,-23,88,-46,37,-40,36,67,121,-55,67,70,127,-18,20,-3,87,-11,-36,51,22,9,45,95,41,-69,30, 
  /* [255][0][][] */ -33,-2,61,35,65,1,-53,-88,72,-40,64,36,48,23,32,63,62,30,23,35,-15,42,-127,44,10,-92,-42,-75,-29,-80,83,-13, 
  /* [256][0][][] */ 58,68,32,-17,-53,-50,90,12,-92,50,-12,-69,-66,-53,127,37,58,17,-44,-17,50,-54,-52,54,-19,12,63,-43,57,17,16,-6, 
  /* [257][0][][] */ 48,-78,-37,3,-28,44,50,-16,-58,-6,12,42,-27,49,13,-73,101,-80,127,-11,19,-70,71,38,52,-1,-51,-78,-64,60,-49,-57, 
  /* [258][0][][] */ 17,29,-36,-15,77,-9,-127,-49,43,25,90,44,35,59,4,112,10,5,76,34,-27,32,-27,-58,-63,-79,-3,15,10,-99,39,-122, 
  /* [259][0][][] */ -66,8,-59,8,10,-22,-25,-30,95,-24,-12,-9,-15,1,127,119,60,-24,2,-25,-23,-55,-7,-45,24,-18,-65,-35,-43,-26,-23,6, 
  /* [260][0][][] */ -14,88,18,-68,7,-83,33,7,40,-5,-5,-41,-127,32,4,14,-23,-101,4,-52,-55,-7,-2,52,23,5,-32,54,40,46,-5,-56, 
  /* [261][0][][] */ -7,-34,-54,-49,-12,-57,-2,127,35,15,3,41,25,-6,-1,-72,89,-32,16,50,12,-63,-56,-3,32,-31,65,0,-44,26,7,-10, 
  /* [262][0][][] */ -35,-89,-64,51,18,-98,13,64,-11,49,41,-127,14,-58,-56,-23,33,71,-43,-57,12,16,25,-44,-56,-14,73,77,25,5,60,109, 
  /* [263][0][][] */ -13,21,28,-57,-20,91,-23,-40,19,4,-127,-33,28,-36,104,-1,-32,20,-70,-88,-24,17,-37,-2,-20,14,-17,-26,17,79,93,0, 
  /* [264][0][][] */ 42,-9,25,-71,-76,63,-2,-10,56,78,-33,-60,35,-86,-36,5,46,127,-58,2,-44,-64,-71,104,-82,-16,21,15,-43,3,-58,-11, 
  /* [265][0][][] */ 4,6,-11,-41,-49,52,9,3,57,117,-36,9,16,-82,-11,-41,-39,31,-29,62,34,-12,1,-127,-104,44,1,21,10,-51,-73,-58, 
  /* [266][0][][] */ 54,22,-31,-80,39,10,-65,-1,-71,5,-31,53,-30,-62,-1,25,35,10,-127,27,-41,-59,32,38,15,26,45,-8,-1,-29,-27,0, 
  /* [267][0][][] */ -42,23,61,-113,51,-32,-39,69,125,87,-9,59,-12,54,-64,-93,4,39,-67,52,-1,44,6,58,-51,-17,28,84,72,12,90,-127, 
  /* [268][0][][] */ -26,26,20,34,-104,-75,60,30,12,-31,-5,111,-33,-72,27,-43,7,-127,-53,-85,-92,-79,40,-25,14,10,-33,-67,-11,24,-10,54, 
  /* [269][0][][] */ 11,-49,-15,56,119,-30,-41,-65,-23,35,-15,-23,-25,13,-42,-8,-23,125,-95,-80,-41,-14,79,-45,-54,47,-21,-127,50,-71,66,-22, 
  /* [270][0][][] */ 17,-8,-77,-58,80,74,-57,3,2,-13,-70,0,-9,-127,-23,-20,24,-64,-20,-14,34,78,38,79,26,-31,20,28,60,-85,-24,-27, 
  /* [271][0][][] */ -28,23,-78,-50,-10,50,66,105,17,-8,92,-86,-22,-86,-23,65,36,-127,43,69,-75,-107,7,5,-7,55,69,28,-4,-124,30,-3, 
  /* [272][0][][] */ 78,-78,-30,-83,5,-75,86,-50,-5,-31,12,-46,59,22,-20,-25,-50,-127,-24,2,2,4,-12,-61,68,-45,28,-35,-45,75,70,48, 
  /* [273][0][][] */ 9,73,51,-127,-28,60,20,14,-27,0,-54,17,-67,0,-49,84,-8,-37,28,-3,14,-79,21,-22,7,-36,14,83,19,-10,-5,-1, 
  /* [274][0][][] */ 10,-3,45,84,-18,41,-96,-58,41,-44,-47,-44,-119,20,-62,-15,38,21,127,-19,-68,-12,-4,-35,28,-102,-19,-53,13,31,18,81, 
  /* [275][0][][] */ 39,107,113,-9,101,19,-31,13,-28,-45,-5,-86,3,-9,65,11,98,-19,-26,-39,-73,14,83,-127,7,16,-5,36,-95,46,-37,81, 
  /* [276][0][][] */ -76,48,-52,53,117,-59,-36,63,8,-59,41,-4,-55,-57,5,-110,76,1,127,38,36,16,-13,45,-18,-46,25,-99,-12,-104,16,-34, 
  /* [277][0][][] */ -30,-11,-55,-19,70,28,41,-51,5,14,79,-39,17,-15,116,-57,31,19,88,-7,-127,-20,69,26,94,-62,-50,-43,32,19,21,66, 
  /* [278][0][][] */ -8,14,-127,-19,22,-67,59,-6,-15,-35,-10,15,-23,-40,-47,-79,33,-17,-18,28,70,38,46,5,10,-38,-65,22,4,33,0,-19, 
  /* [279][0][][] */ 13,56,-127,-54,-23,39,-3,4,75,23,56,4,3,-36,40,-61,-86,-9,57,32,32,24,6,-27,18,51,-33,50,5,19,13,-65, 
  /* [280][0][][] */ 89,12,66,-100,-13,-19,-12,-99,43,65,-75,-25,55,22,-23,-25,-36,1,106,-34,-58,8,56,37,-121,21,32,-1,-127,113,-33,21, 
  /* [281][0][][] */ -21,44,-100,47,48,30,98,-29,-12,-6,-39,-38,-11,15,-59,-17,61,-32,-83,61,127,52,64,116,-56,33,3,-58,28,59,-22,-30, 
  /* [282][0][][] */ 5,-47,103,-40,-45,60,-22,26,-1,-5,26,57,51,-37,-88,31,-7,-54,-103,127,85,61,4,-106,-11,84,-26,-94,17,7,22,44, 
  /* [283][0][][] */ -50,-28,12,-60,-56,28,-28,99,-4,67,6,-32,-52,27,-7,61,127,-14,15,44,87,-13,-30,-48,-31,65,68,-13,-16,48,83,47, 
  /* [284][0][][] */ -21,-89,113,-18,-61,-16,5,80,-3,17,-25,72,-114,10,8,-12,66,-48,15,12,-73,32,77,4,51,57,17,-16,-86,127,90,-22, 
  /* [285][0][][] */ 10,-16,74,-9,-10,-73,7,-10,-59,-60,-30,7,37,10,5,26,3,47,86,-28,41,-59,-64,-90,-39,72,127,13,71,12,104,25, 
  /* [286][0][][] */ 33,10,9,41,24,-69,-20,127,25,18,16,-30,-67,41,-18,-75,-109,-10,16,-23,34,120,41,52,118,-42,-55,-56,74,-9,108,-6, 
  /* [287][0][][] */ 0,-62,-75,82,40,-32,127,-31,23,-18,88,-48,60,123,-36,-31,-7,54,14,-13,-12,72,25,-120,51,-38,106,13,46,40,36,18, 
  /* [288][0][][] */ -45,95,127,28,-55,18,-58,-66,23,-38,40,41,-5,27,-50,-80,115,70,48,63,-39,47,57,-23,14,25,5,-67,20,122,15,-52, 
  /* [289][0][][] */ -75,-9,90,-87,53,-30,-37,100,-21,-4,48,31,-26,127,-25,63,37,-87,26,-112,69,-29,-57,46,-108,23,-21,12,80,8,18,55, 
  /* [290][0][][] */ -19,-29,14,127,-26,46,56,-6,-29,-28,54,-18,73,36,-41,31,18,56,-77,44,-36,-50,-1,-76,-35,84,-6,-61,-62,-110,109,25, 
  /* [291][0][][] */ 30,-26,79,11,8,-1,-25,43,-90,39,-14,34,27,59,68,-1,3,-7,-73,16,7,-90,48,-78,-8,127,-98,55,-44,28,47,33, 
  /* [292][0][][] */ -52,10,-36,26,-51,-88,-80,-39,-47,-33,19,58,-81,50,-22,12,-23,-19,46,-127,26,-64,-5,-86,-31,-52,32,15,31,-23,75,-32, 
  /* [293][0][][] */ -12,-1,52,-17,1,-18,-10,21,8,1,-104,0,-15,17,2,-37,28,-127,47,-4,-37,-37,-21,5,0,-10,50,2,15,33,-22,34, 
  /* [294][0][][] */ -3,36,-28,34,58,-43,35,-16,-28,-34,79,-44,-7,72,-20,-10,-31,-6,38,-72,15,23,20,-12,-11,8,17,28,-127,-9,19,-18, 
  /* [295][0][][] */ 111,43,22,11,-5,-6,46,-8,-9,29,-90,-33,-24,63,64,52,-3,-22,-80,-44,-61,-92,65,20,109,-45,-127,101,-74,-97,41,78, 
  /* [296][0][][] */ 50,4,0,-17,4,-47,40,89,-70,-64,-49,-11,30,-47,-101,126,-66,-70,-17,-21,83,-19,55,-82,84,26,-127,-23,100,-39,92,69, 
  /* [297][0][][] */ 40,9,-77,-114,-32,87,-27,-69,-35,-16,34,-20,37,-17,-101,-40,-127,14,2,126,-114,47,75,-34,113,-27,70,-43,-17,-70,60,-34, 
  /* [298][0][][] */ -22,-46,-96,27,127,126,-44,-11,-48,-46,-73,64,26,73,48,110,-38,-26,-49,-8,-19,14,-33,-94,-20,19,44,22,-32,24,-13,124, 
  /* [299][0][][] */ -26,-29,71,5,38,127,-73,4,-27,-26,-21,22,-92,-96,26,-53,19,-116,-82,-5,-87,-17,35,27,108,-9,-52,92,30,-74,24,-111, 
  /* [300][0][][] */ -77,-28,19,0,122,-55,30,-61,-6,18,-72,26,-51,-25,-3,47,-53,48,7,78,24,-5,-127,13,-18,-36,-117,25,36,24,48,-4, 
  /* [301][0][][] */ -51,-18,-31,-20,-6,-15,-85,-34,5,-30,-83,-60,-8,-37,-9,16,-5,31,127,-29,-13,33,-38,-55,-122,39,-66,-35,-27,59,-121,-10, 
  /* [302][0][][] */ 37,-37,27,-10,-27,88,17,-67,-12,41,4,-32,16,-16,42,-50,74,33,71,-43,-8,62,51,-38,15,-96,-40,-46,59,29,2,-127, 
  /* [303][0][][] */ 2,-23,18,41,-32,-55,-15,12,-32,39,-7,44,-15,-40,64,-11,-85,-54,-127,49,-42,2,32,15,-59,123,-61,-6,79,16,1,67, 
  /* [304][0][][] */ -9,-15,75,62,56,-86,24,-38,55,-40,65,-20,85,-26,0,30,-10,-27,-46,-66,5,107,17,46,57,11,110,-127,-96,27,-35,4, 
  /* [305][0][][] */ 16,-1,10,-35,-8,-73,-72,38,108,-37,39,-9,53,-34,-28,-5,2,-39,-87,-13,50,18,29,7,-12,68,-29,112,-56,1,31,-127, 
  /* [306][0][][] */ 12,127,35,21,4,55,-16,-22,31,-57,22,-53,60,50,-12,-27,39,-32,12,-48,97,-9,-57,-65,-58,17,2,-37,-1,92,40,71, 
  /* [307][0][][] */ -80,20,-13,-28,-127,-17,-20,65,121,-20,-37,-45,33,10,-56,1,50,-47,2,23,-58,-14,-31,-40,-100,103,77,-31,-2,-24,-71,32, 
  /* [308][0][][] */ -34,-1,-30,-110,-42,19,44,29,-63,122,-91,64,14,-2,0,-79,14,-76,-29,38,27,9,31,-99,-60,-23,-51,-57,-25,127,-13,39, 
  /* [309][0][][] */ -27,-42,-94,-18,-95,-6,-69,127,-8,62,-4,-23,0,-119,-86,-58,41,26,-38,-59,10,-95,83,-39,72,14,-113,-61,3,4,37,14, 
  /* [310][0][][] */ -23,-9,45,1,31,-3,-36,-35,11,-70,20,93,-63,16,-23,-70,127,-87,-25,-12,54,-49,-88,-66,-9,-35,-41,7,-110,-14,-22,45, 
  /* [311][0][][] */ 35,-7,4,-13,61,-28,-21,-49,-46,-48,-9,-52,15,-109,81,-17,-127,-114,-17,9,-35,3,-77,-9,-11,-125,94,-90,122,-64,79,-66, 
  /* [312][0][][] */ 48,35,-38,-35,-54,49,31,97,11,127,0,101,48,13,-18,1,-17,-8,-95,-12,100,5,46,-66,45,-51,-57,-7,56,38,63,61, 
  /* [313][0][][] */ -63,1,51,-35,52,-45,39,107,-30,96,14,105,-70,-33,-3,35,-69,0,-1,122,51,62,-45,-107,-31,-20,127,49,11,18,45,-40, 
  /* [314][0][][] */ 7,18,40,-41,-10,41,3,8,-89,31,28,82,51,-57,-8,-23,44,-31,-14,88,5,-41,-29,-34,-41,41,-22,39,127,50,-10,-5, 
  /* [315][0][][] */ 23,2,-16,61,-22,-73,43,61,-45,-6,-5,-105,43,-40,2,34,-19,-59,104,104,2,-19,-39,39,32,-83,-49,-14,-20,3,-127,100, 
  /* [316][0][][] */ 42,6,-7,-10,12,-9,-5,78,-14,-30,-51,-60,19,-10,-8,-35,30,10,-27,127,53,16,-89,-13,-14,23,78,-109,-45,44,-4,-17, 
  /* [317][0][][] */ -67,-103,-6,104,-127,62,-77,-13,62,-90,13,-50,-45,-9,-3,-10,87,-63,-17,-98,-23,22,121,36,-41,74,-48,-52,-29,-8,53,-69, 
  /* [318][0][][] */ 66,-40,-4,-40,-42,13,-48,-18,-51,-23,-45,35,30,-127,-21,-10,-19,-120,-26,95,35,0,-30,71,-62,-98,4,67,-76,7,-106,65, 
  /* [319][0][][] */ -28,100,31,62,-47,-56,-47,63,114,-4,-38,36,78,24,-30,-52,-46,25,51,20,127,81,-86,-3,-12,-37,-44,21,-10,-88,26,-27, 
  /* [320][0][][] */ -23,29,-85,-6,9,-51,27,70,36,20,-56,15,4,-7,-2,11,-39,9,56,70,19,60,-2,80,-5,-12,-65,-17,-50,13,-127,35, 
  /* [321][0][][] */ -14,43,4,-14,16,-61,61,-50,-16,44,8,44,-75,-63,-15,-8,5,11,-23,64,9,-8,-57,-9,41,-16,-58,-58,3,13,127,65, 
  /* [322][0][][] */ -34,-9,-88,127,-23,22,-35,-11,-14,14,-18,-118,21,6,33,-89,-28,37,-121,-51,-32,119,54,1,-106,22,58,-13,20,57,-127,17, 
  /* [323][0][][] */ 20,-4,63,-78,-50,66,-98,13,-119,1,-43,-4,106,-27,31,-56,66,127,115,-48,30,-14,42,10,96,-56,-48,5,-5,19,1,-28, 
  /* [324][0][][] */ 38,-1,27,-35,81,35,10,30,-70,18,28,-59,95,59,99,28,-43,106,112,29,-14,-4,-103,-5,-65,-127,-18,-25,120,-14,-64,-70, 
  /* [325][0][][] */ -67,127,3,-15,-72,4,-32,45,-38,39,38,44,-5,49,-42,105,58,-12,-62,35,47,53,0,14,-57,-34,60,8,-45,10,-50,41, 
  /* [326][0][][] */ -115,-74,-21,9,-52,-27,90,-72,41,-22,75,-21,39,8,11,9,127,41,23,-44,29,-53,12,1,46,26,-7,64,9,115,-34,81, 
  /* [327][0][][] */ 8,27,22,65,-45,1,117,-46,17,31,58,5,3,-21,-16,-6,-19,39,31,38,83,49,11,25,-66,59,-40,88,-127,-55,55,35, 
  /* [328][0][][] */ -86,65,-127,-17,-114,-36,-90,63,-86,101,105,44,-35,-19,11,16,32,-12,17,54,-62,-39,-94,18,-11,52,51,-14,16,13,-89,-29, 
  /* [329][0][][] */ -27,30,54,106,35,102,42,52,-15,35,12,-20,-45,-17,3,2,-35,5,19,43,-39,-35,24,0,11,85,127,47,-82,-89,-89,87, 
  /* [330][0][][] */ 100,-91,14,-8,-94,-36,-17,49,-127,66,-47,-24,26,-63,-42,25,-13,37,-115,-54,17,-41,23,-15,-85,-35,-67,3,73,53,27,34, 
  /* [331][0][][] */ 61,53,-115,-21,-55,52,7,113,127,34,-82,-55,48,-26,-102,-88,-56,-14,-31,25,-17,-11,63,-40,6,45,1,34,50,20,-93,-96, 
  /* [332][0][][] */ 59,-40,-31,-38,-1,-75,33,49,20,-73,-44,-86,8,-34,-123,127,43,-91,23,-68,-3,4,-77,-52,-86,21,39,-39,33,-48,67,76, 
  /* [333][0][][] */ 10,45,-127,-4,1,-33,18,-47,15,4,-18,-27,-45,-43,6,0,-2,-29,39,69,-12,-40,-57,-37,-1,13,2,26,19,64,4,-32, 
  /* [334][0][][] */ 11,-11,50,-67,27,-45,52,57,-32,-127,7,-57,-38,-25,-116,-35,53,-6,19,30,-14,-65,103,-8,67,-76,49,36,-61,-17,-17,44, 
  /* [335][0][][] */ 62,-5,-16,-25,78,53,-19,-37,-16,47,6,15,24,54,32,-13,-127,50,2,48,-28,43,-72,37,107,0,-48,-7,-7,-5,67,-41, 
  /* [336][0][][] */ 5,21,-13,-49,33,-62,4,-27,21,-69,-54,-34,27,-85,-7,40,0,-24,12,56,-105,9,-2,58,-35,51,-59,36,83,127,-33,115, 
  /* [337][0][][] */ 24,14,43,2,20,48,-127,-65,13,-7,13,8,46,-101,-21,-14,59,-7,-104,-8,18,-49,22,2,22,-47,-35,84,11,82,7,6, 
  /* [338][0][][] */ 8,31,-1,-10,20,-41,43,37,-61,16,-24,-13,-39,26,-85,-127,16,-3,-9,-45,2,17,-15,81,0,-54,64,77,-57,-25,-51,-53, 
  /* [339][0][][] */ -89,83,-41,-35,27,-63,-127,86,26,29,-70,53,64,7,25,8,4,-6,27,10,21,-11,-17,18,28,-45,-9,-32,17,-10,-35,9, 
  /* [340][0][][] */ 90,76,-35,-17,-7,14,8,-60,35,-50,127,25,29,-46,-69,-19,-29,-66,-86,57,90,-2,-32,-13,-53,-30,110,6,-72,90,19,-68, 
  /* [341][0][][] */ -48,34,92,27,-4,-39,-30,69,-111,-18,22,-97,11,46,-3,-64,65,98,-93,-127,7,-14,2,62,58,-23,8,7,17,-47,21,13, 
  /* [342][0][][] */ 45,2,-49,47,93,-39,51,82,8,112,66,7,9,30,18,70,-19,-59,6,22,-99,13,-60,71,48,74,14,-127,23,64,-20,-10, 
  /* [343][0][][] */ 37,26,3,53,37,-13,-6,11,10,61,-43,-72,-39,59,-38,55,-127,-2,30,-20,-1,-11,-26,103,-23,22,4,4,41,10,-32,58, 
  /* [344][0][][] */ -16,-34,19,-5,101,-42,-79,-58,-19,74,34,89,0,-79,-27,11,-87,-127,-54,-38,39,-41,48,6,31,-63,-109,-35,-112,-36,62,96, 
  /* [345][0][][] */ -79,99,-28,25,28,-13,-44,25,-34,-27,-110,0,-1,7,-2,51,17,40,75,-13,-102,-107,-9,-51,-18,17,-33,127,-23,96,-22,67, 
  /* [346][0][][] */ -105,127,4,-40,-48,16,30,-34,-3,62,49,-20,-49,80,-22,-86,-3,-77,-28,-56,48,-48,63,30,38,-44,30,103,-42,37,-45,64, 
  /* [347][0][][] */ 14,-111,123,82,44,102,47,-42,64,-92,2,-124,49,16,39,92,11,0,-34,-48,-32,-37,-47,-30,54,4,-53,127,15,81,82,-119, 
  /* [348][0][][] */ 19,-87,-118,52,-12,1,14,-112,-45,-7,35,127,-109,86,71,-19,62,18,-51,28,-15,100,-7,25,-5,13,-31,-78,22,-18,81,-96, 
  /* [349][0][][] */ 63,36,-91,40,-70,76,79,7,-127,25,67,-23,40,-16,-20,-42,-22,5,-59,-6,66,-41,-18,67,33,-49,-9,32,93,-77,-1,-29, 
  /* [350][0][][] */ -15,16,-52,-14,56,-123,-51,-7,10,29,-49,-17,11,76,44,40,-65,20,-18,37,-44,68,0,-61,-126,15,10,-25,127,0,-26,-24, 
  /* [351][0][][] */ -3,-3,-54,-72,-71,33,38,-13,-52,115,15,0,37,31,70,40,7,-57,92,-102,64,-77,-75,-51,81,112,-94,-19,127,-37,53,14, 
  /* [352][0][][] */ 15,4,-11,-35,-45,-41,38,-28,58,6,30,21,19,75,42,-127,-24,4,9,50,22,19,-22,39,-9,0,-35,7,6,15,24,-29, 
  /* [353][0][][] */ -15,1,127,-31,42,21,63,72,-20,-26,-126,-18,-2,5,-42,45,57,10,-46,-13,-18,10,45,15,54,-13,42,-58,-54,13,-37,-12, 
  /* [354][0][][] */ -12,-21,7,2,-17,10,37,24,-44,-12,53,-19,-13,-9,-59,-34,50,-127,9,-65,18,6,-3,-36,-15,56,4,-34,27,-66,31,34, 
  /* [355][0][][] */ -10,6,57,44,18,-29,103,-12,56,-9,-16,-28,88,12,16,59,-51,-72,-127,-20,55,-7,78,56,88,25,22,84,80,17,2,90, 
  /* [356][0][][] */ 127,-30,36,-40,-20,-122,26,44,-28,-73,66,20,-73,64,-59,5,25,5,-14,-35,-41,-5,-12,66,102,90,81,28,1,-77,101,-45, 
  /* [357][0][][] */ 69,75,85,4,-71,-14,64,76,1,-50,-50,45,15,23,25,-85,-4,-35,28,-121,81,62,-127,-122,-7,-32,67,60,41,22,53,-61, 
  /* [358][0][][] */ -28,49,-43,-35,-52,13,31,71,-103,60,16,-32,22,103,55,-127,69,-32,97,22,24,64,-74,33,-57,59,-41,14,74,56,32,-25, 
  /* [359][0][][] */ 3,-12,5,13,41,62,-77,-6,-24,-12,-3,26,34,-24,-45,-34,-7,-87,59,48,127,80,26,22,-60,-1,-72,-68,-29,-44,49,15, 
  /* [360][0][][] */ -18,66,-64,16,40,-44,117,-13,-53,127,124,-50,-13,-32,-89,63,38,-45,-54,6,36,-57,48,-23,-84,-27,-14,95,31,117,-84,43, 
  /* [361][0][][] */ 63,20,73,-57,-13,32,-30,-127,-4,-72,14,11,22,7,-39,-6,-9,30,17,6,-92,29,-42,-35,-106,18,82,11,57,-31,13,-10, 
  /* [362][0][][] */ 38,26,-46,40,2,15,17,-43,-46,-127,17,-67,102,-32,90,-5,-19,63,-111,91,-20,41,30,29,-45,-47,-57,37,39,-25,-25,-48, 
  /* [363][0][][] */ 35,-38,-127,-56,-28,-62,5,-9,17,-24,-22,-8,-41,-6,-45,31,22,41,-19,45,-21,-58,-10,34,-5,-16,4,65,-40,-5,-33,11, 
  /* [364][0][][] */ -39,-54,8,6,-3,-9,-56,30,1,10,-3,53,35,30,18,10,16,4,12,25,-29,-66,-22,-15,21,-7,22,-6,5,-127,-26,6, 
  /* [365][0][][] */ 32,9,-127,-4,34,57,-9,-56,34,13,17,8,-30,-43,31,-57,-56,-91,1,6,64,-21,-77,17,14,73,-2,-54,-16,44,-17,11, 
  /* [366][0][][] */ -39,-115,23,74,100,-85,-3,127,-64,-58,-57,86,15,-8,32,45,83,-54,44,-90,-77,71,62,60,26,-93,-53,-6,-5,-3,54,-51, 
  /* [367][0][][] */ 74,3,30,61,-69,1,68,11,5,90,11,-79,-75,24,-44,-9,44,45,64,-29,24,59,125,44,-95,-127,-47,-21,-23,-2,-29,68, 
  /* [368][0][][] */ 31,28,14,-19,-47,76,13,33,5,127,12,32,112,-3,1,-55,-117,1,-23,33,-77,35,82,-101,-29,-16,-39,-25,50,-23,-46,-24, 
  /* [369][0][][] */ 26,6,127,-114,-30,59,-52,-60,11,-24,0,18,21,-31,69,2,34,44,-5,-5,-20,-16,49,-29,29,30,-10,71,10,-21,-72,26, 
  /* [370][0][][] */ 35,62,-32,-19,22,40,7,-44,-48,22,44,38,-36,-64,-19,21,19,-6,-108,-101,19,-98,46,15,-127,-25,-60,-39,10,13,-48,-5, 
  /* [371][0][][] */ -10,122,-32,-105,51,9,-24,49,35,-74,1,42,-15,113,-127,35,-25,14,-42,82,-16,44,70,-6,36,65,35,-64,-23,32,8,-1, 
  /* [372][0][][] */ -84,-47,-6,-127,39,21,-18,-29,84,-36,33,109,29,-45,11,44,105,-44,69,40,16,-10,-32,-72,-56,125,-33,10,8,122,4,53, 
  /* [373][0][][] */ -31,-79,6,10,33,-72,22,-1,-32,28,103,-65,-104,87,7,77,33,59,-17,-34,-58,-77,-22,-75,-32,10,94,-127,6,121,-52,-102, 
  /* [374][0][][] */ -22,80,11,81,-93,-106,-56,-5,-47,-76,82,-49,0,15,15,-52,-44,14,-5,-39,12,-15,64,-30,54,-44,-24,127,36,99,46,70, 
  /* [375][0][][] */ 25,119,41,35,45,-35,29,29,-107,70,-4,27,-92,17,38,-15,39,36,102,-54,-50,-127,8,-31,-29,-70,27,-70,9,-49,-53,86, 
  /* [376][0][][] */ -127,23,-12,66,-33,-22,-70,14,6,29,-28,31,-90,13,-76,-5,-2,-54,3,-43,115,-66,5,9,13,25,-54,51,-52,57,-64,-111, 
  /* [377][0][][] */ 14,-32,35,-95,-33,-9,11,24,-78,96,-6,-56,39,49,-40,34,21,-6,-46,-2,-56,127,-42,22,-24,-115,5,-49,31,90,-34,-22, 
  /* [378][0][][] */ -3,43,-94,11,34,28,-19,-9,-116,-19,125,54,30,-83,42,4,-33,-45,37,6,-36,85,-49,-3,127,28,53,-75,-22,-77,-45,41, 
  /* [379][0][][] */ 39,9,-127,-37,-48,1,3,-25,-10,32,0,-24,6,-82,-27,-39,1,68,14,9,43,-29,-10,92,94,10,113,-25,1,-34,1,-62, 
  /* [380][0][][] */ 37,30,-42,-127,52,-43,32,-49,24,-103,74,-56,-35,-63,64,36,89,-93,-1,-53,65,5,-40,-39,-2,43,82,-17,-89,-54,-26,55, 
  /* [381][0][][] */ -24,13,-11,46,-120,-127,11,110,-61,-7,9,92,-28,-57,127,-76,-1,61,8,-48,57,18,118,3,-81,84,-77,40,60,117,-60,10, 
  /* [382][0][][] */ -20,-56,-26,-45,-7,-24,-44,-6,26,25,-2,-73,45,62,39,21,-5,23,-3,42,-16,-22,-81,18,47,26,97,127,120,-33,-71,25, 
  /* [383][0][][] */ -9,52,70,-25,-3,13,-42,45,127,-46,-4,4,-8,90,-22,-48,39,-31,-78,-69,63,-60,-76,2,-114,-27,34,20,16,-125,6,-87, 
  /* [384][0][][] */ 21,28,53,25,24,-127,-14,76,-35,-83,76,-17,-16,-59,30,-63,-44,15,-41,-48,-16,13,25,-10,-31,59,17,-31,29,-20,-40,70, 
  /* [385][0][][] */ -1,39,-10,45,10,-25,9,11,-55,-19,-19,-10,10,-9,22,8,2,-33,-9,1,50,-127,-40,37,26,-13,-8,-25,14,10,-58,-5, 
  /* [386][0][][] */ 41,23,-47,-66,127,65,59,71,26,43,34,-35,-18,-121,66,21,-42,-24,15,15,26,-58,-5,14,-124,54,-44,12,32,2,49,64, 
  /* [387][0][][] */ -120,-16,10,-60,-70,-18,8,-18,-49,-52,10,1,-79,-36,-5,-38,-31,-76,-56,106,43,0,-127,8,-5,-89,-45,-20,99,-108,-5,17, 
  /* [388][0][][] */ 72,64,64,88,-64,-21,-72,-48,-14,32,-4,44,29,-102,-116,20,-86,-66,74,-19,19,-127,-91,-30,6,-62,26,31,48,41,76,60, 
  /* [389][0][][] */ 12,-18,20,-34,21,-14,-10,12,25,73,50,47,-29,-11,27,-27,-17,12,10,-31,9,-54,15,12,21,-5,127,-11,26,-39,8,30, 
  /* [390][0][][] */ -119,-13,127,-93,20,-30,-21,84,-11,68,32,-110,-90,-56,-11,32,53,95,63,32,-42,-20,-28,21,59,123,71,15,37,-23,-107,-31, 
  /* [391][0][][] */ -76,9,111,95,7,21,-20,-84,127,-31,42,-24,-1,-86,40,-53,-104,-60,70,-34,86,4,-23,7,-31,-5,-47,78,0,25,75,7, 
  /* [392][0][][] */ 58,6,-3,-36,82,-81,-77,-40,-47,-88,36,26,-87,76,11,127,45,56,-43,-90,1,-53,-11,90,3,-88,36,23,-18,-16,-5,-11, 
  /* [393][0][][] */ 33,1,50,-43,40,-24,-70,-42,83,51,46,-79,-46,-26,50,-6,-19,8,127,-51,-52,-7,44,-32,40,58,-40,26,29,-23,-22,26, 
  /* [394][0][][] */ -74,-26,-65,61,-35,64,-28,-30,-49,107,-13,44,-39,3,7,-4,69,-55,40,98,114,-22,-101,-126,-43,67,-32,-4,-46,-127,-31,74, 
  /* [395][0][][] */ 12,103,-21,9,-20,-42,-61,-49,1,-127,-18,8,-66,8,41,-10,34,14,87,92,-8,-42,26,-6,-54,-39,-55,-30,14,34,4,-53, 
  /* [396][0][][] */ -3,23,18,-34,-123,-82,-120,47,112,85,46,-47,63,89,-78,17,38,7,14,-38,-70,-62,-44,37,-49,10,-62,63,26,-69,57,-127, 
  /* [397][0][][] */ 73,6,29,14,27,52,48,62,10,34,22,27,23,-127,36,14,-29,119,-30,2,-6,-1,27,17,-66,21,-19,-61,-20,89,-39,49, 
  /* [398][0][][] */ -1,-88,16,-39,103,-32,65,-1,9,76,-83,12,-59,14,7,93,102,32,-9,-41,31,-86,3,-34,70,49,2,19,-127,49,-12,-22, 
  /* [399][0][][] */ -60,-28,17,20,-51,118,63,18,8,-46,114,-32,-22,-59,-29,101,-50,-27,-115,46,-36,64,-47,127,-96,46,-77,-124,-113,76,-51,-20, 
  /* [400][0][][] */ 100,21,61,105,2,25,-2,27,5,103,31,22,44,0,67,-42,-61,-1,-4,7,-72,-61,-27,15,-81,-10,-31,-22,127,-5,-111,-42, 
  /* [401][0][][] */ -17,51,86,-50,-22,-55,-21,88,16,-127,-64,-61,-38,-44,27,-51,4,37,-92,-102,-11,-8,-83,82,-10,-41,-26,-91,-37,-11,-31,-19, 
  /* [402][0][][] */ -79,-9,-67,-2,-25,-15,34,34,39,11,18,35,-32,2,127,-10,-6,-1,-12,-3,40,-43,-39,-26,-39,33,-53,70,-68,-22,-38,55, 
  /* [403][0][][] */ -98,40,-71,8,-12,-127,28,-46,-52,18,-32,12,-105,3,22,68,20,-47,40,-14,6,-40,42,-49,-65,-38,-3,77,34,-66,-120,-42, 
  /* [404][0][][] */ 56,11,37,-24,-5,7,-127,25,11,-4,-22,-116,43,-68,-9,10,-2,35,-40,43,1,67,68,-59,38,-5,-16,-31,22,-22,72,63, 
  /* [405][0][][] */ 12,-47,-10,-27,-87,-18,-114,91,95,127,-13,-41,20,56,31,-48,-24,-55,-28,111,5,2,30,7,77,-65,-41,43,13,-44,-14,-108, 
  /* [406][0][][] */ -69,-51,56,27,-11,-65,53,-9,51,-29,-63,1,82,44,56,61,14,-36,2,-95,35,-35,-10,-39,-17,61,-30,41,-127,22,-98,-68, 
  /* [407][0][][] */ 26,-2,40,-26,-15,-62,-23,90,54,109,126,-74,-57,-7,-46,-116,56,-94,-36,-46,13,-3,-113,-4,24,3,-102,1,0,13,-7,-127, 
  /* [408][0][][] */ -30,84,59,-116,-54,-23,-19,46,-82,33,105,-23,39,127,34,-77,-61,38,-66,77,33,83,38,-48,-61,-8,-87,24,88,43,-77,-88, 
  /* [409][0][][] */ 60,14,78,40,23,25,37,-25,-16,-3,-71,-16,110,-21,59,-17,-27,42,13,-46,-127,41,-27,21,96,-57,28,54,-46,47,-39,41, 
  /* [410][0][][] */ -12,73,-83,-63,-49,-98,-29,46,47,1,22,-39,-65,39,72,-57,-64,-41,67,42,30,-127,16,21,37,-33,73,-70,57,60,-76,-13, 
  /* [411][0][][] */ -20,47,37,-37,-72,-31,26,-34,58,9,6,1,-76,-44,-123,7,39,67,-20,10,-36,127,-49,38,-42,69,17,33,49,56,54,-11, 
  /* [412][0][][] */ 48,-85,21,81,-121,30,70,-18,-108,-25,-2,8,86,8,-35,-28,57,54,-3,37,75,-53,-12,-24,39,-49,49,-30,-34,127,16,-49, 
  /* [413][0][][] */ 58,-67,-20,-73,45,-16,-16,-10,81,57,-14,69,-47,32,92,-66,-95,-70,13,41,-44,-127,18,-18,10,43,-70,24,-35,-52,-101,-30, 
  /* [414][0][][] */ 50,-46,-67,-18,57,-31,73,2,-47,36,4,74,-15,24,-41,48,-6,-30,24,-24,18,37,-25,41,7,-92,38,-30,40,26,127,35, 
  /* [415][0][][] */ 38,38,1,-58,-32,-127,-67,-60,-14,-31,-9,19,93,4,83,-43,-11,-95,44,-29,5,-36,-33,36,-31,-45,77,89,45,-36,21,72, 
  /* [416][0][][] */ -49,-4,87,-1,-44,-30,-12,29,-65,-31,34,36,-26,127,-13,6,20,-54,14,-16,34,0,-12,-52,-5,-24,16,-46,1,5,14,9, 
  /* [417][0][][] */ 47,13,8,23,-38,27,9,44,5,-19,-20,3,3,3,-10,58,4,-13,-127,-2,27,-39,53,-9,-67,27,18,53,33,-108,15,6, 
  /* [418][0][][] */ 31,45,39,14,-6,-68,-45,-21,21,54,25,35,-34,12,33,-43,10,4,27,51,72,55,-119,-8,-54,82,16,50,26,-4,7,-127, 
  /* [419][0][][] */ 11,31,11,46,-106,55,-9,-12,48,112,-108,21,53,32,-42,-102,-5,27,13,82,-60,-52,74,-54,-40,61,-62,65,59,6,-127,-47, 
  /* [420][0][][] */ 27,-62,-1,-12,9,-82,12,13,-26,-42,4,40,-7,-42,-4,-31,98,-2,-32,52,21,-23,1,66,-35,13,-67,-19,-62,-14,127,20, 
  /* [421][0][][] */ -26,-17,-21,9,-1,-18,10,5,-35,19,-24,17,40,71,-7,-19,-63,-47,-75,-2,-60,14,43,20,-17,-43,69,127,19,-19,-58,-45, 
  /* [422][0][][] */ -23,24,-10,33,-16,10,63,-127,18,6,57,84,41,-53,54,-26,87,-35,-46,-5,32,-25,-35,42,63,4,-67,-16,-3,-29,-5,-5, 
  /* [423][0][][] */ 37,1,-38,32,37,-127,-11,-24,20,-96,15,-14,18,33,-34,74,-9,-26,-7,5,-57,35,-13,-58,-82,-81,-78,-44,70,-12,-49,5, 
  /* [424][0][][] */ -55,38,24,-43,-43,-4,22,-19,-34,35,43,-31,-34,-1,-127,22,21,-18,39,-81,40,-41,-75,-24,-117,15,-66,27,8,16,-13,1, 
  /* [425][0][][] */ -7,30,-6,-15,-78,8,-5,16,-127,37,-72,-60,46,-23,-116,-10,122,13,-19,-57,3,-37,-53,-48,28,-10,-53,-18,-74,-10,23,46, 
  /* [426][0][][] */ -40,77,-73,127,-76,11,-53,22,-10,20,-9,12,-60,53,-99,-39,-99,30,-27,109,-68,-74,107,-53,47,-50,-73,41,-26,-64,-9,60, 
  /* [427][0][][] */ 33,29,127,-25,-21,31,70,-51,32,-38,-55,-13,30,-32,-68,42,-52,-27,-76,5,47,25,-48,21,14,-95,-80,43,-24,-15,1,-22, 
  /* [428][0][][] */ 94,-39,21,-33,127,-1,-32,-24,-6,21,-22,-10,9,-41,11,-36,54,-79,-46,-4,63,19,-36,-20,-30,-22,-35,-37,-8,-4,-75,-100, 
  /* [429][0][][] */ -61,13,3,-56,-22,-25,-27,12,-20,22,-5,16,-127,-47,0,-19,81,2,5,6,3,2,14,-4,-6,57,11,23,-55,39,-21,-42, 
  /* [430][0][][] */ -33,-8,5,2,59,-29,61,-3,-9,6,59,-78,-13,-32,5,43,-59,74,-27,55,103,43,1,3,26,-40,-127,-11,19,23,48,65, 
  /* [431][0][][] */ -92,28,-20,-85,-20,43,23,2,-63,44,42,-104,-28,-20,-17,-25,30,10,31,-52,-60,127,51,-90,69,103,5,41,0,-5,81,120, 
  /* [432][0][][] */ 127,-67,-83,10,25,46,-25,-72,36,-1,-25,10,6,-20,42,-71,-25,47,-89,-71,12,120,-78,-37,56,-63,47,-36,99,-7,16,6, 
  /* [433][0][][] */ 22,-3,0,-117,18,12,-62,-46,52,-15,-8,8,-7,38,51,1,25,-68,-83,-37,-19,-11,49,62,26,26,-8,-127,62,19,6,-57, 
  /* [434][0][][] */ 76,-10,53,74,-33,54,64,32,-14,-30,36,-18,-46,21,-26,-42,-6,31,22,-88,25,28,16,-54,-10,-4,6,-62,-29,-13,30,-127, 
  /* [435][0][][] */ -47,-15,-127,22,59,-3,-62,9,67,-19,35,-39,40,14,39,-73,-29,-77,26,47,-47,-56,-22,83,-25,-44,16,-3,-14,-78,40,48, 
  /* [436][0][][] */ 36,33,-82,-27,-9,44,47,27,56,58,25,5,-127,-83,-17,-27,-51,5,43,51,70,17,-4,-27,9,-62,-91,35,70,2,-33,70, 
  /* [437][0][][] */ 71,-78,73,39,90,-127,-53,-34,-94,-12,-40,-75,65,-23,-14,-5,-21,-52,-41,61,34,13,-78,-29,20,-35,-76,-22,51,-4,78,68, 
  /* [438][0][][] */ -82,9,-15,19,-54,22,36,-48,72,-106,71,-76,41,-127,109,9,5,-24,-53,-19,93,35,-72,26,-1,-23,-8,-85,-106,-41,-51,12, 
  /* [439][0][][] */ 44,-20,122,-7,37,-42,105,-21,7,81,-11,55,-20,-27,127,-31,-4,59,-13,-87,-69,-22,-79,41,-87,-55,-81,-9,56,11,-118,-3, 
  /* [440][0][][] */ 25,127,73,2,-1,48,-4,-55,76,93,-108,13,-50,-98,-62,56,58,62,105,-106,78,50,106,-9,-2,48,-75,37,-64,-69,64,6, 
  /* [441][0][][] */ -40,59,39,-37,-24,20,-8,56,14,127,24,-28,-6,18,-4,-59,-8,-7,-78,73,-18,7,-13,66,-100,39,-28,36,-2,-78,12,94, 
  /* [442][0][][] */ -70,16,-59,-75,-26,109,34,-85,-11,58,-43,-58,-54,-2,65,-41,-10,-77,60,111,-127,-9,-38,-56,-91,17,19,-21,24,-20,8,98, 
  /* [443][0][][] */ -91,-71,-74,11,76,79,-7,23,-39,-1,74,-53,4,56,-16,17,83,-45,-62,41,-127,-10,-27,-26,94,95,-4,74,-104,-36,-46,-61, 
  /* [444][0][][] */ 21,24,-19,-27,0,-38,-127,12,17,-21,-42,-39,-13,-77,6,-51,-17,-4,-33,-18,9,-3,-10,1,6,-99,96,27,33,40,5,14, 
  /* [445][0][][] */ 49,-34,52,36,54,18,45,43,-29,111,-76,-81,-10,-63,111,-38,18,27,12,-99,127,47,-75,-34,-27,-9,27,-45,-19,-41,-57,-63, 
  /* [446][0][][] */ 22,-43,-23,-1,-63,36,-44,-11,12,-8,-2,20,-29,18,68,16,127,14,64,-79,62,23,18,81,-18,6,59,-27,-45,-77,14,-45, 
  /* [447][0][][] */ -8,10,54,-3,-29,-5,14,-6,-127,9,-3,24,-18,12,41,-63,35,-49,1,-56,51,-25,29,-44,-17,-16,-19,32,50,24,-44,11, 
  /* [448][0][][] */ -27,-100,-18,127,-12,-63,69,25,79,-77,-14,18,11,21,-7,35,-59,27,56,-34,-20,45,55,-35,-30,-7,1,114,-57,9,38,15, 
  /* [449][0][][] */ -38,-91,53,15,116,21,-15,119,-89,76,-54,-31,-101,-76,36,-51,86,-9,-112,33,5,70,-92,16,-84,127,-17,43,32,75,-47,66, 
  /* [450][0][][] */ -46,83,3,-52,75,-8,-125,10,38,61,-70,9,20,-28,-34,12,113,7,-83,-79,7,-5,41,57,127,-112,-62,4,14,-12,-86,-2, 
  /* [451][0][][] */ 70,-74,-14,28,9,4,-30,42,-18,-56,20,43,-4,8,61,-3,17,30,-18,-9,-81,-1,127,37,55,-42,-12,-44,-12,27,62,-21, 
  /* [452][0][][] */ 28,-7,-8,33,62,-127,-14,56,15,6,-35,-103,-38,-6,-25,27,-36,14,8,-43,-48,-40,-25,17,36,-23,-50,45,-23,18,-21,13, 
  /* [453][0][][] */ 60,63,53,10,40,9,-31,11,9,-48,-127,13,-45,-13,-13,-59,23,-56,35,-31,-45,-76,15,60,-17,60,-18,-51,-34,-21,-11,-36, 
  /* [454][0][][] */ 31,-23,-70,19,-39,76,7,84,-44,6,-73,39,-40,16,16,-43,-13,-53,75,44,-34,127,13,-60,89,-44,-7,-47,-40,22,48,-5, 
  /* [455][0][][] */ -78,107,-4,41,78,22,-43,-30,18,55,42,-40,33,0,-18,38,-79,80,-33,16,29,-25,-67,-42,-104,127,-9,60,9,41,-67,86, 
  /* [456][0][][] */ -30,63,-37,-10,32,-75,22,-44,50,53,-4,127,-37,-5,-29,41,53,-27,-90,-31,67,-32,12,-24,3,48,5,9,9,-66,21,39, 
  /* [457][0][][] */ -44,-62,73,1,34,-27,-37,23,17,-3,13,39,-65,44,-6,40,127,-20,36,-18,25,-103,35,-82,-27,19,-37,15,-23,-56,-29,-20, 
  /* [458][0][][] */ 11,11,28,-6,-10,13,-22,35,127,14,-21,78,-47,-22,-39,75,7,-31,0,54,-35,-93,56,-12,-6,33,-9,28,2,-42,26,31, 
  /* [459][0][][] */ -65,-30,-88,-100,-54,-82,46,-6,-53,108,-23,-55,105,-14,-34,39,19,29,-5,77,127,6,5,51,-35,90,30,51,-17,83,-41,41, 
  /* [460][0][][] */ -29,-81,78,5,90,-2,-102,112,127,107,-66,26,-30,-32,55,6,-12,-42,-4,54,-9,-83,-53,9,-64,11,4,55,-53,-41,26,25, 
  /* [461][0][][] */ -75,-70,100,-39,-20,96,-127,56,-36,60,13,-12,-81,-102,-51,-58,27,-12,6,-85,79,42,25,-23,86,33,-37,11,8,74,75,17, 
  /* [462][0][][] */ -63,67,-46,-33,82,-28,-46,-52,-51,17,25,-127,34,26,-38,-64,-10,21,68,-3,-24,93,25,-37,68,-24,-107,0,-24,-39,-81,-28, 
  /* [463][0][][] */ 60,-59,-71,9,-127,11,-91,87,100,-66,-17,-104,31,11,88,48,-15,-3,1,-39,-27,-10,30,12,-49,-20,-7,-41,-103,1,-41,-21, 
  /* [464][0][][] */ 84,-100,-8,-36,2,25,-59,127,7,30,-51,3,-14,-21,42,-4,9,-33,24,-46,18,9,88,15,-50,4,51,-1,-30,-39,30,-37, 
  /* [465][0][][] */ -16,-17,43,48,-115,-34,70,18,32,127,38,19,119,32,-22,-98,-21,113,8,44,37,19,-100,2,12,79,72,-45,79,-69,-33,20, 
  /* [466][0][][] */ -79,-87,-24,-55,32,-23,-17,-48,97,1,19,-46,-2,10,-2,9,34,-5,15,40,81,-43,-44,12,-21,36,36,1,-24,-44,-33,-127, 
  /* [467][0][][] */ 63,35,-36,-96,79,-73,-1,57,-127,-100,-77,14,44,38,3,-73,-50,-55,-36,6,-52,-6,115,-30,-35,-44,23,-66,33,74,-27,11, 
  /* [468][0][][] */ 56,4,29,-22,-19,-82,-19,6,6,-46,35,91,113,36,13,22,-62,-61,-127,3,5,19,-25,29,24,18,50,-19,-28,-57,30,35, 
  /* [469][0][][] */ -127,-39,99,-62,-50,2,-69,-14,33,-12,13,103,-18,59,41,-7,-17,-3,1,-58,-60,40,27,-6,-23,-11,0,-44,38,-26,-56,-58, 
  /* [470][0][][] */ 70,38,52,-67,-15,63,-119,-48,-20,13,-3,55,-38,22,-49,-27,16,-127,27,15,43,-10,-2,-23,-39,29,9,30,-61,35,53,1, 
  /* [471][0][][] */ -6,-127,26,26,1,2,96,-39,-51,23,110,-64,-2,-26,56,17,-100,-63,65,-1,-57,30,33,11,-24,19,-43,13,-63,-42,1,-28, 
  /* [472][0][][] */ -8,17,57,3,32,31,12,-18,28,-38,-55,-19,3,-71,-68,-9,83,-10,81,7,22,-20,-21,-16,70,127,26,-49,-15,-13,41,75, 
  /* [473][0][][] */ 71,31,56,17,37,-44,5,7,-44,-127,-22,-9,5,-32,-75,-33,-36,103,50,111,26,-9,16,16,23,-82,-78,-14,2,22,68,98, 
  /* [474][0][][] */ 5,-51,1,-13,-1,0,19,-36,-34,21,-30,69,-24,-25,91,-101,3,-40,-63,78,37,12,-10,-20,127,41,-67,-64,-42,25,39,16, 
  /* [475][0][][] */ -62,-31,-56,-57,-101,93,-62,-7,1,1,56,29,-73,16,-127,52,107,-31,-21,26,-59,-60,-29,-38,15,27,15,-39,29,12,17,39, 
  /* [476][0][][] */ -78,11,41,-5,26,-19,-49,70,-57,37,-19,65,8,-26,16,33,-5,-89,9,-31,-59,-127,-23,-61,11,57,111,-84,-84,89,-46,-3, 
  /* [477][0][][] */ -70,-15,28,-21,-22,-52,36,-32,-93,71,44,50,-20,107,-28,-42,-47,-97,-31,-34,57,45,-8,37,56,18,-62,17,-111,127,37,-69, 
  /* [478][0][][] */ -80,-1,23,-93,-18,52,49,33,18,3,-97,15,-40,-8,29,5,-50,-41,-72,127,56,13,33,75,-18,88,-31,13,1,77,-9,-74, 
  /* [479][0][][] */ 40,36,16,31,62,-2,36,15,-5,23,-25,38,28,-14,23,-16,127,18,33,-77,35,-52,-24,-8,5,31,-62,-15,19,-14,31,-23, 
  /* [480][0][][] */ 65,-9,-4,13,-60,-9,-59,-19,54,-28,13,-70,35,81,-127,30,1,23,-17,-7,-52,30,-53,26,-55,54,-80,16,81,38,1,-92, 
  /* [481][0][][] */ 9,13,-24,41,-41,8,-17,127,4,50,27,-14,34,-17,17,-66,-38,11,-62,-4,-12,23,-3,9,11,-109,-42,-23,-2,36,-17,-2, 
  /* [482][0][][] */ -29,-53,52,15,35,22,56,-33,-4,-56,-11,91,67,82,-16,-10,-41,-36,-71,36,101,21,58,0,-127,-25,14,73,-3,51,-2,-49, 
  /* [483][0][][] */ -127,-10,115,59,90,8,9,-67,72,-66,-77,26,32,121,-3,22,63,54,45,-120,57,-26,93,8,66,-56,-121,37,-30,-107,51,30, 
  /* [484][0][][] */ -33,-28,71,-3,-11,77,-52,-2,-78,-37,-31,38,-1,-7,-16,-127,-84,-31,66,-26,-73,-33,-26,2,-41,8,-51,54,-73,-61,52,-33, 
  /* [485][0][][] */ 13,-11,-13,-63,-71,73,21,52,7,21,66,51,-47,3,27,58,19,-62,59,36,-24,4,55,71,127,-11,94,-37,-63,53,79,59, 
  /* [486][0][][] */ 57,11,-102,30,73,-68,-127,-15,-12,9,-55,80,-7,31,-82,60,90,-12,3,-9,-55,32,93,-36,20,-88,-2,-13,-114,11,111,0, 
  /* [487][0][][] */ -34,-56,-7,33,50,34,-93,-46,-26,19,-36,29,17,-13,36,-17,11,-9,-83,-99,77,-56,-59,0,-127,69,8,-41,66,19,24,27, 
  /* [488][0][][] */ -37,2,32,37,-21,61,-3,121,90,65,66,100,-95,60,-10,127,-22,-82,92,-3,-66,16,50,14,12,36,73,-3,-42,-54,-5,-8, 
  /* [489][0][][] */ 40,127,63,13,-43,55,36,56,-10,8,-7,21,93,-43,-17,11,-17,9,-2,66,-8,86,53,18,78,-5,79,-76,-17,-37,-11,34, 
  /* [490][0][][] */ -9,-68,-24,14,110,6,6,-39,-47,-60,12,-35,39,-37,-19,-29,6,2,24,7,-37,-41,-27,-96,34,-46,-127,-76,-40,-45,-35,77, 
  /* [491][0][][] */ 14,11,-4,-85,-13,-77,-39,13,-55,5,-127,-3,67,-43,-25,-53,-12,-84,9,56,-41,19,-31,-13,-9,51,-18,31,59,-81,-66,26, 
  /* [492][0][][] */ 68,-48,1,-92,-3,83,-9,-44,-32,4,59,4,111,5,77,44,-127,84,-4,46,89,86,44,4,-78,8,101,-19,14,-112,-81,6, 
  /* [493][0][][] */ -40,20,21,127,12,60,-45,8,24,-76,-18,-32,14,-43,19,-37,-26,-43,-38,-19,-42,17,-30,-35,42,-108,-53,67,28,-29,65,-7, 
  /* [494][0][][] */ -69,-10,6,67,-3,59,36,51,7,59,-2,21,30,-50,-127,40,16,15,-77,-75,-14,-58,56,-51,-9,-82,-42,-21,-16,-61,-57,-56, 
  /* [495][0][][] */ -41,4,79,20,30,1,-96,31,-31,75,-51,127,49,-34,-36,43,2,68,-13,17,10,1,49,13,-90,2,64,14,-114,-22,94,-23, 
  /* [496][0][][] */ 34,6,-114,-104,105,49,3,-103,45,-50,53,-24,-32,-9,64,-52,-88,-54,-12,-53,17,-16,100,-14,103,31,121,120,127,73,34,7, 
  /* [497][0][][] */ 3,12,-69,32,41,-127,29,-40,-47,19,-67,36,-112,-102,10,61,13,-57,8,-12,33,29,-16,20,-96,-30,-20,-11,-3,37,29,-4, 
  /* [498][0][][] */ -44,31,-6,28,101,56,6,105,-16,0,-124,20,-97,127,-4,-6,66,32,-32,38,-17,16,55,79,61,104,-119,-32,14,-84,-20,-27, 
  /* [499][0][][] */ -74,-18,-95,-64,70,-3,-61,63,-51,52,-84,-127,-14,-57,115,-122,-10,40,9,-13,43,18,-113,-67,-41,-47,-69,9,-34,-78,87,-12, 
  /* [500][0][][] */ -66,127,12,-120,-57,-64,-78,51,-89,-102,17,60,75,76,-86,-17,-111,16,-105,-87,-28,-9,74,-17,21,-77,4,90,-79,-89,-11,45, 
  /* [501][0][][] */ -16,-50,-68,54,-31,-33,-43,12,-19,-118,-27,127,26,7,-34,73,41,12,61,-50,14,-42,74,35,65,71,-70,-51,-6,41,-15,-37, 
  /* [502][0][][] */ 61,57,-38,12,-53,-6,74,56,-92,-14,-9,95,-27,34,-12,-88,-15,-30,65,47,-8,43,-32,24,-18,118,-64,-24,-10,-127,-50,12, 
  /* [503][0][][] */ -21,-39,-17,-40,-35,40,127,-2,78,40,-14,-6,11,-60,-31,-9,-28,-60,-4,13,69,-6,3,22,23,42,-80,-18,22,4,13,5, 
  /* [504][0][][] */ 8,-35,13,-30,59,71,12,25,2,-16,-34,12,4,-31,6,72,-39,-73,-127,65,89,80,13,6,8,11,-37,3,1,47,10,-11, 
  /* [505][0][][] */ 35,-36,68,35,-57,41,-127,46,37,77,-33,-114,-13,-63,-110,-60,-47,4,77,-25,8,-50,-65,22,107,15,-9,-60,-121,48,1,93, 
  /* [506][0][][] */ -29,37,22,-72,-68,-71,-34,-111,35,68,-69,74,37,-3,-6,104,21,-66,-90,-70,57,-100,-127,-21,32,-120,38,-8,32,40,44,66, 
  /* [507][0][][] */ -57,-29,-1,-1,3,-3,-62,93,-68,23,127,21,-3,12,-23,-15,6,-40,48,-6,-35,-27,-59,-38,41,-10,97,54,-25,21,29,27, 
  /* [508][0][][] */ 13,-26,4,-45,-8,-36,28,-41,16,-2,-75,19,3,-37,14,-2,21,19,90,-127,-18,-39,-17,23,-1,-83,-12,30,8,-2,-22,-25, 
  /* [509][0][][] */ 31,27,57,-23,52,-38,-78,-25,-49,9,32,9,-4,-20,-127,-27,38,-20,44,-5,62,-40,55,-106,74,97,-48,-33,-38,23,-75,-10, 
  /* [510][0][][] */ -85,105,-53,-60,-3,-6,36,64,-3,-18,58,-6,-38,-14,-45,12,-24,-35,-24,98,-50,31,58,-24,-16,82,-11,127,20,28,39,120, 
  /* [511][0][][] */ -1,-127,42,-30,27,-16,39,16,31,-74,-27,50,47,-11,4,-36,8,-81,38,3,-26,48,-53,0,-50,-6,-25,34,33,-63,103,28, 
  /* [512][0][][] */ -127,-27,-3,-51,35,73,-88,39,-21,-79,117,-102,52,77,-22,28,66,6,14,-16,-34,10,-43,-17,-31,11,-59,-43,21,-14,29,17, 
  /* [513][0][][] */ -13,-10,25,92,14,54,53,-16,24,-76,-40,40,33,-83,54,26,66,-33,-103,75,127,-24,-10,74,16,124,32,-88,-58,47,108,18, 
  /* [514][0][][] */ 58,-27,77,-56,38,-25,5,55,38,-69,31,47,104,-38,-40,-6,41,-39,21,-63,-8,-127,-89,14,-16,56,-53,-2,46,103,-58,18, 
  /* [515][0][][] */ -6,11,-35,14,-70,5,-47,-18,61,66,51,119,86,-1,100,55,-11,-14,-59,127,-19,-32,-71,1,-16,-7,-7,-58,-20,49,-119,-65, 
  /* [516][0][][] */ 56,-61,13,97,36,45,-51,14,-74,51,59,-54,57,7,-34,-22,46,-108,-12,1,52,6,-126,-127,46,-53,15,-5,81,22,-105,-36, 
  /* [517][0][][] */ 77,-18,-92,2,-47,-21,18,85,5,-52,17,-68,66,-20,-127,69,-27,-64,-96,-92,10,14,23,-82,27,-17,96,48,-6,-68,76,-57, 
  /* [518][0][][] */ -107,25,-33,35,-11,3,31,44,-85,18,46,6,45,-20,34,-28,122,43,-19,72,-23,-35,-79,-55,16,127,-95,-80,-80,-64,-11,-19, 
  /* [519][0][][] */ -14,-18,-16,70,14,-69,91,23,-19,-16,55,26,-21,-85,18,13,18,-45,28,15,6,-119,-2,-59,-19,-59,-41,-5,-31,-61,-77,-127, 
  /* [520][0][][] */ -95,-127,35,-89,11,-4,-46,-18,-23,-44,3,-60,16,-99,45,34,19,-23,-88,-14,-32,-44,-4,65,-40,-6,-44,23,-38,21,-32,23, 
  /* [521][0][][] */ 8,42,51,29,47,15,-12,40,-17,18,-42,21,-32,-68,15,32,-44,-64,27,35,-33,-1,-16,-64,31,-127,3,39,27,-24,-65,-9, 
  /* [522][0][][] */ 48,17,97,-3,-66,71,42,-97,-2,-31,-94,127,56,55,-1,28,31,-10,-24,-43,12,-27,-6,-31,-32,-56,-32,35,84,-70,71,32, 
  /* [523][0][][] */ 11,53,-41,-49,35,45,-42,47,21,46,-4,-14,-36,16,-104,28,127,-20,-18,26,-9,28,-29,-54,-27,-27,3,38,0,25,-37,-11, 
  /* [524][0][][] */ 112,-90,21,15,38,-22,-31,-35,25,-32,-96,-11,84,68,-70,54,30,-56,-55,33,21,37,127,-44,11,-67,-15,-3,33,-112,4,27, 
  /* [525][0][][] */ 10,-17,66,-68,-29,18,12,54,30,-14,51,-20,18,44,-106,-95,39,-55,-127,94,17,-103,-23,31,-6,65,18,69,-10,-23,1,23, 
  /* [526][0][][] */ -71,-54,-66,-61,36,-82,76,-97,-28,-46,70,127,-66,16,26,47,71,-27,0,69,23,-52,-88,-7,103,-48,29,-18,-18,-13,59,64, 
  /* [527][0][][] */ 27,19,-64,-93,46,-39,-33,1,-18,38,-17,21,57,32,6,28,8,-48,-5,1,11,127,100,-10,-29,11,53,-31,-16,51,-47,46, 
  /* [528][0][][] */ -4,-21,56,-98,-58,54,-100,44,-83,-78,96,71,-88,-19,-113,-5,-11,41,-90,-127,-44,13,-97,93,48,-91,87,50,117,71,-25,-75, 
  /* [529][0][][] */ 60,-7,92,-61,-6,18,-16,-65,72,31,65,12,-1,40,14,3,47,0,-33,25,-100,-127,-28,-44,-73,15,17,-15,27,40,21,-74, 
  /* [530][0][][] */ 4,-18,-33,27,60,-59,-47,62,53,-127,-25,37,-23,55,38,29,-10,-20,-13,8,-20,-19,-70,5,28,-37,-46,-29,-73,-11,94,96, 
  /* [531][0][][] */ 89,-24,67,-127,-10,97,63,-10,-81,107,-45,88,54,106,60,-69,-25,-116,19,-31,49,68,-70,-20,53,-93,-7,7,55,81,-123,-33, 
  /* [532][0][][] */ -59,-50,-2,-65,19,0,67,-27,-36,-8,-65,30,61,-14,78,-72,-20,-127,0,-12,47,-15,-54,83,-34,117,-107,-31,-87,59,-39,30, 
  /* [533][0][][] */ 7,9,-89,-10,48,22,10,-4,-1,69,57,64,-49,-50,97,-46,-89,-26,-53,127,-34,4,-35,-70,39,14,-4,-17,23,-48,40,29, 
  /* [534][0][][] */ 119,-79,-121,-12,52,-26,39,63,-74,-27,39,-25,92,-81,74,2,-17,-110,78,-40,31,76,73,-127,-64,23,52,-60,55,69,16,49, 
  /* [535][0][][] */ 19,-6,14,25,26,-47,-15,21,22,85,-14,-11,115,-14,-49,68,-26,52,0,5,92,-18,-73,-127,-55,-64,-76,-53,67,5,72,-83, 
  /* [536][0][][] */ 19,30,-13,63,8,124,55,-34,-99,119,26,-28,19,62,-13,-127,-1,13,-40,44,113,34,-23,-16,98,-30,-2,-30,-26,-24,-75,-31, 
  /* [537][0][][] */ -18,-59,-4,-11,16,-35,34,-61,19,-78,55,-10,44,-90,-38,-105,-64,-127,34,85,101,-18,26,72,-67,-61,55,73,28,20,2,4, 
  /* [538][0][][] */ 6,35,30,31,63,-82,-46,15,-14,-127,101,-17,-37,3,44,51,51,18,35,-59,54,17,-6,80,-59,5,24,2,9,10,24,-1, 
  /* [539][0][][] */ -51,-11,-30,28,14,-32,-89,-6,-106,5,49,-37,-33,17,-67,-44,50,69,6,42,-17,-48,-21,96,43,-64,-58,42,-18,127,88,7, 
  /* [540][0][][] */ -6,15,24,120,-21,-33,-127,21,-54,27,62,-18,-30,-24,-11,-61,17,-52,53,14,-15,9,-22,29,-3,51,-119,40,-15,-114,4,37, 
  /* [541][0][][] */ 29,-54,98,14,-47,-31,4,-74,-58,-19,-87,-1,72,-8,-16,-52,-12,41,-25,-10,82,127,71,106,15,-7,-51,48,35,-31,68,3, 
  /* [542][0][][] */ -45,-18,114,-108,92,-24,-29,17,9,17,127,40,-80,-86,-31,37,-17,-63,15,-14,16,24,36,-29,1,80,-2,40,-53,-14,35,-14, 
  /* [543][0][][] */ 39,13,-91,2,-74,-24,-43,18,58,-34,73,1,57,-24,44,-1,90,-21,-19,34,72,39,-76,17,3,-107,34,23,127,35,59,-5, 
  /* [544][0][][] */ -15,18,0,-8,-127,76,19,35,-38,-45,-8,-26,-12,53,73,1,9,-58,91,40,-66,74,66,-20,-14,12,-5,-4,28,57,-28,-15, 
  /* [545][0][][] */ -56,-6,-63,-104,-39,-15,-24,75,77,-6,15,-48,-35,-3,59,-23,47,76,-110,-22,-18,76,-74,-41,-84,5,-127,-19,13,27,70,125, 
  /* [546][0][][] */ -12,-121,1,57,-31,85,70,18,44,-76,-127,77,-4,-70,-16,-44,100,-78,18,-46,-71,47,103,8,-57,-28,68,-123,-49,103,-64,0, 
  /* [547][0][][] */ -91,-10,-3,-104,-54,53,63,90,-16,-39,50,-33,29,-40,85,58,51,-49,-22,-127,16,64,50,-18,44,-71,-83,34,5,71,-11,-10, 
  /* [548][0][][] */ 96,-125,-32,-31,93,-69,-3,60,127,21,-47,18,72,-96,-49,-49,-8,30,-117,19,-34,-40,-21,-119,93,40,16,-21,31,52,26,-34, 
  /* [549][0][][] */ 6,-57,-12,-1,45,5,77,-67,-37,127,-80,70,29,20,69,35,27,-5,-45,21,-26,40,-47,-28,-37,14,39,-8,15,17,95,22, 
  /* [550][0][][] */ 101,-25,-8,-127,16,57,-72,-37,-5,3,26,-32,30,-28,-97,-13,22,-13,-5,41,-12,68,-55,-105,13,35,-110,-27,102,43,65,-50, 
  /* [551][0][][] */ -74,51,-43,29,30,-14,-30,-127,-1,-46,-45,47,55,84,-56,-107,35,77,-20,-16,-56,-42,-33,6,-98,67,-72,-3,122,57,-50,-54, 
  /* [552][0][][] */ -38,-83,45,18,55,-99,-14,11,-48,39,13,94,14,100,-77,23,48,-37,-127,93,-47,5,6,-43,8,27,-48,5,50,45,-8,25, 
  /* [553][0][][] */ 12,12,-45,8,-31,-112,6,36,-33,-127,29,-3,0,-81,-23,89,6,20,-25,41,45,75,80,-25,28,-15,12,73,-94,44,12,-49, 
  /* [554][0][][] */ 58,-7,8,-20,13,9,50,-16,-43,14,-36,-38,40,-25,-4,101,-127,-56,6,-47,-85,36,-22,-24,21,-65,79,-34,-16,17,-21,60, 
  /* [555][0][][] */ 27,11,-1,-36,-71,-24,56,7,61,-49,-3,-21,17,-98,-12,-23,48,-31,-40,-35,6,-20,38,45,-27,-61,9,16,-8,99,127,-24, 
  /* [556][0][][] */ -40,-32,-91,68,41,70,-87,15,-38,-73,45,127,2,21,-22,81,25,3,72,119,-19,-48,-66,35,-44,-54,-18,5,117,2,20,-36, 
  /* [557][0][][] */ -36,-21,-70,66,71,-39,-4,13,-30,12,-36,11,-11,-127,-49,41,-37,50,35,27,32,13,37,-49,-51,72,32,59,41,37,-111,47, 
  /* [558][0][][] */ 15,56,-81,18,-72,-35,32,127,-81,-21,21,-9,-65,34,9,-40,-54,34,116,-33,42,-75,-68,70,37,-55,63,29,17,-19,94,70, 
  /* [559][0][][] */ -109,127,99,-37,77,74,-25,111,3,76,54,16,-63,-34,2,69,27,-37,62,-122,4,-12,-72,44,22,45,12,79,13,119,-54,36, 
  /* [560][0][][] */ -46,33,1,0,-11,33,22,8,12,-81,117,94,-35,-25,95,-58,0,127,55,41,58,42,52,103,33,69,-15,-81,12,21,22,-108, 
  /* [561][0][][] */ -75,78,-64,-26,127,-29,-47,-54,116,37,-62,-1,-20,54,-89,19,12,-1,-61,93,-27,43,41,-47,2,-2,40,29,53,-97,-23,15, 
  /* [562][0][][] */ -127,-81,55,-35,27,78,47,-52,-55,5,22,36,-12,16,25,-93,37,-54,-90,-3,70,13,-31,88,-2,-59,-47,-26,-12,49,54,68, 
  /* [563][0][][] */ -54,24,-85,7,-8,22,-9,-31,43,-3,26,27,-30,-52,34,-26,-25,-49,-97,-127,40,64,15,35,-16,12,14,41,72,14,41,9, 
  /* [564][0][][] */ -103,14,-36,-45,-37,-48,89,-15,-64,-2,-17,20,16,-28,49,98,-46,-41,8,-13,1,1,2,-81,-35,-48,-2,18,14,-18,-127,91, 
  /* [565][0][][] */ 18,-50,14,-5,76,3,-31,2,37,44,34,-7,-10,-71,26,35,-31,-127,-11,-20,28,10,30,17,39,28,63,43,47,8,-9,42, 
  /* [566][0][][] */ -18,6,-62,-52,-30,-79,28,71,97,28,22,-27,49,90,31,108,-36,23,-28,87,34,-54,-73,32,127,1,-3,-42,120,93,-33,38, 
  /* [567][0][][] */ -96,-19,-92,44,-127,-49,-79,-110,-69,63,109,-98,-12,-30,-57,-25,-64,-107,-69,27,36,-83,6,17,-113,-42,91,-38,86,9,-68,67, 
  /* [568][0][][] */ 6,2,-6,-17,-38,-127,-8,88,77,64,-9,-9,-46,81,-7,29,27,-12,-49,-54,67,55,115,-76,-76,90,-58,73,18,67,-87,-28, 
  /* [569][0][][] */ -19,37,20,19,57,-43,-115,-54,66,-127,54,-72,14,6,-32,-42,62,1,-57,92,-41,-53,7,62,18,-13,-82,-101,14,-53,-15,-49, 
  /* [570][0][][] */ 75,-1,-4,-17,29,-16,27,49,-82,5,-120,-23,-80,52,-18,-21,0,16,-68,97,32,7,-68,26,-9,-27,-52,45,-127,25,95,18, 
  /* [571][0][][] */ 47,39,24,-47,113,-76,-91,127,-35,-3,-28,-74,-88,6,18,41,51,-85,-54,123,-17,-21,7,34,47,-43,20,-51,-75,-4,-114,40, 
  /* [572][0][][] */ -127,-93,30,-17,69,62,-33,5,18,-28,54,-68,23,85,-59,28,-24,-13,-34,47,64,-64,-107,-50,-105,-57,-2,28,-57,-40,-64,95, 
  /* [573][0][][] */ 47,-27,39,-87,-12,44,34,-7,-24,25,74,-85,56,52,21,-6,-43,-62,-54,-16,30,55,-27,6,-127,20,38,-105,106,-89,39,35, 
  /* [574][0][][] */ -71,-26,25,61,54,-107,66,-1,-85,-40,34,20,-75,-20,-12,-38,37,12,-101,-60,-95,-111,-70,-82,68,-127,-44,-9,107,-13,109,55, 
  /* [575][0][][] */ -62,56,3,12,-17,51,-38,86,-23,-50,47,24,-15,46,-18,13,39,64,-42,-100,-49,-33,127,-58,-24,0,-16,-66,-13,-15,-43,10, 
  /* [576][0][][] */ 40,-38,26,4,24,9,-6,-109,47,-3,13,-62,49,39,31,-11,-127,-18,7,51,-54,-61,19,38,67,108,-30,-37,20,-84,-6,113, 
  /* [577][0][][] */ -24,-30,-15,-70,-45,-51,91,-18,-127,-6,68,71,94,32,21,-29,33,68,21,122,-58,-16,24,40,-76,-51,-23,71,15,-19,-21,-11, 
  /* [578][0][][] */ -10,-33,60,83,14,31,-20,-20,127,18,6,15,57,8,-8,-54,8,-26,12,46,0,-14,34,-50,41,-65,-6,-85,-62,-36,68,-65, 
  /* [579][0][][] */ -28,-5,-20,13,54,6,49,81,-48,-59,-56,64,-97,19,2,-24,94,86,48,35,36,0,15,29,-8,0,99,30,-65,24,15,127, 
  /* [580][0][][] */ -14,45,-127,15,-38,15,-6,-9,-32,11,69,-38,-52,-47,15,-118,57,-2,70,24,26,-42,-56,-18,29,-2,30,-43,-43,88,24,78, 
  /* [581][0][][] */ 14,-52,-6,43,-30,-25,-54,-21,87,-9,-30,-13,21,64,-47,58,33,-40,-52,-33,-27,-50,3,0,-127,-41,15,9,38,-85,-30,-14, 
  /* [582][0][][] */ -30,23,16,-33,51,-29,-54,41,-77,-65,-33,-47,77,24,14,-76,-63,69,-7,62,39,127,87,-54,62,-67,-72,-12,-8,2,-8,-60, 
  /* [583][0][][] */ -121,-19,55,-18,105,5,87,44,50,-11,68,-15,-105,-64,2,26,65,41,39,-28,38,10,104,28,-7,-25,-83,70,-127,-27,-8,-36, 
  /* [584][0][][] */ 22,-55,1,4,5,-26,23,-6,-49,97,-2,3,-127,-14,-56,44,-14,-25,11,-55,-45,16,-48,-2,27,-7,-1,7,-15,30,23,17, 
  /* [585][0][][] */ 3,98,-43,9,-21,-26,20,35,8,54,5,-30,-101,-8,127,-18,104,-99,-89,49,-4,-33,6,25,72,65,-70,74,75,8,-3,99, 
  /* [586][0][][] */ -52,15,27,-44,87,14,-28,-47,92,-51,-21,-25,127,17,-1,100,-11,17,-90,-50,-87,-75,-121,-59,-4,-10,-19,14,4,38,-23,52, 
  /* [587][0][][] */ 45,-37,-31,4,-72,24,33,45,2,36,-123,24,39,-29,-2,16,-57,-37,-2,57,29,56,25,-19,11,27,23,-42,33,-32,54,-127, 
  /* [588][0][][] */ 1,72,-53,-127,55,91,-60,61,-79,63,-16,-7,35,51,-14,24,-28,80,-62,36,-6,1,24,-48,-81,-72,-23,1,-70,78,-66,38, 
  /* [589][0][][] */ -58,123,47,-40,99,-42,21,-127,55,39,27,34,29,-98,29,-5,47,31,-29,95,31,-66,-18,-10,-17,90,31,12,2,-21,-31,62, 
  /* [590][0][][] */ -17,-80,-22,-85,63,-85,31,49,14,14,13,63,9,20,73,21,-127,-30,-34,-107,-45,22,25,-79,109,-119,8,52,-47,-33,87,-56, 
  /* [591][0][][] */ 54,-55,-15,-86,66,-3,-77,-36,-10,24,77,9,-48,27,37,-42,-39,-24,29,-38,-123,43,69,-17,-127,-49,-80,49,39,93,-44,21, 
  /* [592][0][][] */ 106,-9,-23,-116,60,-103,-127,90,60,79,-6,-25,-6,70,-7,53,-28,-13,-26,-14,-19,-45,-61,-17,4,75,25,-23,-21,23,-47,-43, 
  /* [593][0][][] */ -45,-36,-124,16,16,53,51,-38,-37,-23,-63,-127,-57,-22,-74,15,17,-57,20,22,-43,23,-11,114,-17,9,19,16,31,-91,13,18, 
  /* [594][0][][] */ -38,-74,48,-27,104,-90,-13,-114,31,106,36,-65,41,6,-117,-29,25,-41,-19,10,-127,-24,90,19,-10,66,68,57,36,85,-31,59, 
  /* [595][0][][] */ 46,-14,8,-84,28,-43,-32,65,21,22,7,-4,-88,-78,-27,18,34,0,14,3,-127,-1,68,-7,9,-6,1,-14,-95,-21,-50,-122, 
  /* [596][0][][] */ -60,45,54,-36,20,-17,-37,112,75,28,24,-18,78,-84,-101,76,-30,-53,-20,-6,31,7,-64,-76,125,49,-89,-57,2,94,-30,127, 
  /* [597][0][][] */ 7,-26,24,102,3,-12,-56,-9,71,48,18,-9,-95,-98,24,44,-29,-82,-64,3,-70,45,8,79,15,-7,55,-127,42,124,12,-101, 
  /* [598][0][][] */ 106,77,-127,-40,-1,31,-37,-95,27,-42,-109,-53,-5,-30,58,7,-36,37,28,-25,41,-21,2,23,66,9,-83,15,9,3,42,77, 
  /* [599][0][][] */ 10,-31,-33,-37,-28,-70,-12,23,-54,-50,-13,-40,114,-1,0,13,114,-13,32,-127,-53,-10,67,-14,19,-126,35,-37,-55,90,-45,48, 
  /* [600][0][][] */ 4,-35,47,-10,-120,7,10,16,8,38,-59,-33,-60,5,64,-127,-110,19,-63,11,-106,-40,12,10,-28,-18,-71,101,20,37,40,13, 
  /* [601][0][][] */ -28,8,-84,0,-37,34,49,127,-47,-39,-18,-15,30,26,-21,3,-4,-61,-48,20,-53,-38,11,29,-44,-28,-56,41,21,-27,-14,59, 
  /* [602][0][][] */ -110,-13,-46,2,15,-79,40,-5,-47,-127,-27,-8,67,-21,-20,38,-12,60,-18,-126,90,3,-117,0,-20,-46,5,28,-44,49,2,3, 
  /* [603][0][][] */ -47,73,-35,-59,-55,-43,16,84,-18,27,29,112,-32,-26,-127,-47,61,-6,72,-41,8,-52,43,-9,15,-92,82,4,17,47,42,-3, 
  /* [604][0][][] */ -24,-9,17,46,48,-9,-62,14,16,127,-53,-102,-17,47,8,-20,-46,69,-42,87,-30,-38,-35,-30,-25,-3,-107,49,9,-48,-7,3, 
  /* [605][0][][] */ -2,120,37,-29,-44,79,95,27,-125,-79,-61,7,-9,126,127,-55,17,20,-68,79,56,-18,-4,-5,95,24,46,-34,63,116,29,63, 
  /* [606][0][][] */ -25,-21,-27,46,-53,-65,12,62,-12,2,-5,61,24,-36,-8,30,-16,77,86,102,-127,-22,-25,-38,-14,-28,12,-97,-5,28,45,-20, 
  /* [607][0][][] */ -71,50,75,64,66,-60,8,-9,38,33,-61,-102,-44,-63,-11,-50,21,59,-34,79,127,-29,-9,31,-42,-31,103,63,-82,-109,38,4, 
  /* [608][0][][] */ 40,50,-127,5,-2,49,16,16,-59,2,-24,55,38,68,75,-42,80,19,17,-58,111,-69,27,-25,11,-50,-40,17,-9,72,-56,32, 
  /* [609][0][][] */ 8,27,30,-127,-22,-9,-99,-8,-6,-14,-102,18,-43,-29,23,43,-60,-22,-13,1,10,-49,31,0,8,41,88,-22,114,-2,-48,21, 
  /* [610][0][][] */ 26,7,-51,-99,20,31,-50,3,85,-127,40,75,108,-2,54,-4,46,-2,21,-95,38,10,-35,-2,40,6,28,-53,-54,-31,-60,-46, 
  /* [611][0][][] */ -5,14,12,-99,41,38,2,-17,-8,7,-22,-54,-3,-19,11,110,-1,-63,-104,-49,66,-127,-9,-35,19,2,-50,-28,-29,85,-17,0, 
  /* [612][0][][] */ -5,53,127,35,-19,-3,13,55,15,-56,-52,27,-5,-93,40,-16,31,-40,35,-19,-60,67,-9,54,6,-1,-19,59,-14,-43,45,26, 
  /* [613][0][][] */ 106,55,51,102,50,36,127,38,-10,-43,7,-63,-33,25,-13,17,72,-1,-16,7,-76,100,-77,61,-50,93,-18,53,-58,31,75,-44, 
  /* [614][0][][] */ -8,-17,-55,61,51,-5,-14,-4,54,2,23,-18,17,7,-63,-26,-53,5,7,17,12,32,4,15,-10,15,53,14,-51,-127,-25,-61, 
  /* [615][0][][] */ 1,110,-88,52,39,-42,14,18,35,-24,-89,1,-22,37,2,-25,-52,99,24,10,101,54,57,39,13,-63,68,127,11,100,100,6, 
  /* [616][0][][] */ -39,27,-39,-126,107,-118,127,78,9,-25,-33,-39,-16,-86,-60,48,77,-47,-4,63,29,34,-72,-44,-62,-26,-10,103,12,26,73,66, 
  /* [617][0][][] */ -89,-111,26,-18,89,16,53,-38,83,-12,103,-104,-107,36,-31,78,-127,-105,91,86,-9,-106,62,-99,89,-37,15,60,83,119,-93,-25, 
  /* [618][0][][] */ -37,-22,127,14,9,33,-47,39,13,-1,93,32,25,85,25,16,18,-19,-15,-13,-44,-49,12,31,32,15,42,-5,-29,-7,-26,45, 
  /* [619][0][][] */ 127,-81,-49,5,29,5,61,32,-1,9,9,55,2,34,53,-45,-19,-109,-55,-64,-34,-4,-56,20,103,-41,-68,-18,18,51,49,54, 
  /* [620][0][][] */ -4,77,4,-4,-104,73,41,-34,-16,45,41,-29,-31,-3,-76,4,127,-80,-110,-26,110,25,-15,1,95,-54,42,-97,22,-44,-56,36, 
  /* [621][0][][] */ 4,1,12,-63,64,45,25,-28,-60,-52,26,-15,-42,0,-4,-49,23,15,31,-12,44,54,-17,19,-29,1,-48,-10,127,19,25,66, 
  /* [622][0][][] */ -8,19,-107,19,-44,-44,-80,-11,-119,58,49,-24,2,15,90,-55,-26,-40,-22,21,52,54,-79,-77,-38,10,-25,-127,12,36,-28,6, 
  /* [623][0][][] */ -48,21,5,69,44,-62,-81,-127,3,2,-48,-64,4,24,10,71,100,46,-16,81,66,-77,-123,4,-80,-50,-52,-46,40,-41,10,13, 
  /* [624][0][][] */ -5,-40,105,-99,-17,-90,-86,11,-80,-24,95,-13,47,-37,0,-56,-85,86,-12,54,-107,38,8,-49,111,55,22,-127,7,-41,-61,-11, 
  /* [625][0][][] */ -127,-16,16,-50,61,-25,20,-15,47,81,25,90,-102,21,-3,-53,-16,-7,-20,-47,-11,69,-34,25,-23,-44,48,51,-30,-27,-93,80, 
  /* [626][0][][] */ 62,22,58,47,-70,89,3,23,-43,70,-39,29,81,-44,-50,-78,-15,100,-26,-58,54,-127,111,-60,63,22,62,39,1,-72,14,18, 
  /* [627][0][][] */ 8,8,14,32,59,74,14,55,-4,-49,27,5,43,-70,32,-44,82,17,-57,-127,4,72,33,58,44,1,7,-32,45,58,-19,-40, 
  /* [628][0][][] */ -19,11,-6,73,-58,-36,-95,26,-38,-59,-32,-6,-50,55,-95,-48,-14,-16,-35,-7,67,21,37,-14,-48,-42,12,-61,44,-47,-44,-127, 
  /* [629][0][][] */ 66,95,-118,65,-17,114,-12,74,127,-36,19,37,-72,60,67,18,91,31,18,54,-14,-26,-38,-24,65,-50,-63,50,64,12,36,-77, 
  /* [630][0][][] */ 100,-28,-93,-61,-65,14,-70,71,-34,123,59,-7,-98,-14,-60,116,-70,-63,16,-119,-26,16,-11,-87,-18,113,21,127,-100,-44,-77,43, 
  /* [631][0][][] */ -35,-65,-14,33,27,37,5,-2,34,39,44,48,-24,-49,28,7,127,74,-11,1,-59,44,-3,-7,7,22,-61,31,-12,-18,25,-43, 
  /* [632][0][][] */ -68,-120,-50,26,43,43,80,23,-4,88,65,68,83,-84,-86,-86,65,27,-93,-14,81,-86,3,-35,-58,24,-59,-82,-88,-28,50,127, 
  /* [633][0][][] */ -47,-47,32,1,51,31,-10,63,-73,38,-13,-55,89,61,-48,-127,-12,-3,11,-60,-14,-35,41,-30,-81,-41,-76,86,6,91,19,50, 
  /* [634][0][][] */ -113,-22,-119,-9,-1,28,-127,95,-42,11,-51,-87,-101,-76,-46,3,-55,-87,-13,-57,-61,-43,35,-91,-1,94,98,76,10,23,-37,98, 
  /* [635][0][][] */ 94,-3,23,-34,2,82,-22,-45,12,51,26,-122,23,-25,-99,71,13,-96,13,-54,13,108,35,23,35,-67,-22,115,-10,127,-77,-5, 
  /* [636][0][][] */ 127,18,46,-67,78,114,16,-116,2,44,-25,-23,-45,8,10,45,12,-15,-87,-8,-11,-28,117,104,63,-26,-42,25,48,104,37,14, 
  /* [637][0][][] */ 0,13,-54,32,-65,37,71,55,26,-39,78,53,79,47,14,-75,-36,-45,-35,19,-38,-41,115,25,-22,107,-29,39,19,127,-100,104, 
  /* [638][0][][] */ 22,-38,25,-80,-2,43,44,-29,35,-123,-54,-41,33,-72,-13,36,104,-60,57,17,-78,44,-40,25,76,-34,-49,-102,29,59,127,92, 
  /* [639][0][][] */ 64,-20,22,62,-20,36,-63,-15,74,3,47,-30,-37,38,27,-78,22,-6,-80,31,3,0,-64,46,53,20,-16,-8,-10,-67,34,127, 
  /* [640][0][][] */ -127,72,62,-92,2,5,1,32,30,-9,94,-37,3,71,9,-84,-47,4,29,79,-85,-77,-20,15,63,-86,-87,40,-19,-50,16,51, 
  /* [641][0][][] */ 21,-45,60,-43,32,-6,12,39,90,118,16,-50,18,-105,4,47,-89,-2,43,31,29,127,37,61,91,48,-17,-13,-61,123,-93,-12, 
  /* [642][0][][] */ -71,3,41,36,20,-44,9,-70,26,-81,91,-63,-113,57,-3,-46,-27,-47,-49,-7,-23,57,125,12,67,117,-117,9,127,27,-69,15, 
  /* [643][0][][] */ -119,22,34,95,100,124,71,54,-10,-1,-37,-82,-4,82,-16,98,62,6,48,8,0,-22,-19,-13,-28,-39,-78,57,-19,-127,-91,-7, 
  /* [644][0][][] */ -72,-52,5,-105,-38,76,46,40,-99,36,-74,2,3,-40,45,68,11,34,-8,5,-22,-59,-11,91,47,73,-74,-48,5,-127,-32,-13, 
  /* [645][0][][] */ -21,-10,-33,9,76,98,-13,73,-31,-43,55,95,31,39,-125,-9,-31,-48,-80,0,-57,-10,56,-65,-75,66,74,22,101,21,50,127, 
  /* [646][0][][] */ -44,-71,-66,24,-46,121,-39,-32,100,77,-50,41,-67,21,-13,-97,-39,-61,-127,62,32,47,-56,-68,31,104,-68,-8,-19,90,16,52, 
  /* [647][0][][] */ -127,107,-62,-56,120,-73,6,-29,-32,88,88,31,35,-17,20,-42,-75,26,15,-20,-29,31,-4,25,36,-13,74,65,-1,34,15,-15, 
  /* [648][0][][] */ -20,-127,68,-68,-21,-19,-1,-59,67,46,5,-50,-52,-34,22,15,2,46,31,-19,25,-28,51,-13,32,91,11,73,-66,-6,89,46, 
  /* [649][0][][] */ 39,82,29,56,-56,33,55,-2,-119,-102,-47,-2,50,-30,-28,-25,40,36,-32,-95,8,13,67,-18,-63,79,15,-27,5,-105,2,127, 
  /* [650][0][][] */ -8,-35,-17,-92,76,46,8,-44,-10,36,-65,-56,94,-50,3,46,-80,40,78,46,-11,127,-9,-44,-42,-23,-75,-22,-12,64,49,-44, 
  /* [651][0][][] */ 0,-41,-1,41,18,-1,28,-65,-127,-73,52,-30,53,44,12,-39,-32,-10,9,-9,0,13,19,-21,80,16,-56,-82,70,45,21,-44, 
  /* [652][0][][] */ -33,35,51,32,5,39,6,27,8,35,95,22,46,-61,5,-46,6,53,-43,7,-61,67,-102,-10,-15,-6,-26,29,127,-4,30,32, 
  /* [653][0][][] */ 69,-63,-82,7,31,99,-6,11,-47,-16,9,-30,-19,4,31,-127,121,-9,-33,-17,84,11,60,-37,17,-44,32,-57,82,-27,78,106, 
  /* [654][0][][] */ 9,-41,49,9,-7,43,46,32,0,11,27,-59,-29,32,-47,31,22,29,38,77,-53,2,26,7,-18,5,-127,-24,14,35,20,63, 
  /* [655][0][][] */ 4,-53,17,89,-4,61,-29,12,-105,-84,-39,-51,-31,29,40,94,-10,5,-28,-27,-30,32,-127,-17,2,-41,-111,-57,21,-39,-116,-71, 
  /* [656][0][][] */ -22,44,-89,58,-110,17,1,15,79,58,-28,-27,-4,15,20,-44,59,27,21,-5,14,33,26,-33,-16,71,-22,33,20,-51,-50,-127, 
  /* [657][0][][] */ -19,-2,86,54,-15,34,-28,-12,93,-55,-20,-66,5,-74,20,46,-1,1,20,127,-15,-67,-45,22,60,79,-9,5,-67,15,-12,84, 
  /* [658][0][][] */ 49,14,46,118,-27,-113,-50,-70,4,8,-1,-67,-30,-11,-73,31,78,43,-19,101,-41,-79,-33,-18,37,-48,97,-68,-127,84,-115,32, 
  /* [659][0][][] */ -14,9,-67,127,70,25,29,70,-17,19,3,52,-27,2,-2,-56,79,18,-23,53,-35,-38,-34,2,0,35,49,25,-29,-16,-26,14, 
  /* [660][0][][] */ 36,37,-35,-106,13,-61,-25,-87,-19,6,59,-29,70,-10,-56,124,14,-6,-58,106,-8,45,5,-127,36,-17,47,38,19,5,-47,-56, 
  /* [661][0][][] */ -8,46,30,-94,38,61,1,-82,34,-13,61,-5,-13,36,40,-36,-89,-104,73,27,56,-32,15,-53,-74,-69,-127,-19,33,-18,-100,71, 
  /* [662][0][][] */ -29,-93,-21,-45,1,-94,45,50,-53,84,-41,37,-12,86,-62,-32,38,75,127,-37,94,-41,85,-77,95,-61,4,25,-20,-15,-16,33, 
  /* [663][0][][] */ -15,127,3,-7,-38,13,-56,23,5,-26,-63,13,-32,-33,-29,21,5,38,47,30,26,-36,-52,-124,14,-44,4,-51,-85,-32,66,-58, 
  /* [664][0][][] */ 63,-16,11,-55,58,79,-70,28,-18,88,-13,-46,123,-33,-43,21,-37,14,42,127,-85,-25,54,15,4,-79,22,21,-31,-1,53,19, 
  /* [665][0][][] */ 13,34,48,-61,-66,-21,27,92,30,-52,1,-127,-24,-5,-9,15,36,11,-53,23,90,47,28,-34,-39,-12,25,1,19,-45,-88,12, 
  /* [666][0][][] */ 99,-5,-24,10,-118,12,-53,-84,-56,-38,64,4,-22,-47,125,40,-33,-28,2,-87,-30,51,18,55,127,-122,-13,-115,-87,-38,69,51, 
  /* [667][0][][] */ 11,82,-3,26,77,24,-17,-14,-26,45,75,-68,-60,60,34,77,121,-31,40,8,-16,12,24,-16,-34,127,-42,-23,-7,-19,46,-120, 
  /* [668][0][][] */ -21,36,4,40,-15,-5,-56,55,-55,-2,47,-38,-29,-43,48,-61,21,18,-45,39,5,88,-23,20,-127,-68,1,-28,20,51,23,-3, 
  /* [669][0][][] */ 8,3,2,8,-17,-17,0,0,-54,3,-127,1,-49,30,24,-4,6,36,14,-22,15,10,27,-7,53,-12,-62,17,-9,28,21,-71, 
  /* [670][0][][] */ 35,-35,101,-19,29,10,-2,51,-57,29,13,15,-77,-127,-92,-22,99,-82,-30,38,95,-48,-51,34,-53,-22,73,7,0,20,46,-18, 
  /* [671][0][][] */ -1,11,82,15,71,-43,30,14,27,-109,39,-87,-5,54,37,84,36,-127,-26,43,86,2,-48,89,-14,-41,-22,-34,24,25,-32,-84, 
  /* [672][0][][] */ -121,30,31,81,5,81,127,80,38,-37,27,-7,-69,-86,9,62,-15,-11,-39,16,-126,15,-72,-102,85,-19,-121,28,-22,-117,12,-33, 
  /* [673][0][][] */ -82,8,27,-22,60,41,-4,-51,-87,-24,52,-42,94,-74,-70,-29,2,-2,-88,-13,-19,27,127,-14,60,18,-42,31,-51,18,-53,56, 
  /* [674][0][][] */ 111,6,82,7,74,-37,107,-44,68,38,-12,5,1,127,10,14,31,6,47,-15,56,19,23,-73,50,11,-18,46,-41,57,76,64, 
  /* [675][0][][] */ -46,-80,49,-36,5,-3,-42,5,8,52,51,-22,-71,-24,-4,0,1,-24,6,-42,23,55,4,127,-30,-64,-94,-75,110,12,-83,-38, 
  /* [676][0][][] */ 76,-42,18,33,57,43,-8,-18,-31,127,18,-43,-62,-2,0,40,-100,50,-29,54,-33,7,21,19,-3,-82,24,13,104,-111,77,-70, 
  /* [677][0][][] */ 41,-18,-125,-52,10,-29,74,-29,-44,-49,100,-34,15,-46,-12,-53,16,-77,-125,-50,4,-19,40,127,-67,-34,-18,8,-32,-30,3,44, 
  /* [678][0][][] */ -9,-44,38,-11,36,39,103,63,7,28,-38,-4,-95,45,17,-34,48,-21,-72,-107,-96,-41,-47,12,-68,29,-10,127,46,-53,50,87, 
  /* [679][0][][] */ 31,-17,91,-1,-34,-37,-23,-55,1,33,-5,3,2,-15,-21,48,-89,-127,22,-43,8,61,-57,29,9,34,-34,20,41,-19,8,-4, 
  /* [680][0][][] */ 3,-58,-21,-46,16,-72,56,-26,1,-24,43,35,27,9,-30,-23,-67,3,-46,8,6,-51,127,48,-11,29,23,-47,-33,72,51,90, 
  /* [681][0][][] */ 59,-15,-18,18,63,32,66,18,-88,16,-37,-2,-55,-38,-34,-61,56,-33,36,-30,19,56,-7,-6,-36,-60,-65,-127,92,-29,-44,-24, 
  /* [682][0][][] */ -45,-41,44,-21,38,14,-25,48,8,53,39,-2,10,15,-127,-12,6,-48,-1,9,7,22,-12,-28,-20,43,-40,27,-32,-21,17,-84, 
  /* [683][0][][] */ -11,27,62,-30,42,-21,-28,23,4,61,-55,72,45,-127,-43,-12,26,-16,-3,-33,33,3,4,-25,-24,-21,-40,-54,51,60,-20,-26, 
  /* [684][0][][] */ 85,-4,-74,-18,-57,-52,-20,52,15,-43,-34,-30,82,-45,-63,49,-78,-86,12,-35,-40,0,-108,47,127,20,-36,-55,-118,4,-99,-4, 
  /* [685][0][][] */ -52,-19,34,54,-88,32,-48,67,-83,18,90,-24,-11,32,19,-57,-33,-73,-7,84,45,-127,-105,9,27,-14,-84,-44,-75,72,-66,39, 
  /* [686][0][][] */ 37,35,-43,-73,-19,-70,-80,-63,-44,14,-69,49,-56,-6,-10,-51,-73,-127,-18,118,111,-68,101,117,13,4,49,-59,86,-16,-10,62, 
  /* [687][0][][] */ 127,108,-1,42,16,60,112,2,30,-92,-116,-52,-30,-76,-49,-68,-6,21,22,68,-24,43,-64,-24,66,-89,-12,25,40,31,-9,45, 
  /* [688][0][][] */ -3,68,19,106,-74,-6,47,72,-107,-59,-53,-8,46,-20,-74,-73,38,-41,-93,35,46,-127,-12,-3,3,-7,-118,34,69,87,75,6, 
  /* [689][0][][] */ -43,19,71,-45,-23,-59,-11,72,-22,-80,28,127,-15,95,38,-4,-38,-4,-10,-18,-83,51,-68,1,-6,-68,124,22,-50,70,-77,-24, 
  /* [690][0][][] */ -43,-14,-127,32,103,-122,10,49,-44,-108,31,47,78,43,16,-11,73,-14,9,-39,80,-104,10,-113,77,-12,5,41,78,-3,-9,7, 
  /* [691][0][][] */ -5,-82,19,-105,63,-45,-85,94,17,21,68,62,47,1,-44,17,-21,-127,-41,88,-8,54,-73,36,-23,-25,70,-77,-40,6,13,10, 
  /* [692][0][][] */ -22,49,73,-13,-57,-28,-64,-89,-39,-47,19,3,127,-31,65,-30,-47,-15,52,115,19,22,19,-63,10,6,-124,-35,-11,11,-8,81, 
  /* [693][0][][] */ -100,69,36,-14,25,51,62,2,35,-3,127,-8,66,9,-50,88,-70,-88,34,7,76,-8,12,83,46,-75,66,-21,41,49,68,-31, 
  /* [694][0][][] */ 81,-53,55,-12,59,-17,48,-41,23,-45,57,11,2,-8,66,17,61,-34,-70,88,-31,-7,-8,30,49,-68,127,83,-9,55,6,-19, 
  /* [695][0][][] */ -28,63,-86,18,-71,24,-6,-127,-66,34,-47,22,0,7,22,-36,-37,23,-85,39,55,67,7,26,-3,30,-59,-71,-53,-33,-77,50, 
  /* [696][0][][] */ 12,9,-127,1,20,-39,7,62,-40,-21,-36,37,62,27,-43,-8,60,-58,-77,20,-54,9,-109,-12,12,56,-60,22,30,38,43,115, 
  /* [697][0][][] */ -27,17,-2,-12,-22,51,-26,65,55,92,-22,-44,-33,-62,-127,11,-33,-21,68,-14,-75,25,-31,-57,-9,-59,17,-50,42,56,34,-53, 
  /* [698][0][][] */ 5,15,32,-55,-39,39,1,-18,95,37,-16,29,32,18,-49,3,16,54,24,13,41,77,-21,-23,12,-84,69,12,-34,-127,127,8, 
  /* [699][0][][] */ 53,110,60,-56,-33,-73,57,-10,0,37,-7,7,3,-11,118,-47,11,27,1,-77,13,53,56,-4,-6,14,-104,-82,0,12,-127,42, 
  /* [700][0][][] */ -41,11,-61,-10,-98,54,127,-26,15,26,-103,85,76,39,45,-1,66,-66,-63,-88,-20,52,19,-43,56,36,-14,-1,31,38,12,-39, 
  /* [701][0][][] */ -11,-43,1,-29,-121,15,-15,7,-63,-69,-22,-48,-9,-46,17,43,-98,-94,-27,-24,-29,56,7,-31,-4,-35,-45,-50,62,127,-123,4, 
  /* [702][0][][] */ 98,-46,24,-52,-43,-57,61,91,96,66,-24,27,73,4,-127,-67,81,-67,-103,-29,-79,-47,8,-25,-19,-44,-82,-11,68,-10,37,-51, 
  /* [703][0][][] */ -11,0,-21,-30,-45,5,11,-11,39,-28,-33,24,127,5,-102,-14,48,-35,-21,-9,9,-60,-44,-4,5,-16,-48,-29,19,9,-12,-18, 
  /* [704][0][][] */ -31,-16,-19,4,-11,127,29,68,2,71,-71,-67,70,23,-111,92,-20,79,12,-4,-34,-19,57,-33,43,122,-4,-72,-20,48,32,-58, 
  /* [705][0][][] */ -58,40,-43,79,-5,-49,42,-104,-1,-34,105,36,-51,86,-49,48,-37,-47,-75,-3,7,-81,-127,65,-39,-20,-29,-94,78,-68,-46,80, 
  /* [706][0][][] */ 19,58,127,104,39,66,57,22,-9,36,41,-95,-8,-92,21,-19,-27,68,93,-14,-54,42,4,91,-4,-46,56,-79,-36,14,65,17, 
  /* [707][0][][] */ 36,40,-60,-21,92,-50,98,-23,-13,-33,-14,-127,-80,-59,-24,-36,60,53,-15,58,21,-19,-38,-44,46,48,39,37,-4,-16,-98,-47, 
  /* [708][0][][] */ -41,-31,-70,-4,-49,23,-39,-37,63,-108,-127,90,-103,-15,15,-43,13,-26,-49,31,96,-43,-76,39,-24,-55,-6,78,36,32,8,21, 
  /* [709][0][][] */ -127,-54,12,12,52,-7,6,1,-67,-42,-62,41,1,3,92,-43,40,104,-48,73,-56,13,-11,-49,-4,-81,15,23,-38,-72,50,85, 
  /* [710][0][][] */ -38,-25,49,-24,44,65,44,-60,30,43,2,-8,9,60,12,75,32,40,-44,30,51,31,127,12,-3,37,-49,-25,-31,17,-10,2, 
  /* [711][0][][] */ 36,13,-39,-20,-3,-51,18,-19,32,64,73,17,20,21,-10,-50,-18,-21,48,5,-58,-1,-27,22,-79,67,-47,-43,-127,-30,49,36, 
  /* [712][0][][] */ 46,-29,16,125,-49,94,-25,118,66,-32,27,-46,-81,7,-80,-55,90,-13,-36,27,33,-81,59,-17,-46,-127,-79,-56,63,9,-15,8, 
  /* [713][0][][] */ -2,-41,43,33,-29,32,-19,-21,-20,-41,81,13,-19,-127,-67,36,-2,0,-7,-3,-18,34,4,7,-70,-78,-84,32,-53,-47,19,14, 
  /* [714][0][][] */ 112,56,-50,-127,110,65,63,-60,51,-45,4,-29,-7,-6,33,-49,4,-45,-9,-5,63,-38,37,87,60,17,-27,27,-106,-77,8,-16, 
  /* [715][0][][] */ -64,2,21,-93,-101,-56,4,38,47,42,34,-69,-54,-24,18,-17,17,-127,22,-30,-13,14,106,-44,-56,-126,-47,31,69,16,-34,122, 
  /* [716][0][][] */ 7,-6,31,-19,65,-3,63,20,10,34,93,-13,-31,-18,-29,-68,35,24,2,-113,-66,127,38,71,-59,33,15,-1,8,-50,43,11, 
  /* [717][0][][] */ 72,47,54,17,40,3,-5,-60,-25,69,37,21,-40,-3,-24,-85,-67,46,-54,-9,127,-61,-62,65,-33,-67,-28,-35,67,95,83,-118, 
  /* [718][0][][] */ -74,127,13,-18,-63,58,-39,-16,-18,-12,-53,-48,33,8,70,58,45,16,44,122,-58,32,-93,84,123,-39,59,-91,44,63,9,39, 
  /* [719][0][][] */ -19,-5,-20,53,25,-53,42,41,-83,75,-9,-107,-38,35,59,-93,-37,-40,24,40,36,13,62,39,89,-11,94,30,-98,38,-127,19, 
  /* [720][0][][] */ -67,127,62,11,69,-4,-13,1,-33,14,-8,99,66,60,-6,-7,-25,-43,96,63,109,-94,-6,-29,22,-9,-26,-18,-54,-18,-95,-30, 
  /* [721][0][][] */ 127,-22,-14,20,-83,-7,-9,-1,-16,-63,-12,-44,90,-29,12,14,92,-12,24,71,-29,-79,-35,-53,52,-27,98,103,24,-108,-17,-18, 
  /* [722][0][][] */ 67,-75,12,-35,-12,21,-64,7,-68,39,25,-7,-98,25,-61,48,127,-99,-95,87,71,-10,-72,37,35,20,-99,47,69,1,-22,24, 
  /* [723][0][][] */ -87,19,-28,127,84,-54,-41,35,-48,-120,-41,-63,-58,71,-100,107,29,-17,-45,20,61,71,-5,-15,22,54,34,47,31,46,-100,-49, 
  /* [724][0][][] */ -83,-10,-34,34,-6,-24,5,89,-6,127,-19,-11,-3,12,2,28,-15,15,16,-22,25,-40,-34,-42,-21,54,32,-16,24,-14,-22,14, 
  /* [725][0][][] */ -39,-73,50,2,44,-109,14,65,-50,22,-127,97,-59,-62,-59,90,-37,67,-84,98,21,-2,-58,29,21,-44,45,84,37,-8,31,5, 
  /* [726][0][][] */ 53,116,-5,16,-8,8,-23,9,-127,-34,21,30,48,97,-60,-106,9,-96,-70,84,3,-13,77,-37,17,61,2,22,-45,57,40,-39, 
  /* [727][0][][] */ 30,-48,-4,-103,72,-20,9,73,127,-14,18,43,-35,-7,90,26,55,-57,-33,12,43,-57,-37,69,-14,-69,-26,76,-3,-81,39,-67, 
  /* [728][0][][] */ -53,10,-38,85,14,127,62,-12,-24,-28,123,-17,48,-18,108,-38,17,1,101,-26,-33,40,-64,-62,-17,-38,27,2,14,-13,-28,-74, 
  /* [729][0][][] */ -40,-44,-11,-119,9,51,58,41,37,-6,-60,-72,48,-48,-107,-107,-38,-26,18,-127,-45,114,-59,-30,-30,-13,53,-112,23,44,0,11, 
  /* [730][0][][] */ 1,15,-81,66,74,71,-108,57,-24,94,123,47,10,40,-10,2,20,-11,68,-56,63,-100,83,-21,-105,-34,-38,-127,-46,-8,-103,-54, 
  /* [731][0][][] */ -127,-26,-9,51,93,-4,-75,49,0,-5,-64,-19,-37,88,97,-42,-36,12,-40,12,-2,29,-6,46,-65,81,23,75,-5,88,-1,-4, 
  /* [732][0][][] */ 35,-39,48,-65,-75,113,13,127,52,-4,-2,-45,53,-14,-40,22,-11,4,20,-20,20,28,-90,-14,-61,-37,59,-1,-14,-55,7,6, 
  /* [733][0][][] */ -63,59,-50,-90,54,97,40,5,17,16,-5,-3,-22,-41,54,-47,3,-23,-14,-57,-25,66,-45,21,-18,12,-70,127,9,109,-42,-32, 
  /* [734][0][][] */ 3,-30,68,-9,40,42,-37,38,127,47,-39,-10,13,48,-74,-17,112,40,28,-13,-14,-11,61,56,-65,10,-1,37,36,-27,10,-75, 
  /* [735][0][][] */ 31,127,-27,-82,7,-46,60,66,-3,-50,84,-4,-12,-20,33,-41,25,42,8,-18,10,-14,-62,-31,-39,-44,-5,24,57,89,-17,14, 
  /* [736][0][][] */ -32,-47,-75,1,98,-30,43,78,-8,-3,39,47,26,20,16,-3,-28,26,111,67,47,-127,33,34,-56,51,-32,-9,11,11,-20,65, 
  /* [737][0][][] */ 13,60,18,-77,-46,-6,48,127,-63,-7,7,75,78,5,19,-17,8,-5,-52,-10,65,-53,-33,8,46,-48,40,-36,9,9,-17,-19, 
  /* [738][0][][] */ 1,-58,-42,52,16,-57,-21,-60,-46,-39,36,52,-12,14,70,-52,2,18,-17,-24,-29,-94,-5,-47,58,76,69,-18,-1,-13,-127,49, 
  /* [739][0][][] */ 35,-62,25,-81,-10,102,5,127,-2,119,31,36,-89,40,-32,-12,-67,-45,104,73,-21,60,118,-24,31,-32,-36,78,74,12,82,-40, 
  /* [740][0][][] */ 47,-37,30,12,-45,-3,-17,-28,7,-11,-31,41,21,20,-52,-43,97,89,68,40,-86,-29,-11,-46,127,47,-53,34,25,-60,107,6, 
  /* [741][0][][] */ -28,-36,75,36,-35,-53,-3,-74,-74,-40,56,106,-25,23,-40,-16,25,-10,-41,73,58,-14,-16,-111,-70,58,-97,62,109,28,127,10, 
  /* [742][0][][] */ 77,-61,-1,49,-63,79,-70,18,-114,-40,78,-125,-106,-9,-34,-4,101,-13,-22,50,12,47,-88,-125,66,33,75,-67,-13,-47,127,-15, 
  /* [743][0][][] */ -2,11,-41,-44,40,-76,23,-25,-27,-26,-17,62,-20,-127,-20,-55,-41,22,20,-36,-59,37,75,-17,38,-34,-20,-39,-34,65,-44,-55, 
  /* [744][0][][] */ -26,-9,-54,-13,71,80,66,63,-34,-4,12,-8,2,-42,-16,67,-3,2,-2,-15,19,14,-32,-54,11,26,54,-29,127,-22,71,-34, 
  /* [745][0][][] */ -14,13,-44,52,-2,-1,53,72,-42,-25,20,97,-29,-49,-22,-20,49,12,-30,55,15,-74,-37,-127,-84,81,-1,-2,79,-15,-30,11, 
  /* [746][0][][] */ 94,-100,-46,-32,31,-104,12,-13,36,56,28,-7,15,43,-12,-19,109,-73,21,127,16,96,-27,45,-23,44,-54,30,84,-36,-107,37, 
  /* [747][0][][] */ -48,-29,86,-127,-42,10,46,109,-70,100,115,7,33,-16,34,-110,4,-39,11,80,-90,20,-45,84,18,-52,20,-42,14,31,61,61, 
  /* [748][0][][] */ -104,88,-46,-20,71,38,5,39,-47,38,-23,-54,81,11,29,-25,-127,65,18,88,11,-34,-125,3,38,-11,-45,22,-1,0,46,116, 
  /* [749][0][][] */ 14,35,-16,1,-18,-15,-26,-111,-8,40,44,-37,26,-56,20,23,7,61,24,60,-17,31,58,19,44,-2,33,127,0,11,-6,38, 
  /* [750][0][][] */ 11,-43,9,-38,-1,-21,52,69,-108,-115,96,-3,34,-36,-54,22,100,-81,-34,89,-3,70,7,-22,-12,-44,-28,-58,36,21,38,127, 
  /* [751][0][][] */ -36,29,-46,-6,-3,-27,-3,29,-7,61,-13,-22,-45,8,-68,-20,-72,25,-127,31,37,14,-19,67,3,-61,-47,-16,103,53,-4,-40, 
  /* [752][0][][] */ -19,119,39,7,104,38,70,47,49,-55,-16,-7,-31,112,-44,51,-74,46,21,-127,-21,-55,91,-86,-106,-18,-47,-83,-53,52,106,21, 
  /* [753][0][][] */ -28,-81,104,35,-32,-3,83,47,-26,-51,-49,-39,-27,-37,103,-127,-7,-58,100,42,-79,42,-101,72,32,3,-78,37,101,-89,-117,-81, 
  /* [754][0][][] */ 30,-67,-46,-90,-70,-36,21,28,42,114,-48,13,-34,-21,-127,-40,33,-101,-68,49,-16,23,-11,-40,-34,-48,-16,-38,53,-50,100,-96, 
  /* [755][0][][] */ -21,-103,-24,-8,-11,14,-4,-9,-16,-43,45,-9,27,31,-5,-49,27,56,-127,-49,100,-30,12,0,-45,-43,-68,25,-36,-58,-42,-73, 
  /* [756][0][][] */ -89,-30,-54,-119,12,-62,-11,78,-47,127,23,41,-43,-37,24,89,-1,-2,-6,-85,-82,-78,87,0,-119,-71,79,82,-79,28,48,127, 
  /* [757][0][][] */ 21,-82,-88,-47,43,-1,-2,-127,-31,103,1,-3,18,-17,97,-45,-3,44,-55,58,43,35,-81,57,-33,-22,38,10,16,54,-18,31, 
  /* [758][0][][] */ 54,50,-36,11,-9,-21,-5,106,-17,22,-87,-14,14,-82,17,31,-88,-127,33,-67,-85,-36,108,-39,18,-63,-82,48,-31,29,24,47, 
  /* [759][0][][] */ 58,-33,-15,-32,-96,-99,-12,-24,-32,-72,-32,-5,39,-44,-1,8,-88,87,-9,46,51,-52,-43,7,-53,-48,3,-20,127,14,16,-62, 
  /* [760][0][][] */ 3,22,11,90,67,35,-7,48,-15,5,-80,5,-29,-9,19,0,32,98,-15,-7,-69,73,5,52,-80,40,-9,-4,30,79,45,127, 
  /* [761][0][][] */ 36,73,-66,-57,-70,58,-14,-101,-39,40,41,33,2,-119,-8,-30,28,-63,-29,19,-71,12,20,-23,9,-15,-45,-19,-20,-57,-127,90, 
  /* [762][0][][] */ 60,-71,-31,54,-14,-21,40,-57,35,-44,59,71,8,-85,-21,-5,-16,-16,28,75,-57,-14,49,27,62,12,56,-127,62,18,36,107, 
  /* [763][0][][] */ 99,-83,-52,50,51,8,19,123,-19,-122,-72,9,127,107,37,1,-10,53,-89,-54,97,-31,64,-15,-99,-22,33,12,-52,-3,-89,-90, 
  /* [764][0][][] */ 92,74,55,-21,-22,-127,-74,41,-11,9,-11,-12,39,11,4,4,126,-70,25,3,125,-55,-20,-38,-4,-103,48,-55,66,8,-8,15, 
  /* [765][0][][] */ 73,64,-127,63,65,14,39,-21,11,-64,51,-46,89,-80,-3,-43,33,26,-40,-35,-26,-86,8,79,-45,-23,-9,6,88,-42,-22,-32, 
  /* [766][0][][] */ 19,9,10,4,-16,62,-28,3,-47,-29,21,16,-34,-2,45,17,-93,-19,51,-127,86,-7,26,71,-8,66,-10,11,-53,6,-63,54, 
  /* [767][0][][] */ -33,-44,-48,-69,5,-49,-33,-66,30,31,70,-52,100,79,102,-60,-48,90,19,127,-40,-78,-42,23,64,-84,30,-19,-107,-45,-26,32, 
  /* [768][0][][] */ -69,-54,-32,-87,-35,46,60,-41,45,99,-49,46,35,-11,41,-46,49,-37,109,-17,-1,127,10,-30,-42,9,17,-36,-33,-13,-21,1, 
  /* [769][0][][] */ -10,-18,57,-127,58,-71,66,88,-67,59,-46,5,43,-99,-19,6,-9,4,47,34,120,123,26,66,-49,-33,5,-103,61,-55,28,59, 
  /* [770][0][][] */ -44,-34,19,47,19,-12,-1,25,-44,-116,55,-83,77,-24,16,18,72,-46,72,79,29,7,27,-11,-127,111,-42,-65,87,25,87,82, 
  /* [771][0][][] */ -45,-2,48,-33,-17,-55,-21,-24,50,-63,-12,21,-22,34,-20,91,27,-65,-102,127,39,-4,22,-10,5,71,-20,41,-63,-97,92,26, 
  /* [772][0][][] */ -20,-24,27,-9,-55,-70,68,-71,-70,-1,-4,-101,-10,12,-34,-1,54,11,80,-24,57,86,-38,53,-22,-68,59,-6,127,9,2,-15, 
  /* [773][0][][] */ 69,40,-127,-32,64,59,25,27,6,-4,-39,-55,71,66,12,-2,23,-38,7,49,-25,-18,-21,-43,2,52,26,39,87,-29,-41,28, 
  /* [774][0][][] */ -6,26,-98,59,33,51,127,-32,21,68,-94,56,105,-96,87,-125,49,-113,-96,100,54,-126,3,-54,-61,45,-14,-34,-63,3,-100,-100, 
  /* [775][0][][] */ -101,-9,-17,-21,40,-14,-5,127,66,13,-22,-6,-26,-10,12,-5,-62,20,-34,-33,30,-87,-17,-7,7,-6,-20,-27,14,-21,29,-30, 
  /* [776][0][][] */ -33,23,-35,53,0,4,11,-69,35,-4,-90,92,19,22,-67,90,-52,-54,22,54,-46,-24,-67,15,-15,-21,-127,-64,-2,27,15,29, 
  /* [777][0][][] */ 39,18,24,-33,-40,-29,-106,0,-125,-16,43,42,-14,-72,39,97,127,-72,38,42,-120,-22,-61,-52,90,-94,-59,92,65,-53,-63,-12, 
  /* [778][0][][] */ 66,9,-127,-59,22,-26,60,35,-3,-16,40,12,-8,8,-37,-41,-17,-26,61,-53,43,5,26,-5,-3,66,9,55,20,-55,56,41, 
  /* [779][0][][] */ -82,24,-69,68,69,48,48,-74,-5,44,-30,89,-15,56,81,111,-27,30,47,-107,-30,46,115,-19,-127,26,127,60,49,30,-112,-78, 
  /* [780][0][][] */ 7,-15,-19,0,-19,9,21,-44,25,127,-58,50,11,11,-50,-51,-28,13,5,41,-57,20,39,-65,7,-11,-46,2,19,25,-11,-34, 
  /* [781][0][][] */ -75,-81,110,-99,23,-42,21,19,-58,84,43,-14,-69,6,-61,-43,83,59,121,-28,9,-73,-65,31,-46,-67,-22,44,36,127,-65,-32, 
  /* [782][0][][] */ -60,-8,122,-74,-24,-4,-9,23,28,13,-85,51,72,62,-30,111,55,96,-7,53,91,55,-6,-7,0,29,-127,7,38,-88,-13,-18, 
  /* [783][0][][] */ -127,52,-42,-29,70,12,-51,-2,-63,-95,40,-23,5,38,23,21,25,-32,-90,-27,103,-83,-25,57,-50,-99,9,-37,28,-25,56,104, 
  /* [784][0][][] */ -39,-52,-49,-1,50,49,22,56,-81,-39,-34,55,6,-103,-108,2,76,-46,69,92,34,-13,-1,-32,6,53,-38,15,-78,127,15,-16, 
  /* [785][0][][] */ 20,17,-27,2,-14,27,-127,-2,66,100,18,10,9,-61,54,-1,47,31,-84,7,72,-117,-4,-15,-39,-9,21,-49,98,55,-62,78, 
  /* [786][0][][] */ 15,24,29,-48,25,-15,-46,12,-7,60,15,43,-14,44,98,1,-66,-19,60,7,-54,-1,55,-22,127,2,-94,-31,-123,37,-3,-7, 
  /* [787][0][][] */ -127,87,90,-94,-72,22,121,-88,16,5,-13,20,-14,23,14,-27,20,-70,80,-93,-18,48,-122,-86,-78,55,-43,-85,23,21,7,-16, 
  /* [788][0][][] */ -4,27,113,1,17,8,60,46,10,-59,66,16,4,7,1,24,127,26,32,-15,5,-45,-28,35,40,-74,-6,-36,56,-62,16,77, 
  /* [789][0][][] */ 85,-31,-110,14,-46,-42,83,-76,-53,-127,57,102,101,-22,-44,-29,-25,-73,-30,72,76,101,-11,-21,32,-23,-24,-51,102,-16,18,48, 
  /* [790][0][][] */ -28,52,1,17,-57,49,24,77,83,-49,14,6,-12,-72,-97,107,-28,-62,-60,11,-127,29,45,-13,-28,13,11,98,18,43,37,122, 
  /* [791][0][][] */ -68,-15,10,40,-35,59,-62,-30,45,-20,-18,-21,49,-11,-39,-51,127,20,71,-17,-5,-15,15,-63,26,-13,113,23,67,-51,26,8, 
  /* [792][0][][] */ -53,-6,14,5,23,36,59,-13,63,-64,12,21,31,34,43,-26,8,26,-88,127,27,88,5,47,-49,-9,80,-15,22,-11,-92,-99, 
  /* [793][0][][] */ -6,-44,-31,-52,127,-30,114,93,56,45,13,-7,14,8,17,60,8,-34,82,-11,-27,1,36,-40,-19,-14,34,42,-36,-4,-50,92, 
  /* [794][0][][] */ -116,28,28,-54,67,-72,-84,-34,4,-86,72,48,-13,127,59,-31,93,32,-70,8,-90,-80,13,6,-66,15,12,64,29,-37,-5,-71, 
  /* [795][0][][] */ 7,-47,-121,1,-18,47,-68,71,3,-82,-5,-76,-67,-44,32,-11,18,-61,-12,2,24,-127,-119,-22,24,-9,29,-18,54,-1,20,-57, 
  /* [796][0][][] */ 51,-79,-5,22,124,-25,-54,122,16,127,-34,-21,-70,-88,5,9,-93,-3,27,85,-89,77,-17,-56,-5,-30,110,-16,-88,-40,45,46, 
  /* [797][0][][] */ -26,36,69,56,-3,-14,-1,32,-72,34,-62,22,-15,35,-17,67,-127,1,-11,110,26,62,34,-9,-12,-40,-29,1,14,23,-75,14, 
  /* [798][0][][] */ 6,-18,-6,-127,39,-27,-38,-7,34,-35,-26,-106,33,-78,21,14,19,-51,31,58,-53,-3,-10,41,74,0,-99,4,40,40,16,-29, 
  /* [799][0][][] */ -48,-3,-60,-21,127,21,10,-38,-17,-9,-29,56,22,-24,76,31,17,83,70,80,-41,-59,-12,-42,37,-5,12,30,-20,35,33,31, 
  /* [800][0][][] */ 73,57,-118,-10,40,7,-67,-111,-29,-14,-3,-53,-25,-29,-119,48,11,-113,12,127,38,-50,-79,-1,22,-104,-25,39,48,37,-13,100, 
  /* [801][0][][] */ -54,-56,70,0,71,-36,-31,-45,-34,-24,7,127,22,-24,-14,82,-32,15,-5,-21,21,-60,-69,-41,-19,52,-18,43,-9,49,-69,-20, 
  /* [802][0][][] */ 44,71,72,25,29,-5,65,-86,-28,60,6,62,-124,-6,95,-127,-22,73,-74,-58,54,-50,50,-38,6,2,-9,6,-127,-101,59,3, 
  /* [803][0][][] */ -55,-3,74,-25,26,110,-86,4,21,123,6,-76,-119,8,21,-21,23,-41,-5,45,53,-14,-40,10,2,22,-62,-127,-119,-51,58,-7, 
  /* [804][0][][] */ -33,25,-85,14,95,-53,7,-14,-102,3,1,-49,-63,32,42,-1,72,-61,-15,-36,55,36,1,-127,-67,-50,57,19,55,-69,-8,-30, 
  /* [805][0][][] */ -58,22,-61,-27,74,36,65,-20,48,75,-39,105,-98,-16,127,58,-44,-10,6,8,11,44,24,38,66,-54,6,36,-69,-13,96,30, 
  /* [806][0][][] */ 29,2,11,-90,8,1,-13,12,127,5,-119,70,74,-33,24,0,-51,-25,34,41,-95,15,-27,-20,61,-10,-13,44,-79,14,-28,-42, 
  /* [807][0][][] */ -7,12,29,42,21,49,-13,-17,-27,81,66,64,23,7,-48,-32,-41,63,-33,15,-2,-58,30,10,127,-43,-84,13,41,17,12,-48, 
  /* [808][0][][] */ -68,-38,53,-26,46,93,30,-4,-51,6,-59,-72,-127,64,52,37,114,-4,72,27,10,17,70,103,-22,-114,97,17,37,57,-61,28, 
  /* [809][0][][] */ -63,-6,93,13,6,5,-111,118,42,63,33,36,-60,-85,3,-6,13,57,65,-6,8,70,54,-38,-28,30,127,-27,-40,53,-73,-10, 
  /* [810][0][][] */ 72,-78,46,27,98,19,12,-60,-2,52,-61,37,64,96,-7,25,-53,21,34,64,127,-11,8,10,16,5,-34,-36,79,48,-89,-82, 
  /* [811][0][][] */ -23,-59,26,20,61,-88,61,38,-85,-20,127,36,18,-39,35,-109,122,54,-41,-14,-31,-9,-30,11,2,-57,47,-53,17,57,2,-21, 
  /* [812][0][][] */ 11,7,-127,32,7,62,35,-86,-31,-19,63,-3,5,-25,40,21,14,59,-32,27,61,-9,-23,-64,-48,26,-43,76,69,-2,50,52, 
  /* [813][0][][] */ -72,-51,-112,18,-14,-62,-21,-10,10,-28,7,-107,113,111,-124,-8,25,-32,-61,127,97,-58,-112,-65,71,-48,-101,-33,11,-35,35,-48, 
  /* [814][0][][] */ -65,21,39,-25,-20,-28,-23,-127,-22,-23,44,8,91,-30,-29,-44,18,11,-39,-27,73,-14,61,-7,-37,-18,-14,-22,-11,-41,65,34, 
  /* [815][0][][] */ 3,-47,-42,-17,32,-43,18,58,-83,58,3,11,-56,-57,-104,55,-48,-29,-9,38,-17,107,-22,-43,72,-33,127,-32,-28,-19,125,-9, 
  /* [816][0][][] */ -44,-40,81,29,-68,-71,-72,-48,60,72,-93,12,-76,85,-43,57,111,-27,16,29,-75,-2,0,-1,-55,35,-127,-53,48,6,-28,-30, 
  /* [817][0][][] */ 31,-37,27,-94,-17,18,-46,-8,-28,-41,31,7,17,14,50,79,22,9,26,46,55,18,-72,3,-23,-38,-91,-31,-41,-58,127,-10, 
  /* [818][0][][] */ -52,-7,43,13,18,-39,41,-17,-16,-11,-91,-72,-32,-30,-90,75,-25,-19,-106,-19,45,34,-41,2,-80,48,13,30,13,43,-31,127, 
  /* [819][0][][] */ 45,-75,48,22,-26,-40,-39,-56,11,-67,12,-80,-17,19,-16,-35,25,52,51,75,-30,127,-55,13,-50,-77,-47,115,-109,22,-120,2, 
  /* [820][0][][] */ -86,-4,-47,37,-36,95,-56,-47,-57,-49,-79,0,-17,104,19,24,6,-27,-127,34,-41,-83,21,7,-95,-20,-56,73,46,11,-46,30, 
  /* [821][0][][] */ -11,-8,-32,14,-17,72,-62,-21,66,20,16,40,26,-127,109,36,-5,28,45,-3,-56,-28,8,-6,-20,71,22,-18,-30,-4,22,11, 
  /* [822][0][][] */ -3,-50,-9,23,24,34,47,-100,-13,-59,64,-33,3,34,29,19,-23,6,8,-15,-34,40,-67,-41,-122,-70,-14,-66,13,127,81,48, 
  /* [823][0][][] */ 28,-8,127,-57,16,14,75,15,-28,64,19,21,-5,-10,-18,-41,58,18,-31,76,78,-71,-24,22,34,6,-84,53,23,-94,-22,-3, 
  /* [824][0][][] */ 31,-43,40,-24,-54,-107,-99,-117,-127,-121,30,-75,23,3,-40,27,19,-123,6,-6,-12,-9,-63,53,13,75,-15,15,-82,-9,31,57, 
  /* [825][0][][] */ -21,-37,-46,28,-71,-127,26,-62,62,17,-8,-12,-9,28,65,36,4,6,-8,82,7,61,-7,77,39,28,57,80,-6,28,-10,-13, 
  /* [826][0][][] */ -116,89,-108,-74,-15,0,2,24,-55,-49,89,125,78,94,127,-43,-43,-65,-60,22,-39,-9,3,29,-76,7,25,12,-11,7,-9,4, 
  /* [827][0][][] */ 20,-65,3,-27,88,29,-22,5,21,56,-42,-13,-76,-62,-48,14,101,35,14,-51,-12,50,-31,4,-34,-127,53,5,11,40,122,-2, 
  /* [828][0][][] */ 29,56,125,2,-18,110,-28,74,73,7,-27,-31,7,-108,-43,73,41,35,-46,19,3,-127,-67,4,116,-2,-67,-103,32,71,53,-90, 
  /* [829][0][][] */ -60,-50,76,67,19,-64,-20,3,-127,62,26,47,6,-10,20,23,-38,-54,-29,-45,-70,20,7,-19,-41,-69,50,-8,-49,-28,-5,-13, 
  /* [830][0][][] */ 8,37,-61,-20,20,43,-46,-15,127,34,12,-36,-28,20,-7,3,-2,-26,-7,52,-52,-31,-42,29,-77,-83,10,56,84,-3,-33,-42, 
  /* [831][0][][] */ -58,65,127,-21,-3,-22,-11,-42,-56,79,-47,-11,-36,-23,37,40,-112,-29,-35,118,22,67,16,14,108,-42,-4,21,-75,16,55,-16, 
  /* [832][0][][] */ 15,20,13,-122,-7,-46,-59,19,-29,38,-104,2,-29,-38,93,-60,9,5,73,-57,59,-124,-67,-79,127,74,-26,-52,15,68,0,15, 
  /* [833][0][][] */ -41,17,-123,-11,68,60,-53,4,40,81,20,-58,46,-28,31,-7,5,-91,-6,-75,49,-11,34,-127,78,-43,63,38,-72,40,-16,-45, 
  /* [834][0][][] */ 0,127,-20,75,-37,61,-57,80,35,39,-6,81,-66,7,28,-42,-91,-75,-91,-29,-53,-41,4,-61,-31,9,46,-17,27,-47,87,-5, 
  /* [835][0][][] */ 31,-18,35,-89,11,-50,7,66,17,-26,-43,-50,47,38,-34,-102,83,14,8,-57,-60,74,4,17,-11,-43,-127,46,2,25,14,-24, 
  /* [836][0][][] */ -36,-3,-26,60,-102,50,-39,79,15,66,24,-35,20,117,43,-66,-21,-60,127,-55,-34,91,13,-47,-92,-83,45,95,-8,13,119,-10, 
  /* [837][0][][] */ 52,-94,6,-56,-100,-15,122,-38,-81,-2,-2,-74,-25,86,-4,-48,-73,32,72,-54,-88,-127,-27,6,33,50,55,104,93,40,56,-107, 
  /* [838][0][][] */ 11,-25,86,-52,-52,2,16,45,8,25,-23,-43,-25,-92,-127,38,54,-59,-26,67,22,16,-84,-58,30,27,-40,-20,-6,12,70,0, 
  /* [839][0][][] */ 57,-43,48,-106,-17,10,75,-93,-49,20,11,-27,-91,-24,-27,83,-79,-26,-53,89,87,-127,64,60,-80,-25,-59,-9,-92,28,66,6, 
  /* [840][0][][] */ 25,39,20,-49,-27,-57,51,-70,-101,43,14,58,-127,77,25,-80,-78,7,-60,15,-16,114,28,11,118,-86,-61,16,24,-1,76,-22, 
  /* [841][0][][] */ 12,-7,-47,66,7,-28,127,-21,-77,7,-73,113,10,-6,93,-110,-77,11,-56,96,1,23,13,31,25,-36,-90,-108,-10,-45,73,86, 
  /* [842][0][][] */ 14,-15,-16,64,59,15,-74,30,-74,-16,16,43,-79,26,90,42,-26,43,115,16,14,21,29,40,127,49,-23,-2,16,10,41,-19, 
  /* [843][0][][] */ -121,113,-61,8,-93,-25,85,53,-109,-59,-46,-103,-48,-8,65,22,127,-46,11,-14,8,-17,-31,34,74,-117,2,-16,-62,-9,-35,-57, 
  /* [844][0][][] */ -69,14,-14,56,-2,49,-16,-33,-50,-14,57,11,-107,-127,45,98,57,82,-11,-39,23,-28,42,-49,0,-59,20,-2,103,48,75,23, 
  /* [845][0][][] */ -31,23,-28,105,1,-24,66,-10,11,12,-68,105,127,1,31,123,7,93,-88,-36,2,55,63,-70,-31,79,36,-28,17,-67,-96,21, 
  /* [846][0][][] */ 78,-93,70,127,-66,28,18,44,2,16,-11,-59,45,-28,-47,19,-30,-57,-119,-2,5,-65,-64,59,-23,42,-102,12,23,-6,-29,-68, 
  /* [847][0][][] */ 23,32,-7,70,21,-100,0,-55,-43,103,3,3,-24,-43,-48,46,15,-1,-39,82,-50,29,10,50,-39,-82,-127,-77,35,-33,97,-119, 
  /* [848][0][][] */ 31,57,41,116,14,-8,18,15,-34,-92,127,21,57,51,36,100,28,-48,54,-8,36,-86,-46,28,19,-13,10,74,93,36,-66,-29, 
  /* [849][0][][] */ 72,4,-33,-14,-73,2,64,28,0,15,46,5,13,14,22,-77,43,-58,30,-10,127,-94,11,70,99,-27,-65,37,-81,-62,18,23, 
  /* [850][0][][] */ 17,-40,-77,-19,-51,-69,86,32,91,-59,-11,-44,-13,60,125,21,60,7,79,-38,-69,-49,-32,-127,-77,51,-19,8,59,68,24,-63, 
  /* [851][0][][] */ -4,16,-54,-8,3,-52,-19,-57,31,27,80,-32,-20,-82,41,-26,-35,60,-64,102,-20,-45,-127,46,-19,-22,-19,18,-10,-41,27,-15, 
  /* [852][0][][] */ -34,67,-79,-65,78,16,-39,46,-55,22,-75,5,13,-11,7,18,-26,18,-55,-45,36,-80,35,59,-4,33,-50,-127,-24,-61,19,-5, 
  /* [853][0][][] */ 82,2,-53,14,-8,-55,23,5,-48,23,65,50,-47,65,48,-42,75,-17,-43,-25,37,0,-39,-15,22,-71,48,47,127,109,-71,-79, 
  /* [854][0][][] */ -25,-30,-81,19,-97,7,-48,-22,61,-82,38,99,13,78,54,-1,88,-107,23,-16,-75,-24,127,61,33,-35,-40,-8,-55,35,39,-18, 
  /* [855][0][][] */ -10,-62,-58,2,19,16,-18,89,-24,14,62,-33,37,-31,97,-62,15,-48,-108,12,34,19,-32,-65,-59,41,-60,0,21,127,-15,-74, 
  /* [856][0][][] */ -42,71,27,-127,47,101,-66,29,-4,37,113,-38,93,-69,-28,-26,37,65,-25,-90,9,103,65,-57,-58,-70,-7,-77,-116,-32,79,0, 
  /* [857][0][][] */ -22,92,62,-52,50,0,-8,56,24,-20,-112,-31,-64,-3,1,8,33,-6,12,-3,-120,10,-71,-55,12,69,41,34,-2,-127,-6,-16, 
  /* [858][0][][] */ 0,-16,-25,-84,5,2,62,-8,56,77,-14,-38,-1,-51,-28,51,-55,47,26,41,3,37,0,-6,68,-35,34,-21,-81,-5,127,-1, 
  /* [859][0][][] */ -22,-115,-29,-15,-33,4,121,-22,-6,46,87,8,-26,-52,37,-41,-19,-69,25,31,-22,-32,-44,20,-37,-62,-20,-65,63,127,-4,67, 
  /* [860][0][][] */ -107,26,0,104,70,30,18,14,-8,8,-19,71,-24,15,79,16,15,23,-82,-83,-17,10,-4,-32,50,-16,-127,-58,-71,4,81,74, 
  /* [861][0][][] */ 37,-53,-36,-18,28,-49,-22,105,-59,-23,-10,57,-69,-12,79,-7,-17,-27,-127,-29,46,82,-9,28,-21,17,-20,34,-30,23,21,7, 
  /* [862][0][][] */ -4,7,-57,63,-77,36,-36,52,-11,-19,63,17,-48,46,15,-2,95,-105,-40,109,-27,127,-103,72,-45,-27,-60,123,-59,-53,-76,-50, 
  /* [863][0][][] */ 5,0,33,-13,-62,-37,-95,13,86,124,-14,10,-84,38,-31,-101,22,112,16,83,-47,-127,74,109,-47,-23,-99,47,16,-15,42,-98, 
  /* [864][0][][] */ 31,23,-20,-52,73,26,12,111,-9,19,11,-109,-68,0,6,40,-12,52,68,0,-17,5,127,52,28,108,48,2,-8,103,-23,98, 
  /* [865][0][][] */ -65,15,65,-20,79,82,12,-127,-16,-109,-105,5,-36,22,55,-9,-60,-58,33,-45,64,-35,38,-43,-46,-23,47,7,67,7,-15,-82, 
  /* [866][0][][] */ -45,40,-50,-43,41,40,53,-41,-34,5,3,67,-7,-40,-37,127,-86,-61,33,57,10,116,-69,-55,-16,-25,26,-59,-59,-46,1,-34, 
  /* [867][0][][] */ -18,-58,4,30,-71,-23,-27,-15,-39,39,127,27,80,-20,62,19,65,-15,16,-1,-6,69,2,-10,25,-58,-14,28,11,68,-33,-1, 
  /* [868][0][][] */ 34,33,-124,-49,-65,31,-53,3,-44,-115,45,47,-21,34,127,-34,-39,-112,-39,-1,84,-30,-23,10,59,14,-115,-14,59,-30,81,23, 
  /* [869][0][][] */ 24,-35,37,-10,3,13,-20,-43,-63,-61,2,-83,-48,-16,-52,115,-73,71,69,31,-15,120,5,-48,83,-3,-1,-77,15,-38,127,4, 
  /* [870][0][][] */ 0,-70,-36,-36,31,23,26,54,-1,16,-67,21,-28,-26,-5,29,34,-19,71,-17,45,-12,-108,8,15,-127,-95,-46,-18,91,2,-35, 
  /* [871][0][][] */ -49,54,81,-14,37,-45,-40,127,22,13,-15,55,78,-12,-54,-92,52,-10,-24,-84,-4,-41,-42,-98,53,-79,38,51,-45,-53,38,97, 
  /* [872][0][][] */ -22,29,13,-47,36,79,-17,-9,6,-31,29,-14,31,-32,-50,-31,-70,41,-24,-45,22,-52,91,-37,20,67,-125,7,-32,3,45,-127, 
  /* [873][0][][] */ -7,-43,50,-48,27,-47,-17,-13,-29,58,21,-24,-11,-2,-57,45,-64,35,-55,-43,31,36,-127,-38,-17,28,3,17,-16,-41,46,-30, 
  /* [874][0][][] */ -32,27,-6,-73,31,-32,-52,127,-21,-21,-29,30,-29,-10,26,42,52,76,13,-89,-7,-32,91,-99,25,42,-78,100,-2,-41,60,72, 
  /* [875][0][][] */ -3,-26,16,21,52,77,9,16,-8,-6,-19,27,-22,-28,23,50,-26,25,-37,-33,29,127,16,-33,-7,34,49,-38,43,-33,37,-30, 
  /* [876][0][][] */ 9,8,-83,-52,-5,3,-27,56,-58,46,13,-4,-14,19,97,68,106,-9,-88,63,-13,-3,-39,73,-11,31,-64,30,-9,44,-127,-67, 
  /* [877][0][][] */ -16,-93,21,100,23,57,68,-6,81,109,127,88,-69,-39,2,63,44,16,-32,-103,59,12,-39,-80,-35,56,60,-57,85,65,22,0, 
  /* [878][0][][] */ -101,90,-54,-67,-83,-27,3,-34,-84,106,-5,-65,-119,126,110,-42,17,-50,29,-78,22,22,8,10,-127,-59,-18,-32,35,-78,-44,-53, 
  /* [879][0][][] */ 13,38,11,-2,13,127,43,-4,48,14,46,-1,76,17,14,-33,-18,36,-51,40,15,-75,-43,56,15,-15,-50,-30,32,35,-28,-36, 
  /* [880][0][][] */ -4,43,-17,59,-20,-49,16,-33,-18,79,30,-45,-23,127,-8,-14,15,63,-5,-38,-5,-94,-58,-26,3,10,-65,27,24,-26,-54,-19, 
  /* [881][0][][] */ -56,-16,66,-125,-44,-26,-9,-10,127,-48,77,25,-46,40,-110,51,28,-53,-46,17,19,61,-21,-20,-77,-27,8,61,33,4,66,-12, 
  /* [882][0][][] */ -63,-26,5,-38,-7,-26,-44,38,-29,79,64,29,-78,-127,7,-25,15,-24,-18,-16,41,-81,-76,-71,19,-27,19,-33,-29,41,48,-6, 
  /* [883][0][][] */ -54,5,109,-124,37,-42,54,53,-39,-30,8,-44,15,63,12,-8,64,-36,-53,34,44,-77,-44,-37,36,-127,-32,-12,13,34,7,24, 
  /* [884][0][][] */ 84,-21,-56,43,-85,-52,-11,5,-49,120,-1,22,-26,46,-9,39,34,0,106,-31,-77,-31,-30,-25,88,57,-37,91,-7,40,6,127, 
  /* [885][0][][] */ -57,-6,-72,39,-19,-13,11,32,-61,-47,28,69,46,-50,-13,-22,-11,78,-58,34,13,18,25,-74,-15,30,127,-14,-9,65,-16,-56, 
  /* [886][0][][] */ 19,-14,-28,4,-15,39,3,10,55,0,22,27,-32,47,2,-5,21,-127,-56,68,49,-77,-67,-25,-6,16,-49,-3,50,-65,19,-9, 
  /* [887][0][][] */ -55,127,13,12,52,-73,-48,-37,16,-19,8,-38,-66,81,68,58,-16,47,-6,64,-43,-64,-115,7,-15,61,-53,91,-7,-119,15,95, 
  /* [888][0][][] */ -23,12,37,127,-22,24,45,28,-80,-51,-114,-10,-5,-30,73,-10,22,13,-6,-45,64,-4,-27,-53,-31,4,56,49,18,89,35,43, 
  /* [889][0][][] */ 127,21,-12,51,-40,-19,31,-98,-14,-79,-7,-56,17,1,23,-42,-18,17,-12,37,78,-43,26,-80,40,42,-24,-96,-61,12,58,44, 
  /* [890][0][][] */ -127,73,7,54,101,28,1,-47,-66,50,43,-46,-65,30,121,-107,-12,6,-48,36,-31,-21,-74,-54,-9,-34,-93,-22,25,-109,-20,55, 
  /* [891][0][][] */ -17,-38,90,32,-3,4,-39,-127,-36,86,-79,11,-124,-89,-5,80,24,-46,-7,73,1,-102,-16,-46,-58,83,-1,6,57,-21,2,39, 
  /* [892][0][][] */ -28,64,60,-18,-41,60,32,60,-85,-59,-13,-34,73,-19,-127,-53,-52,19,-64,24,32,35,8,-31,3,74,-51,30,58,10,71,30, 
  /* [893][0][][] */ 73,-30,-29,30,-5,-29,38,-11,-92,-35,67,-35,-13,-36,-31,-43,1,-125,46,78,-22,26,-93,-96,-127,-41,-15,28,-53,-49,-26,-23, 
  /* [894][0][][] */ 35,28,-62,3,-61,-21,-17,-60,-37,22,51,-70,-127,-60,-60,-65,69,16,42,3,-7,-11,1,56,8,-99,-84,-36,-33,-3,27,-21, 
  /* [895][0][][] */ -23,-63,-44,101,-127,-41,-15,-21,-65,-33,37,37,1,-69,-4,-93,-32,-4,92,43,64,23,-28,-6,-24,-52,59,35,34,-8,-33,18, 
  /* [896][0][][] */ -9,-2,3,28,14,25,-23,-55,38,-33,14,-49,17,-52,-51,-1,22,-40,18,-54,-44,-15,82,-30,-127,14,-4,-1,-39,-35,-65,17, 
  /* [897][0][][] */ -74,-65,76,-89,117,45,-87,-33,-62,36,30,63,51,51,22,38,112,53,-33,-32,-22,33,113,-127,31,9,59,-45,-64,-36,8,17, 
  /* [898][0][][] */ -86,113,39,-79,9,-95,24,0,-28,-61,16,-6,-16,-30,-127,21,69,-55,-63,-42,3,0,-19,20,-110,19,-7,-30,67,-33,-115,-10, 
  /* [899][0][][] */ -17,-127,-1,-62,-16,1,72,48,-6,21,24,21,32,37,5,95,-14,61,-21,-66,46,-117,-18,-60,-61,-39,3,-36,49,-72,102,-11, 
  /* [900][0][][] */ -20,70,-84,127,-21,12,-8,-20,-57,-91,85,-4,-60,72,36,71,2,-16,102,-37,-56,-6,88,37,30,-79,44,-41,1,-36,-77,40, 
  /* [901][0][][] */ -19,79,127,-57,74,18,0,-28,-48,-19,-80,-17,51,-4,12,30,81,80,-79,101,-57,-53,65,-26,75,-17,-20,10,64,-74,8,66, 
  /* [902][0][][] */ -61,100,18,-41,-39,13,-11,-42,-22,-31,127,64,-9,39,29,47,69,-5,89,9,41,-115,10,94,32,67,49,13,28,-11,-22,89, 
  /* [903][0][][] */ -127,89,-40,14,-65,22,61,39,-30,-47,-89,-44,29,-93,-12,-81,1,0,86,-60,117,-2,-2,20,-11,-85,5,22,-94,25,-121,110, 
  /* [904][0][][] */ 39,-50,-67,-24,6,29,127,-6,-3,-7,17,-102,17,60,58,40,-36,73,-47,-13,-63,-8,37,29,51,67,20,-44,-20,15,-17,-22, 
  /* [905][0][][] */ -21,-5,-69,11,44,84,27,8,-11,50,41,-102,-66,-26,-42,24,-66,2,-43,-40,68,-127,-10,-22,14,-60,-13,-44,8,-30,11,52, 
  /* [906][0][][] */ 2,-122,66,-72,-27,-114,0,-112,-8,-50,-76,103,-21,-67,-105,28,127,8,0,-17,3,7,13,2,-10,-8,26,-41,37,75,27,-40, 
  /* [907][0][][] */ -49,-27,10,56,10,34,70,7,-48,18,8,51,127,79,56,-2,-4,-99,-87,92,4,-37,-11,-21,-6,29,-19,41,-36,9,-109,31, 
  /* [908][0][][] */ 101,53,-80,3,11,65,84,15,-74,36,38,-39,-93,14,0,-35,52,-31,-114,-12,61,31,16,-99,13,-21,37,-44,127,70,119,-16, 
  /* [909][0][][] */ 52,19,25,-97,-44,56,5,61,5,116,-20,28,-3,39,60,-19,106,87,55,-127,20,42,-23,48,-31,-40,-38,25,-3,46,8,70, 
  /* [910][0][][] */ 31,-127,-89,-18,19,-15,-81,-25,-45,50,-24,34,-47,46,100,75,-90,9,67,36,118,19,-50,30,55,-46,24,-12,-47,-59,88,-81, 
  /* [911][0][][] */ 34,-38,5,22,65,20,43,46,-41,19,-4,127,-4,-12,35,-30,3,-6,-20,1,11,5,-21,-41,50,-33,40,-24,-11,-1,65,93, 
  /* [912][0][][] */ 8,32,-73,-69,-72,-19,-71,-74,-84,-21,-43,-7,-47,-25,93,-11,121,-8,-63,52,97,127,49,-7,-3,-89,8,85,60,-4,63,57, 
  /* [913][0][][] */ -25,-72,-8,3,18,-90,12,-84,-41,-38,-41,87,-42,-10,127,-21,52,-38,-25,76,-13,0,65,-33,13,48,1,14,-70,46,-4,19, 
  /* [914][0][][] */ -14,3,87,-107,37,-88,-31,-110,80,-33,15,-72,41,65,-127,-91,44,-6,4,-62,-116,-100,-69,28,19,-53,-26,-24,-69,-34,-52,-44, 
  /* [915][0][][] */ -60,-52,51,12,-26,50,42,7,17,-3,43,5,-78,-37,127,-58,58,4,-77,-20,23,-73,98,25,-28,49,-50,-44,-28,-23,-3,52, 
  /* [916][0][][] */ -43,127,-49,-4,-5,39,83,100,-53,55,13,-6,30,39,43,-32,7,60,5,-55,-34,77,23,29,-26,-36,-11,56,81,-107,64,-63, 
  /* [917][0][][] */ 21,-24,11,32,-18,-94,4,72,31,34,-39,-8,-45,24,-51,0,0,127,-22,82,8,8,18,35,-82,97,-95,-43,-64,-35,-45,-37, 
  /* [918][0][][] */ 18,2,17,-9,-7,-108,-12,-89,127,42,-3,-87,-93,-29,-43,-6,91,4,-37,-23,-23,-29,-26,-1,-3,-90,-14,2,-14,-88,105,-14, 
  /* [919][0][][] */ 48,46,-54,127,59,1,-7,16,-55,-64,25,-30,4,-32,27,30,-21,10,-89,-31,-85,-32,52,2,-30,34,58,-43,10,21,-92,13, 
  /* [920][0][][] */ 46,-26,10,15,52,9,-62,47,-29,-124,84,1,39,56,39,-13,38,89,16,6,31,-83,-127,77,19,0,-37,-9,5,-32,3,39, 
  /* [921][0][][] */ -56,-62,71,-91,39,-38,-68,7,-98,-56,37,79,-11,65,-35,56,-29,6,86,68,-16,127,50,-33,-14,-10,-85,-12,-16,105,-24,-14, 
  /* [922][0][][] */ -55,16,-5,-55,21,30,42,-65,-44,-127,40,64,45,21,125,-67,94,-17,62,2,-47,4,-51,3,6,-10,-30,-103,13,16,-39,53, 
  /* [923][0][][] */ 63,-53,29,102,-2,62,5,22,32,51,-32,9,26,-6,-34,-3,21,85,-7,-9,-58,-127,22,-96,-52,47,-17,25,19,43,18,65, 
  /* [924][0][][] */ -15,44,-79,23,54,-16,49,-85,-44,-14,99,60,-24,-17,16,-7,7,-6,22,30,29,-35,-32,16,-24,-108,31,58,-83,28,127,-61, 
  /* [925][0][][] */ -13,12,-75,46,30,-37,-58,-127,31,-64,78,88,-17,-25,8,27,88,71,35,-71,-54,-61,44,20,84,-3,21,42,-59,-15,35,-47, 
  /* [926][0][][] */ 127,29,-4,-26,-105,36,-45,12,-59,50,28,-53,-1,70,-60,-120,-6,-57,-70,-60,46,-92,-45,-23,-17,33,-80,46,50,-15,29,19, 
  /* [927][0][][] */ 55,-20,-127,49,-42,-24,63,-75,20,-10,-88,-77,81,38,-46,-89,26,-31,9,10,-9,27,16,-15,-22,22,-92,-34,-25,24,27,-94, 
  /* [928][0][][] */ 90,-19,24,91,24,-30,88,62,44,-8,-22,11,-34,-127,-6,-13,-3,25,-31,-45,-23,5,-4,24,-23,-8,90,-9,84,-45,-13,31, 
  /* [929][0][][] */ 27,24,-57,-69,-95,28,27,45,-39,-19,0,-49,14,-127,83,-61,22,15,7,-44,-97,115,6,2,-46,12,16,58,11,-12,-102,-70, 
  /* [930][0][][] */ -90,-2,23,-54,-41,-25,74,-32,101,23,30,-52,-45,127,-40,95,-107,-28,26,11,80,1,28,-53,30,121,123,-28,68,41,15,-48, 
  /* [931][0][][] */ 14,61,-4,117,67,63,-3,-6,20,-47,70,-31,-22,-87,-27,109,65,-1,-116,-26,2,70,-13,-122,-35,-113,-118,-36,-67,127,0,-30, 
  /* [932][0][][] */ 43,31,-7,93,-14,-18,-5,68,-27,27,44,-62,127,43,-36,-69,-61,-2,-74,70,-9,-106,-54,-34,83,7,3,56,-92,51,-65,42, 
  /* [933][0][][] */ -22,26,51,38,35,-29,-78,-77,14,73,24,41,-24,32,-15,-2,-56,-26,-33,81,37,-71,-127,39,28,-32,-38,9,22,-49,31,-2, 
  /* [934][0][][] */ 38,-23,32,49,-23,56,-127,7,-51,-8,-53,13,52,-123,-16,25,29,-14,5,21,119,-23,-22,-63,41,41,-72,-40,58,-20,53,42, 
  /* [935][0][][] */ 45,58,4,-59,-99,64,-122,80,-18,55,-12,-56,12,72,-101,-56,21,-5,38,-37,-30,28,127,70,-49,23,0,-16,85,46,-33,-96, 
  /* [936][0][][] */ 29,65,-42,50,41,-71,83,95,90,73,27,-19,0,102,19,39,76,63,19,20,27,127,-29,-103,46,87,-59,-30,-81,59,6,9, 
  /* [937][0][][] */ -35,-29,-46,-110,-38,-29,-4,-66,20,54,-28,11,73,-32,12,97,-30,88,-15,-8,110,-11,43,82,46,-36,35,-38,-15,127,-49,89, 
  /* [938][0][][] */ 48,-4,-49,-2,-109,-2,-65,-33,73,26,-93,-26,-19,41,-21,-21,121,-67,-56,-50,41,-9,84,80,56,104,57,83,-2,110,-127,-19, 
  /* [939][0][][] */ -61,5,-72,93,-44,-127,-17,-54,16,-52,16,25,-5,-15,85,6,-14,-17,-16,46,27,-27,15,66,-21,-67,-14,-46,-82,-59,-29,-38, 
  /* [940][0][][] */ -9,-35,47,55,-51,-25,-5,30,64,22,-6,-76,31,31,-67,23,21,-49,34,-41,-21,-73,-98,64,-44,-127,29,37,-19,-25,-72,-22, 
  /* [941][0][][] */ -26,43,25,57,-6,-37,21,44,63,-27,-26,-6,-6,-31,68,1,31,-39,-1,-41,-12,-7,-49,-8,-31,-16,-3,31,127,5,-99,30, 
  /* [942][0][][] */ -35,-53,36,1,41,-89,-119,122,-11,87,20,47,-14,-11,34,9,70,8,127,-28,-12,-11,-53,-107,-34,-2,-38,-23,-27,-26,28,63, 
  /* [943][0][][] */ -36,36,-105,-5,56,79,80,-127,74,-33,-71,-46,56,-3,52,-17,20,-9,-49,31,-20,-82,71,-90,-36,-1,111,-16,-15,-30,-23,84, 
  /* [944][0][][] */ -45,10,5,-50,26,113,46,9,15,-121,50,-90,2,39,-105,5,69,-127,-16,-29,-108,-32,-52,-27,-52,41,-60,87,48,117,63,-7, 
  /* [945][0][][] */ -89,31,34,-51,20,27,32,24,52,51,-74,-40,-127,15,30,84,-47,39,-43,-43,-88,-93,18,-46,102,59,-27,-39,34,16,29,-7, 
  /* [946][0][][] */ 92,23,-84,-7,76,-55,42,-5,65,73,127,-64,-45,-1,31,26,15,3,-52,91,21,102,49,15,-44,30,-17,-20,-84,92,-61,7, 
  /* [947][0][][] */ -17,-27,-14,-15,-68,51,-44,-27,-36,-17,-19,42,70,14,10,-11,51,52,-11,1,47,-127,-15,-41,-22,33,25,-53,-10,4,35,-17, 
  /* [948][0][][] */ -44,24,-14,-37,53,92,29,23,20,-36,17,59,29,-127,-58,-23,-52,25,85,-25,-39,16,-13,38,-13,2,-22,3,51,103,-28,44, 
  /* [949][0][][] */ -85,8,-36,-42,-34,-14,-79,-119,90,-10,26,-66,-127,3,118,-35,68,-31,-68,-37,6,-57,-126,-14,-96,51,23,-15,-95,-38,7,33, 
  /* [950][0][][] */ 26,59,-17,6,-74,-106,44,-41,28,43,80,0,74,-69,-117,51,-66,-38,45,-24,-38,-9,127,26,-7,70,63,14,57,-22,-36,-22, 
  /* [951][0][][] */ 20,54,-58,-80,-42,23,116,-34,-7,32,-75,72,3,-127,78,-47,18,-11,-77,51,76,12,-14,-58,-1,-10,-14,25,65,-23,31,-5, 
  /* [952][0][][] */ 8,-12,-14,27,127,55,-31,-47,36,-1,34,15,-26,-6,-2,-9,-14,4,-11,-10,-3,-34,23,44,-23,10,-45,-13,-67,-1,-55,1, 
  /* [953][0][][] */ -27,-5,127,-17,8,5,-118,25,26,23,2,-63,10,122,-126,-29,-29,8,-4,27,-6,-12,39,-2,6,18,-28,52,-17,5,-67,-28, 
  /* [954][0][][] */ -28,-56,114,33,58,-26,-43,10,0,65,-86,61,-77,103,-42,127,-11,-77,-27,34,54,58,-23,3,-9,-76,-6,43,-67,-59,7,1, 
  /* [955][0][][] */ -25,37,41,-46,68,18,26,65,-50,28,4,-88,-35,-6,-41,-61,-36,-45,-99,-41,20,127,17,-6,3,31,-4,-41,61,21,-72,-48, 
  /* [956][0][][] */ 27,127,72,-44,19,-58,-6,-52,-3,-95,-21,32,35,60,-21,-39,-20,-58,35,-56,25,52,35,23,18,-52,-25,36,18,22,-34,-22, 
  /* [957][0][][] */ -15,-2,36,34,-62,14,-9,36,-24,1,-38,29,63,-69,99,-127,11,26,-53,-4,42,-40,-27,-19,11,72,-74,-52,7,22,-93,32, 
  /* [958][0][][] */ -127,102,-11,-81,21,5,29,-52,39,-81,49,-1,2,-45,5,61,80,-19,93,-83,50,-7,-2,21,35,-22,5,-33,-59,45,37,22, 
  /* [959][0][][] */ -103,-44,20,6,-3,69,82,-26,105,52,61,-28,84,21,25,64,-82,91,-29,-25,-4,-38,65,-79,6,-64,-121,-48,-127,8,46,25, 
  /* [960][0][][] */ 0,-11,60,26,47,43,-36,20,31,38,39,-43,-49,-27,-80,58,75,-41,5,36,-34,96,27,46,-40,45,-7,-54,50,-58,127,34, 
  /* [961][0][][] */ -79,28,-14,95,30,22,5,65,35,-47,71,5,50,-12,-43,-2,-70,-84,-58,-69,46,3,-4,-34,-111,-127,-78,12,-35,39,36,53, 
  /* [962][0][][] */ 52,74,-127,-4,1,14,51,-87,8,-1,-18,-1,62,-86,57,-8,-28,40,18,74,8,-15,-62,-3,-30,-56,-13,-11,4,-36,-1,7, 
  /* [963][0][][] */ -7,10,-47,-26,-30,24,3,33,-44,47,24,37,-68,-24,-4,25,63,-90,-45,-78,127,19,11,-80,-19,-62,29,45,-35,41,-19,100, 
  /* [964][0][][] */ 88,-94,83,0,44,62,27,-59,-62,94,50,-64,43,-58,-17,26,22,31,35,-20,65,-4,53,-3,-69,74,-10,-41,-68,62,33,127, 
  /* [965][0][][] */ 44,109,-48,8,-3,-62,-19,16,58,-1,-26,-31,-40,10,-13,-46,-40,-127,78,-33,-44,92,-101,-100,32,-49,-28,120,-19,-21,7,21, 
  /* [966][0][][] */ -32,-76,-21,-24,-16,8,74,-33,7,22,-127,-4,49,-51,24,-37,9,-60,8,-11,37,-100,23,-56,1,2,-11,48,-4,-32,-19,10, 
  /* [967][0][][] */ -11,-18,127,-86,55,-28,2,8,-18,10,-3,-8,-71,-20,-80,45,35,-25,3,41,44,21,59,-5,52,28,-55,-31,-55,-2,69,29, 
  /* [968][0][][] */ -49,123,34,-4,122,-52,89,12,8,-55,3,77,-37,-33,-127,30,-103,-37,-24,82,4,-83,7,1,21,-21,42,119,-6,-53,12,10, 
  /* [969][0][][] */ -35,96,43,-6,-56,37,-31,7,-127,-14,82,-21,7,21,16,-23,-15,5,0,45,-3,-54,-45,-63,-5,-6,20,87,0,-54,-16,7, 
  /* [970][0][][] */ -88,36,5,17,114,-38,105,-87,106,94,-39,-2,-33,-112,20,-54,79,-108,77,1,-63,-84,-99,54,121,-69,-30,-25,-127,-35,-56,104, 
  /* [971][0][][] */ -38,-30,-53,-6,33,41,11,-17,-111,-33,35,19,-48,-9,-59,-15,-14,2,11,-43,-22,-59,65,-8,-127,99,-52,-53,-53,-82,38,-25, 
  /* [972][0][][] */ -127,-1,-10,-32,93,-48,34,-53,65,1,-14,63,-10,2,-45,12,63,9,-7,19,-31,16,30,27,-52,-38,-3,-27,38,3,7,-120, 
  /* [973][0][][] */ 62,-16,-30,-127,30,-15,-22,56,-97,78,36,-74,-16,-39,-6,-58,31,23,12,-106,-61,9,-82,-10,28,-15,-107,39,95,19,-17,-41, 
  /* [974][0][][] */ 25,28,-27,4,69,-56,-8,-54,-1,-127,17,94,-26,57,28,91,38,-8,3,24,69,-22,46,52,59,-42,-33,-40,19,-49,48,-87, 
  /* [975][0][][] */ -98,-9,30,-6,-39,-22,-12,127,-5,39,-8,-12,-5,-40,42,-11,-76,-44,-14,-76,66,23,-67,-12,-37,-76,53,-111,18,30,37,49, 
  /* [976][0][][] */ 59,-28,-122,9,-65,30,-58,75,-30,14,-9,-19,-18,-95,46,-22,91,77,-29,47,48,-19,-61,63,-99,36,39,-72,100,35,127,-30, 
  /* [977][0][][] */ 85,11,56,-49,-9,-18,-19,-37,-51,-48,-47,12,-26,-53,127,-116,-46,8,-12,93,52,2,106,29,-38,106,35,66,-53,71,-108,-65, 
  /* [978][0][][] */ 16,-46,57,-51,-18,-25,31,-4,10,-4,-37,-18,-8,35,-127,-41,45,23,-2,11,26,37,-10,-2,-21,-30,3,-17,63,47,-19,42, 
  /* [979][0][][] */ 94,-2,0,76,26,-37,-54,15,42,-59,127,3,-90,-28,79,51,-7,-44,-25,-19,84,-40,-11,53,-6,56,-25,-54,27,-10,-9,5, 
  /* [980][0][][] */ 28,0,26,-1,1,16,18,-2,-19,56,-32,-10,-105,46,-17,11,8,-29,-15,-34,98,-41,-108,54,29,-5,11,17,26,-78,127,1, 
  /* [981][0][][] */ -85,69,11,18,-66,10,-15,15,78,-43,-55,23,55,-83,53,-17,-73,-55,82,0,-27,43,-48,-1,113,-47,127,6,108,3,-90,42, 
  /* [982][0][][] */ 39,-25,98,9,-30,-13,-17,79,41,54,7,43,-127,-71,-37,-72,49,60,8,48,112,-94,2,44,72,57,13,21,-6,122,-13,31, 
  /* [983][0][][] */ -50,-79,-59,28,-31,-13,-82,89,-33,43,2,69,-90,-68,32,-82,1,22,-54,81,-42,-23,-127,13,-55,-10,22,-92,-12,-19,-68,56, 
  /* [984][0][][] */ 60,-19,77,74,-13,93,-14,-10,-62,9,-60,9,-34,-32,-85,59,12,-5,7,127,103,-21,49,-44,36,6,14,10,-30,-17,53,3, 
  /* [985][0][][] */ -74,-23,93,41,-68,22,59,-37,68,56,73,-35,15,-111,-34,127,99,-52,23,-11,95,4,16,-34,-5,-58,-1,36,-7,-30,3,10, 
  /* [986][0][][] */ 27,58,100,-31,21,29,-42,46,-40,-72,-115,-99,-68,76,-89,-43,-123,-31,71,-43,8,-47,-48,9,18,85,-41,44,127,-52,-27,-83, 
  /* [987][0][][] */ -40,126,9,-12,30,105,-91,-69,-52,-31,-16,58,25,-60,9,-15,94,-62,-127,-56,-6,13,-20,-96,-26,-104,-11,49,-9,15,-16,27, 
  /* [988][0][][] */ -8,59,31,-24,0,-10,-66,-45,-6,21,-34,-11,-11,0,13,-78,43,-19,-9,-10,-8,36,-10,-16,115,33,25,28,127,47,34,-54, 
  /* [989][0][][] */ 53,29,10,-15,80,32,-28,3,-20,-108,-26,86,-20,37,-8,12,61,-127,96,-33,-70,-17,7,58,-21,23,9,-113,-14,-42,-2,57, 
  /* [990][0][][] */ 47,11,16,-76,4,16,-2,127,-50,46,61,59,10,24,-87,-51,16,17,-49,18,27,-53,-42,92,-68,-24,-58,-58,-53,72,60,-24, 
  /* [991][0][][] */ -28,8,28,-13,-29,37,62,-65,-45,6,-15,-45,44,-76,23,83,42,2,-59,34,-26,65,-76,-95,12,-8,92,-20,127,18,-63,31, 
  /* [992][0][][] */ 37,18,-21,-2,9,-48,18,34,-62,42,68,-32,62,-7,38,73,127,74,-23,37,2,9,74,-43,37,5,-32,-29,-41,3,-33,25, 
  /* [993][0][][] */ -53,-47,103,45,-9,-16,-38,-26,-10,11,69,33,-4,25,-32,-32,-21,-54,-58,66,30,127,-57,-26,37,47,-60,-3,-29,0,16,10, 
  /* [994][0][][] */ -53,-52,-11,8,-76,-2,-4,31,-7,-56,43,-27,46,25,36,-39,0,8,-35,-5,-96,23,-69,0,25,-20,127,-22,8,-14,59,-55, 
  /* [995][0][][] */ -44,9,-68,-32,-48,-19,24,81,10,-89,0,-18,-55,42,-6,66,-127,42,-35,-35,-17,-11,42,14,-21,49,-100,-26,52,17,2,-82, 
  /* [996][0][][] */ 72,33,-46,-10,-11,57,65,17,11,25,20,-73,33,-30,79,-90,-4,6,-5,-53,-21,10,-40,127,-38,-13,17,42,120,19,47,-21, 
  /* [997][0][][] */ -41,-127,62,-70,37,-52,58,67,-107,26,-23,-45,41,52,-42,12,103,6,-79,21,-37,-8,124,92,-79,29,-1,7,98,-71,-123,-41, 
  /* [998][0][][] */ -95,-64,62,18,-6,-57,-62,58,-48,71,-26,-9,26,55,-62,-16,59,19,-127,-87,-3,-39,54,-2,28,6,11,-10,-65,24,-15,-62, 
  /* [999][0][][] */ -13,95,52,48,15,-57,15,23,-28,-104,-80,61,97,-127,91,-29,-35,86,-126,72,32,-125,90,-42,15,-50,-13,43,-41,104,-78,21, 
  /* [1000][0][][] */ -1,-63,113,-70,-100,-14,10,58,-60,119,31,110,-79,-74,-70,-42,37,-98,37,53,72,-61,-127,3,61,18,14,-15,-76,12,-30,10, 
  /* [1001][0][][] */ -35,34,-43,-16,62,41,-47,9,-41,96,31,-40,16,104,48,26,-53,28,97,-38,91,33,-76,47,56,-33,28,-127,76,71,6,-80, 
  /* [1002][0][][] */ -35,63,35,25,-15,-35,10,-117,27,7,-58,-77,0,60,-79,-18,9,-39,24,24,1,33,127,35,10,26,-117,95,-94,-52,40,-14, 
  /* [1003][0][][] */ -30,-5,-35,-6,-55,-127,71,31,58,-30,-36,6,50,-18,-17,-22,-23,30,3,47,-29,18,112,7,13,18,-51,-8,-13,22,53,76, 
  /* [1004][0][][] */ 27,-127,-39,-32,36,-39,-62,16,3,-22,-53,-27,48,-50,53,-15,36,70,8,-20,-8,-1,57,-8,-2,-47,8,-73,-61,51,32,-81, 
  /* [1005][0][][] */ -62,4,57,-6,-83,-102,-60,-3,-54,-91,-49,-88,-127,-19,-60,-6,29,-20,61,-30,84,-57,-54,53,71,18,-117,-127,6,43,70,33, 
  /* [1006][0][][] */ -12,43,16,-14,64,-20,-14,25,-67,93,77,-19,-13,-38,-3,-6,3,49,100,-127,-26,61,83,-90,-19,10,49,46,78,-13,-2,58, 
  /* [1007][0][][] */ 71,-3,50,-22,13,-51,46,2,-95,-41,43,-11,70,-127,-8,4,-13,16,-22,-18,72,59,-52,5,14,2,4,7,43,70,-74,-26, 
  /* [1008][0][][] */ -127,-65,-38,-47,-19,-45,-6,54,-11,15,44,-2,-5,-4,-22,33,-10,-14,14,44,18,42,-16,11,29,26,-7,-12,-9,-77,8,-10, 
  /* [1009][0][][] */ -23,1,9,48,101,66,5,7,-84,118,-68,35,-82,77,-127,-27,40,57,9,107,-47,-60,15,41,8,-35,-25,42,73,-43,46,24, 
  /* [1010][0][][] */ 33,69,49,97,-57,2,-49,20,-48,-62,-42,44,100,-87,-38,-104,31,127,-62,-3,-56,23,77,-17,-9,-76,-1,-46,33,-25,-20,-22, 
  /* [1011][0][][] */ -96,-32,23,-18,-106,-15,-127,39,8,49,-37,-9,18,89,7,-53,83,57,-31,58,8,-75,-72,41,-114,-60,-14,-13,-30,17,-31,-100, 
  /* [1012][0][][] */ -127,-15,-40,38,-41,-57,74,29,22,47,-77,1,-14,-49,78,-49,-2,27,0,11,-27,12,-9,-68,-78,28,117,-33,-15,0,36,-44, 
  /* [1013][0][][] */ 9,91,74,-50,-51,-30,-6,-17,-21,-107,5,-55,-52,-10,-19,-36,33,84,41,-42,52,-49,36,-50,127,45,-97,41,-57,-15,-19,31, 
  /* [1014][0][][] */ 23,42,-41,17,24,47,41,-6,4,19,-4,19,8,-24,-5,-2,-63,-18,30,-43,-43,11,47,48,-50,-32,-127,-32,57,-18,46,21, 
  /* [1015][0][][] */ -7,95,26,42,70,7,13,4,-62,-34,20,-70,-3,7,31,6,-109,-66,-110,4,52,14,-127,24,30,23,-54,-25,-22,-72,-34,42, 
  /* [1016][0][][] */ 48,-72,-36,34,118,-27,15,-18,-21,11,13,57,79,3,85,12,-20,24,-23,-98,-41,6,56,-122,-86,-36,-27,32,127,9,-65,34, 
  /* [1017][0][][] */ -127,80,23,6,-31,-65,53,82,-88,-62,-82,43,-30,-32,27,17,-5,-54,-36,3,50,-8,-11,24,-81,-15,-63,21,34,-80,35,38, 
  /* [1018][0][][] */ 1,10,26,-127,38,19,45,124,32,33,66,8,90,34,-15,41,56,-29,53,8,-6,-38,-29,5,-2,-61,29,34,-12,-12,-51,-98, 
  /* [1019][0][][] */ 16,-32,127,41,73,-26,11,26,18,-5,52,-54,-54,0,1,-16,-16,13,-24,-73,-22,-18,38,4,17,-30,-55,-60,4,-18,-34,7, 
  /* [1020][0][][] */ 30,-2,-92,75,105,-23,-19,38,88,61,59,-88,-40,-93,12,13,51,-23,-52,-82,121,54,-4,46,99,99,-65,97,-127,31,-13,44, 
  /* [1021][0][][] */ 11,-31,99,-14,-10,37,13,-20,31,-22,21,33,3,1,11,22,-22,-12,-26,12,16,99,2,-16,-26,-30,-7,10,127,12,95,33, 
  /* [1022][0][][] */ 37,19,103,-102,26,39,76,-103,55,-25,-127,-24,15,98,10,74,106,-67,-76,-39,111,78,-38,41,74,83,-108,99,-92,-52,-31,-39, 
  /* [1023][0][][] */ 44,-60,77,18,127,-36,-65,79,76,23,-80,-50,-21,-34,67,-24,19,-81,66,74,49,61,14,66,44,44,13,67,-107,20,-81,-49, 
  /* [1024][0][][] */ -25,-73,14,-56,-26,-39,-73,-4,71,-27,-11,3,89,41,0,14,-15,57,-38,-5,-90,44,-6,-25,-32,-14,1,-17,15,35,33,127, 
  /* [1025][0][][] */ 52,51,-3,60,94,-47,91,75,55,8,59,-51,-81,71,-49,-6,-18,-20,55,30,2,-14,-14,-127,-14,32,22,-3,-56,99,24,-23, 
  /* [1026][0][][] */ -34,-14,-12,-77,-28,54,18,35,-70,9,54,4,19,33,-19,78,17,-127,-29,56,12,36,-49,-27,-63,-13,60,30,17,-26,-20,-48, 
  /* [1027][0][][] */ -13,-11,-127,-70,64,15,16,17,14,44,11,-10,-56,-27,14,10,16,-22,-62,18,-2,-96,19,-14,22,56,-27,49,63,29,-16,-97, 
  /* [1028][0][][] */ -79,-41,-67,-27,66,63,54,21,23,-81,15,56,-9,-27,-4,-46,-16,11,-54,-21,-85,-21,-9,-25,28,49,-4,-84,-1,-127,43,20, 
  /* [1029][0][][] */ -29,47,-109,54,23,-88,13,-93,-127,-23,-1,125,-12,90,46,17,-91,-74,43,-1,28,3,-6,-120,-39,84,-118,94,52,46,-109,61, 
  /* [1030][0][][] */ -51,67,-31,42,1,12,73,32,-31,36,127,54,45,-52,71,-48,75,-75,-3,73,66,14,92,-77,15,37,-35,-56,3,-11,-48,8, 
  /* [1031][0][][] */ 26,-63,-95,-1,16,-3,72,-88,51,-35,-72,14,-27,-92,-60,107,109,-41,12,42,-91,40,-3,-108,-115,-31,64,-86,15,-74,127,-5, 
  /* [1032][0][][] */ -119,1,-39,-47,61,38,33,110,-64,29,127,88,15,-42,7,-20,13,11,-94,-12,49,-8,-20,-67,23,-36,-47,17,-81,3,-39,38, 
  /* [1033][0][][] */ -80,-33,9,18,54,37,32,28,8,-110,-12,12,-65,-24,-108,7,53,-60,61,-11,60,15,61,-51,-40,65,-46,24,0,-17,-93,127, 
  /* [1034][0][][] */ 79,77,41,-7,8,67,-33,67,-40,-14,-47,47,-53,-55,9,-25,49,-87,-81,39,-127,50,-18,-8,78,5,-50,13,53,-22,-58,-6, 
  /* [1035][0][][] */ 57,-68,79,-12,33,-66,-36,39,127,67,-48,-50,10,-2,58,62,-43,-1,-16,75,-6,79,10,38,-61,-25,-14,-27,-20,-34,57,-4, 
  /* [1036][0][][] */ -6,-43,77,-65,48,4,40,78,-127,13,21,74,-118,-10,0,29,-46,-51,9,24,-15,-28,-18,-29,21,68,-33,-15,71,-70,9,-20, 
  /* [1037][0][][] */ -5,25,87,33,127,-17,34,24,-45,6,63,11,12,-19,-37,0,-3,32,-53,78,-71,-42,14,81,-7,17,-10,39,20,13,60,43, 
  /* [1038][0][][] */ -36,-1,43,-86,17,23,-76,120,32,-1,19,28,-62,56,127,-13,-21,-101,2,-42,75,92,13,27,64,26,55,33,-27,21,-7,-38, 
  /* [1039][0][][] */ -21,-58,-53,-62,-22,-53,-25,80,-103,-11,-11,24,-17,-21,-33,-3,-55,-12,56,61,-11,60,-26,35,68,-17,127,11,35,73,-8,-15, 
  /* [1040][0][][] */ -64,38,-8,-17,-40,42,-67,68,9,6,-60,19,29,-47,-10,-99,41,-53,-17,-1,127,-13,42,-33,53,-41,68,-20,-43,82,10,-19, 
  /* [1041][0][][] */ -127,79,65,-18,60,-115,19,-30,62,8,-62,-83,3,41,-106,1,-43,78,-72,31,19,8,-95,-50,-52,17,-17,59,-62,-49,24,34, 
  /* [1042][0][][] */ 6,33,-96,-127,-82,-118,62,36,21,-3,-39,-1,25,12,-7,62,-55,-57,-39,-16,-90,54,68,-23,-19,-37,14,75,-59,2,30,50, 
  /* [1043][0][][] */ -15,8,-80,-53,-68,18,-97,92,26,-17,68,-107,103,-60,26,-22,-45,-78,-33,110,-127,-54,34,-71,49,8,-39,-41,-59,100,70,70, 
  /* [1044][0][][] */ -31,-127,45,11,45,23,-13,59,-86,23,58,6,-72,2,47,-10,-14,-57,-39,110,38,66,44,14,11,-67,85,-100,-3,4,48,-31, 
  /* [1045][0][][] */ 35,16,25,96,95,48,85,20,127,19,12,-103,3,-24,36,-36,-25,-80,69,-68,29,106,16,-36,36,-38,8,48,16,10,4,-62, 
  /* [1046][0][][] */ 34,-17,3,-1,-51,68,-75,18,105,32,-29,20,-36,-1,-22,29,-19,-38,14,-127,-10,-63,45,13,-32,-65,-12,-23,-9,-10,65,-40, 
  /* [1047][0][][] */ 97,-7,26,-29,-15,-48,26,22,-69,23,-76,22,66,87,-103,0,-41,9,-11,44,13,-22,112,-16,-98,66,127,30,-15,-40,4,21, 
  /* [1048][0][][] */ 20,-12,20,-2,36,65,-45,127,-25,-45,-105,-3,21,27,-78,29,-63,62,44,15,-7,11,-8,-18,-46,-29,20,98,47,55,15,-7, 
  /* [1049][0][][] */ -25,6,-38,-40,10,-58,54,-20,29,-65,-64,80,-20,-44,-4,-64,40,66,-16,40,-1,-74,-47,26,127,-61,-3,101,-12,-33,112,-30, 
  /* [1050][0][][] */ 22,-16,0,6,46,-25,-9,-66,-15,-40,14,-16,-127,64,-5,-26,-14,-1,-40,-8,-77,82,-52,27,-11,-6,32,13,71,-49,91,65, 
  /* [1051][0][][] */ 10,-11,10,-19,94,31,28,127,-40,40,-52,51,-7,-14,-40,-1,-127,-55,15,-94,22,-6,-81,91,106,-16,43,12,-34,41,55,11, 
  /* [1052][0][][] */ 23,-26,65,-59,15,-75,63,-14,17,-17,30,-29,-41,-31,-106,-27,69,-42,68,12,-55,-98,-40,37,-19,4,-31,4,46,78,-9,127, 
  /* [1053][0][][] */ 57,83,10,2,-18,-25,-27,9,-82,-2,7,75,117,12,26,-14,-18,26,-50,-100,-5,-93,-19,-36,-127,-86,35,-21,-20,16,-86,-31, 
  /* [1054][0][][] */ -74,-51,-13,-23,-127,-5,7,17,-25,-38,13,-32,-44,-18,-22,20,-44,-3,-14,39,34,-120,8,-77,41,42,-28,3,84,56,-32,76, 
  /* [1055][0][][] */ -19,92,-22,-71,24,-34,40,21,112,-127,58,48,41,13,-67,17,125,-33,62,-27,-73,67,24,-17,-15,32,14,40,3,-15,41,32, 
  /* [1056][0][][] */ 17,-3,-29,13,85,72,60,-46,-19,-55,-127,83,46,57,107,-86,42,-80,7,-16,75,62,-4,-3,-87,-29,-109,-6,60,-16,-30,26, 
  /* [1057][0][][] */ -53,-81,-93,-107,47,-127,-13,-123,-90,-41,-35,-38,66,54,40,40,32,50,-42,0,-1,-73,5,45,87,45,15,-48,123,-43,25,8, 
  /* [1058][0][][] */ 71,-79,44,5,-16,37,-66,127,17,8,-33,15,-3,30,-60,-36,-28,-11,3,35,29,-45,-22,-12,66,3,8,-28,-1,28,90,18, 
  /* [1059][0][][] */ -118,-113,-35,47,67,8,66,127,116,-72,-65,-58,-44,-84,-43,-43,76,-51,71,-8,-29,33,11,27,24,-58,-9,82,-52,37,-32,-29, 
  /* [1060][0][][] */ -30,-37,-69,1,-71,-127,3,-6,-59,32,76,-78,-98,20,-30,-111,17,62,9,18,-38,-37,-22,-122,-92,-5,58,47,-24,37,30,-21, 
  /* [1061][0][][] */ -19,-65,13,-9,-16,127,87,52,18,21,-62,-6,-43,-18,-110,100,13,-49,42,54,95,9,-103,46,27,4,58,42,17,81,91,62, 
  /* [1062][0][][] */ 4,31,-4,25,67,15,-67,74,-44,-127,99,13,13,-20,-8,64,41,-43,15,-39,19,-81,5,46,-1,67,2,19,21,-8,72,23, 
  /* [1063][0][][] */ -105,-48,108,17,41,-47,-46,-16,-60,22,30,25,-100,3,-55,41,10,-26,108,49,23,3,-127,-14,66,-32,33,-51,-106,16,22,-9, 
  /* [1064][0][][] */ -16,18,-68,-127,85,-71,70,-83,-36,-67,-12,-44,-37,15,-23,-8,-15,4,-46,-22,30,24,-69,59,35,-104,28,-5,-10,-10,16,-85, 
  /* [1065][0][][] */ -22,27,5,27,-54,-17,27,-72,-53,-47,-72,-109,-70,-67,4,-23,-23,-98,-20,56,127,87,-30,-6,14,16,45,-40,-3,70,0,-41, 
  /* [1066][0][][] */ -53,55,46,-75,-27,-124,42,-15,20,40,6,-79,29,-54,45,33,16,-40,45,-14,2,-49,13,-77,31,-127,-9,6,65,15,-13,-110, 
  /* [1067][0][][] */ -76,8,-13,-40,10,-40,-29,36,-60,15,-67,126,50,-71,-37,21,-25,109,-17,-127,-48,54,-51,-16,-56,-3,-57,10,-28,22,90,-5, 
  /* [1068][0][][] */ 30,-6,-11,-8,-24,-21,-7,-25,-67,28,72,-8,-20,-12,-63,34,67,-76,23,-49,81,-25,50,-34,-7,8,1,65,4,20,127,44, 
  /* [1069][0][][] */ -49,-43,16,-54,-4,62,2,69,-13,30,-23,14,-21,-30,34,24,60,28,65,-49,99,39,13,-6,-127,42,31,84,13,49,25,-40, 
  /* [1070][0][][] */ 47,10,-127,-1,-5,113,71,20,-57,-32,-4,41,115,-33,92,-20,-14,25,8,-62,18,83,58,33,-31,-62,31,47,-26,8,64,13, 
  /* [1071][0][][] */ 19,32,-44,127,-32,37,-68,44,-1,23,10,65,39,14,-63,66,27,-69,-3,50,45,-60,21,-68,-5,68,42,-39,-8,18,20,-19, 
  /* [1072][0][][] */ 123,18,9,23,29,19,51,127,-87,-46,17,-6,41,-77,-57,-62,76,28,10,-54,-7,-18,-52,-42,4,3,104,-2,-58,1,112,54, 
  /* [1073][0][][] */ -66,28,34,92,40,-16,15,-30,-15,39,59,-14,-85,-15,50,-31,127,-77,-110,69,-5,59,51,27,-36,77,96,-59,114,-102,93,86, 
  /* [1074][0][][] */ -22,-26,-84,-71,34,1,54,103,24,-110,7,45,-19,-44,39,-59,7,-9,-126,97,41,84,-21,36,-74,42,127,-50,93,70,-36,-38, 
  /* [1075][0][][] */ 26,86,26,-5,14,-13,-7,38,32,20,-127,-12,52,-24,-53,40,12,-27,-50,-18,-8,68,29,-6,-58,-40,28,-54,44,74,-8,-11, 
  /* [1076][0][][] */ 6,38,84,8,28,-127,-86,-70,-47,20,-74,4,-57,41,42,-33,-10,107,-14,-14,-33,-96,-41,18,118,-4,26,70,-45,-12,77,84, 
  /* [1077][0][][] */ 17,-5,-15,2,-2,-25,-66,127,58,0,82,2,-21,-29,-48,49,42,-49,-63,-26,-27,69,-102,-68,8,76,99,-66,83,37,-16,19, 
  /* [1078][0][][] */ 33,0,22,70,82,6,15,23,18,73,-78,-9,-6,-50,-33,-93,-101,-15,-110,-127,-44,60,47,33,-4,8,-56,38,-5,-31,-19,35, 
  /* [1079][0][][] */ 72,-36,4,-34,112,48,-30,79,-16,-8,-32,-57,92,-64,-127,21,-98,38,-23,44,31,42,-39,52,-89,27,-59,-9,3,-22,-86,20, 
  /* [1080][0][][] */ -65,30,-33,1,81,-19,-76,-8,60,110,9,70,-113,-18,18,127,16,-90,21,-89,30,83,0,-16,-69,23,-41,57,125,62,28,-44, 
  /* [1081][0][][] */ 28,1,30,92,19,-34,21,-106,-39,43,-29,-48,-3,-10,29,-54,-38,35,14,-8,62,-11,51,-2,-127,-41,-37,8,-9,14,-14,101, 
  /* [1082][0][][] */ 44,4,-13,-72,1,41,5,71,2,121,20,-77,75,21,110,29,127,18,-32,56,-55,43,-30,-49,56,0,60,68,14,99,-80,80, 
  /* [1083][0][][] */ 65,-77,63,54,-11,7,-103,13,22,-112,37,-127,3,34,4,-35,7,-31,-12,-45,48,60,-20,39,-18,-48,17,-76,54,26,38,44, 
  /* [1084][0][][] */ -9,46,31,-16,8,36,-22,69,-19,19,47,31,-125,46,11,9,-39,5,31,127,-80,-17,-72,-99,8,74,-53,59,-35,60,-52,10, 
  /* [1085][0][][] */ -35,31,9,21,8,34,40,11,-13,-17,4,3,-26,54,29,-28,-78,-33,-49,23,-33,-79,-127,11,33,-46,-4,-9,-24,-48,-6,-78, 
  /* [1086][0][][] */ -29,-106,-38,-13,-16,49,-13,74,42,21,-18,-24,26,-7,-44,-10,0,26,-65,2,1,19,65,-78,-127,-21,-4,47,14,-28,40,-14, 
  /* [1087][0][][] */ -33,-26,12,23,3,-21,-47,56,5,-34,21,-3,32,-46,-18,-47,-53,49,-24,127,-50,53,-54,11,-6,22,99,-42,-55,123,-17,-65, 
  /* [1088][0][][] */ -13,32,24,-25,-31,-25,2,-47,-10,0,9,14,-16,11,127,-17,31,-27,-15,3,111,36,27,35,-5,-92,75,-13,-49,-22,-51,-36, 
  /* [1089][0][][] */ 51,-5,29,23,119,0,27,15,-15,37,-19,19,26,-127,-47,57,13,101,68,45,13,-80,1,33,126,4,-24,-32,-103,-61,65,-18, 
  /* [1090][0][][] */ -19,-16,127,40,-5,56,-24,2,-1,6,20,62,20,-7,31,1,-27,-27,-42,35,26,16,-12,21,25,0,23,-3,-30,101,38,-70, 
  /* [1091][0][][] */ 102,96,-15,5,38,85,-127,79,-104,102,57,64,31,-1,-64,23,29,-88,-7,-21,16,43,-9,-103,-26,-60,-19,91,-60,2,49,73, 
  /* [1092][0][][] */ -42,-61,-10,82,-69,32,110,2,-32,29,4,11,-79,5,127,19,-32,12,-97,-35,-7,-12,-5,-74,-14,-110,-66,20,0,-13,-56,32, 
  /* [1093][0][][] */ -2,-81,75,17,99,-16,3,58,23,-16,-52,-39,14,26,66,-89,107,127,-3,85,-8,-43,45,-34,-17,-20,21,33,27,13,-89,13, 
  /* [1094][0][][] */ -61,16,41,-38,0,37,-24,25,75,-26,-6,-35,7,-5,-18,-6,-19,6,17,-127,-12,38,-16,50,-28,55,43,57,-4,49,2,-29, 
  /* [1095][0][][] */ -9,22,22,-127,1,-46,53,-12,-94,-8,30,4,-38,15,73,49,69,-20,1,44,-65,63,-11,62,-62,-108,-38,6,82,24,28,5, 
  /* [1096][0][][] */ 15,83,-127,24,14,-42,126,-55,53,-67,-1,-52,12,-15,57,-75,-23,-3,41,-19,7,-30,-10,-70,-7,-23,-26,-53,0,14,11,-22, 
  /* [1097][0][][] */ -54,59,-20,-51,-2,8,-72,-60,-2,-56,127,-87,5,1,17,22,16,14,24,-89,61,3,-73,44,4,-39,8,-76,30,7,-89,-22, 
  /* [1098][0][][] */ -46,26,36,-48,97,-60,16,-3,111,-38,2,29,6,-20,-3,27,105,-14,-1,-119,-50,118,-39,2,-15,11,-37,-57,93,127,10,32, 
  /* [1099][0][][] */ 4,22,46,-22,39,-5,3,22,59,-9,-1,-15,62,4,-86,52,41,49,8,17,-7,-14,1,19,27,-16,-73,127,13,71,64,20, 
  /* [1100][0][][] */ -24,65,14,-108,-74,-39,31,67,74,-19,127,92,-48,-60,20,-41,44,-30,-14,53,-7,-6,44,41,-44,16,-49,17,76,2,16,48, 
  /* [1101][0][][] */ -107,-65,-71,0,-64,4,-49,9,-24,39,-28,-12,-6,-8,22,40,-57,-35,-110,-66,-10,-39,-44,55,127,-57,35,55,3,-10,-14,30, 
  /* [1102][0][][] */ 30,-43,39,-36,37,60,-22,36,66,85,53,-76,-2,36,-50,5,-65,-57,-86,-8,-127,6,-8,6,-4,-43,-41,41,50,20,-57,72, 
  /* [1103][0][][] */ 57,25,9,36,53,38,-34,1,-56,0,-44,4,84,-18,127,-63,-59,-33,-28,55,-79,-5,82,-13,45,9,-93,-124,-30,52,-107,72, 
  /* [1104][0][][] */ -7,-8,-68,-127,-20,43,10,0,-2,24,6,-54,17,5,-69,35,49,65,-9,18,35,-32,42,16,5,-44,-5,25,54,-92,5,-37, 
  /* [1105][0][][] */ -75,-55,-3,-63,-9,54,-55,-9,-21,-47,-38,-81,75,88,-21,39,5,-82,101,31,27,18,51,6,-52,-69,-54,56,-31,2,30,127, 
  /* [1106][0][][] */ -14,-20,22,-127,4,-16,4,23,-68,-14,65,14,40,-23,18,-31,35,-36,-96,-72,35,89,-111,40,12,71,9,34,-79,82,79,81, 
  /* [1107][0][][] */ 71,-4,35,-18,-37,-19,1,14,9,12,-69,-26,-87,-61,54,-95,-8,10,51,63,12,-62,-117,0,-36,-78,-114,12,-86,66,119,-127, 
  /* [1108][0][][] */ -10,43,43,-111,22,-101,3,127,-56,68,-35,-89,-12,-86,15,-54,-83,80,-56,42,21,-32,3,-5,49,-4,-32,93,-96,-35,-14,50, 
  /* [1109][0][][] */ 21,-66,127,71,36,25,52,58,12,-51,-46,17,22,-38,-23,-50,-32,-70,36,73,57,2,69,41,-50,14,39,58,-54,-112,-16,18, 
  /* [1110][0][][] */ -12,-27,21,-14,-41,-15,-127,31,-28,64,48,14,-34,-29,-18,-45,-17,-29,14,14,-29,22,-18,-18,-8,-2,27,-7,-17,-24,26,-24, 
  /* [1111][0][][] */ -1,62,120,91,61,-20,40,-5,-23,3,-4,82,-23,40,-27,-24,-11,-33,-67,-3,21,5,7,-77,-46,-13,28,-127,116,97,-40,6, 
  /* [1112][0][][] */ 21,6,-15,-58,9,3,-57,-36,-30,127,-36,44,4,11,-15,-22,-62,6,-5,20,14,43,0,-76,-36,-36,-77,44,-22,1,73,14, 
  /* [1113][0][][] */ -30,49,48,21,-127,-51,-11,-25,53,46,0,64,-43,-24,32,-10,38,35,-35,-82,-13,-11,-58,7,27,-49,-32,-8,6,3,-31,55, 
  /* [1114][0][][] */ 8,-93,-21,-53,127,-54,-38,57,-33,-26,90,-13,43,-10,-43,-30,-14,46,-75,-58,-86,17,-13,-30,13,16,94,42,-21,3,-13,-42, 
  /* [1115][0][][] */ 69,-9,6,-31,25,48,-36,-20,29,26,-51,-44,46,-57,15,-17,-27,-61,-117,72,-37,-10,-40,-76,8,-8,-3,-13,-98,21,38,127, 
  /* [1116][0][][] */ -27,-30,-35,2,62,-19,46,-19,-65,-127,-58,76,66,36,-82,-44,41,12,45,24,-56,27,-5,-24,-42,42,4,14,-19,-7,-62,46, 
  /* [1117][0][][] */ -3,18,77,-58,63,103,-25,-16,-53,-33,-40,-12,127,16,1,30,-42,28,24,9,113,16,-103,-69,41,-59,16,16,10,-107,27,50, 
  /* [1118][0][][] */ 26,28,37,-45,19,-8,37,-27,4,42,68,81,-22,5,14,-34,-42,66,-49,-33,127,43,-91,-25,34,-15,-26,-19,40,-48,-2,-21, 
  /* [1119][0][][] */ -35,-90,-8,-73,23,49,18,101,-127,78,-14,62,-3,20,44,63,-15,-1,-25,34,67,-38,17,50,2,-19,48,90,-52,82,-13,39, 
  /* [1120][0][][] */ -8,97,-127,-34,22,5,32,26,-11,-28,-22,-32,-6,-114,-65,4,-45,21,-30,2,-18,-3,-31,3,67,45,14,68,12,-12,53,14, 
  /* [1121][0][][] */ -63,15,-8,39,56,-27,-23,-30,-60,92,-13,-39,-26,127,61,28,-67,80,1,60,-38,18,-73,77,-74,-66,-109,25,-26,-32,60,24, 
  /* [1122][0][][] */ 19,-15,16,96,-46,32,-68,-127,-27,62,-1,-30,-1,108,52,84,-26,11,66,50,-15,11,39,45,20,-8,58,-44,39,-20,31,-69, 
  /* [1123][0][][] */ -45,29,-28,-10,25,-8,-92,-72,6,0,54,32,56,-3,11,-40,80,-64,100,-68,-36,-127,-72,-40,-35,-4,-48,-3,-22,19,54,60, 
  /* [1124][0][][] */ 21,-27,38,-94,-2,-35,-61,-22,-79,-37,-32,87,-2,-20,40,-27,37,-45,90,76,20,-48,-51,65,-34,127,58,28,-57,-45,-23,-21, 
  /* [1125][0][][] */ 45,-18,76,41,19,41,72,-38,58,-10,38,55,68,-19,36,-48,28,76,102,-55,116,-63,9,46,-8,-89,70,-127,-17,-16,-15,29, 
  /* [1126][0][][] */ 22,-24,45,-46,17,2,-25,62,41,-49,11,-29,51,8,-127,41,14,-34,-10,22,12,12,-64,8,-66,-36,24,9,60,-8,48,-24, 
  /* [1127][0][][] */ -2,-24,-7,-30,-24,-117,63,44,79,35,-68,16,-127,-55,-43,116,-4,-59,-9,-103,118,61,0,17,1,-34,-10,-32,-40,-81,-25,-108, 
  /* [1128][0][][] */ -1,-61,36,2,-33,11,63,-55,-1,-84,127,-15,12,1,60,-123,-59,3,-30,54,-43,-12,-58,-6,7,67,-76,5,-50,5,-31,-25, 
  /* [1129][0][][] */ 30,31,20,-2,30,10,6,-56,-39,42,4,-73,-92,105,-31,-12,-14,-112,-44,67,-59,61,-32,45,19,-2,-104,-99,-43,83,-71,127, 
  /* [1130][0][][] */ 127,-37,-24,93,-13,0,31,-35,47,80,-20,-94,-29,-38,-45,5,-81,-78,28,-31,84,-84,34,24,-83,65,73,17,-52,21,92,-39, 
  /* [1131][0][][] */ 19,-53,-29,-11,37,87,43,69,-21,-68,3,62,9,12,-46,12,112,-24,-7,94,115,84,120,38,40,-51,74,127,41,-78,-10,8, 
  /* [1132][0][][] */ -45,-127,-8,39,12,52,-59,67,-58,-34,-36,13,-14,15,-55,7,-57,-97,100,107,65,-86,-72,-78,27,53,-95,-94,21,62,45,-69, 
  /* [1133][0][][] */ 103,-123,-34,-18,-48,72,-11,-15,16,-27,-71,62,22,15,58,-61,57,-78,56,47,-127,64,55,-27,5,6,-116,-17,-13,84,54,70, 
  /* [1134][0][][] */ -13,-61,3,50,-17,3,64,-4,-46,-39,-23,-27,20,-29,-27,-102,44,-36,-73,-16,58,28,-49,-34,31,122,17,127,14,-48,15,18, 
  /* [1135][0][][] */ -47,-29,-2,13,0,-49,120,-12,30,-83,1,-16,16,63,-19,-57,-65,-57,73,-21,42,-20,-14,-55,-2,39,-32,48,21,-127,120,-85, 
  /* [1136][0][][] */ -19,46,21,127,-17,-44,78,4,-46,-13,-31,-58,-84,2,-91,-68,53,-41,28,-63,14,45,-104,-22,5,-6,-93,-18,43,98,-43,87, 
  /* [1137][0][][] */ 25,107,104,-66,16,-68,48,110,114,45,-74,13,-21,-29,127,118,66,16,64,88,44,-19,-20,55,85,58,17,-74,-44,97,20,-7, 
  /* [1138][0][][] */ 44,25,28,-41,12,15,-36,38,-22,5,2,-37,0,12,92,37,-60,7,6,-61,3,127,59,-78,-7,0,14,0,-6,-37,44,94, 
  /* [1139][0][][] */ 19,-4,15,-8,28,12,-11,58,4,28,60,-93,-62,-40,-41,-5,-23,-49,23,0,-52,-2,11,116,-67,33,-46,4,-51,-78,-127,20, 
  /* [1140][0][][] */ -111,9,31,-53,2,95,36,-8,127,46,-18,-10,63,-50,-118,-21,121,-18,-1,2,30,-51,-36,-105,-48,3,-24,-13,15,7,41,49, 
  /* [1141][0][][] */ 55,-62,-60,3,-47,33,70,-44,10,-4,-6,-48,-61,-12,62,27,24,-45,-12,33,29,-46,-2,44,-15,-1,-127,41,43,-18,-77,-52, 
  /* [1142][0][][] */ -70,59,-19,43,14,98,-38,69,50,-89,9,-51,15,23,-51,-12,41,32,52,-98,-55,-52,-25,127,-95,-59,-66,6,40,71,-12,-120, 
  /* [1143][0][][] */ -80,-43,-74,-54,11,15,60,44,-23,36,11,24,-76,-25,-63,17,-45,-9,30,-40,3,108,65,-16,18,-2,127,33,3,-17,-27,-63, 
  /* [1144][0][][] */ -26,-43,-9,24,-22,-42,-103,83,-83,61,-34,87,33,-93,-82,-73,126,11,-37,-74,93,127,-15,-1,-20,-32,22,-18,122,-76,15,59, 
  /* [1145][0][][] */ 16,30,-33,127,88,-53,-22,-71,-9,30,8,-71,-74,-35,-3,-10,-15,27,-108,39,38,-25,-88,10,40,-19,-9,69,126,-57,-101,-122, 
  /* [1146][0][][] */ -73,-10,43,-22,110,70,31,53,96,-58,-2,-88,-51,25,53,59,-103,-66,-36,39,-34,4,71,-19,11,-87,64,-127,75,-40,-49,45, 
  /* [1147][0][][] */ 25,-59,1,13,9,53,-34,65,-22,92,-31,125,87,-30,84,21,-27,27,127,2,-44,-3,97,-81,-52,-5,74,-7,-14,46,-61,40, 
  /* [1148][0][][] */ -49,91,4,-20,14,-41,-33,-40,51,-127,-42,87,-103,-60,-63,3,-42,-48,-54,7,-7,-4,-41,-51,54,85,-49,38,54,-8,0,62, 
  /* [1149][0][][] */ 15,-55,101,-89,-33,3,-35,-7,115,-13,2,-81,-25,-36,24,-44,-46,-84,-5,85,46,-13,-76,63,53,64,72,-89,127,69,16,25, 
  /* [1150][0][][] */ 3,-78,48,14,79,-12,127,-15,11,-21,90,8,-35,34,-6,-51,-37,-87,24,-20,53,93,53,60,0,104,12,34,29,81,11,-1, 
  /* [1151][0][][] */ -16,-69,-11,61,69,40,-33,-16,76,-22,60,-3,-3,27,28,47,16,17,19,-20,-127,-3,7,43,-95,31,56,40,25,27,2,30, 
  /* [1152][0][][] */ -21,-46,44,26,-32,63,48,94,-4,127,-88,33,-101,75,-57,-74,-5,-29,-73,22,42,8,-34,21,-15,-58,-1,80,14,38,23,-61, 
  /* [1153][0][][] */ -27,26,-31,-1,53,-20,-89,-28,32,57,-23,4,-43,-21,-127,-25,29,-15,104,-3,66,78,82,34,-55,-125,26,35,34,-10,-41,-18, 
  /* [1154][0][][] */ 56,5,-52,-127,-17,85,4,-50,-70,-61,0,74,65,-108,2,-80,-4,48,-8,33,-37,-84,-38,71,89,16,-63,9,-50,66,-15,57, 
  /* [1155][0][][] */ -8,36,-30,-64,-6,59,-35,-42,-10,-127,27,-7,-105,10,-10,58,-17,-16,88,88,63,102,-4,109,-58,-18,83,11,38,-9,71,-83, 
  /* [1156][0][][] */ 12,-62,-24,73,81,-36,47,-3,5,-51,-79,-87,35,-28,-10,103,-127,-32,-33,112,25,36,14,1,70,-92,42,-44,-45,-68,33,-62, 
  /* [1157][0][][] */ -87,-72,3,-31,34,20,23,67,-45,91,15,-119,18,-32,-104,43,-106,-22,60,13,127,50,36,-97,57,36,-29,-23,21,-52,38,-2, 
  /* [1158][0][][] */ 86,42,-38,-27,49,105,70,-33,5,-16,82,-26,-72,65,29,-29,127,-40,-95,-17,-64,65,-38,0,-12,-123,-58,-18,-7,-33,-66,30, 
  /* [1159][0][][] */ -16,-16,17,30,-57,64,-48,-89,-41,-127,-7,7,67,20,-35,-64,-31,-21,-54,3,127,105,86,-66,118,-19,26,15,-67,-39,26,73, 
  /* [1160][0][][] */ 1,14,69,35,15,-45,-5,112,127,10,-15,-5,-17,66,5,-100,-60,42,79,-1,-55,110,-85,-9,-59,-46,-49,-5,-36,109,25,-1, 
  /* [1161][0][][] */ 37,-38,-64,-9,-38,-6,107,53,-69,28,-108,-127,34,-57,-33,-31,-18,-35,-91,-29,1,35,4,20,30,-67,-14,42,-20,-63,78,2, 
  /* [1162][0][][] */ 46,7,-127,1,43,-27,92,-16,12,-26,38,-60,102,-97,16,-114,-21,-27,37,31,38,-9,-61,-23,56,77,-41,74,-30,51,-14,-13, 
  /* [1163][0][][] */ -14,94,-66,78,-95,46,50,11,-50,-39,-42,38,-10,-76,7,26,-17,15,30,31,-23,-71,33,127,26,26,35,0,-69,46,-3,7, 
  /* [1164][0][][] */ -46,-16,-14,46,40,8,7,-127,0,43,4,27,-22,39,-23,-28,50,6,-30,61,-66,-67,-79,11,-37,-37,-1,31,-20,-28,28,43, 
  /* [1165][0][][] */ 27,37,-32,41,8,-41,88,-2,-45,38,-9,-9,-47,60,48,-62,25,36,-127,-10,44,15,-34,-40,-31,50,4,19,73,-21,-61,84, 
  /* [1166][0][][] */ -63,-19,-122,54,-46,18,-33,-10,15,73,49,-46,28,-43,22,17,9,-119,65,18,-46,115,42,-110,-33,-90,27,-77,-98,-9,-14,127, 
  /* [1167][0][][] */ 75,63,-72,53,-41,103,-19,34,-1,-10,94,80,1,6,-62,52,-47,11,-91,80,-59,-95,127,2,-66,-15,-96,-58,107,-43,-46,-33, 
  /* [1168][0][][] */ 7,-8,-40,57,-16,52,-5,-23,-11,17,19,30,60,32,64,50,-27,40,43,6,-2,-35,24,-11,29,26,11,4,8,-127,-41,-77, 
  /* [1169][0][][] */ -29,49,-13,44,22,-22,19,38,49,-4,45,-1,-46,-5,-24,-72,-13,10,-40,127,36,-59,-41,69,53,32,0,-61,-91,11,-7,-63, 
  /* [1170][0][][] */ -26,-7,-4,-25,-39,-12,-37,47,-26,45,-2,50,-28,21,127,-14,26,-19,15,40,0,-41,3,-37,-16,-38,-73,-35,41,-12,-9,-36, 
  /* [1171][0][][] */ -63,-41,123,-86,49,-38,-57,57,15,110,-41,-17,-50,75,64,-38,44,-11,-66,-78,110,-18,16,-22,-111,7,-21,127,74,-13,60,-21, 
  /* [1172][0][][] */ 38,26,-55,29,-127,56,39,44,36,-11,-63,21,-2,74,1,78,-5,-67,-14,15,78,-104,-29,21,-66,-34,16,11,19,13,-12,-77, 
  /* [1173][0][][] */ -63,-19,13,12,-4,-19,-31,54,34,21,-4,-8,-39,-8,-127,-27,11,-7,51,14,-63,-68,-15,3,-59,-8,-9,30,18,26,-49,16, 
  /* [1174][0][][] */ -119,3,-37,-70,122,13,-72,-48,-67,65,-13,4,39,4,74,-19,11,-34,11,-39,-83,34,-35,-74,-79,-101,-127,8,-98,11,-11,-104, 
  /* [1175][0][][] */ 66,-70,-61,-72,127,3,-48,38,26,-38,43,-75,76,37,-31,-18,35,59,34,-5,-18,47,-58,-45,8,-45,19,-2,72,-49,105,15, 
  /* [1176][0][][] */ -44,51,-21,-40,70,-93,-43,-56,100,-75,28,29,34,20,-12,57,49,-44,64,34,67,-99,45,4,-13,-57,78,127,-59,64,-51,-7, 
  /* [1177][0][][] */ -59,-12,-38,22,45,97,-88,-94,-33,15,33,-51,78,121,19,-92,-85,98,-1,74,-114,110,127,-2,12,-13,-42,-7,56,-22,93,1, 
  /* [1178][0][][] */ -78,84,11,-21,-87,-17,-46,-57,-38,37,-34,-15,31,-47,80,46,-97,-3,28,-99,-127,-9,-7,74,-21,-16,-82,-67,104,-70,28,96, 
  /* [1179][0][][] */ -11,-64,4,-19,127,56,13,64,56,59,17,113,-32,16,84,-47,10,-11,42,20,-89,-92,17,-92,82,58,68,82,90,-41,5,-6, 
  /* [1180][0][][] */ -15,-42,57,-26,24,-74,-65,-89,-26,-70,-1,-10,-62,18,74,-38,33,36,7,-69,13,48,7,10,9,7,-127,-26,-20,24,24,-64, 
  /* [1181][0][][] */ 21,-23,-32,9,-79,-60,-14,121,-125,25,122,65,-72,-45,-67,29,-52,-114,-3,39,-31,-16,-127,-60,20,10,72,-116,48,65,49,-12, 
  /* [1182][0][][] */ -60,-36,-121,62,-28,32,77,28,-99,-80,-87,44,-8,15,3,127,4,-3,56,-2,4,-40,9,-1,25,-80,79,-8,-19,-53,85,33, 
  /* [1183][0][][] */ -15,-2,3,-64,-43,4,-40,-4,-11,121,29,37,1,-16,41,42,33,-22,88,12,46,16,-14,-14,23,-23,-25,-26,-23,27,127,-33, 
  /* [1184][0][][] */ -55,12,1,-127,17,-16,35,18,68,-65,105,-79,52,-8,-32,-73,-62,33,71,-8,-50,100,22,110,-54,-13,-20,34,-49,-37,49,23, 
  /* [1185][0][][] */ 78,-17,58,127,15,30,-12,57,-116,19,92,-30,22,63,15,73,-37,17,-18,-40,76,-47,-29,95,41,-57,97,-16,3,-46,3,64, 
  /* [1186][0][][] */ -19,-5,127,0,-9,1,-26,46,-45,67,32,36,-50,29,-16,16,-1,-34,12,15,39,-34,-10,2,17,23,-25,-41,70,76,17,-1, 
  /* [1187][0][][] */ -45,69,-63,38,-37,-36,-2,58,74,-93,19,-9,-22,33,-17,50,76,-102,-41,-5,24,1,106,-5,-25,17,127,-28,80,-42,37,85, 
  /* [1188][0][][] */ -31,56,-13,-109,16,-59,-41,17,13,-24,-25,-5,-45,20,-19,-9,-17,49,7,-69,-72,30,6,-29,-3,-91,-57,36,127,-43,107,9, 
  /* [1189][0][][] */ 80,-20,1,-14,18,-58,-35,-29,-29,-72,-127,17,-73,-13,55,57,7,-59,-13,13,-104,-52,-48,-37,68,-68,-15,35,14,-71,1,-51, 
  /* [1190][0][][] */ -29,-90,-16,33,37,19,-12,-26,-66,33,-13,-31,-9,74,-34,-2,47,-127,-51,7,38,-60,39,-22,-53,23,-46,43,35,11,58,8, 
  /* [1191][0][][] */ -2,-22,-36,34,6,53,1,-36,47,29,-49,5,27,-40,-14,-34,37,-56,18,-9,-43,-69,48,-84,-24,37,-127,-16,14,57,-62,-3, 
  /* [1192][0][][] */ 5,-4,13,-70,20,-19,8,63,-16,-37,48,12,65,2,-26,3,24,-25,-30,-23,-127,51,70,-21,-73,-17,46,17,111,-13,60,-35, 
  /* [1193][0][][] */ 15,32,-59,8,14,71,-82,15,-127,-37,7,-31,9,8,-34,-7,32,76,21,23,-61,38,6,34,-31,-38,68,-10,-12,-33,-48,-12, 
  /* [1194][0][][] */ 123,24,-5,-10,-127,-34,-112,-72,38,57,35,46,100,-24,-84,-111,94,-115,66,46,39,102,31,54,-36,41,92,78,2,-21,36,-36, 
  /* [1195][0][][] */ 44,-18,38,62,58,56,-50,15,-18,-2,18,-10,-53,21,-127,36,16,73,95,-16,51,59,-43,-30,-68,72,58,52,88,-32,67,33, 
  /* [1196][0][][] */ 91,111,-21,-24,-106,-115,19,-120,-41,68,-29,-84,59,-10,-76,-18,-45,-72,-49,-127,-36,-69,-58,-62,32,-29,-115,91,48,31,-97,91, 
  /* [1197][0][][] */ -31,-37,-67,29,-44,-16,-61,15,41,-9,127,-33,-28,-66,2,-66,-35,-37,-75,93,-39,-4,-20,-61,-28,-23,73,-75,28,3,-61,-83, 
  /* [1198][0][][] */ 3,-58,-5,-34,88,-23,48,-49,22,1,-97,-47,-14,-27,61,-35,-49,27,-8,-15,6,76,-35,-17,26,45,-1,10,-78,127,-57,115, 
  /* [1199][0][][] */ 66,15,-103,-31,-56,-89,50,8,21,23,-21,-112,18,94,-21,112,87,-22,119,-7,24,42,-9,-12,106,66,-7,127,7,37,-4,-51, 
  /* [1200][0][][] */ -60,-127,18,-48,94,-37,48,83,-28,38,-107,-20,-95,-18,-44,80,-67,-64,120,-42,45,79,-10,-14,-64,28,-2,12,-69,-43,84,72, 
  /* [1201][0][][] */ 64,33,72,33,25,-44,-20,-53,-74,-60,-50,-45,-17,-64,-60,-41,9,-12,53,-44,2,-42,-2,-12,-2,31,-9,127,-32,-25,-7,34, 
  /* [1202][0][][] */ -75,-27,59,-44,-127,20,14,-85,-51,100,-15,100,-97,-73,-23,-86,-86,-60,125,-81,-14,-36,10,65,-28,-105,3,2,-21,-35,73,48, 
  /* [1203][0][][] */ -25,-18,127,-36,-19,-74,-7,58,-31,97,-10,0,-33,38,-30,68,11,9,16,-26,-41,29,17,-42,72,-7,22,-6,-59,-13,11,33, 
  /* [1204][0][][] */ -77,-62,-55,-34,-61,-72,56,3,-29,15,-67,49,64,-26,43,-25,62,39,-17,14,25,61,-66,-127,60,-4,-54,-108,77,0,-106,-46, 
  /* [1205][0][][] */ -5,-19,0,36,0,43,7,16,4,72,-66,21,-37,-19,64,-7,-61,40,-3,18,-49,45,127,-39,-36,33,23,9,-10,-11,-47,3, 
  /* [1206][0][][] */ 13,-16,-10,-36,19,-17,-37,11,-39,3,-38,50,-77,60,-47,-59,-88,-65,34,36,-40,0,41,37,-127,40,-19,-10,10,-41,-6,6, 
  /* [1207][0][][] */ 90,79,-127,38,38,-80,1,-37,15,46,20,1,37,81,68,-40,56,-64,70,82,51,23,-39,62,52,-56,-55,-50,-36,-4,-44,-28, 
  /* [1208][0][][] */ 10,62,-23,5,-56,-3,111,39,-29,28,91,-23,18,9,-51,43,-38,-80,-101,-53,-71,41,0,-127,-37,71,-9,-12,-32,33,-77,-88, 
  /* [1209][0][][] */ 44,21,4,-2,16,-59,8,-26,25,108,-5,20,47,-35,42,-29,0,91,-42,127,25,-53,-15,-56,18,-41,10,65,62,59,50,104, 
  /* [1210][0][][] */ 110,4,-107,127,-85,9,33,33,-40,7,-58,-2,-62,18,44,113,-85,-86,-73,14,7,79,23,-70,-114,-21,24,-26,104,-70,-10,22, 
  /* [1211][0][][] */ 5,-37,-110,64,56,-8,-127,-25,-16,95,-21,-30,-103,34,38,-113,64,124,7,-49,-20,16,-5,-89,-5,45,3,32,-59,-32,-15,38, 
  /* [1212][0][][] */ 39,-21,-29,26,-81,26,-20,28,48,4,21,48,5,69,-12,-68,-13,-89,7,-127,-38,16,13,36,62,-21,-34,-85,19,36,-26,-35, 
  /* [1213][0][][] */ -15,-61,101,-33,20,11,-74,-22,58,77,43,35,-86,127,3,-10,21,35,-10,51,-38,12,-29,78,44,-73,-65,23,42,14,117,-50, 
  /* [1214][0][][] */ -35,46,19,-75,-59,-86,36,18,-19,75,19,-63,14,-20,81,53,10,-72,-118,43,127,-83,-27,-62,-79,-42,-14,-98,85,-73,-48,-11, 
  /* [1215][0][][] */ -19,-27,-4,39,27,-36,-10,6,127,19,41,-24,6,-4,46,-29,-83,26,48,-26,26,-10,-2,-67,38,-37,35,11,-14,56,31,34, 
  /* [1216][0][][] */ 105,43,-122,-47,-3,-44,60,88,2,24,-12,-6,2,20,51,-74,46,66,-127,-21,-25,-50,50,-24,-4,-47,28,71,-48,45,109,-85, 
  /* [1217][0][][] */ 53,59,8,97,-52,-69,0,-62,-11,-4,-101,-39,5,50,-68,31,-58,-12,-47,15,67,-95,14,2,-55,49,-127,34,-9,-43,-24,33, 
  /* [1218][0][][] */ 87,-22,22,-47,-103,-127,-25,-9,24,27,7,-95,-41,2,56,25,33,83,31,16,-23,110,-92,-63,-40,-40,80,-47,-25,-52,16,-49, 
  /* [1219][0][][] */ -7,86,-127,24,-35,-41,-38,-4,-15,-8,6,1,-15,-52,59,-27,37,-58,-22,-7,45,-43,-35,-3,-40,21,-50,11,11,6,-10,-18, 
  /* [1220][0][][] */ 61,40,-43,10,-24,-57,58,68,-62,-62,-81,-93,-21,-6,-95,45,-70,39,-71,-54,29,-83,-44,32,119,78,24,-84,28,30,127,41, 
  /* [1221][0][][] */ -25,-5,-35,-43,31,-37,36,-5,-56,-127,52,5,-53,-20,-2,61,27,6,-34,-1,-33,101,2,0,-95,-17,72,-9,45,-61,-13,50, 
  /* [1222][0][][] */ -4,-50,114,-40,-1,50,-19,-5,-100,88,12,64,-41,-57,-44,-61,91,-29,-52,25,32,57,48,104,-78,-12,-127,67,-84,-5,1,-24, 
  /* [1223][0][][] */ -18,8,57,-74,-74,-30,1,77,75,127,22,47,21,7,-61,-58,5,-108,-88,-14,-41,-68,-22,-28,-29,25,-83,65,78,96,-95,-66, 
  /* [1224][0][][] */ 35,121,-9,84,-29,107,-19,-29,-70,35,28,-50,-54,-127,45,-42,-6,85,31,-13,13,62,-7,38,46,56,-15,-122,115,-13,-53,85, 
  /* [1225][0][][] */ 4,25,6,9,15,-46,44,-25,-36,19,-48,60,16,-1,-9,46,37,46,-1,5,18,-10,1,7,48,-60,30,-34,-14,-42,-40,-127, 
  /* [1226][0][][] */ 1,-40,-76,-44,97,-50,-64,10,0,-70,-8,-36,-39,-64,22,71,-4,72,103,-4,-17,106,-127,5,-31,117,-18,-8,40,78,115,-18, 
  /* [1227][0][][] */ 67,-120,44,-62,29,-127,-29,65,-61,73,13,-10,21,-70,-40,-19,50,-107,25,35,108,-52,25,-76,1,71,11,107,26,-5,-60,74, 
  /* [1228][0][][] */ -36,5,-58,-27,-44,-2,24,13,39,61,-21,-27,-39,51,52,80,69,62,-56,0,-38,49,-63,4,127,48,-28,23,7,28,-57,-13, 
  /* [1229][0][][] */ 19,115,103,30,-17,19,-7,20,-48,-96,127,68,-63,20,-94,-38,-66,-6,2,-26,22,-39,2,54,91,26,67,-6,63,-71,-67,-20, 
  /* [1230][0][][] */ 13,5,36,-127,-30,-59,27,-12,13,-43,-78,44,-5,68,8,-43,53,70,46,14,39,-34,-25,39,-60,54,33,35,22,-3,0,40, 
  /* [1231][0][][] */ 14,82,79,53,8,18,15,80,-43,-4,32,-41,-63,-27,-52,-4,-76,-92,-35,32,-1,80,-32,70,-66,-46,86,-1,45,-1,21,127, 
  /* [1232][0][][] */ -20,-18,15,8,-3,127,-19,28,29,125,-75,14,7,29,-97,12,-9,13,2,99,-45,-35,36,10,3,-39,73,36,-80,41,63,40, 
  /* [1233][0][][] */ -5,59,46,59,-59,21,-82,-25,-5,35,-44,-27,-4,46,-127,-6,-44,-6,-19,23,-22,13,-107,25,-78,-38,4,27,39,8,7,16, 
  /* [1234][0][][] */ 4,-127,69,12,19,76,-49,1,59,-47,-49,58,-77,-2,66,92,75,-39,19,3,89,-126,8,80,-33,45,-110,6,74,29,35,62, 
  /* [1235][0][][] */ 39,71,-127,-87,48,10,-25,25,-35,-12,58,72,-30,-51,-23,61,-52,-12,67,-18,40,5,-4,54,36,-27,-8,37,36,31,-35,-112, 
  /* [1236][0][][] */ 15,12,-54,48,-56,6,118,29,26,7,8,7,-47,-7,59,0,-127,-14,12,37,66,-24,27,-29,66,-20,7,9,19,47,-4,-19, 
  /* [1237][0][][] */ -15,-69,-56,22,34,-24,-4,-97,-28,127,-74,-89,92,-3,-91,63,-48,85,67,30,79,-60,-27,-57,-118,-51,27,-8,-27,-23,-124,-113, 
  /* [1238][0][][] */ -87,-2,-101,31,113,11,25,47,-21,-69,1,31,-80,-119,11,42,3,-127,36,96,-126,64,13,67,27,53,-114,-8,-22,-57,1,83, 
  /* [1239][0][][] */ 4,16,11,-11,-116,59,38,82,35,-25,-19,8,-39,73,-36,25,-65,13,-46,-50,12,-30,-35,80,39,-30,-40,-72,-42,-34,127,98, 
  /* [1240][0][][] */ -26,-58,97,5,-33,-32,-108,-45,21,0,-81,-2,82,-18,-28,-87,-33,63,91,54,39,8,12,1,28,-37,27,127,52,37,-32,27, 
  /* [1241][0][][] */ 17,-66,-48,-3,-57,58,115,23,-78,30,-4,127,0,16,-29,-43,-96,-119,-59,73,95,-6,-17,77,116,-8,76,-54,-45,73,44,-76, 
  /* [1242][0][][] */ -60,39,32,2,-65,-33,-19,35,78,-86,40,-8,58,14,-4,-15,46,35,-58,-23,20,-76,-71,-33,-127,-61,-34,17,34,1,-35,3, 
  /* [1243][0][][] */ 3,36,33,-11,-14,75,-71,-112,68,25,8,-82,-38,-16,-4,127,-11,-77,-32,-87,-20,16,102,-31,67,-50,97,14,-15,-12,0,-52, 
  /* [1244][0][][] */ 118,-5,43,11,-55,52,-79,56,100,-18,116,85,91,-40,104,1,-70,-13,39,110,-56,-79,108,-10,-5,-89,-127,11,10,-67,32,-52, 
  /* [1245][0][][] */ 54,-66,24,30,21,15,-29,-16,21,-61,-41,-15,60,-4,-35,67,-37,-3,-58,127,-57,-10,13,21,-1,18,26,0,1,65,-33,-3, 
  /* [1246][0][][] */ -66,-26,120,3,-29,-21,15,14,-13,-39,3,-23,6,-43,-12,-38,41,46,30,-12,89,52,0,28,-127,47,-74,8,10,45,-63,-36, 
  /* [1247][0][][] */ 73,0,-17,116,75,10,61,25,6,-84,4,-40,37,-63,-58,13,26,-127,-63,51,72,30,22,80,99,-50,3,-87,-50,-49,32,-5, 
  /* [1248][0][][] */ 0,36,27,-23,18,27,8,-20,45,-10,34,-37,33,-1,52,-42,43,127,6,71,-62,-57,1,7,-43,-14,-64,34,2,-73,81,-29, 
  /* [1249][0][][] */ 45,27,-127,53,-6,65,26,-9,-26,25,-18,-14,16,-55,-14,-30,23,-20,-29,-15,11,-29,14,15,-26,-5,-1,20,24,-11,7,24, 
  /* [1250][0][][] */ -3,56,-79,-11,35,86,110,49,-24,3,-57,-15,-27,-3,30,-101,-106,-6,57,59,-24,-48,14,7,-93,-127,20,-27,-70,83,-9,-26, 
  /* [1251][0][][] */ 8,28,30,-34,-41,-42,-79,3,57,-1,34,46,-61,-19,29,70,-92,13,-20,70,3,-8,-44,21,-13,15,-13,5,-15,-43,127,-10, 
  /* [1252][0][][] */ -94,6,-20,-8,89,8,-59,48,-102,23,57,-1,8,16,-67,-22,-19,-40,80,-127,-45,-92,22,15,123,92,5,-89,20,-7,16,107, 
  /* [1253][0][][] */ 24,-25,-49,-77,-69,-105,-127,-8,118,0,-38,-44,45,-60,-44,-93,79,-86,58,6,-1,-58,-59,-123,-47,80,-84,46,-91,63,61,28, 
  /* [1254][0][][] */ -2,1,37,-47,80,27,-23,-25,-119,-56,-43,27,50,-37,64,6,21,59,124,-33,-46,60,-62,62,-27,-4,-73,-46,-5,127,-11,-41, 
  /* [1255][0][][] */ 5,-37,31,-44,-23,-18,22,83,-41,3,68,-102,38,5,-27,-58,54,-10,14,-23,41,-127,-25,-63,42,41,0,-28,-77,11,32,25, 
  /* [1256][0][][] */ 56,29,-82,43,39,-32,10,-19,-102,-49,40,88,-12,18,101,-67,-51,10,-86,17,51,-14,69,-10,127,34,-63,12,-15,-9,79,-14, 
  /* [1257][0][][] */ 79,38,36,-3,61,17,19,21,-14,-13,-9,-22,29,31,14,-30,11,27,77,40,0,91,14,-17,16,57,127,-15,73,74,-37,26, 
  /* [1258][0][][] */ 85,15,20,37,-92,-52,74,49,86,-80,-68,-32,102,-34,39,67,1,9,-2,55,23,-127,-64,14,36,-120,-53,-105,-56,-106,39,73, 
  /* [1259][0][][] */ -29,4,3,19,26,56,-10,-50,-64,-62,-73,48,-16,-29,-61,22,56,-36,-119,-127,-52,-87,-1,-42,85,7,-25,-48,104,-101,26,-54, 
  /* [1260][0][][] */ 74,-6,70,-90,24,-78,80,-9,28,-120,40,-12,59,-29,5,-51,39,15,-127,-30,5,30,-28,-23,41,15,-26,-35,13,-48,35,49, 
  /* [1261][0][][] */ -43,10,43,-17,-12,24,15,-14,-36,32,-35,89,43,-114,-2,-31,-62,-97,-46,-12,26,83,-32,101,-68,23,18,-55,-58,-127,-20,-92, 
  /* [1262][0][][] */ -41,42,-5,-17,22,-72,24,66,-9,63,-31,23,-50,27,44,45,-16,31,83,-36,48,13,22,31,47,-53,-29,127,-5,3,26,-53, 
  /* [1263][0][][] */ -38,-95,-50,7,-41,127,-67,11,2,78,-4,-20,5,17,15,-6,-32,58,41,1,-4,13,-15,-8,-31,7,22,-29,-1,20,11,-1, 
  /* [1264][0][][] */ 79,8,45,-86,27,-52,-3,8,-6,58,64,49,30,26,-20,5,-52,-95,0,42,24,7,-127,-24,-34,-24,-70,-7,-39,53,-70,117, 
  /* [1265][0][][] */ -67,15,4,-45,-4,6,-15,28,53,-23,121,58,-76,-49,64,-27,107,-127,59,-14,58,-25,-56,16,-72,-21,-19,-92,65,9,1,-5, 
  /* [1266][0][][] */ -1,-76,127,-13,-5,13,2,33,-29,-4,-39,-2,-5,13,-28,19,4,-20,28,28,30,42,-17,2,72,22,-20,-1,-67,38,35,13, 
  /* [1267][0][][] */ -49,16,-23,-63,1,-28,71,45,41,17,17,-65,-41,34,-12,17,127,70,-4,3,-32,-100,-13,25,-18,25,-74,-97,-20,10,-42,-20, 
  /* [1268][0][][] */ -35,34,60,39,17,-54,18,23,94,29,81,-89,-19,66,127,-37,24,-6,1,-11,-14,2,-46,-28,12,8,-2,-4,-27,32,77,12, 
  /* [1269][0][][] */ -54,40,-12,-38,-107,-62,-62,-61,37,-46,-86,-98,-46,49,-42,-37,28,18,-67,-127,13,-31,98,-57,-100,7,20,13,22,65,35,-93, 
  /* [1270][0][][] */ 3,-7,-24,-95,37,-20,-60,92,79,25,-16,-124,98,67,-9,-14,15,-30,-53,-12,59,-29,71,19,-67,-83,-127,-113,-37,54,-85,58, 
  /* [1271][0][][] */ -70,3,-13,69,33,-29,-16,60,-58,92,-20,-64,45,-41,-13,-44,48,69,34,78,-57,-13,-39,-120,26,8,127,-81,0,13,-75,-61, 
  /* [1272][0][][] */ -31,9,16,-93,82,9,34,57,-84,13,34,-26,-88,26,-67,4,-79,-105,-127,-9,72,11,84,-42,-15,-52,124,49,-65,80,55,-33, 
  /* [1273][0][][] */ -4,-33,5,-56,16,3,-45,-29,62,53,23,33,29,-120,-20,67,58,-120,39,-41,-5,-11,-127,-89,61,37,-2,-52,-30,-43,39,-12, 
  /* [1274][0][][] */ -98,17,34,-26,74,-98,3,7,-40,-7,-15,-18,20,-113,-28,-9,51,67,38,83,-1,40,38,-127,-25,21,-21,-11,-38,68,7,67, 
  /* [1275][0][][] */ 20,63,-127,-27,100,96,-56,89,-64,-48,10,-36,-63,-41,22,-74,-36,-92,37,9,8,95,-77,10,-28,-58,-8,-5,19,115,65,-41, 
  /* [1276][0][][] */ -11,26,-58,-33,-38,-31,48,-11,-16,-96,47,32,92,-6,90,-53,59,-61,5,-71,19,-12,-68,57,-64,127,67,6,-32,32,-37,78, 
  /* [1277][0][][] */ 37,-31,-42,-70,-30,-119,11,-5,55,3,-42,18,-2,-13,-80,-18,71,-94,9,127,68,-20,47,-65,36,-19,-106,-22,-112,-14,-35,-122, 
  /* [1278][0][][] */ -47,-3,15,-61,127,-14,67,80,-11,-82,55,11,-1,8,74,-65,-3,3,-2,-55,-41,0,-1,35,43,-63,-2,118,111,-88,-55,17, 
  /* [1279][0][][] */ 28,-11,-10,-84,99,-29,-124,17,24,109,-12,-26,-22,40,12,-13,43,39,81,40,-4,-42,45,-65,40,12,-66,-105,7,23,-21,127, 
};
const TfArray<4, int> tensor_dimension77 = { 4, { 1280,1,1,32 } };
const TfArray<1280, float> quant77_scale = { 1280, { 0.0066131995990872383, 0.0056771007366478443, 0.0053561744280159473, 0.006119296420365572, 0.0058025061152875423, 0.0047815665602684021, 0.0052526923827826977, 0.0045115677639842033, 0.0054308725520968437, 0.005774808581918478, 0.0054455110803246498, 0.0058200829662382603, 0.0061455094255506992, 0.0054770829156041145, 0.0045700902119278908, 0.0064409254118800163, 0.0051623391918838024, 0.0065582464449107647, 0.0065145702101290226, 0.0062194643542170525, 0.0045013749040663242, 0.0050249556079506874, 0.0062546445988118649, 0.0049893916584551334, 0.0052161458879709244, 0.0053939223289489746, 0.0050622643902897835, 0.0059107765555381775, 0.006078183650970459, 0.0047530331648886204, 0.0064921854063868523, 0.0063388030976057053, 0.0041466071270406246, 0.0064003756269812584, 0.0046449801884591579, 0.004730589222162962, 0.0055761625990271568, 0.0049064666964113712, 0.007517488207668066, 0.0043940041214227676, 0.0071265888400375843, 0.0047334837727248669, 0.0059757446870207787, 0.0056068808771669865, 0.0047063753008842468, 0.0052754641510546207, 0.0049627209082245827, 0.0047647063620388508, 0.0054164687171578407, 0.0044709611684083939, 0.0062152636237442493, 0.0056865676306188107, 0.0050801639445126057, 0.0055597522296011448, 0.0055217212066054344, 0.0073255384340882301, 0.0051312255673110485, 0.0056461305357515812, 0.0069469986483454704, 0.005316135473549366, 0.0047669699415564537, 0.0040856613777577877, 0.0049367309547960758, 0.0049890768714249134, 0.004717161413282156, 0.005532256793230772, 0.0057875127531588078, 0.0047039692290127277, 0.0071167913265526295, 0.0073790834285318851, 0.0058275964111089706, 0.0059532281011343002, 0.0058156992308795452, 0.0046570533886551857, 0.0062852450646460056, 0.0058546829968690872, 0.0039954157546162605, 0.0067911664955317974, 0.0059586944989860058, 0.0041763451881706715, 0.0035759431775659323, 0.0058216829784214497, 0.0053953793831169605, 0.0062403492629528046, 0.0067023006267845631, 0.0057902699336409569, 0.0051744254305958748, 0.0058348341844975948, 0.0054280068725347519, 0.0056162918917834759, 0.0047344928607344627, 0.0058154291473329067, 0.0044534816406667233, 0.0051595359109342098, 0.0065169469453394413, 0.0050593209452927113, 0.003946647047996521, 0.005587378516793251, 0.0082259839400649071, 0.0055602141655981541, 0.0057103871367871761, 0.0061719738878309727, 0.0053538912907242775, 0.0049866447225213051, 0.0055742631666362286, 0.0062670116312801838, 0.0058921086601912975, 0.0062047336250543594, 0.0045058620162308216, 0.0064418758265674114, 0.0044280765578150749, 0.0041813799180090427, 0.0036001873668283224, 0.0063325143419206142, 0.0046019917353987694, 0.0066392207518219948, 0.0055356076918542385, 0.0060540684498846531, 0.0058290068991482258, 0.0053145801648497581, 0.0054291686974465847, 0.0061476700939238071, 0.0045916563831269741, 0.0059431134723126888, 0.0054701995104551315, 0.0064564021304249763, 0.0062685506418347359, 0.0046501122415065765, 0.0058141830377280712, 0.0047999788075685501, 0.0058915028348565102, 0.0073797605000436306, 0.0051335026510059834, 0.0060517070814967155, 0.0045428010635077953, 0.0048142164014279842, 0.0049987360835075378, 0.0059079974889755249, 0.0075284424237906933, 0.0048399423249065876, 0.0069894012995064259, 0.0044879908673465252, 0.0043503171764314175, 0.0041266377083957195, 0.0049021686427295208, 0.0064492621459066868, 0.005216529592871666, 0.0049399840645492077, 0.0065266801975667477, 0.0064461501315236092, 0.0044996566139161587, 0.0061581176705658436, 0.0080876005813479424, 0.0054078786633908749, 0.0054977396503090858, 0.0052615804597735405, 0.0060687386430799961, 0.0048717060126364231, 0.0057752719148993492, 0.0053310506045818329, 0.0057244850322604179, 0.0052049504593014717, 0.0050640096887946129, 0.0056451158598065376, 0.0048175030387938023, 0.0054292110726237297, 0.0062268460169434547, 0.0064336382783949375, 0.0041590584442019463, 0.0055969231761991978, 0.0045746723189949989, 0.0059980293735861778, 0.0063273990526795387, 0.0069218487478792667, 0.0059919250197708607, 0.0061632832512259483, 0.0070743579417467117, 0.0053365849889814854, 0.0046367128379642963, 0.0050694341771304607, 0.0050172572955489159, 0.0043627410195767879, 0.0050734798423945904, 0.0054309563711285591, 0.0099750738590955734, 0.0049224384129047394, 0.0048587503843009472, 0.0053746416233479977, 0.0052421600557863712, 0.0067365635186433792, 0.0040626600384712219, 0.0075851520523428917, 0.005153212696313858, 0.0056362957693636417, 0.0050575118511915207, 0.004452303983271122, 0.0044370465911924839, 0.0049317223019897938, 0.0051468759775161743, 0.0052253073081374168, 0.0043015014380216599, 0.0061511397361755371, 0.0059048682451248169, 0.0048491968773305416, 0.0039826394058763981, 0.0046310587786138058, 0.0043019796721637249, 0.0042487476021051407, 0.0062628188170492649, 0.0070425048470497131, 0.0041930149309337139, 0.0047980356030166149, 0.0051061990670859814, 0.0049430606886744499, 0.0070604793727397919, 0.0045343381352722645, 0.0035838494077324867, 0.006125645712018013, 0.0057261637412011623, 0.0039150700904428959, 0.0052113463170826435, 0.0071605038829147816, 0.0039784875698387623, 0.0048731551505625248, 0.0052034198306500912, 0.0056341188028454781, 0.0053520151413977146, 0.00539360661059618, 0.0051192431710660458, 0.0055867703631520271, 0.0055477777495980263, 0.0055944924242794514, 0.0066007864661514759, 0.0042682974599301815, 0.0068395687267184258, 0.0057972520589828491, 0.0046744034625589848, 0.0066533163189888, 0.0046410886570811272, 0.0044905217364430428, 0.0054250708781182766, 0.0041950875893235207, 0.0058362935669720173, 0.0053358306176960468, 0.0052363015711307526, 0.0060815722681581974, 0.003859800286591053, 0.0040750405751168728, 0.0048443288542330265, 0.0045744753442704678, 0.005053399596363306, 0.0055059310980141163, 0.0054290588013827801, 0.0071091814897954464, 0.0046148756518959999, 0.0051506790332496166, 0.0048968694172799587, 0.0052601252682507038, 0.0051271114498376846, 0.0063041932880878448, 0.006074903067201376, 0.0064747137948870659, 0.0048507219180464745, 0.0062671247869729996, 0.0049717952497303486, 0.0056103002279996872, 0.0073245614767074585, 0.0049407556653022766, 0.0047831214033067226, 0.0049719777889549732, 0.0054254191927611828, 0.0045247217640280724, 0.0051397965289652348, 0.006159135140478611, 0.0054768715053796768, 0.0052283424884080887, 0.0050422735512256622, 0.0055500664748251438, 0.0071751605719327927, 0.0067811231128871441, 0.0049346974119544029, 0.0052174413576722145, 0.0049127759411931038, 0.0052817091345787048, 0.0039331489242613316, 0.0055033420212566853, 0.0055110612884163857, 0.0052131018601357937, 0.0048219133168458939, 0.0048306304961442947, 0.0053562810644507408, 0.0053361984901130199, 0.005974277388304472, 0.0075203683227300644, 0.0071810949593782425, 0.0050120367668569088, 0.0043001966550946236, 0.0039432300254702568, 0.0045323995873332024, 0.0050742775201797485, 0.005654127337038517, 0.005903284065425396, 0.0060972953215241432, 0.0057446137070655823, 0.0057771289721131325, 0.0060163871385157108, 0.0059309117496013641, 0.0048164753243327141, 0.0055258655920624733, 0.0044974847696721554, 0.005271510686725378, 0.0036789074074476957, 0.0050968118011951447, 0.004673113115131855, 0.0064300773665308952, 0.0052082808688282967, 0.006376651581376791, 0.0046804072335362434, 0.0052313976921141148, 0.0054100691340863705, 0.0071234977804124355, 0.0058135362342000008, 0.0042845262214541435, 0.0048224111087620258, 0.0044998526573181152, 0.006129599642008543, 0.0054334672167897224, 0.0057737561874091625, 0.0045968294143676758, 0.0058267773129045963, 0.0051223672926425934, 0.0043055862188339233, 0.005203422624617815, 0.0081918640062212944, 0.0057911709882318974, 0.0058654635213315487, 0.0053264135494828224, 0.006504216231405735, 0.0062693161889910698, 0.0062930043786764145, 0.0053299302235245705, 0.0054610036313533783, 0.0047901920042932034, 0.0067009101621806622, 0.0045292805880308151, 0.0052729942835867405, 0.0055849184282124043, 0.0045084003359079361, 0.004773041233420372, 0.0053650503978133202, 0.0054503567516803741, 0.0044979061931371689, 0.0082064513117074966, 0.0065230792388319969, 0.007063236553221941, 0.0052479594014585018, 0.0049768616445362568, 0.0043762172572314739, 0.0051340041682124138, 0.0054426328279078007, 0.0049065030179917812, 0.00572196114808321, 0.004768772516399622, 0.0073214820586144924, 0.0082296393811702728, 0.0071761133149266243, 0.0041469414718449116, 0.0051108002662658691, 0.0052004791796207428, 0.0059307478368282318, 0.0056735305115580559, 0.0053483853116631508, 0.0048034167848527431, 0.0045489375479519367, 0.0051788697019219398, 0.0050649270415306091, 0.0053110364824533463, 0.0060241161845624447, 0.0046545350924134254, 0.0055698100477457047, 0.0050799553282558918, 0.004083697684109211, 0.0058333412744104862, 0.0046562640927731991, 0.0058260168880224228, 0.0076560336165130138, 0.0051497137174010277, 0.0048781353980302811, 0.0049559748731553555, 0.008107868954539299, 0.0044096093624830246, 0.0049769976176321507, 0.0052267094142735004, 0.006685017142444849, 0.0040886476635932922, 0.005666492972522974, 0.0046318955719470978, 0.005593558307737112, 0.0052942074835300446, 0.0041836635209619999, 0.0044233561493456364, 0.0048754899762570858, 0.0073289382271468639, 0.0055500417947769165, 0.0063049597665667534, 0.0047011207789182663, 0.0057818866334855556, 0.0041943355463445187, 0.004798979964107275, 0.0059838490560650826, 0.0051940204575657845, 0.005919966846704483, 0.0049575869925320148, 0.0052678026258945465, 0.0060391435399651527, 0.0052055194973945618, 0.0078818295150995255, 0.0067775854840874672, 0.0056243347935378551, 0.0044693299569189548, 0.0060348366387188435, 0.0069942828267812729, 0.0064854980446398258, 0.0058953994885087013, 0.0062394933775067329, 0.0054522161372005939, 0.0046451468952000141, 0.006037070881575346, 0.0060449321754276752, 0.0071285935118794441, 0.0057300957851111889, 0.0047463169321417809, 0.0041864081285893917, 0.0060623777098953724, 0.0064243525266647339, 0.0057772425934672356, 0.0057623451575636864, 0.0048978966660797596, 0.0052983262576162815, 0.0042425831779837608, 0.0044064745306968689, 0.0060862358659505844, 0.0048264898359775543, 0.0045960871502757072, 0.0072264326736330986, 0.0052227783016860485, 0.006335776299238205, 0.007567079272121191, 0.0052242940291762352, 0.004011825192719698, 0.0053838817402720451, 0.0071145468391478062, 0.0073067331686615944, 0.0066514872014522552, 0.0051064044237136841, 0.0055292733013629913, 0.0074420524761080742, 0.0058866962790489197, 0.006858444306999445, 0.004923979751765728, 0.0047256588004529476, 0.0044927662238478661, 0.005629358347505331, 0.0056699337437748909, 0.0067983986809849739, 0.0046222624368965626, 0.0061473855748772621, 0.0052713854238390923, 0.0060340850614011288, 0.0058344630524516106, 0.0059219277463853359, 0.005976690910756588, 0.00703409593552351, 0.0056613739579916, 0.0056404056958854198, 0.0048850891180336475, 0.0045496230013668537, 0.0042422446422278881, 0.0050701978616416454, 0.0066473926417529583, 0.0059800213202834129, 0.0073152785189449787, 0.0056020701304078102, 0.0049293572083115578, 0.0061445962637662888, 0.0047488315030932426, 0.0047035696916282177, 0.0053456085734069347, 0.0049040978774428368, 0.0061949235387146473, 0.0058995578438043594, 0.0065189660526812077, 0.0042823837138712406, 0.0066360896453261375, 0.005396564956754446, 0.0052500106394290924, 0.0041644521988928318, 0.0063341837376356125, 0.0044182236306369305, 0.0042871315963566303, 0.0041684047318994999, 0.0054920758120715618, 0.0052233003079891205, 0.0066325468942523003, 0.0069873104803264141, 0.0045709097757935524, 0.0046759727410972118, 0.0060350475832819939, 0.0070943343453109264, 0.0055521936155855656, 0.0052666114643216133, 0.0063828169368207455, 0.0058700074441730976, 0.0049529410898685455, 0.0050513288006186485, 0.0049390732310712337, 0.0043578254990279675, 0.00472236517816782, 0.0049030324444174767, 0.0052312766201794147, 0.0058629815466701984, 0.0069819167256355286, 0.0052336286753416061, 0.0070692170411348343, 0.0045098434202373028, 0.0050433892756700516, 0.0044348528608679771, 0.0069733541458845139, 0.0038157333619892597, 0.0057236719876527786, 0.0060431854799389839, 0.0040142652578651905, 0.005090255755931139, 0.006009378470480442, 0.0044739167205989361, 0.0049246624112129211, 0.0050703142769634724, 0.0056592770852148533, 0.0065120733343064785, 0.0050198305398225784, 0.0053480239585042, 0.0056326864287257195, 0.0058298022486269474, 0.0055613699369132519, 0.0061712479218840599, 0.0048180227167904377, 0.0047016064636409283, 0.0053105098195374012, 0.0046461694873869419, 0.0060513266362249851, 0.0049552381969988346, 0.0047899223864078522, 0.004902321845293045, 0.0056326868943870068, 0.0060829930007457733, 0.0059208902530372143, 0.0049993842840194702, 0.0060719749890267849, 0.0051170173101127148, 0.004529688972979784, 0.004523569718003273, 0.0047830916009843349, 0.0049779745750129223, 0.0065334336832165718, 0.0064265145920217037, 0.00757585559040308, 0.0049095293506979942, 0.0040496671572327614, 0.0045827277936041355, 0.0053309304639697075, 0.0048978254199028015, 0.0049418387934565544, 0.0045945183373987675, 0.0051305755041539669, 0.004222541581839323, 0.0057136961258947849, 0.0059074494056403637, 0.0055433125235140324, 0.0059296009130775928, 0.0053726816549897194, 0.005948950070887804, 0.0057137166149914265, 0.0056978003121912479, 0.0046999705955386162, 0.0070620770566165447, 0.0046241972595453262, 0.0051405918784439564, 0.0064457561820745468, 0.0049421088770031929, 0.0052718375809490681, 0.004750498104840517, 0.0054671498946845531, 0.0051201255992054939, 0.0056418073363602161, 0.0045168092474341393, 0.0060145477764308453, 0.0044937897473573685, 0.0047656702809035778, 0.0049010803923010826, 0.0052946321666240692, 0.0053517199121415615, 0.0067918389104306698, 0.0056324293836951256, 0.0054433485493063927, 0.0055475728586316109, 0.0041342121548950672, 0.0057095182128250599, 0.0047231037169694901, 0.005521401297301054, 0.0062817046418786049, 0.0053940941579639912, 0.0059645851142704487, 0.0063987257890403271, 0.0048314053565263748, 0.0064364951103925705, 0.0044710286892950535, 0.0046412255614995956, 0.0036628316156566143, 0.0079601146280765533, 0.005564521998167038, 0.0051988260820508003, 0.0065643931739032269, 0.0053179273381829262, 0.0043440707959234715, 0.0046352483332157135, 0.0055570998229086399, 0.0047774100676178932, 0.0058098682202398777, 0.0059762587770819664, 0.0047567975707352161, 0.003869535168632865, 0.0076089859940111637, 0.0039545390754938126, 0.005398913286626339, 0.0037200918886810541, 0.0048898765817284584, 0.0053136921487748623, 0.004856375977396965, 0.0047915708273649216, 0.0065425415523350239, 0.0052612046711146832, 0.0048580593429505825, 0.0048421025276184082, 0.0042643691413104534, 0.006161706056445837, 0.0047320462763309479, 0.0044565270654857159, 0.0051002958789467812, 0.0057358797639608383, 0.0044558141380548477, 0.0049714944325387478, 0.0066353199072182178, 0.0059654884971678257, 0.0049568051472306252, 0.0068345475010573864, 0.0046362262219190598, 0.0059917843900620937, 0.006571637000888586, 0.0044736443087458611, 0.0066579747945070267, 0.0052786543965339661, 0.0045109563507139683, 0.0047017186880111694, 0.005669507198035717, 0.005040828138589859, 0.0067569175735116005, 0.0044221896678209305, 0.0047246469184756279, 0.0063743419013917446, 0.0077467584051191807, 0.0055524930357933044, 0.0048285732045769691, 0.0052628698758780956, 0.0063992119394242764, 0.0058764354325830936, 0.0055200234055519104, 0.0060025784187018871, 0.005017442163079977, 0.0051704747602343559, 0.0076919193379580975, 0.0068328059278428555, 0.0065030781552195549, 0.0061486312188208103, 0.0071311877109110355, 0.0049609742127358913, 0.0046455394476652145, 0.0048317378386855125, 0.004574894905090332, 0.0042547434568405151, 0.0049138902686536312, 0.0044306768104434013, 0.0051959785632789135, 0.0052925855852663517, 0.004905112087726593, 0.0061968555673956871, 0.0060114618390798569, 0.0049875625409185886, 0.0057632788084447384, 0.0056336326524615288, 0.0054245153442025185, 0.0055395881645381451, 0.0055065490305423737, 0.0045860656537115574, 0.0065779485739767551, 0.0048595364205539227, 0.0044639566913247108, 0.0054308683611452579, 0.0056227133609354496, 0.0049812975339591503, 0.0056318622082471848, 0.0063586053438484669, 0.0065765799954533577, 0.0040072845295071602, 0.0067102480679750443, 0.0047821979969739914, 0.005013665184378624, 0.0058646379038691521, 0.0048706620000302792, 0.0045528612099587917, 0.0050158603116869926, 0.0048268884420394897, 0.005083184689283371, 0.0044520236551761627, 0.0047230338677763939, 0.0070892395451664925, 0.0050528091378509998, 0.005105234682559967, 0.0052145612426102161, 0.0053786281496286392, 0.0041025946848094463, 0.0039205863140523434, 0.0053583001717925072, 0.0062564206309616566, 0.0054251775145530701, 0.0058419522829353809, 0.0057513853535056114, 0.0052685621194541454, 0.0064813783392310143, 0.0053213406354188919, 0.004228843841701746, 0.0057648620568215847, 0.0046632494777441025, 0.0041387574747204781, 0.0063506024889647961, 0.0064872861839830875, 0.0056483177468180656, 0.00463468162342906, 0.004493403248488903, 0.005115891806781292, 0.0065851137042045593, 0.004893783014267683, 0.0064812423661351204, 0.0048607089556753635, 0.004393851850181818, 0.0047268252819776535, 0.0052805976010859013, 0.004194953478872776, 0.0053349947556853294, 0.0051353364251554012, 0.0055794701911509037, 0.0056341276504099369, 0.004937837366014719, 0.0059155100025236607, 0.003806304419413209, 0.0047467602416872978, 0.0047506224364042282, 0.0059018740430474281, 0.0046806931495666504, 0.0061741848476231098, 0.0044374475255608559, 0.0043646553531289101, 0.0052431491203606129, 0.0060440320521593094, 0.0055611957795917988, 0.0036415162030607462, 0.0072815520688891411, 0.0063245482742786407, 0.0043399264104664326, 0.0061177792958915234, 0.0052156215533614159, 0.010953887365758419, 0.0046396190300583839, 0.0045170178636908531, 0.0049490807577967644, 0.0054222941398620605, 0.0050900634378194809, 0.0055699995718896389, 0.0045368289574980736, 0.0063372584991157055, 0.0042183129116892815, 0.0049798381514847279, 0.0057504456490278244, 0.0069032935425639153, 0.0061178929172456264, 0.0047481497749686241, 0.0055848890915513039, 0.0043062199838459492, 0.0059652109630405903, 0.0056815911084413528, 0.0059922998771071434, 0.0043383832089602947, 0.005903931800276041, 0.0047307386994361877, 0.0047307382337749004, 0.0054589384235441685, 0.00466574402526021, 0.0062257219105958939, 0.0068357042036950588, 0.0042505897581577301, 0.0051026227883994579, 0.0047194911167025566, 0.004942573606967926, 0.0058712167665362358, 0.0039650611579418182, 0.0066392747685313225, 0.0048788655549287796, 0.0047713210806250572, 0.005808594636619091, 0.0056623746640980244, 0.0051438501104712486, 0.0047782808542251587, 0.0068940478377044201, 0.0055985799990594387, 0.0055734086781740189, 0.0049271136522293091, 0.0064660659991204739, 0.0047009503468871117, 0.0053100613877177238, 0.0044345906935632229, 0.005783942062407732, 0.0062646982260048389, 0.0039655258879065514, 0.0047987536527216434, 0.0050437538884580135, 0.0054289214313030243, 0.0062337657436728477, 0.0044356225989758968, 0.0048637301661074162, 0.0056552793830633163, 0.004240068607032299, 0.0042190719395875931, 0.0047509977594017982, 0.0054265391081571579, 0.0042356452904641628, 0.0049929656088352203, 0.0043844543397426605, 0.004632195457816124, 0.0046473778784275055, 0.0045871175825595856, 0.0056150471791625023, 0.0043430319055914879, 0.0054738796316087246, 0.0060749403201043606, 0.0052273310720920563, 0.0056309206411242485, 0.0055440720170736313, 0.0044815163128077984, 0.0058098090812563896, 0.0052588996477425098, 0.005589847918599844, 0.0061146020889282227, 0.0060516679659485817, 0.0046494714915752411, 0.0042565446346998215, 0.0046221143566071987, 0.0044941906817257404, 0.0050045754760503769, 0.0062950477004051208, 0.0046030054800212383, 0.0050598853267729282, 0.0059019681066274643, 0.005624768789857626, 0.0063268900848925114, 0.0067685344256460667, 0.0055425139144062996, 0.0072264289483428001, 0.0055473633110523224, 0.0042103664018213749, 0.0047826576046645641, 0.0065133478492498398, 0.0061697983182966709, 0.0052443756721913815, 0.0056346748024225235, 0.0051541631110012531, 0.0053646271117031574, 0.0072104125283658504, 0.0065793688409030437, 0.0049830954521894455, 0.0060300356708467007, 0.006184212863445282, 0.0050523974932730198, 0.0050538438372313976, 0.005910597275942564, 0.0057315248996019363, 0.0057409191504120827, 0.0055629787966609001, 0.0063824816606938839, 0.0048509892076253891, 0.0054011521860957146, 0.0055306958965957165, 0.0051353988237679005, 0.0050177001394331455, 0.0052454848773777485, 0.004580311942845583, 0.0066362284123897552, 0.0057647698558866978, 0.0053360727615654469, 0.0053469832055270672, 0.0050338925793766975, 0.0054138344712555408, 0.0044851740822196007, 0.0072571416385471821, 0.0044311406090855598, 0.0062182145193219185, 0.0049186563119292259, 0.0060697277076542377, 0.0051032579503953457, 0.0056966571137309074, 0.0057254754938185215, 0.0049444176256656647, 0.0059784478507936001, 0.004652682226151228, 0.005436804611235857, 0.0051058386452496052, 0.0044148741289973259, 0.0055682742968201637, 0.004933586809784174, 0.0049130683764815331, 0.00567214610055089, 0.004736180417239666, 0.0046189012937247753, 0.0051527000032365322, 0.005040390882641077, 0.0058184992522001266, 0.0057142693549394608, 0.0050621815025806427, 0.0054431473836302757, 0.0057862671092152596, 0.0043518696911633015, 0.0055394168011844158, 0.0065309437923133373, 0.0059588188305497169, 0.004862841684371233, 0.0042633744888007641, 0.0044021024368703365, 0.0054563344456255436, 0.0057631735689938068, 0.007109867874532938, 0.0063930447213351727, 0.0046805604360997677, 0.0049702748656272888, 0.0056523135863244534, 0.0086859185248613358, 0.0056030997075140476, 0.0049440399743616581, 0.0063985045999288559, 0.00616423599421978, 0.0061707170680165291, 0.0051157404668629169, 0.0050656450912356377, 0.0059877713210880756, 0.0055230055004358292, 0.005614828784018755, 0.005506529938429594, 0.0050781047903001308, 0.0050625954754650593, 0.0065498147159814835, 0.005615385714918375, 0.0052983076311647892, 0.0070490888319909573, 0.0041801179759204388, 0.0069352872669696808, 0.006377016194164753, 0.0048511582426726818, 0.0053802859038114548, 0.0057673170231282711, 0.0045960866846144199, 0.005072473082691431, 0.0080139152705669403, 0.0056231571361422539, 0.0060271443799138069, 0.0052916016429662704, 0.0046903332695364952, 0.0055724070407450199, 0.0051069282926619053, 0.0053570386953651905, 0.0050035519525408745, 0.0051231281831860542, 0.0068487599492073059, 0.0057196412235498428, 0.0056510386057198048, 0.0054352930746972561, 0.006856023333966732, 0.0055685415863990784, 0.0059817968867719173, 0.0055746445432305336, 0.0058015282265841961, 0.0041947346180677414, 0.0053744516335427761, 0.0041389064863324165, 0.0040756282396614552, 0.0048574144020676613, 0.0045629828236997128, 0.0060741836205124855, 0.0071998285129666328, 0.0046420334838330746, 0.0059473034925758839, 0.0057758176699280739, 0.0076958457939326763, 0.00503926957026124, 0.0048798792995512486, 0.0046350285410881042, 0.0051318490877747536, 0.0052598407492041588, 0.0067892675288021564, 0.0057081161066889763, 0.0045659616589546204, 0.0050919502973556519, 0.0059380689635872841, 0.0067656929604709148, 0.0045798863284289837, 0.006983649916946888, 0.0040408754721283913, 0.0049811331555247307, 0.0065075610764324665, 0.0062243393622338772, 0.0063514048233628273, 0.0064113452099263668, 0.0064779557287693024, 0.0042360355146229267, 0.0058608651161193848, 0.0044162236154079437, 0.005296497605741024, 0.0050432635471224785, 0.0058305300772190094, 0.0061108442023396492, 0.0059392931871116161, 0.0067162690684199333, 0.0053664254955947399, 0.0055779977701604366, 0.0059255794622004032, 0.0049341791309416294, 0.0049822875298559666, 0.0042592990212142467, 0.0049212970770895481, 0.0056728441268205643, 0.0062959622591733932, 0.0053623700514435768, 0.0061100609600543976, 0.0049109016545116901, 0.006052807904779911, 0.0056692129001021385, 0.0058105709031224251, 0.0047977706417441368, 0.0054724733345210552, 0.0055817905813455582, 0.0045135235413908958, 0.0044033159501850605, 0.00623718136921525, 0.004807762335985899, 0.0054185441695153713, 0.0050928252749145031, 0.0064943418838083744, 0.0044344402849674225, 0.0044422894716262817, 0.005511424969881773, 0.0050157452933490276, 0.0054464028216898441, 0.0061854957602918148, 0.0063551170751452446, 0.0053228777833282948, 0.0056613837368786335, 0.0050227325409650803, 0.0044456152245402336, 0.0053309039212763309, 0.0071613281033933163, 0.004604133777320385, 0.0044874739833176136, 0.0052106236107647419, 0.0046699754893779755, 0.0048038717359304428, 0.0061543374322354794, 0.0052173635922372341, 0.005771697498857975, 0.005467947106808424, 0.0065946890972554684, 0.0060554728843271732, 0.006042317021638155, 0.0064238873310387135, 0.0050844638608396053, 0.0068900068290531635, 0.0046521173790097237, 0.0059657692909240723, 0.0051075108349323273, 0.0076098688878118992, 0.0051305852830410004, 0.0058314595371484756, 0.0055356211960315704, 0.0050320280715823174, 0.0065983999520540237, 0.0055188094265758991, 0.0059596090577542782, 0.0057548349723219872, 0.0051305759698152542, 0.0061426670290529728, 0.0047019640915095806, 0.0047805733047425747, 0.0041951029561460018, 0.0048069707117974758, 0.0054767564870417118, 0.0077768545597791672, 0.0054746526293456554, 0.0063096275553107262, 0.0064217187464237213, 0.0057666637003421783, 0.0056452094577252865, 0.006280126515775919, 0.0047632483765482903, 0.0055978773161768913, 0.0056779026053845882, 0.0063663157634437084, 0.0049810991622507572, 0.0055221403017640114, 0.005745049100369215, 0.0056034782901406288, 0.0051575768738985062, 0.007487680297344923, 0.0053031370043754578, 0.005683461669832468, 0.0048571997322142124, 0.0050571565516293049, 0.0045640687458217144, 0.0046043857000768185, 0.0053162761032581329, 0.0058398698456585407, 0.0050687501206994057, 0.0054022986441850662, 0.0039985785260796547, 0.0066309664398431778, 0.0060043525882065296, 0.0051496676169335842, 0.0064931968227028847, 0.0048299306072294712, 0.0057047833688557148, 0.0041184616275131702, 0.0044112089090049267, 0.004674048162996769, 0.005720892921090126, 0.0049724532291293144, 0.0051076165400445461, 0.0058250091969966888, 0.006209950428456068, 0.0055935541167855263, 0.0051464773714542389, 0.0045963786542415619, 0.0049357647076249123, 0.0050923945382237434, 0.0043995408341288567, 0.0048422897234559059, 0.0041165337897837162, 0.0053790956735610962, 0.0056017381139099598, 0.0051857302896678448, 0.0054514640942215919, 0.0073205730877816677, 0.0058130482211709023, 0.0046354238875210285, 0.003989937249571085, 0.0070748128928244114, 0.0059615597128868103, 0.0075015467591583729, 0.0042953961528837681, 0.0057366960681974888, 0.0072841010987758636, 0.0044103418476879597, 0.0053614983335137367, 0.0050369794480502605, 0.0044470112770795822, 0.0047517223283648491, 0.0053480006754398346, 0.0062799546867609024, 0.0040661008097231388, 0.0049789417535066605, 0.0054040038958191872, 0.0050175604410469532, 0.0055532297119498253, 0.0061323689296841621, 0.0047060074284672737, 0.0057603516615927219, 0.0060705780051648617, 0.0054994700476527214, 0.0059434832073748112, 0.0066304611973464489, 0.0065345722250640392, 0.004346934612840414, 0.0053210947662591934, 0.0044256765395402908, 0.005740913562476635, 0.0051854574121534824, 0.0044805863872170448, 0.0047289850190281868, 0.0068226479925215244, 0.003924923948943615, 0.0063586314208805561, 0.004889397881925106, 0.0080454861745238304, 0.0078083514235913754, 0.0043253647163510323, 0.0051203942857682705, 0.0058288057334721088, 0.0049200234934687614, 0.0048123188316822052, 0.0062141828238964081, 0.0052642426453530788, 0.0047526047565042973, 0.0072027049027383327, 0.0047109583392739296, 0.0054542156867682934, 0.0051214182749390602, 0.0062166987918317318, 0.0045731109566986561, 0.0058312392793595791, 0.0050430111587047577, 0.0046797981485724449, 0.0049018077552318573, 0.0075126895681023598, 0.0044539058580994606, 0.0043718023225665092, 0.0067114066332578659, 0.0048137335106730461, 0.0066766398958861828, 0.0057718479074537754, 0.0046215150505304337, 0.0067667965777218342, 0.0043294383212924004, 0.0053856018930673599, 0.0063917199149727821, 0.0041147000156342983, 0.0042897365055978298, 0.0054984302259981632, 0.0052379155531525612, 0.0039271633140742779, 0.0058382810093462467, 0.0050447713583707809, 0.0040454361587762833, 0.007235958706587553, 0.0054636169224977493, 0.0055363704450428486, 0.00647784024477005, 0.0078111342154443264, 0.0044727446511387825, 0.0060438783839344978, 0.005057069007307291, 0.0042500398121774197, 0.0049401936121284962, 0.0062538310885429382, 0.0056455167941749096, 0.0063595408573746681, 0.0045294691808521748, 0.0049225217662751675, 0.0052579608745872974, 0.0053617926314473152, 0.0060084834694862366, 0.0073295747861266136, 0.0053091049194335938, 0.0051025967113673687, 0.0069311792030930519, 0.0059719560667872429, 0.0063702305778861046, 0.0048886146396398544, 0.0046458826400339603, 0.0046971188858151436, 0.0042790668085217476, 0.0051712016575038433, 0.0058345412835478783, 0.0046192482113838196, 0.004754992201924324, 0.0044415974989533424, 0.0047827600501477718, 0.005610103253275156, } };
const TfArray<1280, int> quant77_zero = { 1280, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant77 = { (TfLiteFloatArray*)&quant77_scale, (TfLiteIntArray*)&quant77_zero, 0 };
const ALIGN(8) int8_t tensor_data78[1*3*3*8] = { 
  /* [0][0][][] */ 0,1,14,18,10,0,9,31, 7,1,-38,127,-22,1,-4,30, -4,-1,-9,18,-2,1,-6,21, 
  /* [0][1][][] */ -4,-1,127,-23,127,-1,-111,41, 127,-127,-104,6,-92,127,-14,-127, -27,3,16,-21,-1,0,127,39, 
  /* [0][2][][] */ 2,1,10,4,10,-1,16,33, 4,3,-44,-2,-14,3,-10,-104, -4,0,-9,0,0,-1,-6,37, 
};
const TfArray<4, int> tensor_dimension78 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant78_scale = { 8, { 0.012906666845083237, 0.016336094588041306, 0.010950446128845215, 0.012950703501701355, 0.0085497843101620674, 0.013436073437333107, 0.054102234542369843, 0.075973592698574066, } };
const TfArray<8, int> quant78_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant78 = { (TfLiteFloatArray*)&quant78_scale, (TfLiteIntArray*)&quant78_zero, 3 };
const ALIGN(8) int32_t tensor_data79[8] = { 7403, -7884, -517, 5564, 4222, 1420, -6152, 5681, };
const TfArray<1, int> tensor_dimension79 = { 1, { 8 } };
const TfArray<8, float> quant79_scale = { 8, { 4.1348306694999337e-05, 6.6507767769508064e-05, 4.8703674110583961e-05, 2.8999218557146378e-05, 7.530574657721445e-05, 0.0001240750279976055, 5.4488547903019935e-05, 0.00010195471259066835, } };
const TfArray<8, int> quant79_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant79 = { (TfLiteFloatArray*)&quant79_scale, (TfLiteIntArray*)&quant79_zero, 0 };
const ALIGN(8) int8_t tensor_data80[1*3*3*48] = { 
  /* [0][0][][] */ -24,-85,-101,75,-86,4,-89,-77,58,72,116,-41,3,10,-82,-62,96,-83,32,-44,-20,-106,-35,-77,86,90,3,-124,4,-45,58,79,49,70,67,22,92,89,30,11,-124,-13,26,42,-41,50,-33,-95, 88,-9,36,78,-127,42,-60,10,101,109,118,63,-9,-71,-127,-105,119,-36,102,-80,-107,127,127,33,127,92,48,-119,-79,-51,-103,114,97,127,99,102,-17,88,62,-71,-88,-81,13,-54,-57,105,-47,102, 110,-1,57,66,-78,13,-29,-8,25,77,1,-31,-74,3,-43,-48,37,85,55,-14,-65,-26,-83,73,38,22,25,-45,-1,-40,24,42,46,95,10,63,-5,23,47,-8,-54,-3,3,10,-20,63,-13,-4, 
  /* [0][1][][] */ 39,-127,117,91,90,-72,-127,-127,112,81,106,-50,6,-1,-107,-91,94,127,44,-104,-41,110,32,-127,101,117,110,-126,-3,-121,-73,94,109,0,102,55,33,118,56,0,-12,-25,99,96,-110,90,-110,111, 127,-10,5,127,122,-127,-100,6,127,127,127,58,-29,-127,-118,-127,127,62,127,-127,-127,-122,-105,49,110,127,127,-127,-127,-127,127,127,127,5,127,127,-3,127,127,-127,10,-127,124,-83,-127,127,-122,-127, 103,-5,-127,73,88,-59,-41,-7,21,82,11,-20,-127,1,-30,-35,40,-96,71,-37,-76,7,74,74,52,44,1,-54,-12,-83,-37,31,43,-3,27,72,-1,16,73,-3,-22,-6,45,-12,-71,52,-47,12, 
  /* [0][2][][] */ 59,-77,5,21,-1,65,-77,-79,37,10,22,53,11,9,-46,-33,17,-38,17,-60,-18,-1,13,-80,25,35,72,-18,8,-114,12,18,66,-80,68,20,-127,27,7,-2,25,-7,95,-127,-72,40,-78,-11, 50,5,4,54,8,92,-34,0,29,49,19,-127,-12,-84,-39,-43,37,-10,46,-88,-37,-13,-25,29,28,50,75,-47,-82,-119,-27,20,64,-87,63,28,20,39,60,-50,127,-63,127,103,-106,51,-127,16, -29,-7,-7,38,-19,39,-20,-2,11,21,-51,40,-64,1,-11,-5,2,27,29,-5,-38,20,14,34,24,27,22,-3,-3,-54,12,-14,3,-45,14,19,6,-20,40,10,63,3,30,-11,-26,33,-28,-5, 
};
const TfArray<4, int> tensor_dimension80 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant80_scale = { 48, { 0.0044432985596358776, 0.0058457185514271259, 0.024984585121273994, 0.0029738596640527248, 0.021416578441858292, 0.027862966060638428, 0.0066482084803283215, 0.0081772617995738983, 0.0029834306333214045, 0.0082379402592778206, 0.018692517653107643, 0.010782831348478794, 0.01029637549072504, 0.0078269205987453461, 0.002508268691599369, 0.0023734841961413622, 0.0047614988870918751, 0.018703872337937355, 0.0027666606474667788, 0.0039158221334218979, 0.0024905831087380648, 0.021734414622187614, 0.037787493318319321, 0.0098664453253149986, 0.0023923476692289114, 0.00639730179682374, 0.0039795567281544209, 0.0042716781608760357, 0.0067330445162951946, 0.0052333055064082146, 0.014610413461923599, 0.0092403404414653778, 0.0040015392005443573, 0.010076198726892471, 0.003577470313757658, 0.0033355101477354765, 0.011494375765323639, 0.015817506238818169, 0.0050819665193557739, 0.0091813076287508011, 0.0037673350889235735, 0.0099637294188141823, 0.0045945500023663044, 0.013727614656090736, 0.003761692438274622, 0.012749376706779003, 0.0045406147837638855, 0.021940393373370171, } };
const TfArray<48, int> quant80_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant80 = { (TfLiteFloatArray*)&quant80_scale, (TfLiteIntArray*)&quant80_zero, 3 };
const ALIGN(8) int32_t tensor_data81[8] = { -15739, 2089, -21903, 1462, 3298, -4572, 13922, 1783, };
const TfArray<1, int> tensor_dimension81 = { 1, { 8 } };
const TfArray<8, float> quant81_scale = { 8, { 0.00010899611515924335, 9.7276984888594598e-05, 7.5126561569049954e-05, 4.7669531340943649e-05, 0.00011827978596556932, 9.6297037089243531e-05, 8.9670960733201355e-05, 0.00010566969285719097, } };
const TfArray<8, int> quant81_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant81 = { (TfLiteFloatArray*)&quant81_scale, (TfLiteIntArray*)&quant81_zero, 0 };
const ALIGN(8) int8_t tensor_data82[1*3*3*48] = { 
  /* [0][0][][] */ -7,-43,40,-30,127,-2,-9,-13,-33,42,-11,8,65,15,127,-39,12,-19,-29,-15,-33,-19,-65,26,-121,44,25,-45,-12,17,-18,-3,-34,30,17,2,84,50,30,-7,65,15,-12,-5,-102,-9,-40,-39, 3,-99,-71,-31,-53,-2,36,22,16,-3,62,127,-10,52,-70,127,-1,-68,39,-50,-76,-127,-82,79,-127,-89,19,120,14,33,127,9,-127,-112,-49,38,127,-88,117,10,56,-10,-22,-13,-55,-16,70,0, 12,-16,-13,127,47,9,-79,-2,-26,-43,-23,-19,52,-3,-62,-46,23,21,-5,-10,0,0,-30,15,-49,-66,-28,39,-2,28,-89,-8,13,72,17,21,3,73,-127,-1,26,-4,-8,26,-127,-1,-56,45, 
  /* [0][1][][] */ -111,-65,127,-7,-43,-35,79,18,18,94,9,15,46,27,106,30,30,-127,97,41,81,-9,53,-38,-10,-22,35,-51,23,51,36,55,36,-101,3,127,10,42,-43,-116,24,90,-18,-85,31,-84,-61,19, 127,-67,-72,-74,1,-127,127,127,127,17,127,-42,-127,22,-40,-44,127,-112,127,127,127,82,127,-127,0,-27,106,-21,127,127,-125,127,31,-127,127,-101,-66,127,-99,123,-127,-127,127,-127,103,-127,127,-126, -11,-108,13,76,-28,-9,-46,10,-14,-127,-33,49,78,10,-58,44,22,-4,-4,16,-2,-23,43,-23,0,7,-127,84,-68,8,82,18,-12,-105,-17,-42,63,16,120,9,26,53,-43,6,60,-27,-56,127, 
  /* [0][2][][] */ -6,122,26,-32,78,16,-40,-16,-29,17,-8,0,51,20,91,8,-15,2,-5,-45,-17,10,-2,13,-24,-18,27,0,-52,-112,-12,-3,-4,54,-18,34,-57,39,12,104,11,19,-1,6,21,-2,-19,-41, 1,95,-47,17,30,-31,0,32,30,13,23,-35,34,127,-76,-77,2,-31,106,-77,-50,77,-3,53,68,127,2,127,-68,-113,-18,-2,94,-115,-84,0,-68,-44,-30,-127,46,-22,-55,75,51,19,16,8, 13,127,-15,33,26,11,-59,-4,-22,-19,-6,-7,53,-1,-66,-2,-7,3,-35,-25,-9,4,-5,1,-48,29,-43,17,38,-80,17,1,8,58,2,-18,-43,57,9,0,-27,-5,2,-16,15,3,-4,32, 
};
const TfArray<4, int> tensor_dimension82 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant82_scale = { 48, { 0.013052841648459435, 0.0060601606965065002, 0.026306312531232834, 0.0074452529661357403, 0.0079903500154614449, 0.012639131397008896, 0.011134175583720207, 0.0078453654423356056, 0.015595292672514915, 0.0085236113518476486, 0.0185069739818573, 0.0078288475051522255, 0.0059225661680102348, 0.0059716221876442432, 0.0061435871757566929, 0.021782180294394493, 0.010767791420221329, 0.0038000091444700956, 0.0057005854323506355, 0.024227278307080269, 0.010715345852077007, 0.013982704840600491, 0.0080022066831588745, 0.033028319478034973, 0.010739332064986229, 0.013019200414419174, 0.0085605960339307785, 0.0075371004641056061, 0.01117912121117115, 0.0089770546182990074, 0.015437732450664043, 0.02189246192574501, 0.018899641931056976, 0.004657745361328125, 0.021105524152517319, 0.0079359216615557671, 0.0076883812434971333, 0.0041632740758359432, 0.022928422316908836, 0.037955965846776962, 0.0084769763052463531, 0.037048608064651489, 0.027611775323748589, 0.0081799896433949471, 0.010544838383793831, 0.0051339832134544849, 0.0083071161061525345, 0.012991557829082012, } };
const TfArray<48, int> quant82_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant82 = { (TfLiteFloatArray*)&quant82_scale, (TfLiteIntArray*)&quant82_zero, 3 };
const ALIGN(8) int32_t tensor_data83[8] = { 11089, 15747, 4792, 4530, 1919, -13891, 6521, -6833, };
const TfArray<1, int> tensor_dimension83 = { 1, { 8 } };
const TfArray<8, float> quant83_scale = { 8, { 0.00012841328862123191, 0.00013362430036067963, 0.0001401614717906341, 0.00020841065270360559, 0.00012505402264650911, 0.00013065282837487757, 7.3259383498225361e-05, 0.00011758038453990594, } };
const TfArray<8, int> quant83_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant83 = { (TfLiteFloatArray*)&quant83_scale, (TfLiteIntArray*)&quant83_zero, 0 };
const ALIGN(8) int8_t tensor_data84[1*3*3*48] = { 
  /* [0][0][][] */ 56,-66,-31,42,89,41,-66,-92,14,56,100,-66,-45,69,96,46,65,-77,66,81,-92,-91,45,80,-52,-21,78,74,94,90,-50,63,51,-71,-102,-76,64,-58,75,7,-85,61,43,-90,65,109,73,-64, 84,-85,-64,72,111,50,-73,-106,28,73,110,-96,-76,89,104,73,66,-97,63,102,-85,-118,68,96,-70,-59,110,98,114,127,-66,84,66,-100,-127,-81,83,-78,76,30,-111,76,45,-99,92,124,80,-83, 42,-37,-44,27,39,2,-24,-52,24,21,21,-36,-65,38,37,20,10,-20,29,23,-14,-80,31,37,-28,-10,46,35,44,48,-19,12,29,-64,-66,-50,23,-32,15,19,-33,31,11,-29,33,26,24,-49, 
  /* [0][1][][] */ 54,-88,-66,81,111,84,-115,-112,90,100,108,-88,-90,97,127,77,111,-96,51,119,-110,-127,80,110,-111,-78,112,92,101,93,-85,98,95,-120,-95,-127,87,-96,118,77,-101,96,96,-121,90,117,53,-89, 55,-127,-127,127,127,127,-127,-127,127,127,127,-127,-127,127,120,127,127,-127,58,127,-127,-127,127,127,-127,-127,127,127,127,113,-127,127,127,-127,-94,-120,127,-127,127,127,-127,127,127,-127,127,127,60,-127, -4,-61,-82,60,46,35,-60,-51,61,42,27,-62,-82,42,53,54,28,-31,25,35,-29,-92,60,63,-70,-18,21,54,57,21,-39,26,52,-108,-70,-59,42,-42,30,55,-22,55,42,-50,44,3,26,-74, 
  /* [0][2][][] */ -37,-44,-47,45,34,46,-51,-23,-89,51,31,-60,-66,36,62,47,60,-25,-79,55,-35,-58,46,49,-72,-60,61,46,31,6,-47,34,48,-66,-26,-47,29,-44,52,81,-33,56,69,-64,33,9,-102,-27, -127,-69,-85,73,44,72,-64,-17,-67,62,52,-68,-100,48,50,73,69,-33,-127,67,-51,-93,70,48,-88,-43,48,53,38,9,-70,40,66,-109,-23,-51,44,-56,51,110,-27,64,104,-79,46,-17,-127,-65, -65,-17,-56,41,12,24,2,1,-81,27,24,-27,-49,24,29,37,15,-10,-66,31,-21,-11,25,32,-41,3,9,26,13,-1,-22,9,26,-43,-8,-17,10,-16,2,47,-1,19,41,-13,8,-20,-51,-32, 
};
const TfArray<4, int> tensor_dimension84 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant84_scale = { 48, { 0.010667427442967892, 0.0046907193027436733, 0.0038308296352624893, 0.0041644005104899406, 0.0025659317616373301, 0.0056499931961297989, 0.0047388901002705097, 0.0042338753119111061, 0.013413799926638603, 0.0027246822137385607, 0.0062339873984456062, 0.0039085289463400841, 0.0035891192965209484, 0.0095113050192594528, 0.0033823465928435326, 0.0031644676346331835, 0.003634564345702529, 0.0065652988851070404, 0.016743060201406479, 0.0028994018211960793, 0.002369387773796916, 0.0030756243504583836, 0.0035897286143153906, 0.0062759649008512497, 0.0037000069860368967, 0.004133658017963171, 0.0072914422489702702, 0.0074193854816257954, 0.0067662037909030914, 0.0098498621955513954, 0.0062265042215585709, 0.0035782926715910435, 0.0025393606629222631, 0.0038368108216673136, 0.0034020284656435251, 0.0033337217755615711, 0.0042847315780818462, 0.0043705599382519722, 0.0037228451110422611, 0.0038074380718171597, 0.0057415897026658058, 0.0090673454105854034, 0.003031653817743063, 0.0037713479250669479, 0.0084497835487127304, 0.0065660132095217705, 0.010039209388196468, 0.0049196477048099041, } };
const TfArray<48, int> quant84_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant84 = { (TfLiteFloatArray*)&quant84_scale, (TfLiteIntArray*)&quant84_zero, 3 };
const ALIGN(8) int32_t tensor_data85[8] = { 4579, -3221, 21603, -12471, -19854, -21546, -12025, -3102, };
const TfArray<1, int> tensor_dimension85 = { 1, { 8 } };
const TfArray<8, float> quant85_scale = { 8, { 6.5336193074472249e-05, 8.9029941591434181e-05, 6.9699628511443734e-05, 7.8549674071837217e-05, 8.1434867752250284e-05, 6.9975292717572302e-05, 0.00012784037971869111, 0.00013519982167053968, } };
const TfArray<8, int> quant85_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant85 = { (TfLiteFloatArray*)&quant85_scale, (TfLiteIntArray*)&quant85_zero, 0 };
const ALIGN(8) int8_t tensor_data86[1*3*3*48] = { 
  /* [0][0][][] */ -55,1,36,11,127,-50,23,9,8,28,71,-14,6,16,-66,11,81,-43,-20,71,-37,10,-52,-11,-19,0,31,-44,-28,127,25,-85,-46,94,100,-73,6,-51,-127,-30,8,-19,-13,-70,-2,-46,-127,25, -66,98,-5,35,-13,-84,113,-16,82,12,84,127,60,127,-18,30,104,-89,4,95,-40,-23,103,-107,3,44,-107,22,-28,-85,113,-127,-127,-87,-2,-26,-64,-34,-112,19,-61,-28,18,-127,24,-91,31,50, -22,-8,7,-1,48,-50,23,-2,23,22,10,-48,-11,2,-60,25,61,-34,-16,72,-24,0,-63,-3,22,0,28,-103,-37,50,-51,-79,9,-7,88,-51,10,-35,-93,8,14,-3,1,-54,-13,-71,-126,-22, 
  /* [0][1][][] */ -127,127,-9,-67,7,-82,14,-7,28,16,64,39,75,91,-63,36,127,-127,14,87,-23,-56,-100,-35,-127,-8,-33,13,-11,4,77,-67,-64,127,-115,-79,33,-64,38,62,-105,30,-80,53,-12,-127,8,-43, 8,125,127,127,-44,105,-127,127,127,-127,-88,73,127,98,127,-113,-51,-103,127,-5,-127,127,127,3,96,111,72,127,127,-73,127,12,-60,-93,-41,-127,127,127,94,63,-54,127,-27,70,127,46,-7,-127, -74,70,-30,-53,-60,-120,17,-23,-6,3,116,38,33,84,-50,127,104,-113,-8,106,43,-81,-102,-35,25,-15,-27,19,-5,18,77,-48,-7,-26,-127,-62,20,-76,43,-127,-76,34,127,63,-28,-104,-11,112, 
  /* [0][2][][] */ -21,-11,3,-10,30,-39,24,4,33,25,127,35,13,-6,-38,105,75,-52,-47,7,-24,2,-54,42,-17,-12,-34,-25,13,64,-2,-4,-20,37,-68,24,-40,-48,53,-39,80,-8,-6,1,-21,-3,4,-31, -66,127,7,18,-88,-127,72,-71,65,19,47,-51,-38,26,-49,117,71,3,-6,127,-63,9,81,127,13,-127,127,5,23,-42,-42,-97,4,-48,-67,-100,-67,-65,35,35,127,56,-39,36,-24,-73,-97,-5, 35,-16,19,-5,-13,-42,19,12,33,21,95,18,31,-3,-36,72,53,-42,-55,17,-24,-6,-53,38,9,-16,-28,-61,8,0,-12,5,-8,4,-26,41,-33,-37,55,3,47,1,35,-1,-22,-60,21,31, 
};
const TfArray<4, int> tensor_dimension86 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant86_scale = { 48, { 0.0039575784467160702, 0.0035969030577689409, 0.046367142349481583, 0.012448844499886036, 0.010440334677696228, 0.0052206008695065975, 0.0057815057225525379, 0.020713752135634422, 0.0046202065423130989, 0.016720792278647423, 0.0082504535093903542, 0.0064085386693477631, 0.0074008875526487827, 0.0048070098273456097, 0.0061145504005253315, 0.0037994259037077427, 0.0036865570582449436, 0.0023885846603661776, 0.021580519154667854, 0.002590634161606431, 0.0044156024232506752, 0.019396036863327026, 0.0092039089649915695, 0.0089643700048327446, 0.01431176345795393, 0.01308088656514883, 0.012674142606556416, 0.015961945056915283, 0.012182233855128288, 0.010117661207914352, 0.0074144257232546806, 0.0045465053990483284, 0.004438410047441721, 0.011390417814254761, 0.006532532162964344, 0.0053090788424015045, 0.029583979398012161, 0.0071361670270562172, 0.0065034260042011738, 0.02319272980093956, 0.0080052195116877556, 0.0072427308186888695, 0.012317604385316372, 0.0078748352825641632, 0.011237920261919498, 0.0030112469103187323, 0.0054724332876503468, 0.0095485113561153412, } };
const TfArray<48, int> quant86_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant86 = { (TfLiteFloatArray*)&quant86_scale, (TfLiteIntArray*)&quant86_zero, 3 };
const ALIGN(8) int32_t tensor_data87[8] = { -12080, -35152, 722, 6790, -17557, 514, -25759, -1184, };
const TfArray<1, int> tensor_dimension87 = { 1, { 8 } };
const TfArray<8, float> quant87_scale = { 8, { 0.00015265100228134543, 6.7927780037280172e-05, 5.8854297094512731e-05, 6.7890308855567127e-05, 7.1266615123022348e-05, 7.9750745499040931e-05, 6.1958948208484799e-05, 9.1253816208336502e-05, } };
const TfArray<8, int> quant87_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant87 = { (TfLiteFloatArray*)&quant87_scale, (TfLiteIntArray*)&quant87_zero, 0 };
const ALIGN(8) int8_t tensor_data88[1*3*3*48] = { 
  /* [0][0][][] */ 66,74,-25,58,-2,-4,-52,11,34,-72,32,12,13,-117,-32,36,106,36,-67,3,82,17,-23,-16,74,33,20,-3,-68,24,-10,-58,127,11,115,26,-37,31,127,32,-64,73,-96,-56,31,-93,-39,0, 92,127,-79,99,18,62,-69,-127,48,50,127,41,-15,-22,-22,-7,-68,127,-85,26,59,127,36,-25,28,17,7,127,-127,91,-25,-127,1,-31,32,86,-78,127,123,43,-115,-75,71,-8,13,28,-127,95, 45,43,-12,33,3,-7,-36,19,26,-90,30,10,9,-87,-26,-23,96,-18,-32,-10,75,19,-27,43,53,66,16,-5,-14,15,-17,-37,117,17,87,17,-18,28,98,-1,-37,72,52,65,34,97,13,-16, 
  /* [0][1][][] */ -26,-47,-127,100,18,53,67,-30,34,50,-50,127,127,-10,-31,-72,-35,81,75,-12,-110,18,27,-106,29,53,21,13,-10,94,25,47,68,127,31,39,-81,-1,-57,83,89,-3,83,-120,10,-103,-1,127, 44,-90,-38,-127,121,15,127,-80,-127,127,-1,79,-104,127,127,-16,-127,77,14,127,37,-1,127,-7,-127,127,34,-80,-98,42,-127,97,106,-101,35,127,127,61,-13,127,127,-76,-21,-1,115,-70,7,42, -13,-46,-120,51,-17,127,50,-23,31,30,-44,71,-13,8,-36,-19,-74,79,127,-39,-127,21,-63,127,8,23,23,32,47,82,43,34,10,-7,-41,-119,-43,-18,-13,25,51,63,-15,127,-12,127,-20,84, 
  /* [0][2][][] */ -39,-24,-4,19,-14,9,-11,-2,28,-31,0,9,33,-103,-45,36,95,6,14,9,-68,23,-2,-1,23,-2,-5,1,7,15,43,5,18,14,127,0,-8,59,85,45,9,75,127,-23,-55,-124,-2,-18, -127,-9,-86,39,-127,3,-61,-15,21,109,-85,59,-19,-45,-23,127,-94,44,-94,-29,-80,27,5,-27,-16,62,-127,-24,-68,127,63,20,36,-24,22,28,-22,50,-47,60,-64,-127,-107,-31,-127,73,-94,92, -32,-26,-5,10,6,-5,-10,-3,19,-62,-14,-16,-6,-92,-28,5,98,-35,93,18,-74,-4,5,38,19,-11,-7,-7,17,9,39,6,38,11,71,29,0,53,102,7,12,76,-49,53,-36,110,-2,-49, 
};
const TfArray<4, int> tensor_dimension88 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant88_scale = { 48, { 0.014737506397068501, 0.0086631402373313904, 0.004411991685628891, 0.0051252790726721287, 0.012783725745975971, 0.0059282369911670685, 0.013844314031302929, 0.0064301835373044014, 0.0079369135200977325, 0.022333649918437004, 0.015992425382137299, 0.0035477541387081146, 0.015000620856881142, 0.0035090839955955744, 0.0059886784292757511, 0.0099711911752820015, 0.0070287231355905533, 0.0061853025108575821, 0.0078641679137945175, 0.014330028556287289, 0.0041479994542896748, 0.0083050010725855827, 0.012272542342543602, 0.010977422818541527, 0.0088452138006687164, 0.013677469454705715, 0.012908797711133957, 0.020617859438061714, 0.0050557088106870651, 0.004691186361014843, 0.011103803291916847, 0.0112138781696558, 0.0037051232066005468, 0.017461217939853668, 0.0042506898753345013, 0.0065578846260905266, 0.0075827562250196934, 0.0044647594913840294, 0.0039278273470699787, 0.0045173522084951401, 0.01180777233093977, 0.0068357051350176334, 0.011827657930552959, 0.0095669468864798546, 0.007855844683945179, 0.0048584034666419029, 0.0077198580838739872, 0.0076462151482701302, } };
const TfArray<48, int> quant88_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant88 = { (TfLiteFloatArray*)&quant88_scale, (TfLiteIntArray*)&quant88_zero, 3 };
const ALIGN(8) int32_t tensor_data89[8] = { -13503, -3377, -666, -13271, 2304, -3053, 14063, 12070, };
const TfArray<1, int> tensor_dimension89 = { 1, { 8 } };
const TfArray<8, float> quant89_scale = { 8, { 0.00011496964725665748, 0.00015733408508822322, 5.554745439440012e-05, 9.4248644018080086e-05, 7.6026255555916578e-05, 0.00011375438043614849, 6.9528214226011187e-05, 9.7699965408537537e-05, } };
const TfArray<8, int> quant89_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant89 = { (TfLiteFloatArray*)&quant89_scale, (TfLiteIntArray*)&quant89_zero, 0 };
const ALIGN(8) int8_t tensor_data90[1*3*3*48] = { 
  /* [0][0][][] */ -78,64,-69,-118,-79,88,77,-121,108,78,127,-102,77,-105,-72,-119,127,-67,-80,-102,-108,36,127,38,82,98,71,84,113,-58,-65,-112,-51,-103,127,127,-44,-127,-41,96,-72,68,73,-94,-96,99,45,-110, -71,86,-87,-119,-114,93,86,-111,127,82,122,-127,96,-127,-84,-127,119,-89,-125,-124,-111,50,117,70,90,-9,71,94,127,-79,-86,-107,-70,-118,125,102,-56,-123,-27,98,-126,100,74,-127,-110,127,54,-127, -19,31,-30,-96,-58,36,27,-47,45,23,49,-53,36,-45,-27,-41,68,-35,-36,-54,-53,3,66,40,24,-80,41,18,23,-51,-28,-18,-19,-31,26,47,-17,-34,-10,27,-59,42,18,-62,-23,45,43,-32, 
  /* [0][1][][] */ -117,98,-106,-127,-104,103,105,-127,101,115,109,-90,106,-115,-105,-109,110,-102,-92,-122,-106,111,-9,79,115,125,111,104,-64,-90,-95,-127,-104,-98,26,-17,-101,-126,-96,120,-68,92,110,-82,-127,102,106,-75, -127,127,-127,-108,-127,127,127,-110,106,127,122,-113,127,-127,-127,-114,116,-127,-127,-127,-127,127,-57,127,127,-9,127,127,-72,-127,-127,-110,-127,-127,-9,-68,-127,-121,-127,127,-127,127,127,-112,-125,122,127,-77, -26,27,-55,-101,-56,47,39,-73,20,35,32,-47,41,-43,-43,-27,52,-51,-56,-65,-17,6,-15,60,36,-127,31,35,-49,-54,-40,-12,-35,-43,-24,-36,-57,-23,-51,36,-30,55,43,-27,-43,28,65,-31, 
  /* [0][2][][] */ -54,52,-63,-88,-45,52,48,-71,27,57,44,3,42,-63,-44,32,81,-56,-42,-66,-49,-110,-75,54,65,45,74,26,-44,-25,-30,-81,-86,-30,-103,-64,-69,-25,-84,34,-37,31,57,6,-57,13,73,3, -65,70,-68,-114,-55,75,57,-95,31,61,39,-11,50,-69,-46,8,83,-65,-44,-64,-60,-126,-105,84,57,-23,88,41,-52,-56,-46,-70,-89,-48,-115,-106,-73,-20,-109,46,-73,30,64,-5,-51,19,90,-2, -10,27,-29,-23,-34,33,20,-16,-2,13,5,4,16,-14,-21,27,41,-25,-46,-22,19,-35,-54,40,10,-89,9,12,-36,-7,-29,-3,-26,-26,-68,-56,-41,-5,-41,2,-28,14,18,13,-35,-9,44,8, 
};
const TfArray<4, int> tensor_dimension90 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant90_scale = { 48, { 0.0023146325256675482, 0.0046309311874210835, 0.0023621176369488239, 0.0020116816740483046, 0.0025196443311870098, 0.0026100124232470989, 0.0025138810742646456, 0.0024092833045870066, 0.0034156141337007284, 0.003924837801605463, 0.0030419942922890186, 0.0039161862805485725, 0.0027039339765906334, 0.0023163054138422012, 0.003009784733876586, 0.0034757372923195362, 0.0063490206375718117, 0.00379772181622684, 0.0014333956642076373, 0.0022774725221097469, 0.0024325959384441376, 0.011796833947300911, 0.0078390976414084435, 0.0026004526298493147, 0.0039190743118524551, 0.0084825484082102776, 0.0031774211674928665, 0.0035191490314900875, 0.004922457505017519, 0.0017679972806945443, 0.0023456132039427757, 0.0035475112963467836, 0.0031734439544379711, 0.0016374267870560288, 0.0056182011030614376, 0.0034006608184427023, 0.0060458732768893242, 0.0018286234699189663, 0.0021911186631768942, 0.0037984596565365791, 0.0021790389437228441, 0.0036555556580424309, 0.0033805526327341795, 0.0018980166641995311, 0.0020256419666111469, 0.0025688954629004002, 0.0052865352481603622, 0.0025192878674715757, } };
const TfArray<48, int> quant90_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant90 = { (TfLiteFloatArray*)&quant90_scale, (TfLiteIntArray*)&quant90_zero, 3 };
const ALIGN(8) int32_t tensor_data91[8] = { -15458, 2368, 10660, -9050, 232, -4521, -10151, 8095, };
const TfArray<1, int> tensor_dimension91 = { 1, { 8 } };
const TfArray<8, float> quant91_scale = { 8, { 0.00011404718679841608, 8.3428138168528676e-05, 8.8143016910180449e-05, 0.00021771954197902232, 0.00012670780415646732, 0.00014983628352638334, 0.00015992531552910805, 0.00011714757420122623, } };
const TfArray<8, int> quant91_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant91 = { (TfLiteFloatArray*)&quant91_scale, (TfLiteIntArray*)&quant91_zero, 0 };
const ALIGN(8) int8_t tensor_data92[1*3*3*48] = { 
  /* [0][0][][] */ 1,-26,36,24,42,-49,27,-99,-28,42,-57,-95,4,-12,42,40,50,-6,20,-9,63,9,-49,-9,6,5,0,-10,85,-18,-102,-9,-8,-6,-7,-28,37,35,-105,-19,-45,6,-4,-27,29,-45,28,-16, 8,-94,93,-54,48,17,-37,-71,81,-78,74,-28,-19,-63,34,32,118,-90,127,26,74,-16,22,2,17,127,-3,16,74,23,-127,32,19,12,10,12,71,-86,-127,127,-127,-5,-55,3,127,-72,-127,15, -1,18,23,13,39,-50,14,-118,-6,87,-56,-55,-6,-13,36,5,21,12,-1,-18,62,2,-51,-19,-10,10,12,-21,127,7,-92,-23,1,-17,-5,26,36,29,-68,-30,-55,1,-13,-23,21,-67,28,-40, 
  /* [0][1][][] */ -5,-4,-37,-58,46,22,-64,90,51,72,31,-96,-56,-121,100,48,-48,127,10,-1,42,-33,-127,-24,127,-21,28,-18,41,-127,-22,-28,-110,12,3,-98,-2,-71,-69,9,22,-10,16,-50,-27,-68,-66,-60, 127,-127,-127,64,2,127,-3,40,12,-127,117,-127,127,-127,-72,-127,-127,-87,-94,-70,-127,-127,107,127,-58,-63,-127,127,-86,117,-39,-127,-25,127,127,-42,-127,-127,47,-109,54,127,-99,-24,53,-34,79,-8, -12,24,-42,-44,43,13,-53,127,52,88,72,-59,-58,-126,127,23,-18,118,13,-1,47,-11,-127,-42,-91,-18,56,-21,54,19,-33,-14,-109,-17,0,127,-13,-71,-90,18,15,-19,6,-40,-30,-56,-77,-34, 
  /* [0][2][][] */ -3,40,-28,9,-1,1,51,-36,30,19,-47,-82,-3,1,20,4,-12,53,-16,-27,43,20,-5,-6,7,-3,-4,-8,-20,29,-3,5,127,-21,-36,-20,-18,15,-17,9,16,-4,39,-50,-34,-127,-6,71, -30,71,-71,127,-127,26,127,45,127,-2,127,-86,16,-100,44,-5,4,-66,-15,-127,-9,92,-8,-32,24,-1,30,-76,-69,-23,33,-20,50,65,-59,5,15,-41,-32,111,83,-11,127,-127,-21,-3,-89,127, 6,31,-19,0,5,-2,51,-20,18,21,-60,-52,-3,19,35,-7,-11,42,-17,-23,40,12,-9,-12,-33,-12,-2,-4,-6,0,-7,0,109,-37,-29,8,-14,9,-44,11,23,2,60,-41,-33,-113,-5,79, 
};
const TfArray<4, int> tensor_dimension92 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant92_scale = { 48, { 0.011791517026722431, 0.0090918177738785744, 0.0059843272902071476, 0.018456911668181419, 0.011920795775949955, 0.020238850265741348, 0.0083190761506557465, 0.0064458055421710014, 0.0089077828451991081, 0.012456466443836689, 0.0051641110330820084, 0.0032459108624607325, 0.024693312123417854, 0.0070066070184111595, 0.0044495654292404652, 0.015612027607858181, 0.0090070636942982674, 0.0058754594065248966, 0.014290709979832172, 0.016031110659241676, 0.013011602684855461, 0.0070086834020912647, 0.010680003091692924, 0.042301878333091736, 0.010410333052277565, 0.014840526506304741, 0.046378515660762787, 0.011843143962323666, 0.0082444353029131889, 0.013182632625102997, 0.0048105707392096519, 0.016118926927447319, 0.012437727302312851, 0.011879121884703636, 0.011204500682651997, 0.0085506075993180275, 0.014846300706267357, 0.0078398715704679489, 0.0060385814867913723, 0.0063248975202441216, 0.0072496547363698483, 0.016899935901165009, 0.0079582696780562401, 0.0050649452023208141, 0.012283679097890854, 0.0029435916803777218, 0.010520027950406075, 0.0063253166154026985, } };
const TfArray<48, int> quant92_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant92 = { (TfLiteFloatArray*)&quant92_scale, (TfLiteIntArray*)&quant92_zero, 3 };
const ALIGN(8) int32_t tensor_data93[8] = { -3841, -34271, -1030, 712, -1148, -6562, 18057, -21, };
const TfArray<1, int> tensor_dimension93 = { 1, { 8 } };
const TfArray<8, float> quant93_scale = { 8, { 2.3893690013210289e-05, 2.4858689357643016e-05, 4.2417439544806257e-05, 3.2650674256728962e-05, 2.5275237931055017e-05, 2.5614175683585927e-05, 2.4138753360603005e-05, 4.1753486584639177e-05, } };
const TfArray<8, int> quant93_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant93 = { (TfLiteFloatArray*)&quant93_scale, (TfLiteIntArray*)&quant93_zero, 0 };
const ALIGN(8) int8_t tensor_data94[1*3*3*48] = { 
  /* [0][0][][] */ -2,-42,28,-26,51,21,-58,7,7,-25,-42,9,-17,-29,-8,3,60,56,-25,-88,28,-7,21,-7,-20,-127,-74,-32,-13,5,18,-31,-14,-52,41,15,60,-3,76,6,-11,-1,-51,-117,5,3,-45,-46, -43,13,127,-6,127,-8,-61,-23,115,127,-33,5,8,-50,-127,27,-60,127,-29,25,-15,70,-75,-5,-70,58,-94,39,1,-2,86,-65,-36,-58,36,-3,127,116,127,-71,127,12,-64,-74,-127,102,35,-89, 64,-47,44,-34,22,13,-84,-5,3,-9,-35,7,34,-29,0,11,25,42,-63,87,-11,-19,16,-47,-5,83,-64,36,-5,6,3,-60,-21,-58,40,25,51,19,70,-16,-15,-1,-43,-120,-10,-15,-33,-45, 
  /* [0][1][][] */ -60,32,-23,-32,48,-1,39,-9,43,-122,16,-13,-127,-11,-47,11,119,-8,15,-127,-127,37,15,-32,-34,107,-21,-63,80,66,127,-127,13,117,115,-89,80,9,-93,-41,-24,-4,11,88,-25,-68,-75,-46, -110,127,-122,127,-127,45,-127,127,121,-2,-63,120,6,127,-110,127,-127,95,-2,73,49,127,21,127,-127,-48,127,-69,127,54,-78,100,-3,-8,-127,127,9,-98,46,-127,-66,-77,127,127,67,127,-127,127, 127,11,-20,-39,51,14,41,-10,17,-96,19,-18,113,-17,-70,2,-78,-47,-24,47,72,33,-20,-87,-44,-78,-34,127,47,-127,76,2,2,127,112,-76,121,7,-101,-49,-26,-9,-2,72,-18,-66,-67,-77, 
  /* [0][2][][] */ -17,-5,-9,-27,48,32,-119,-48,-105,35,32,20,-26,-21,-6,9,64,-37,86,-85,11,-8,55,-25,-30,94,0,-40,-27,-27,33,-28,13,-14,20,-18,0,-55,-22,10,8,41,9,-28,17,-27,114,-4, 32,20,-23,-17,16,127,-69,-47,-127,85,127,-127,-1,63,-57,0,-29,-49,127,17,0,10,127,48,15,-40,40,31,60,3,26,-8,127,59,-108,-107,112,-127,-22,-36,26,127,-17,-14,80,113,57,22, -3,-11,-12,-25,56,24,-104,-42,-107,2,25,22,33,-23,15,7,-35,-55,75,35,-14,-7,47,-38,-22,-83,1,21,-21,25,8,-44,10,-19,-14,-52,-7,-54,-16,16,7,40,11,-25,25,-16,125,-5, 
};
const TfArray<4, int> tensor_dimension94 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant94_scale = { 48, { 0.012671595439314842, 0.014494824223220348, 0.0075690294615924358, 0.010856733657419682, 0.0088431751355528831, 0.004636512603610754, 0.010847728699445724, 0.012183926068246365, 0.0052459319122135639, 0.0066613228991627693, 0.010229197330772877, 0.016888570040464401, 0.0068184072151780128, 0.010037525556981564, 0.010116181336343288, 0.010978297330439091, 0.010519557632505894, 0.0088268490508198738, 0.0058916816487908363, 0.0062573226168751717, 0.011857106350362301, 0.0098520452156662941, 0.0054852897301316261, 0.011951981112360954, 0.0049042077735066414, 0.0081287054345011711, 0.009980296716094017, 0.0068676336668431759, 0.013505053706467152, 0.012179388664662838, 0.0055363234132528305, 0.012332157231867313, 0.0076701315119862556, 0.0073803262785077095, 0.020435871556401253, 0.0084213912487030029, 0.0048509771004319191, 0.0082647241652011871, 0.0056600687094032764, 0.010440140031278133, 0.011462109163403511, 0.0073335804045200348, 0.012515152804553509, 0.0077074957080185413, 0.015114331617951393, 0.0056049088016152382, 0.0038943002000451088, 0.018667429685592651, } };
const TfArray<48, int> quant94_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant94 = { (TfLiteFloatArray*)&quant94_scale, (TfLiteIntArray*)&quant94_zero, 3 };
const ALIGN(8) int32_t tensor_data95[8] = { 8533, -6527, 6166, 193, -11125, -13507, -6982, -11798, };
const TfArray<1, int> tensor_dimension95 = { 1, { 8 } };
const TfArray<8, float> quant95_scale = { 8, { 4.4473337766248733e-05, 4.2930714698741212e-05, 3.254015973652713e-05, 4.694981180364266e-05, 4.597941369866021e-05, 4.1886374674504623e-05, 6.3461302488576621e-05, 5.3108487918507308e-05, } };
const TfArray<8, int> quant95_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant95 = { (TfLiteFloatArray*)&quant95_scale, (TfLiteIntArray*)&quant95_zero, 0 };
const ALIGN(8) int8_t tensor_data96[1*3*3*48] = { 
  /* [0][0][][] */ -125,1,8,-42,-4,27,17,-15,-72,8,124,-15,-11,-18,-30,-47,108,83,21,11,36,32,-5,0,93,-29,14,-27,32,-6,13,-46,10,-15,-35,30,24,35,-17,3,-64,8,-3,0,27,23,26,10, 1,-21,-8,109,37,127,106,127,127,24,-81,61,-127,-61,42,-37,-127,-96,127,113,127,127,-19,39,113,-45,-80,-25,127,127,20,-43,-21,-127,-63,-59,-45,-8,39,127,124,-33,106,52,25,29,127,69, 118,-11,5,-3,-13,33,18,-24,-30,-18,-63,-14,-3,2,-22,-62,105,93,-2,18,54,46,-13,-1,55,-22,-4,-27,31,0,26,-46,10,1,-27,25,4,31,-11,6,-29,17,7,-6,-13,12,27,11, 
  /* [0][1][][] */ 127,-25,1,125,-108,35,25,55,103,17,110,-59,-63,-32,-108,15,22,-122,32,87,-1,-4,-38,6,110,4,-87,48,62,22,-97,-6,-94,-63,-71,-85,-127,-20,46,104,16,-127,1,52,88,60,26,10, 8,127,127,25,90,-5,-127,53,38,127,-12,127,-87,127,11,127,-88,-127,42,-127,100,-43,127,127,-58,127,-127,-127,19,-18,-64,-127,43,28,86,-27,21,127,-3,-104,51,95,-127,-14,-127,-38,98,127, -120,-41,-3,110,-127,12,22,45,65,-3,-88,-48,-66,-14,-127,10,17,-98,51,72,-7,-9,-26,-3,127,5,-91,39,66,41,-82,-31,-127,-48,-79,-79,-120,-14,62,87,71,-117,54,77,-11,56,19,10, 
  /* [0][2][][] */ 49,-6,12,-127,15,0,-37,3,0,-72,-127,-20,27,3,-52,12,114,7,0,5,-77,-18,-6,-56,51,6,-54,-4,-1,5,30,-55,23,4,-41,7,-46,3,-3,25,-60,-12,-28,4,71,22,-13,36, -30,-24,32,-27,-49,20,-37,44,-27,-77,9,11,-105,-43,-6,-14,-43,0,-51,44,-103,-64,-21,-43,22,-9,-32,15,-2,-8,127,11,-87,-90,-127,-127,83,11,127,30,-127,-112,86,127,12,127,29,56, -26,-16,13,-119,19,-16,-36,5,-15,-85,104,-10,39,19,-36,7,100,19,62,3,-99,-9,-12,-70,60,5,-68,-17,-2,9,36,-46,25,8,-38,12,-68,1,-9,20,-89,-15,48,9,-68,18,-12,21, 
};
const TfArray<4, int> tensor_dimension96 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant96_scale = { 48, { 0.022758753970265388, 0.034750957041978836, 0.013656501658260822, 0.0056054028682410717, 0.015177007764577866, 0.015731586143374443, 0.012281551025807858, 0.0093081546947360039, 0.0075616743415594101, 0.0071817794814705849, 0.011796676553785801, 0.019066216424107552, 0.011818933300673962, 0.023140128701925278, 0.0061853113584220409, 0.011739547364413738, 0.004152453038841486, 0.0051250937394797802, 0.012550449930131435, 0.0074650151655077934, 0.0044106235727667809, 0.0079636890441179276, 0.017155054956674576, 0.013187370263040066, 0.0032300376333296299, 0.011837502010166645, 0.0050002392381429672, 0.027674069628119469, 0.0097864530980587006, 0.012214787304401398, 0.0044813649728894234, 0.0052352435886859894, 0.009651978500187397, 0.0047828485257923603, 0.0070354300551116467, 0.0075653526000678539, 0.0061376788653433323, 0.015722770243883133, 0.01450340636074543, 0.0032095080241560936, 0.010077813640236855, 0.0034458062145859003, 0.01493135467171669, 0.005236178170889616, 0.0093153705820441246, 0.0051941955462098122, 0.0078966319561004639, 0.0068631060421466827, } };
const TfArray<48, int> quant96_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant96 = { (TfLiteFloatArray*)&quant96_scale, (TfLiteIntArray*)&quant96_zero, 3 };
const ALIGN(8) int32_t tensor_data97[8] = { -9819, -3317, -12115, 12211, 4264, -25447, -6490, -3806, };
const TfArray<1, int> tensor_dimension97 = { 1, { 8 } };
const TfArray<8, float> quant97_scale = { 8, { 2.8820504667237401e-05, 5.5687789426883683e-05, 4.7828172682784498e-05, 4.9362126446794719e-05, 3.6488952900981531e-05, 3.8538608350791037e-05, 5.8269775763619691e-05, 4.2573559767333791e-05, } };
const TfArray<8, int> quant97_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant97 = { (TfLiteFloatArray*)&quant97_scale, (TfLiteIntArray*)&quant97_zero, 0 };
const ALIGN(8) int8_t tensor_data98[1*3*3*48] = { 
  /* [0][0][][] */ -35,-2,20,-9,-54,-18,-10,-42,-6,-5,-2,-85,-30,2,-5,-1,7,-68,-3,1,-36,-19,0,-6,-6,5,-18,3,-37,-31,2,7,-52,25,-5,17,-32,25,-9,11,2,-28,3,7,-28,7,7,67, -16,-3,55,-73,-96,-127,9,-127,-8,-13,56,-46,-116,77,5,35,104,55,-25,37,-87,-34,96,-121,29,37,-117,38,-74,16,-62,62,-118,127,1,30,76,101,-127,11,49,-91,67,101,-22,-7,87,96, -37,-6,3,-1,-39,4,-11,-27,-4,-2,-3,-82,-33,-7,-7,-4,-4,25,-9,-2,-29,-17,-12,3,-5,-4,-12,-1,-13,7,3,-6,-29,12,-9,-44,-31,5,-5,2,1,-12,-11,0,-15,1,14,59, 
  /* [0][1][][] */ -73,66,21,21,-71,-8,21,-10,15,-14,6,-102,-56,6,2,8,25,-127,22,9,-39,-15,13,4,18,15,-10,2,-64,19,-48,19,-48,-15,38,23,37,27,-2,-8,8,30,3,36,-29,13,23,30, -127,-3,127,127,-69,-125,127,-34,127,40,127,-37,-127,127,-127,127,127,110,-127,127,-127,-127,127,127,127,127,-127,127,-127,127,-127,127,-127,-80,127,101,127,127,20,-115,127,127,127,127,-127,21,127,106, -55,63,6,13,-85,-10,12,-20,12,-23,-2,-75,-41,-15,9,0,11,20,43,-7,-47,6,9,-4,3,-5,12,-5,-31,-8,-46,9,-41,-7,16,-127,23,27,-2,0,-9,17,1,7,-11,9,11,45, 
  /* [0][2][][] */ -25,8,22,0,-121,-22,-7,-4,-3,3,8,-89,-37,-10,-2,10,-15,-6,-9,8,-33,-2,1,-1,-3,15,-34,-5,-26,-3,-16,0,-2,-9,-33,-1,-23,2,12,-18,-5,-43,0,15,-25,17,7,12, 41,127,68,-5,-127,53,42,-30,0,127,63,-127,-92,-8,13,46,-42,7,-5,70,-104,-49,17,4,21,58,-78,35,-20,-24,-89,-5,-10,-28,-126,38,63,7,43,-127,-54,-6,84,70,-46,127,33,127, -24,-1,17,1,-107,-18,-4,-1,-14,-8,9,-72,-31,-8,-7,4,-12,2,-4,1,-28,1,-1,3,-3,12,-17,-3,-11,21,-1,-4,6,-1,-15,-34,-19,-5,7,-13,-1,-39,3,9,-13,8,9,9, 
};
const TfArray<4, int> tensor_dimension98 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant98_scale = { 48, { 0.0035718951839953661, 0.0068814149126410484, 0.0035158172249794006, 0.012991426512598991, 0.0040384219028055668, 0.0082003641873598099, 0.006210684310644865, 0.0095759434625506401, 0.013861054554581642, 0.012474038638174534, 0.011413294821977615, 0.0018194200238212943, 0.0028512980788946152, 0.011628163978457451, 0.018967265263199806, 0.011673815548419952, 0.0041172974742949009, 0.0073655112646520138, 0.0080194203183054924, 0.0061920345760881901, 0.0045613669790327549, 0.0077012842521071434, 0.010590619407594204, 0.016517302021384239, 0.011617432348430157, 0.0063967998139560223, 0.0025122084189206362, 0.014957639388740063, 0.0049417107366025448, 0.0075846631079912186, 0.0024555986747145653, 0.0079725636169314384, 0.0051213582046329975, 0.01523541659116745, 0.01337348110973835, 0.009795650839805603, 0.0034578628838062286, 0.0052919788286089897, 0.021784516051411629, 0.0038643400184810162, 0.017487782984972, 0.01129439752548933, 0.002939967205747962, 0.0042439978569746017, 0.0033872982021421194, 0.017241979017853737, 0.0059746112674474716, 0.0028152544982731342, } };
const TfArray<48, int> quant98_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant98 = { (TfLiteFloatArray*)&quant98_scale, (TfLiteIntArray*)&quant98_zero, 3 };
const ALIGN(8) int32_t tensor_data99[16] = { 19357, 5087, -17465, 7666, -3393, 9047, -21753, 15840, -5923, -3027, 15328, -23559, -16369, -8248, -8274, 1876, };
const TfArray<1, int> tensor_dimension99 = { 1, { 16 } };
const TfArray<16, float> quant99_scale = { 16, { 4.5318440243136138e-05, 0.00010019179899245501, 7.999700028449297e-05, 8.3862061728723347e-05, 0.00010917356848949566, 8.4970561147201806e-05, 6.360160477925092e-05, 7.1635906351730227e-05, 7.4643015977926552e-05, 8.2798389485105872e-05, 0.00011192904639756307, 6.4206498791463673e-05, 0.00011231388634769246, 7.975592598086223e-05, 6.0598566051339731e-05, 6.5111576986964792e-05, } };
const TfArray<16, int> quant99_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant99 = { (TfLiteFloatArray*)&quant99_scale, (TfLiteIntArray*)&quant99_zero, 0 };
const ALIGN(8) int8_t tensor_data100[1*3*3*96] = { 
  /* [0][0][][] */ 27,26,-16,-21,-127,20,127,-3,-127,-9,-25,-98,14,91,-47,-127,-15,11,-43,11,84,-18,42,35,-3,38,-52,98,21,73,-63,17,-24,9,-11,-4,4,-34,-64,29,-1,7,-38,29,-31,40,105,-8,-77,-82,-70,74,-61,127,0,-104,-43,22,-58,-2,-4,82,-22,-57,-2,-8,-17,-33,35,-14,26,-47,27,-110,-57,103,-7,-22,-17,-7,-12,-49,9,-19,-29,35,13,-85,10,-19,-3,-127,46,-111,-46,-51, -127,-55,42,-52,-37,-34,-118,-9,49,-117,24,-114,57,127,-117,-123,-94,127,-127,21,121,15,127,54,-60,125,15,78,127,-21,127,127,44,127,127,-44,9,-6,73,-127,-1,-32,-127,127,-127,127,36,27,-116,-127,97,102,-61,55,127,-127,-127,127,70,-127,31,127,-20,5,127,-66,-4,11,127,-43,127,-56,127,-61,-65,72,127,65,127,-29,-3,6,-127,-5,-127,127,127,-127,127,-65,15,52,7,-127,49,36, 18,17,-21,0,-120,14,-14,-9,61,-21,-25,-85,22,43,-56,-124,-20,-13,-35,-2,57,-7,44,6,-11,36,44,94,-15,-51,17,14,-28,4,-22,-12,1,40,-87,38,2,-27,-26,32,-46,62,82,-13,-13,-63,-32,79,-57,57,5,-37,-35,16,-75,-33,-9,85,-5,-19,-121,2,-4,-46,4,-13,13,-44,18,-127,-61,101,8,-10,-20,-1,15,48,5,30,-30,21,31,-127,-4,30,-16,76,-2,-91,-49,-62, 
  /* [0][1][][] */ -127,-115,21,101,-97,-104,90,1,-81,-7,-6,-105,127,7,20,-16,7,19,-64,32,-36,23,94,127,6,-4,-103,-18,5,100,-97,45,31,-7,-15,-20,29,-127,-81,39,-10,127,27,-15,-35,13,29,14,-8,-56,82,8,-10,122,61,-86,21,-20,115,-68,-3,-9,-43,-55,12,-81,-7,-38,21,-29,-27,127,-2,-123,-11,64,3,49,20,21,-127,-127,10,-127,8,-54,-44,-90,-47,71,75,102,127,90,-52,-127, -82,-15,-38,-16,-56,127,-87,-33,46,22,20,49,41,-52,-11,112,-21,-15,58,127,127,127,-5,-44,-76,-127,127,-115,34,19,62,59,127,-114,34,-41,118,33,-74,-64,-127,58,17,-73,77,-96,-127,-103,-51,-28,127,-127,92,22,-36,-126,98,-109,127,-119,127,-115,-62,105,-10,-127,-20,-52,-102,-85,-32,96,-68,-115,39,1,-118,110,48,127,69,51,-38,66,35,-50,-12,-45,-60,55,55,-37,-3,22,126,-65, -125,127,-2,104,-80,-25,4,9,34,5,-9,-127,108,-24,29,-24,21,20,-60,4,-13,3,77,-99,-7,-1,-34,-1,4,-127,-7,21,39,-14,-21,-25,22,95,-127,22,-9,123,24,-22,-28,2,35,10,-46,-38,85,7,-17,88,52,-30,19,-19,117,-10,-8,-16,-57,-61,2,-116,33,-18,18,-17,4,84,2,-116,-5,27,-15,80,20,20,57,73,9,7,11,-36,-48,-71,-36,23,-127,-63,32,64,-66,-66, 
  /* [0][2][][] */ 21,57,8,11,-80,-4,47,33,-2,23,10,-41,2,-31,9,-116,28,-6,-19,-24,-99,-12,41,-106,6,-10,-22,-127,-17,18,-71,0,15,-15,-19,6,-38,-41,-122,-25,37,-63,19,-31,-17,0,81,-11,-122,-37,30,13,-122,2,-7,35,15,-3,-64,41,14,-6,6,125,14,0,-8,16,7,28,-18,-57,-34,12,-121,-35,-6,-2,-13,-18,-3,2,39,13,24,-12,-31,-31,-4,-22,10,37,-1,10,10,-40, -15,-63,127,127,-10,-3,-23,127,-59,127,127,-2,52,-75,127,-47,127,7,40,-2,-123,-120,118,9,127,62,3,-114,-117,-15,69,66,66,-29,-43,127,-127,11,-92,-26,127,103,115,25,-101,-28,51,-127,-127,-30,127,-121,-98,50,-15,99,45,-21,-47,-29,-73,-38,127,114,9,68,127,127,27,127,5,-74,-65,-66,-105,127,-60,127,104,-113,-6,-24,85,7,78,-42,13,-50,26,127,15,-26,-14,126,127,-12, 17,12,-18,12,-86,6,-22,19,54,16,-11,-13,-3,-14,-3,-102,22,-11,-35,-17,-119,-3,37,88,16,-2,20,-62,4,-2,8,-9,14,-3,-38,2,-20,36,-43,-19,28,-4,8,-21,-13,10,53,-22,-87,-18,8,-15,-127,-27,1,63,11,1,-43,48,18,5,26,127,-21,-12,-10,-5,7,27,2,-4,-28,25,-127,-2,-3,11,-13,-13,8,21,49,21,21,-7,-30,-19,-6,-23,-19,-15,-10,31,10,-19, 
};
const TfArray<4, int> tensor_dimension100 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant100_scale = { 96, { 0.0071775815449655056, 0.014935883693397045, 0.010484528727829456, 0.0049944138154387474, 0.0047274897806346416, 0.018545119091868401, 0.010334214195609093, 0.013518378138542175, 0.0077705392614006996, 0.0086373435333371162, 0.03806798905134201, 0.0044078035280108452, 0.0045611062087118626, 0.0075235920958220959, 0.0079063791781663895, 0.0018013280350714922, 0.0090591628104448318, 0.015942025929689407, 0.0077551249414682388, 0.011340775527060032, 0.0070004332810640335, 0.012094070203602314, 0.002985695842653513, 0.017829237505793571, 0.0095308031886816025, 0.0052858958952128887, 0.012913264334201813, 0.0042179571464657784, 0.008232814259827137, 0.007474362850189209, 0.0084039894863963127, 0.0078421253710985184, 0.00652658985927701, 0.011397984810173512, 0.013755268417298794, 0.013059456832706928, 0.013170970603823662, 0.0099667971953749657, 0.0034970222041010857, 0.023885760456323624, 0.0069091492332518101, 0.0047154533676803112, 0.0071449847891926765, 0.010655712336301804, 0.0032394267618656158, 0.008615441620349884, 0.0064027700573205948, 0.0079202018678188324, 0.0047777313739061356, 0.004963509738445282, 0.0070700566284358501, 0.0046516028232872486, 0.0048123924061655998, 0.0049648950807750225, 0.01490995567291975, 0.0037088964600116014, 0.0081629296764731407, 0.010751698166131973, 0.0050534717738628387, 0.0070980810560286045, 0.019597116857767105, 0.0059040212072432041, 0.010307361371815205, 0.0038642352446913719, 0.01689884252846241, 0.0050281030125916004, 0.022687751799821854, 0.0085766613483428955, 0.012227980419993401, 0.0074285399168729782, 0.020518600940704346, 0.0054650185629725456, 0.010124080814421177, 0.0052442746236920357, 0.0037831808440387249, 0.006111054215580225, 0.012031089514493942, 0.0081160394474864006, 0.0085300300270318985, 0.0083147408440709114, 0.012237757444381714, 0.0093864034861326218, 0.0058142063207924366, 0.020090214908123016, 0.01181794423609972, 0.0095330961048603058, 0.010858044028282166, 0.0031555630266666412, 0.011696730740368366, 0.011568391695618629, 0.0080328341573476791, 0.017446162179112434, 0.0099879158660769463, 0.0043254578486084938, 0.0064929742366075516, 0.0058048674836754799, } };
const TfArray<96, int> quant100_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant100 = { (TfLiteFloatArray*)&quant100_scale, (TfLiteIntArray*)&quant100_zero, 3 };
const ALIGN(8) int32_t tensor_data101[16] = { 11610, 4621, 9840, 6972, 6950, 10926, -5173, 10562, -1609, -1657, 7595, 22580, 18023, -10710, -1459, -12495, };
const TfArray<1, int> tensor_dimension101 = { 1, { 16 } };
const TfArray<16, float> quant101_scale = { 16, { 6.5909327531699091e-05, 4.6771299821557477e-05, 5.4352440201910213e-05, 6.829320773249492e-05, 5.280731784296222e-05, 8.0127407272811979e-05, 5.6097145716194063e-05, 4.5807282731402665e-05, 5.7812070735963061e-05, 6.0782658692914993e-05, 5.8695310144685209e-05, 5.661858813255094e-05, 3.6830664612352848e-05, 4.8973062803270295e-05, 6.2401632021646947e-05, 6.3437139033339918e-05, } };
const TfArray<16, int> quant101_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant101 = { (TfLiteFloatArray*)&quant101_scale, (TfLiteIntArray*)&quant101_zero, 0 };
const ALIGN(8) int8_t tensor_data102[1*3*3*96] = { 
  /* [0][0][][] */ -76,54,-53,59,-3,31,20,44,-11,-1,127,-47,-61,-61,-96,-113,1,19,-127,-39,113,110,88,3,-127,45,-108,109,35,59,-28,-66,-6,36,43,-39,-10,103,6,-39,-38,80,27,-32,34,-92,25,51,-9,113,80,-62,60,69,-16,-26,54,78,64,73,127,-68,17,-73,110,41,76,-78,-6,110,29,-67,-91,79,127,1,19,-28,52,-52,96,-55,51,122,4,25,17,17,-38,-39,31,-127,55,-29,50,-44, -103,105,-26,127,-1,127,-88,127,12,65,75,-17,-10,-127,-45,-106,-105,59,-101,-61,127,-9,48,127,28,53,-23,127,127,127,89,34,-58,127,127,-85,-127,-22,51,-127,59,18,-64,-48,-127,57,23,26,-127,-106,127,-76,127,127,51,96,27,127,104,49,87,79,-127,-124,113,127,127,-36,-87,35,127,105,-71,127,-17,-1,77,30,0,-127,127,-10,-16,87,-14,49,-127,-127,-127,-45,75,98,36,47,39,-127, -82,63,-45,28,-11,26,82,-66,-35,3,111,72,-84,-32,-55,-101,-28,-72,-127,-50,103,55,-127,-20,114,35,-80,99,19,48,-21,-48,-3,9,13,127,-7,-74,-31,-47,-47,48,-20,91,31,26,51,44,46,-7,25,-19,35,29,2,-21,50,79,45,-117,68,-9,17,-77,127,36,30,-74,2,127,-15,-77,-29,63,-107,-4,-15,-50,-51,-48,58,-30,38,92,-24,1,20,18,0,-22,10,21,-68,-29,48,-30, 
  /* [0][1][][] */ -96,-7,108,-71,127,63,-8,127,29,-26,64,-127,-127,-90,-24,-99,110,127,101,-92,95,-46,81,-28,-70,87,-127,32,30,53,-4,-100,-90,-51,-13,24,14,127,-34,15,-1,86,-23,-94,31,-127,-30,74,-106,14,28,-127,-3,-3,65,-18,-23,25,-87,127,59,-127,23,-116,39,-74,-12,3,16,76,-17,-85,-127,38,-21,-127,-41,-65,122,-44,29,-16,-21,-30,1,7,33,7,5,58,-55,114,-4,-14,96,-31, 94,-127,5,-13,-16,14,-104,64,127,71,38,66,-30,-8,-1,-35,20,-55,52,103,-70,-127,7,92,43,-6,-68,-118,-84,-45,44,-69,8,-54,37,-118,88,-66,-127,22,127,-6,-26,-31,-48,36,0,-127,-9,112,-44,55,-2,-71,51,109,127,-12,-127,-86,73,90,-13,46,-75,46,-27,34,-118,66,-80,116,44,53,58,102,-71,-57,8,-99,-101,10,-127,-5,-48,17,101,-93,8,-127,20,70,-46,-18,-127,75, -104,-63,-98,-40,-117,-81,127,-54,13,-106,42,58,-120,-81,-78,-38,127,-77,80,-40,40,-16,-78,-33,20,69,-80,47,38,14,5,-101,-74,-55,-18,82,14,-44,-19,27,-33,16,-12,127,35,73,-29,50,-89,-127,-42,-79,-31,-7,55,-9,-17,-38,-100,-43,72,42,6,-60,35,-37,-31,-28,16,100,7,-54,14,40,-38,27,-16,-66,-127,-22,41,-10,6,-19,-11,23,28,-34,-16,32,-82,39,1,-4,92,-26, 
  /* [0][2][][] */ -127,-51,127,83,-61,-35,20,-68,-26,64,-65,-45,-34,-65,4,-111,22,43,45,-82,86,31,-9,-32,-45,127,-120,102,-54,-30,23,-127,66,-32,-9,-12,13,51,39,4,13,107,3,17,12,-41,-127,-40,-60,71,-19,11,48,-1,127,15,52,-9,-88,23,32,-44,-9,-127,-67,27,18,83,9,29,-16,-127,-61,8,83,0,127,-116,59,-42,92,-4,98,127,-127,-52,-33,17,26,41,86,-102,81,16,5,42, -74,-60,99,58,45,-67,-38,-66,-14,127,-59,-21,18,-108,127,-67,-62,7,34,-55,69,49,-22,-22,4,125,-74,92,-26,-2,127,-59,127,4,64,-26,75,4,127,123,123,62,-127,-45,79,27,-21,-24,-110,-75,35,-117,16,-28,86,127,76,7,42,-78,24,55,-19,-80,-34,79,22,127,127,-25,-51,68,-22,57,12,14,116,-127,8,-48,-55,127,36,104,-78,-127,15,-71,118,70,127,75,40,127,-89,47, -96,-103,56,55,16,-29,14,-23,1,7,-71,64,-27,-92,9,-127,14,-54,37,-127,58,24,-38,-26,39,121,-104,74,-38,-16,4,-118,41,-22,-19,47,1,-58,30,-8,15,127,-17,13,-6,20,-117,-22,-99,6,-61,-5,33,-8,65,12,13,9,-42,15,46,-13,-1,-84,-55,20,-9,24,3,26,6,-118,5,40,-100,-11,64,-126,-70,-17,76,-25,84,83,-109,-24,-62,14,0,57,70,-47,-127,-6,-32,37, 
};
const TfArray<4, int> tensor_dimension102 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant102_scale = { 96, { 0.0029810373671352863, 0.0064974064007401466, 0.0059112356975674629, 0.0064383288845419884, 0.013963322155177593, 0.01930651068687439, 0.010830150917172432, 0.0062455516308546066, 0.026252526789903641, 0.0087504051625728607, 0.0052515235729515553, 0.0089646801352500916, 0.010473606176674366, 0.0047960439696907997, 0.0067652640864253044, 0.0021532054524868727, 0.0069832517765462399, 0.006131037138402462, 0.010272582061588764, 0.0046423515304923058, 0.0041826143860816956, 0.0099767427891492844, 0.0093384571373462677, 0.0097419703379273415, 0.012534639798104763, 0.0079685971140861511, 0.003367133904248476, 0.0051150857470929623, 0.0088632041588425636, 0.015480475500226021, 0.0074949567206203938, 0.0027108574286103249, 0.0083894031122326851, 0.0085861757397651672, 0.0097469240427017212, 0.011971833184361458, 0.0092033902183175087, 0.0070198872126638889, 0.0065829209052026272, 0.012635339982807636, 0.0066373590379953384, 0.0059849247336387634, 0.015088515356183052, 0.010454181581735611, 0.012055035680532455, 0.006967244204133749, 0.0048363674432039261, 0.013684814795851707, 0.0048986398614943027, 0.0092770252376794815, 0.0078079965896904469, 0.0055030500516295433, 0.013204180635511875, 0.013801885768771172, 0.0048071378841996193, 0.016288012266159058, 0.0062349899671971798, 0.013915738090872765, 0.0039218170568346977, 0.0082450825721025467, 0.0071337022818624973, 0.0058867442421615124, 0.014202666468918324, 0.006986335851252079, 0.0041101686656475067, 0.0070575173012912273, 0.0085602216422557831, 0.0056219478137791157, 0.010623786598443985, 0.0043476703576743603, 0.016250947490334511, 0.0087337614968419075, 0.0082191722467541695, 0.0024116728454828262, 0.01044922973960638, 0.016341099515557289, 0.0043359925039112568, 0.0074827470816671848, 0.0081633394584059715, 0.0073782219551503658, 0.0068985247053205967, 0.01808486133813858, 0.0061376248486340046, 0.0050238994881510735, 0.0058903861790895462, 0.0073229838162660599, 0.013675786554813385, 0.0154343256726861, 0.016758624464273453, 0.019687598571181297, 0.006159862969070673, 0.0059694834053516388, 0.0090181939303874969, 0.0065149986185133457, 0.013294484466314316, 0.007628993596881628, } };
const TfArray<96, int> quant102_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant102 = { (TfLiteFloatArray*)&quant102_scale, (TfLiteIntArray*)&quant102_zero, 3 };
const ALIGN(8) int32_t tensor_data103[16] = { 4244, 10556, 14426, 285, 17792, -3313, -8780, -15391, 5569, 6856, -3279, 4674, -7393, -3512, 5576, -4039, };
const TfArray<1, int> tensor_dimension103 = { 1, { 16 } };
const TfArray<16, float> quant103_scale = { 16, { 7.1107468102127314e-05, 6.7287350248079747e-05, 6.7645851231645793e-05, 6.3887186115607619e-05, 6.5871179685927927e-05, 7.0564943598583341e-05, 8.1386853707954288e-05, 4.9373076763004065e-05, 7.9307210398837924e-05, 0.00011295521107967943, 5.5235839681699872e-05, 0.0001002470962703228, 5.0281872972846031e-05, 7.8274104453157634e-05, 0.00010978513455484062, 5.9039677580585703e-05, } };
const TfArray<16, int> quant103_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant103 = { (TfLiteFloatArray*)&quant103_scale, (TfLiteIntArray*)&quant103_zero, 0 };
const ALIGN(8) int8_t tensor_data104[1*3*3*96] = { 
  /* [0][0][][] */ 98,-108,104,-127,109,46,30,90,-60,57,-101,57,-127,-89,-77,122,63,-16,-51,-87,-59,94,21,95,-83,101,118,-112,115,84,46,91,-77,-38,9,42,115,87,103,94,-48,53,-98,126,-66,-127,-90,-71,91,-104,15,24,116,-127,-127,88,53,-29,101,85,114,-102,95,61,-81,-25,110,39,74,-36,34,54,110,-63,-83,-45,-67,-70,105,103,97,90,-15,127,83,100,91,81,-108,-36,25,108,-127,110,29,96, 127,-127,127,-57,127,65,23,111,-41,67,-127,30,-119,-127,-91,127,80,-11,-127,-127,-59,-28,25,127,-127,127,127,-127,121,72,61,127,-96,-39,1,41,127,127,127,127,-56,54,-127,127,-93,45,-74,-46,127,-127,44,11,127,-115,35,107,56,-95,127,127,114,-101,106,58,-64,-29,127,-28,82,-22,17,52,127,-59,-127,-44,-74,-65,127,127,127,127,-15,114,102,127,127,101,-127,-65,51,101,-124,127,41,94, 53,-14,19,-87,43,17,-1,45,-9,29,-40,-1,-27,-42,-54,33,44,-6,-83,-16,-23,1,7,44,-71,31,101,-78,98,-14,25,38,-30,-25,-39,9,31,72,50,95,-19,10,-80,46,-23,94,-5,22,35,-46,-56,5,49,-89,89,52,17,-127,39,44,46,-29,36,-4,-29,-12,38,-6,22,0,1,13,53,-49,-34,-8,-43,-12,37,42,58,64,-14,11,21,41,44,45,-68,-50,-16,4,-13,79,16,49, 
  /* [0][1][][] */ 5,-88,118,-114,85,118,37,90,-114,106,-61,108,-93,0,86,63,99,50,62,-118,-41,-1,-41,52,48,83,99,-61,110,118,95,14,-26,120,10,96,-47,7,64,30,-59,-92,-72,15,-33,-31,70,-2,85,-88,68,4,18,-89,-84,104,96,-56,48,94,118,-102,103,119,-19,63,-22,3,68,-105,-11,105,102,-127,-80,118,-122,-69,-27,6,113,62,-112,70,-18,68,5,109,-81,-93,69,127,-90,78,107,88, -43,-93,109,-12,112,127,35,117,-127,127,-87,127,-116,-21,127,30,110,34,-7,-121,-41,-20,-55,61,82,106,108,-126,127,127,127,16,-22,127,-10,127,-45,46,93,20,-24,-127,-108,25,-54,16,87,-7,85,-113,61,-56,46,-102,45,127,127,-71,49,119,127,-127,122,127,-44,84,-21,17,82,-127,-127,127,122,-36,-115,127,-127,-126,-22,13,123,70,-127,46,19,105,37,127,-117,-127,82,118,-105,96,127,127, -108,-21,33,-29,58,38,-1,41,-39,61,-77,42,-19,-13,90,67,31,12,-85,-31,-22,-30,-37,14,20,42,51,-60,43,11,64,16,4,53,-17,50,-12,36,43,16,-45,-6,-23,15,-13,2,52,-17,-13,-30,-127,-54,-50,-43,44,45,72,-35,17,47,56,-41,36,28,-127,46,12,14,29,4,-115,29,42,48,-43,22,-68,-120,4,11,15,20,-31,15,-30,58,18,21,-30,-68,34,-23,4,33,42,71, 
  /* [0][2][][] */ 28,7,-42,-114,0,-10,89,-127,-107,63,-17,42,-3,-21,85,-6,100,-91,13,63,-120,127,108,21,95,-80,-34,101,-5,-93,49,-34,16,36,114,64,0,-7,-13,-67,-127,-11,-25,42,-93,-97,96,-120,-28,-7,20,108,23,-80,-72,-78,54,26,48,76,101,-41,98,110,-53,97,-35,24,-113,-80,-56,-82,50,3,-37,68,-57,-124,39,-56,5,28,-49,5,92,60,-18,33,-24,-92,108,32,-55,-97,47,42, 40,37,-45,-34,-12,-40,127,-112,-107,41,-37,67,1,-36,98,-35,127,-127,-40,102,-127,-20,127,28,117,-96,-20,127,-3,-106,52,-39,-13,11,127,85,9,-34,-18,-79,-39,-36,-3,30,-127,25,127,-127,-68,-13,-10,127,21,-98,5,-39,64,-51,55,81,90,-56,127,125,-38,127,23,24,-127,-101,-64,-77,76,35,-16,89,-85,-127,71,-69,-9,40,-66,-3,127,61,-4,26,-32,-102,127,8,-60,-105,50,60, 22,52,-67,-61,-7,-35,45,-71,-21,39,-12,30,-20,-2,35,10,36,-52,-72,67,-32,-2,51,5,43,-42,30,59,39,-35,25,-3,-127,0,30,44,2,-15,3,-28,-67,-34,13,20,-42,70,71,-4,-28,-13,-34,75,4,-28,52,-79,33,-80,6,5,-8,-32,35,26,-41,36,18,127,-39,-51,-54,-24,38,64,19,38,-65,-51,34,-20,-58,23,-29,20,29,19,3,-12,7,-27,-2,-8,-9,-91,19,35, 
};
const TfArray<4, int> tensor_dimension104 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant104_scale = { 96, { 0.005145147442817688, 0.0058268518187105656, 0.0055354428477585316, 0.0030766706913709641, 0.0025167549028992653, 0.0060772579163312912, 0.0053701908327639103, 0.0078891776502132416, 0.0043357242830097675, 0.0016041682101786137, 0.0030925408937036991, 0.0087357936426997185, 0.0048244823701679707, 0.004107943270355463, 0.0028987755067646503, 0.007598531898111105, 0.0055837412364780903, 0.0064462362788617611, 0.0045299199409782887, 0.0055096950381994247, 0.0058285980485379696, 0.0061030811630189419, 0.0056717037223279476, 0.0035048052668571472, 0.0034435007255524397, 0.0037424291949719191, 0.0051156533882021904, 0.0033528979402035475, 0.0020872964523732662, 0.0034132727887481451, 0.0040720710530877113, 0.0063887215219438076, 0.008180215023458004, 0.0045532006770372391, 0.013185270130634308, 0.0037617073394358158, 0.0054212929680943489, 0.0032825877424329519, 0.0025935894809663296, 0.0042736991308629513, 0.0035568661987781525, 0.0042548640631139278, 0.0043343100696802139, 0.0038271837402135134, 0.0059917643666267395, 0.0057350927963852882, 0.0029530157335102558, 0.0057476209476590157, 0.0032791320700198412, 0.0048459949903190136, 0.0065543795935809612, 0.0028267062734812498, 0.007057401817291975, 0.0020286354701966047, 0.0054358253255486488, 0.0040936670266091824, 0.0030963250901550055, 0.0067132539115846157, 0.0068423994816839695, 0.0034392527304589748, 0.0030202912166714668, 0.0040912702679634094, 0.0025359333958476782, 0.0048029297031462193, 0.0078214667737483978, 0.0048923864960670471, 0.0094103952869772911, 0.0070974724367260933, 0.0050436519086360931, 0.0047212210483849049, 0.0062833847478032112, 0.006237515714019537, 0.0031132078729569912, 0.0082508968189358711, 0.0031865108758211136, 0.0054155741818249226, 0.0025204194243997335, 0.0023958887904882431, 0.0059526334516704082, 0.0050926068797707558, 0.00473780557513237, 0.0046655153855681419, 0.0079317810013890266, 0.0024371547624468803, 0.0062832259573042393, 0.0032053531613200903, 0.0060477354563772678, 0.0036798773799091578, 0.0039914255030453205, 0.0041578616946935654, 0.0057499618269503117, 0.0028427001088857651, 0.0046663512475788593, 0.0038034410681575537, 0.0032942434772849083, 0.0026771386619657278, } };
const TfArray<96, int> quant104_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant104 = { (TfLiteFloatArray*)&quant104_scale, (TfLiteIntArray*)&quant104_zero, 3 };
const ALIGN(8) int32_t tensor_data105[16] = { -10160, -3284, -5936, -17383, 12108, -12318, -12755, 20660, -22417, -25470, 651, -185, -13586, 22679, -4728, 9406, };
const TfArray<1, int> tensor_dimension105 = { 1, { 16 } };
const TfArray<16, float> quant105_scale = { 16, { 5.3800577006768435e-05, 5.9044512454420328e-05, 6.184136145748198e-05, 4.9674770707497373e-05, 5.3989380830898881e-05, 5.737808533012867e-05, 4.8445766879012808e-05, 5.8270041336072609e-05, 6.1021029978292063e-05, 6.0323382058413699e-05, 6.2688181060366333e-05, 5.7608394854469225e-05, 5.4254720453172922e-05, 6.1065205954946578e-05, 6.1989645473659039e-05, 6.0803398810094222e-05, } };
const TfArray<16, int> quant105_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant105 = { (TfLiteFloatArray*)&quant105_scale, (TfLiteIntArray*)&quant105_zero, 0 };
const ALIGN(8) int8_t tensor_data106[1*3*3*96] = { 
  /* [0][0][][] */ 99,42,5,-81,-6,-27,22,-101,54,8,-53,116,-9,52,-127,68,-65,56,-25,45,6,-4,-35,-49,-10,-68,-33,50,-34,14,127,-19,42,-39,-75,-66,50,78,95,85,-16,8,-5,-33,-5,13,-77,21,90,16,-20,35,-12,-68,9,-17,62,-37,-74,4,-12,31,41,11,59,111,85,33,72,-6,69,22,-1,-47,-29,123,44,116,-19,-19,94,76,-127,40,-127,-19,127,103,-61,71,24,-127,-19,34,73,120, 4,83,10,23,-3,74,-3,28,-38,-77,-127,50,-13,127,-112,127,49,-72,22,70,60,85,56,105,127,-22,-87,119,-80,-45,-73,30,-33,18,127,-90,127,116,64,75,-3,-124,-78,-92,-27,127,29,-25,127,29,-11,13,-6,45,127,13,42,15,-31,24,127,109,-36,-31,94,79,96,127,127,-127,127,12,-3,-32,-37,-112,-6,27,51,-79,77,31,81,-11,72,-9,-66,-38,-77,-63,-127,14,-31,-10,-46,-70, -127,42,-36,66,-18,-1,-55,94,65,-30,-20,127,20,8,-121,36,64,4,99,-127,-7,29,-49,-87,-53,-5,-34,66,85,27,-75,21,38,38,-29,-62,24,60,25,86,14,13,21,-64,-8,18,-66,27,90,20,-25,22,17,33,23,-127,-75,-53,58,37,17,25,32,21,59,95,92,1,61,4,50,-39,8,-44,13,127,24,-127,-20,-23,-46,41,69,-48,53,23,103,109,97,82,4,-108,-9,34,80,-127, 
  /* [0][1][][] */ -24,27,98,56,127,2,127,-64,10,-72,49,-34,-127,-26,-48,-3,-127,-99,127,20,91,123,-19,-31,-40,-14,-88,38,-52,-127,-39,-59,-48,-127,-75,86,-14,-20,45,127,-16,69,20,-125,39,112,-127,108,20,-10,1,26,-127,-32,-36,36,72,46,-118,95,59,21,74,-3,65,-44,127,-42,64,74,4,127,-127,-5,-102,-37,78,-123,54,-6,97,110,-32,73,-95,116,-60,-28,11,127,91,-54,6,84,-10,66, 30,-127,-127,15,122,-25,-52,3,-59,-127,114,-34,58,-60,-44,32,-13,-13,-85,-7,47,127,127,127,76,120,-61,55,-100,106,21,-13,-32,8,96,34,-17,-47,-36,-119,-79,61,-64,-79,-26,-76,120,-6,-46,-63,-41,127,25,28,-1,28,63,96,127,0,-16,123,-41,127,-24,-80,-96,-69,-22,54,-53,-95,74,127,-66,42,-127,35,127,13,19,127,25,-73,35,-5,-39,-44,56,119,-20,-18,127,11,-3,-43, 3,39,119,-73,95,-22,33,59,38,-91,50,-13,83,0,-80,-32,124,127,83,-66,93,71,-39,-34,-55,-127,-127,2,121,35,50,13,-49,122,-92,41,33,-36,44,96,40,-127,30,-127,-22,105,52,116,35,-3,3,36,118,22,33,30,-127,43,2,41,48,27,96,-9,127,-64,56,-37,4,78,0,-63,85,-18,-29,-43,85,89,70,-17,-127,97,-15,-6,31,97,-70,47,-39,107,91,-39,-24,127,64,27, 
  /* [0][2][][] */ 9,5,-8,-104,70,122,19,-127,31,-40,-16,-53,-20,-72,-60,-4,-55,-36,-62,30,64,-61,-16,-18,-19,40,-84,100,-53,-36,-27,-66,11,-101,76,127,0,-69,7,114,-70,-5,80,-84,81,-41,5,-26,-70,112,12,-2,-8,-127,59,-27,1,-52,-41,-83,0,33,86,11,101,6,107,-63,115,-40,18,-10,59,-28,127,115,-10,62,-8,6,71,124,-125,96,-104,110,75,127,127,6,-23,-95,-14,18,127,-64, 55,21,-53,-3,46,55,22,14,127,-68,-15,-10,-15,1,-107,-77,-13,-42,-12,41,127,-103,-72,115,-19,28,-111,92,-85,23,2,127,-58,29,3,109,8,-127,20,117,-89,116,127,-113,74,-59,-58,-127,-3,82,127,12,11,42,-26,41,38,-127,11,-69,-92,127,-83,-56,-5,-127,2,-81,-21,-57,-3,-14,45,-47,-27,-103,-74,4,-127,127,-62,-7,63,9,28,-82,-19,24,127,44,-10,4,-22,-14,-44,14, 20,44,-40,127,54,127,-77,112,39,-41,0,-13,39,-74,-80,13,40,-15,-13,-47,66,6,-24,-55,-21,-54,-49,127,127,21,19,-52,-127,90,-48,89,0,-32,-127,91,-127,-17,38,-50,-127,-35,-22,8,-122,127,11,8,-11,36,-44,-28,-21,-24,57,127,-15,41,127,12,-86,-14,41,-36,106,-37,-70,-2,-85,-32,-60,123,-11,-87,-17,19,-30,98,109,-127,44,127,82,100,-89,-11,-25,-104,-5,12,116,-25, 
};
const TfArray<4, int> tensor_dimension106 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant106_scale = { 96, { 0.014323239214718342, 0.0093186330050230026, 0.012929542921483517, 0.010467910207808018, 0.0078050023876130581, 0.0087853269651532173, 0.0096555203199386597, 0.0067353826016187668, 0.0092027336359024048, 0.0037433102261275053, 0.0081201996654272079, 0.0064857229590415955, 0.010318099521100521, 0.0062595633789896965, 0.0082617495208978653, 0.0070032523944973946, 0.008618425577878952, 0.010422058403491974, 0.010047950781881809, 0.013855951838195324, 0.0044174469076097012, 0.0051357378251850605, 0.0071296445094048977, 0.0055070426315069199, 0.018284153193235397, 0.011564252898097038, 0.0067384210415184498, 0.0031462518963962793, 0.0061019700951874256, 0.010588354431092739, 0.010669238865375519, 0.011841570027172565, 0.010991967283189297, 0.0062901894561946392, 0.011881178244948387, 0.0055054500699043274, 0.012342401780188084, 0.0053494498133659363, 0.0054341205395758152, 0.003544999985024333, 0.0084423720836639404, 0.011804132722318172, 0.00824736338108778, 0.0078931162133812904, 0.010677297599613667, 0.0060942955315113068, 0.008554873988032341, 0.012751628644764423, 0.0063362321816384792, 0.007900778204202652, 0.0097193382680416107, 0.010631656274199486, 0.012596553191542625, 0.011307169683277607, 0.013926493003964424, 0.012768366374075413, 0.0070434990338981152, 0.013083795085549355, 0.011111773550510406, 0.011302501894533634, 0.013287815265357494, 0.0027944501489400864, 0.0072114993818104267, 0.01859094575047493, 0.0070558716543018818, 0.0049564642831683159, 0.0084429802373051643, 0.013375252485275269, 0.0081747602671384811, 0.0085889054462313652, 0.0079585174098610878, 0.011895283125340939, 0.012803566642105579, 0.016134403645992279, 0.0064256098121404648, 0.010363882407546043, 0.018495319411158562, 0.010116270743310452, 0.0062373713590204716, 0.013759221881628036, 0.0071758241392672062, 0.006403620820492506, 0.0071867215447127819, 0.0078912219032645226, 0.0085122277960181236, 0.0065738079138100147, 0.0068569434806704521, 0.0065020574256777763, 0.0078185861930251122, 0.0049797957763075829, 0.0069835539907217026, 0.0092126987874507904, 0.011954751797020435, 0.011737115681171417, 0.012188099324703217, 0.0095793409273028374, } };
const TfArray<96, int> quant106_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant106 = { (TfLiteFloatArray*)&quant106_scale, (TfLiteIntArray*)&quant106_zero, 3 };
const ALIGN(8) int32_t tensor_data107[16] = { -16899, 24695, 12373, 2124, 20818, 28906, -24733, -19541, -19737, 41876, -50067, -27523, 26147, -30546, 15945, -3863, };
const TfArray<1, int> tensor_dimension107 = { 1, { 16 } };
const TfArray<16, float> quant107_scale = { 16, { 2.7468879125081003e-05, 1.994919148273766e-05, 1.9848879674100317e-05, 1.944811265275348e-05, 2.8512511562439613e-05, 1.5709474610048346e-05, 2.1107633074279875e-05, 2.980161843879614e-05, 1.758081816660706e-05, 2.1725951228290796e-05, 3.1176467018667608e-05, 3.1914769351715222e-05, 1.6848165614646859e-05, 2.0864521502517164e-05, 2.4744322217884474e-05, 1.8323764379601926e-05, } };
const TfArray<16, int> quant107_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant107 = { (TfLiteFloatArray*)&quant107_scale, (TfLiteIntArray*)&quant107_zero, 0 };
const ALIGN(8) int8_t tensor_data108[1*3*3*96] = { 
  /* [0][0][][] */ -106,-23,-54,-34,-54,-110,119,6,50,10,-64,125,-48,-86,-53,-104,-73,-41,-2,-32,28,112,67,10,-38,-15,-21,59,-86,54,-107,22,83,-37,65,5,-127,-127,35,-87,-45,-61,-3,-49,-127,-35,101,66,39,77,-34,9,95,-28,19,50,105,-127,57,-6,-84,-18,-28,44,-5,121,-17,76,-21,-15,52,33,54,-125,-117,-41,-106,127,115,-99,4,57,39,79,8,13,49,55,-85,-27,-42,10,-91,55,116,3, 12,-119,-127,46,-91,10,35,-15,39,-99,-25,-127,46,-38,-90,-127,40,-3,36,-34,-102,-78,127,127,10,-127,-9,-18,-103,-10,-75,9,-24,-12,60,-1,-110,-88,29,127,-7,31,-97,-98,66,78,-26,52,-18,69,-76,-21,38,-95,61,113,112,99,-3,15,54,9,-73,-39,-1,15,-8,127,-127,-106,3,109,-89,-9,112,-59,-3,7,46,22,-81,-42,-39,39,127,26,127,-3,-10,-116,121,-25,-95,127,50,-41, 127,-13,-58,-35,6,-46,-127,3,34,24,-29,100,34,-58,-58,-101,-11,-38,-77,-72,57,127,34,-15,-37,-33,-48,76,-86,-66,-127,51,-127,4,10,4,-74,-105,3,-60,-28,-14,-74,127,-93,-50,80,18,-13,54,-3,105,61,60,2,87,85,70,41,-6,31,-12,-27,1,-36,127,-27,82,-24,-67,34,-127,-45,81,-127,-9,2,72,127,-34,-53,-105,24,91,12,-32,55,50,-75,-35,-20,-50,-86,95,122,-32, 
  /* [0][1][][] */ -36,9,-113,43,-6,-11,92,3,127,44,-127,-92,-16,122,-88,-95,-84,-99,69,-12,127,99,-75,17,68,-79,-127,127,-11,36,55,-14,19,54,127,22,-107,-95,-87,-113,-30,-122,-127,-75,76,-47,85,127,127,85,127,78,127,-127,19,25,41,-83,127,-24,93,76,-127,25,1,21,23,-14,75,7,65,78,127,-26,-104,23,76,-21,95,-127,42,118,121,30,-7,81,-29,-4,-55,-15,-49,127,-48,30,-120,-85, 82,-83,-93,96,37,25,24,127,-54,-22,28,89,66,46,-127,-109,50,127,-105,49,-47,-97,-54,-1,127,-123,-48,-66,-101,127,60,7,120,127,-48,-127,-104,-70,64,28,47,-52,-111,11,-81,127,-127,34,-99,127,-33,-51,-14,114,94,26,-10,61,-83,127,55,-127,-12,-18,127,-8,-22,16,-13,-48,127,-48,-81,-12,17,23,16,-110,28,79,127,88,-60,101,-9,80,3,24,127,127,127,-27,-74,-49,-127,127, -2,14,-111,-31,-70,-33,-116,-14,123,33,93,19,-50,127,-84,-75,127,-54,48,-15,87,-80,-72,-15,69,-91,-109,8,-30,23,51,-6,-23,18,82,17,-69,-68,-76,-52,-59,-16,63,48,-79,-58,116,-14,-53,36,114,103,101,-2,3,24,127,32,-45,-36,127,73,-66,10,56,19,18,9,26,18,63,-52,-70,-3,-13,13,88,-20,71,-50,-45,-127,127,29,-10,-127,12,-57,-23,-3,-60,114,-61,79,-25,-87, 
  /* [0][2][][] */ -15,18,-77,3,42,112,57,-19,-36,68,-96,-55,-127,-68,1,42,-51,-43,-122,90,-6,-108,-60,-31,-52,62,-87,95,-87,-14,12,-127,-91,8,-38,-59,-119,-111,14,42,67,-33,-76,-48,-20,-105,-24,67,-26,94,109,61,113,-41,-8,-61,-5,-83,25,5,-37,89,-89,94,-46,109,8,13,49,-59,15,123,6,-68,-124,97,127,19,-19,-44,31,-52,61,119,0,-23,16,107,-9,-54,-97,32,-127,112,27,-77, 22,127,-47,127,127,127,22,-104,-16,127,5,-65,33,-9,116,63,95,99,-4,-49,-77,-20,-82,2,-43,-6,14,1,-27,-32,-30,-20,-89,-4,-12,-31,15,18,127,81,127,-127,-96,-76,96,80,-27,49,-6,48,19,-127,80,1,127,-127,38,53,-11,-58,38,101,-87,127,49,65,127,-2,98,102,65,-79,-25,-127,51,-57,15,-48,-27,-102,-3,-94,-69,127,51,-35,-103,43,69,-109,-25,-23,-75,101,-90,21, 15,-8,-69,-30,43,122,-81,-5,-41,77,110,15,84,-86,89,-28,-5,-48,127,127,-31,-24,-27,17,-57,38,-80,-36,-127,-38,-94,85,-121,58,-1,1,21,-93,-56,41,78,-42,-70,116,-54,-104,2,49,-21,75,82,87,100,-47,17,-10,-18,59,15,8,17,68,-83,86,-22,123,-7,27,42,127,12,-52,-2,-111,-116,127,89,-24,8,-56,81,-58,47,121,1,-79,-4,127,10,-62,-78,-3,-105,122,22,23, 
};
const TfArray<4, int> tensor_dimension108 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant108_scale = { 96, { 0.0080956853926181793, 0.020839760079979897, 0.0092337550595402718, 0.0058061163872480392, 0.0052643315866589546, 0.0054746237583458424, 0.0063792970031499863, 0.015397565439343452, 0.010215582326054573, 0.0074449838139116764, 0.009142640046775341, 0.0060990978963673115, 0.013942827470600605, 0.0060149235650897026, 0.009107368066906929, 0.0063812569715082645, 0.0057272771373391151, 0.015448053367435932, 0.0086981048807501793, 0.0075438790954649448, 0.0073993559926748276, 0.006655470933765173, 0.0058384998701512814, 0.0065169958397746086, 0.0084163928404450417, 0.0088580232113599777, 0.011093715205788612, 0.0062764161266386509, 0.0059115327894687653, 0.0076610944233834743, 0.012641459703445435, 0.012143315747380257, 0.0066555212251842022, 0.012779091484844685, 0.0064510023221373558, 0.023074561730027199, 0.0066905692219734192, 0.0047565209679305553, 0.0075023723766207695, 0.0057611842639744282, 0.01476072333753109, 0.0064364336431026459, 0.0099922241643071175, 0.010041274130344391, 0.0082122152671217918, 0.0052589946426451206, 0.0088948467746376991, 0.010028712451457977, 0.011884445324540138, 0.0043376521207392216, 0.0097887665033340454, 0.0050774626433849335, 0.0049029439687728882, 0.0079445960000157356, 0.011006319895386696, 0.0071771298535168171, 0.007816048339009285, 0.0066509651951491833, 0.014963258057832718, 0.020912140607833862, 0.0073269600979983807, 0.0055873151868581772, 0.004737678449600935, 0.0087309591472148895, 0.011471456848084927, 0.0126601941883564, 0.015938015654683113, 0.00948349479585886, 0.012349296361207962, 0.0086729144677519798, 0.010965235531330109, 0.0094296354800462723, 0.00878941360861063, 0.0075078578665852547, 0.0052300067618489265, 0.010070390067994595, 0.0070431949570775032, 0.005880916491150856, 0.0092924041673541069, 0.0090325744822621346, 0.0067408229224383831, 0.0088923387229442596, 0.0075077619403600693, 0.0060206158086657524, 0.031635861843824387, 0.0067338254302740097, 0.0095283268019556999, 0.01404830627143383, 0.0063818148337304592, 0.0050095408223569393, 0.0090000098571181297, 0.010287891142070293, 0.0039719664491713047, 0.0049484032206237316, 0.0054189730435609818, 0.015670614317059517, } };
const TfArray<96, int> quant108_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant108 = { (TfLiteFloatArray*)&quant108_scale, (TfLiteIntArray*)&quant108_zero, 3 };
const ALIGN(8) int32_t tensor_data109[16] = { 10190, 7259, 23420, -15269, 15053, -3763, -147, -4513, 16706, 3974, -5863, 1078, 210, -14417, 9414, 3927, };
const TfArray<1, int> tensor_dimension109 = { 1, { 16 } };
const TfArray<16, float> quant109_scale = { 16, { 6.4977852161973715e-05, 4.7927558625815436e-05, 3.3270418498432264e-05, 2.7017667889595032e-05, 3.5407298128120601e-05, 3.0940936994738877e-05, 3.5099550586892292e-05, 2.9257209462230094e-05, 3.567778185242787e-05, 4.6181343350326642e-05, 3.6447021557250991e-05, 4.4581403926713392e-05, 5.3166098950896412e-05, 2.4659642804181203e-05, 3.1910625693853945e-05, 3.3107397030107677e-05, } };
const TfArray<16, int> quant109_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant109 = { (TfLiteFloatArray*)&quant109_scale, (TfLiteIntArray*)&quant109_zero, 0 };
const ALIGN(8) int8_t tensor_data110[1*3*3*96] = { 
  /* [0][0][][] */ -2,-7,-32,46,-5,-28,92,-11,5,34,62,35,12,-89,22,27,-65,30,-38,23,10,-5,15,27,-5,-1,27,-31,-32,110,-14,16,-2,-4,-27,36,36,1,-17,-6,-10,-15,4,18,26,7,37,7,8,-5,-64,0,18,-56,24,6,56,-1,-29,5,8,17,55,14,-60,-107,-4,15,20,-6,12,15,14,-28,3,2,81,-1,36,27,-41,-58,-16,76,-7,-22,-13,5,-100,4,8,33,-127,-107,-29,-45, 127,-90,-82,17,127,-13,127,-21,-2,127,37,-50,74,11,26,110,-91,-114,45,127,83,-21,-16,127,-2,-37,127,-68,-11,127,-20,106,-72,-6,-34,127,40,127,-36,6,-127,67,9,84,29,-3,117,127,65,-108,65,-44,52,18,99,105,92,-93,-79,127,104,90,67,69,-54,3,40,29,108,-12,13,98,87,-41,-14,42,127,47,127,127,-42,-54,-127,69,-127,-38,-108,36,44,2,54,-126,-83,-89,-30,31, -4,-6,-34,51,-17,-2,98,-9,20,29,28,-33,4,-106,17,14,-118,47,33,20,6,0,19,21,-5,-1,14,-25,-84,106,-12,17,-3,-9,-19,18,36,-1,-16,-4,-13,50,2,16,26,-6,41,-2,5,9,-70,-6,10,-12,9,-7,34,0,-20,-5,6,7,1,11,-68,24,-15,18,-1,-11,5,12,8,-56,2,7,87,7,33,20,-44,-33,-2,16,-8,-25,-14,34,-127,13,9,12,-5,-105,-74,-54, 
  /* [0][1][][] */ -17,-25,-84,40,-8,2,69,9,-126,24,10,76,51,-8,32,30,-47,9,33,-50,45,24,3,-1,-42,-34,20,-53,-56,30,-48,29,0,12,-45,24,-37,5,0,23,-53,76,-13,21,39,24,37,-5,23,-17,-127,-32,-27,4,48,2,54,6,-8,3,10,17,73,37,-27,22,10,24,24,-9,1,20,9,14,23,10,68,-41,10,-32,-84,-40,-1,-29,-11,2,-24,14,17,-35,-16,8,-26,27,-13,-12, 62,-127,-127,32,-16,127,37,127,-9,118,-127,-30,127,67,127,127,-111,-71,83,-94,127,127,-123,-64,-8,-54,71,-127,116,107,-127,94,-127,127,-127,83,-127,112,96,127,-90,58,-105,127,127,127,127,60,127,-127,125,-127,-127,15,127,127,127,-127,-127,63,127,127,81,127,-44,95,127,127,127,13,-80,127,99,127,127,118,73,-127,30,-74,-127,-97,-125,-103,-97,72,-127,127,96,-127,-127,-102,-125,127,-127,-120, -15,-19,-70,-89,11,-5,79,3,-100,12,18,-81,47,-11,22,29,-49,18,38,-36,36,14,15,21,-7,-9,17,-46,-68,99,-35,37,3,7,-38,27,-29,-8,3,9,-44,8,-9,15,42,18,32,-3,17,-9,-123,-23,-17,5,38,0,34,6,4,-7,-2,8,127,32,-43,26,4,11,25,-1,-1,12,4,10,10,6,67,-56,17,-21,-82,-32,7,-23,-3,1,-16,24,18,-33,-10,58,-31,8,-8,-4, 
  /* [0][2][][] */ 4,-4,54,69,2,-26,-16,-46,-102,-6,26,115,2,71,5,4,-49,97,43,30,9,13,13,-10,3,10,-81,25,-85,51,-27,15,10,-13,-63,-25,-18,-10,14,-16,1,91,-15,-11,24,2,-26,-17,-1,18,-58,58,13,0,-20,-2,7,0,-41,8,-5,-5,58,6,-104,42,-56,11,48,1,-1,-2,15,18,18,14,56,-27,-111,-19,-3,36,22,-2,9,11,-8,39,-28,1,5,46,-60,-59,-25,-77, 47,-74,13,127,-5,-12,38,-33,-2,-1,-95,-127,95,127,30,1,-127,127,127,119,30,121,-127,-112,127,127,28,57,127,-7,-119,127,-83,-42,-73,-13,-40,39,127,5,-38,127,-127,-12,93,92,88,-31,54,-99,66,-30,72,127,-36,14,9,-76,-65,14,12,3,79,73,-93,127,-68,115,-53,127,-127,7,127,38,105,127,65,-44,-17,-58,29,127,19,-127,63,127,64,37,-65,-61,-69,-127,-90,-82,-26,-127, 1,-6,54,54,-4,-17,44,-51,-127,2,43,105,-1,78,16,13,-61,82,38,14,5,7,18,-24,-1,6,13,29,-81,-40,-29,-3,9,-18,-62,-2,-18,-18,1,0,1,66,-9,-7,24,-4,-30,-17,-7,25,-56,74,13,-2,-25,-2,3,-3,-26,5,-8,4,71,6,-127,21,-38,5,-39,8,0,3,-1,0,11,17,-67,-49,22,-21,-6,1,23,14,10,-2,-18,37,-28,-30,1,8,-54,-66,-108,-54, 
};
const TfArray<4, int> tensor_dimension110 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant110_scale = { 96, { 0.016158826649188995, 0.054619330912828445, 0.011805512011051178, 0.013460441492497921, 0.011728744022548199, 0.011127310805022717, 0.013818338513374329, 0.011419319547712803, 0.0095292022451758385, 0.008782263845205307, 0.009181569330394268, 0.0088709378615021706, 0.0035866959951817989, 0.0061067924834787846, 0.010611900128424168, 0.0094608142971992493, 0.011084480211138725, 0.0069257011637091637, 0.0056854560971260071, 0.007119898684322834, 0.011281523853540421, 0.0050391890108585358, 0.0072289630770683289, 0.014583099633455276, 0.010959172621369362, 0.0093797259032726288, 0.01325151976197958, 0.0088287666440010071, 0.016230199486017227, 0.0071134883910417557, 0.010147100314497948, 0.0079770442098379135, 0.081488810479640961, 0.013970895670354366, 0.010948163457214832, 0.0099647743627429008, 0.010521161369979382, 0.0080400919541716576, 0.0091840997338294983, 0.012560781091451645, 0.0093976734206080437, 0.013017130084335804, 0.0073582599870860577, 0.021255394443869591, 0.0042928843759000301, 0.014826362021267414, 0.0056642834097146988, 0.0085705555975437164, 0.01608402281999588, 0.013674360699951649, 0.011595424264669418, 0.007569450419396162, 0.01515661459416151, 0.012234390713274479, 0.0031976697500795126, 0.0080413781106472015, 0.0054964274168014526, 0.013585611246526241, 0.016586558893322945, 0.0098434435203671455, 0.020460138097405434, 0.0090256016701459885, 0.012955258600413799, 0.0037147107068449259, 0.01440158300101757, 0.0082786884158849716, 0.011669964529573917, 0.018519693985581398, 0.018178956583142281, 0.014411706477403641, 0.0074162385426461697, 0.018402434885501862, 0.016831403598189354, 0.0081242956221103668, 0.018232641741633415, 0.0088033070787787437, 0.0065472563728690147, 0.012269379571080208, 0.0064545380882918835, 0.0043467553332448006, 0.0068490807898342609, 0.0090185394510626793, 0.0082840900868177414, 0.0092549910768866539, 0.012578725814819336, 0.013705672696232796, 0.0080250464379787445, 0.009370461106300354, 0.012542941607534885, 0.010740594938397408, 0.015134066343307495, 0.0038833422586321831, 0.0081607680767774582, 0.0079259723424911499, 0.013196469284594059, 0.010071185417473316, } };
const TfArray<96, int> quant110_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant110 = { (TfLiteFloatArray*)&quant110_scale, (TfLiteIntArray*)&quant110_zero, 3 };
const ALIGN(8) int32_t tensor_data111[32] = { -61523, -35146, -41504, 44195, -14820, -33021, -8400, -15538, -4063, -17207, -9352, 37953, 23331, 55979, -33159, -25798, 11793, 25781, -10595, -18549, 47399, 10272, -8867, -14598, -3659, -45029, -3572, -22241, -5297, 18445, -34319, 21265, };
const TfArray<1, int> tensor_dimension111 = { 1, { 32 } };
const TfArray<32, float> quant111_scale = { 32, { 0.00013770969235338271, 0.00017995055532082915, 0.0001087571436073631, 0.00011006954446202144, 0.00014919239038135856, 0.00014823331730440259, 0.00014772237045690417, 0.0001128281801356934, 0.00013391977699939162, 0.00013689302431885153, 0.00013599752855952829, 0.0001270482171094045, 0.00013217212108429521, 0.00015224816161207855, 0.00013230182230472565, 0.00019747008627746254, 0.00014266528887674212, 0.00010393118282081559, 0.00011367901606718078, 0.00016653230704832822, 0.000142639473779127, 0.00011598269338719547, 0.00015128700761124492, 0.00014790971181355417, 0.00012670773139689118, 0.00011403264943510294, 0.00010370124800829217, 0.00015496401465497911, 0.00013603811385110021, 0.00013442654744721949, 0.00010800307791214436, 0.00012378557585179806, } };
const TfArray<32, int> quant111_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant111 = { (TfLiteFloatArray*)&quant111_scale, (TfLiteIntArray*)&quant111_zero, 0 };
const TfArray<4, int> tensor_dimension112 = { 4, { 1,65,65,1 } };
const TfArray<1, float> quant112_scale = { 1, { 0.0037062668707221746, } };
const TfArray<1, int> quant112_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant112 = { (TfLiteFloatArray*)&quant112_scale, (TfLiteIntArray*)&quant112_zero, 0 };
const TfArray<4, int> tensor_dimension113 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant113_scale = { 1, { 0.016086714342236519, } };
const TfArray<1, int> quant113_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant113 = { (TfLiteFloatArray*)&quant113_scale, (TfLiteIntArray*)&quant113_zero, 0 };
const TfArray<4, int> tensor_dimension114 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant114_scale = { 1, { 0.01376777421683073, } };
const TfArray<1, int> quant114_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant114 = { (TfLiteFloatArray*)&quant114_scale, (TfLiteIntArray*)&quant114_zero, 0 };
const TfArray<4, int> tensor_dimension115 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant115_scale = { 1, { 0.022926390171051025, } };
const TfArray<1, int> quant115_zero = { 1, { 23 } };
const TfLiteAffineQuantization quant115 = { (TfLiteFloatArray*)&quant115_scale, (TfLiteIntArray*)&quant115_zero, 0 };
const TfArray<4, int> tensor_dimension116 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant116_scale = { 1, { 0.030490770936012268, } };
const TfArray<1, int> quant116_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant116 = { (TfLiteFloatArray*)&quant116_scale, (TfLiteIntArray*)&quant116_zero, 0 };
const TfArray<4, int> tensor_dimension117 = { 4, { 1,32,32,48 } };
const TfArray<1, float> quant117_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant117_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant117 = { (TfLiteFloatArray*)&quant117_scale, (TfLiteIntArray*)&quant117_zero, 0 };
const TfArray<4, int> tensor_dimension118 = { 4, { 1,33,33,48 } };
const TfArray<1, float> quant118_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant118_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant118 = { (TfLiteFloatArray*)&quant118_scale, (TfLiteIntArray*)&quant118_zero, 0 };
const TfArray<4, int> tensor_dimension119 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant119_scale = { 1, { 0.017248552292585373, } };
const TfArray<1, int> quant119_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant119 = { (TfLiteFloatArray*)&quant119_scale, (TfLiteIntArray*)&quant119_zero, 0 };
const TfArray<4, int> tensor_dimension120 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant120_scale = { 1, { 0.023856323212385178, } };
const TfArray<1, int> quant120_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant120 = { (TfLiteFloatArray*)&quant120_scale, (TfLiteIntArray*)&quant120_zero, 0 };
const TfArray<4, int> tensor_dimension121 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant121_scale = { 1, { 0.012526562437415123, } };
const TfArray<1, int> quant121_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant121 = { (TfLiteFloatArray*)&quant121_scale, (TfLiteIntArray*)&quant121_zero, 0 };
const TfArray<4, int> tensor_dimension122 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant122_scale = { 1, { 0.022690117359161377, } };
const TfArray<1, int> quant122_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant122 = { (TfLiteFloatArray*)&quant122_scale, (TfLiteIntArray*)&quant122_zero, 0 };
const TfArray<4, int> tensor_dimension123 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant123_scale = { 1, { 0.059303455054759979, } };
const TfArray<1, int> quant123_zero = { 1, { -20 } };
const TfLiteAffineQuantization quant123 = { (TfLiteFloatArray*)&quant123_scale, (TfLiteIntArray*)&quant123_zero, 0 };
const TfArray<4, int> tensor_dimension124 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant124_scale = { 1, { 0.055914018303155899, } };
const TfArray<1, int> quant124_zero = { 1, { -26 } };
const TfLiteAffineQuantization quant124 = { (TfLiteFloatArray*)&quant124_scale, (TfLiteIntArray*)&quant124_zero, 0 };
const TfArray<4, int> tensor_dimension125 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant125_scale = { 1, { 0.014552010223269463, } };
const TfArray<1, int> quant125_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant125 = { (TfLiteFloatArray*)&quant125_scale, (TfLiteIntArray*)&quant125_zero, 0 };
const TfArray<4, int> tensor_dimension126 = { 4, { 1,17,17,48 } };
const TfArray<1, float> quant126_scale = { 1, { 0.014552010223269463, } };
const TfArray<1, int> quant126_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant126 = { (TfLiteFloatArray*)&quant126_scale, (TfLiteIntArray*)&quant126_zero, 0 };
const TfArray<4, int> tensor_dimension127 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant127_scale = { 1, { 0.014822825789451599, } };
const TfArray<1, int> quant127_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant127 = { (TfLiteFloatArray*)&quant127_scale, (TfLiteIntArray*)&quant127_zero, 0 };
const TfArray<4, int> tensor_dimension128 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant128_scale = { 1, { 0.033321071416139603, } };
const TfArray<1, int> quant128_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant128 = { (TfLiteFloatArray*)&quant128_scale, (TfLiteIntArray*)&quant128_zero, 0 };
const TfArray<4, int> tensor_dimension129 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant129_scale = { 1, { 0.011277752928435802, } };
const TfArray<1, int> quant129_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant129 = { (TfLiteFloatArray*)&quant129_scale, (TfLiteIntArray*)&quant129_zero, 0 };
const TfArray<4, int> tensor_dimension130 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant130_scale = { 1, { 0.023373773321509361, } };
const TfArray<1, int> quant130_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant130 = { (TfLiteFloatArray*)&quant130_scale, (TfLiteIntArray*)&quant130_zero, 0 };
const TfArray<4, int> tensor_dimension131 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant131_scale = { 1, { 0.031690962612628937, } };
const TfArray<1, int> quant131_zero = { 1, { -36 } };
const TfLiteAffineQuantization quant131 = { (TfLiteFloatArray*)&quant131_scale, (TfLiteIntArray*)&quant131_zero, 0 };
const TfArray<4, int> tensor_dimension132 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant132_scale = { 1, { 0.053336277604103088, } };
const TfArray<1, int> quant132_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant132 = { (TfLiteFloatArray*)&quant132_scale, (TfLiteIntArray*)&quant132_zero, 0 };
const TfArray<4, int> tensor_dimension133 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant133_scale = { 1, { 0.016159495338797569, } };
const TfArray<1, int> quant133_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant133 = { (TfLiteFloatArray*)&quant133_scale, (TfLiteIntArray*)&quant133_zero, 0 };
const TfArray<4, int> tensor_dimension134 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant134_scale = { 1, { 0.017780989408493042, } };
const TfArray<1, int> quant134_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant134 = { (TfLiteFloatArray*)&quant134_scale, (TfLiteIntArray*)&quant134_zero, 0 };
const TfArray<4, int> tensor_dimension135 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant135_scale = { 1, { 0.035836212337017059, } };
const TfArray<1, int> quant135_zero = { 1, { 32 } };
const TfLiteAffineQuantization quant135 = { (TfLiteFloatArray*)&quant135_scale, (TfLiteIntArray*)&quant135_zero, 0 };
const TfArray<4, int> tensor_dimension136 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant136_scale = { 1, { 0.066567376255989075, } };
const TfArray<1, int> quant136_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant136 = { (TfLiteFloatArray*)&quant136_scale, (TfLiteIntArray*)&quant136_zero, 0 };
const TfArray<4, int> tensor_dimension137 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant137_scale = { 1, { 0.013192794285714626, } };
const TfArray<1, int> quant137_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant137 = { (TfLiteFloatArray*)&quant137_scale, (TfLiteIntArray*)&quant137_zero, 0 };
const TfArray<4, int> tensor_dimension138 = { 4, { 1,9,9,48 } };
const TfArray<1, float> quant138_scale = { 1, { 0.013192794285714626, } };
const TfArray<1, int> quant138_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant138 = { (TfLiteFloatArray*)&quant138_scale, (TfLiteIntArray*)&quant138_zero, 0 };
const TfArray<4, int> tensor_dimension139 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant139_scale = { 1, { 0.021738693118095398, } };
const TfArray<1, int> quant139_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant139 = { (TfLiteFloatArray*)&quant139_scale, (TfLiteIntArray*)&quant139_zero, 0 };
const TfArray<4, int> tensor_dimension140 = { 4, { 1,4,4,8 } };
const TfArray<1, float> quant140_scale = { 1, { 0.05634370818734169, } };
const TfArray<1, int> quant140_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant140 = { (TfLiteFloatArray*)&quant140_scale, (TfLiteIntArray*)&quant140_zero, 0 };
const TfArray<4, int> tensor_dimension141 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant141_scale = { 1, { 0.010534108616411686, } };
const TfArray<1, int> quant141_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant141 = { (TfLiteFloatArray*)&quant141_scale, (TfLiteIntArray*)&quant141_zero, 0 };
const TfArray<4, int> tensor_dimension142 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant142_scale = { 1, { 0.013458113186061382, } };
const TfArray<1, int> quant142_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant142 = { (TfLiteFloatArray*)&quant142_scale, (TfLiteIntArray*)&quant142_zero, 0 };
const TfArray<4, int> tensor_dimension143 = { 4, { 1,4,4,8 } };
const TfArray<1, float> quant143_scale = { 1, { 0.010432726703584194, } };
const TfArray<1, int> quant143_zero = { 1, { -27 } };
const TfLiteAffineQuantization quant143 = { (TfLiteFloatArray*)&quant143_scale, (TfLiteIntArray*)&quant143_zero, 0 };
const TfArray<4, int> tensor_dimension144 = { 4, { 1,4,4,8 } };
const TfArray<1, float> quant144_scale = { 1, { 0.053441811352968216, } };
const TfArray<1, int> quant144_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant144 = { (TfLiteFloatArray*)&quant144_scale, (TfLiteIntArray*)&quant144_zero, 0 };
const TfArray<4, int> tensor_dimension145 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant145_scale = { 1, { 0.012080447748303413, } };
const TfArray<1, int> quant145_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant145 = { (TfLiteFloatArray*)&quant145_scale, (TfLiteIntArray*)&quant145_zero, 0 };
const TfArray<4, int> tensor_dimension146 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant146_scale = { 1, { 0.01762731559574604, } };
const TfArray<1, int> quant146_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant146 = { (TfLiteFloatArray*)&quant146_scale, (TfLiteIntArray*)&quant146_zero, 0 };
const TfArray<4, int> tensor_dimension147 = { 4, { 1,4,4,8 } };
const TfArray<1, float> quant147_scale = { 1, { 0.01714806817471981, } };
const TfArray<1, int> quant147_zero = { 1, { -32 } };
const TfLiteAffineQuantization quant147 = { (TfLiteFloatArray*)&quant147_scale, (TfLiteIntArray*)&quant147_zero, 0 };
const TfArray<4, int> tensor_dimension148 = { 4, { 1,4,4,8 } };
const TfArray<1, float> quant148_scale = { 1, { 0.062752187252044678, } };
const TfArray<1, int> quant148_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant148 = { (TfLiteFloatArray*)&quant148_scale, (TfLiteIntArray*)&quant148_zero, 0 };
const TfArray<4, int> tensor_dimension149 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant149_scale = { 1, { 0.013055484741926193, } };
const TfArray<1, int> quant149_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant149 = { (TfLiteFloatArray*)&quant149_scale, (TfLiteIntArray*)&quant149_zero, 0 };
const TfArray<4, int> tensor_dimension150 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant150_scale = { 1, { 0.018306082114577293, } };
const TfArray<1, int> quant150_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant150 = { (TfLiteFloatArray*)&quant150_scale, (TfLiteIntArray*)&quant150_zero, 0 };
const TfArray<4, int> tensor_dimension151 = { 4, { 1,4,4,8 } };
const TfArray<1, float> quant151_scale = { 1, { 0.016761971637606621, } };
const TfArray<1, int> quant151_zero = { 1, { -56 } };
const TfLiteAffineQuantization quant151 = { (TfLiteFloatArray*)&quant151_scale, (TfLiteIntArray*)&quant151_zero, 0 };
const TfArray<4, int> tensor_dimension152 = { 4, { 1,4,4,8 } };
const TfArray<1, float> quant152_scale = { 1, { 0.067468076944351196, } };
const TfArray<1, int> quant152_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant152 = { (TfLiteFloatArray*)&quant152_scale, (TfLiteIntArray*)&quant152_zero, 0 };
const TfArray<4, int> tensor_dimension153 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant153_scale = { 1, { 0.015474199317395687, } };
const TfArray<1, int> quant153_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant153 = { (TfLiteFloatArray*)&quant153_scale, (TfLiteIntArray*)&quant153_zero, 0 };
const TfArray<4, int> tensor_dimension154 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant154_scale = { 1, { 0.021245133131742477, } };
const TfArray<1, int> quant154_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant154 = { (TfLiteFloatArray*)&quant154_scale, (TfLiteIntArray*)&quant154_zero, 0 };
const TfArray<4, int> tensor_dimension155 = { 4, { 1,4,4,16 } };
const TfArray<1, float> quant155_scale = { 1, { 0.025281557813286781, } };
const TfArray<1, int> quant155_zero = { 1, { 19 } };
const TfLiteAffineQuantization quant155 = { (TfLiteFloatArray*)&quant155_scale, (TfLiteIntArray*)&quant155_zero, 0 };
const TfArray<4, int> tensor_dimension156 = { 4, { 1,4,4,96 } };
const TfArray<1, float> quant156_scale = { 1, { 0.012647473253309727, } };
const TfArray<1, int> quant156_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant156 = { (TfLiteFloatArray*)&quant156_scale, (TfLiteIntArray*)&quant156_zero, 0 };
const TfArray<4, int> tensor_dimension157 = { 4, { 1,4,4,96 } };
const TfArray<1, float> quant157_scale = { 1, { 0.020350569859147072, } };
const TfArray<1, int> quant157_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant157 = { (TfLiteFloatArray*)&quant157_scale, (TfLiteIntArray*)&quant157_zero, 0 };
const TfArray<4, int> tensor_dimension158 = { 4, { 1,4,4,16 } };
const TfArray<1, float> quant158_scale = { 1, { 0.025917788967490196, } };
const TfArray<1, int> quant158_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant158 = { (TfLiteFloatArray*)&quant158_scale, (TfLiteIntArray*)&quant158_zero, 0 };
const TfArray<4, int> tensor_dimension159 = { 4, { 1,4,4,16 } };
const TfArray<1, float> quant159_scale = { 1, { 0.039975211024284363, } };
const TfArray<1, int> quant159_zero = { 1, { 21 } };
const TfLiteAffineQuantization quant159 = { (TfLiteFloatArray*)&quant159_scale, (TfLiteIntArray*)&quant159_zero, 0 };
const TfArray<4, int> tensor_dimension160 = { 4, { 1,4,4,96 } };
const TfArray<1, float> quant160_scale = { 1, { 0.013173488900065422, } };
const TfArray<1, int> quant160_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant160 = { (TfLiteFloatArray*)&quant160_scale, (TfLiteIntArray*)&quant160_zero, 0 };
const TfArray<4, int> tensor_dimension161 = { 4, { 1,4,4,96 } };
const TfArray<1, float> quant161_scale = { 1, { 0.021251371130347252, } };
const TfArray<1, int> quant161_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant161 = { (TfLiteFloatArray*)&quant161_scale, (TfLiteIntArray*)&quant161_zero, 0 };
const TfArray<4, int> tensor_dimension162 = { 4, { 1,4,4,16 } };
const TfArray<1, float> quant162_scale = { 1, { 0.022171031683683395, } };
const TfArray<1, int> quant162_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant162 = { (TfLiteFloatArray*)&quant162_scale, (TfLiteIntArray*)&quant162_zero, 0 };
const TfArray<4, int> tensor_dimension163 = { 4, { 1,4,4,16 } };
const TfArray<1, float> quant163_scale = { 1, { 0.049494694918394089, } };
const TfArray<1, int> quant163_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant163 = { (TfLiteFloatArray*)&quant163_scale, (TfLiteIntArray*)&quant163_zero, 0 };
const TfArray<4, int> tensor_dimension164 = { 4, { 1,4,4,96 } };
const TfArray<1, float> quant164_scale = { 1, { 0.012451561167836189, } };
const TfArray<1, int> quant164_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant164 = { (TfLiteFloatArray*)&quant164_scale, (TfLiteIntArray*)&quant164_zero, 0 };
const TfArray<4, int> tensor_dimension165 = { 4, { 1,5,5,96 } };
const TfArray<1, float> quant165_scale = { 1, { 0.012451561167836189, } };
const TfArray<1, int> quant165_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant165 = { (TfLiteFloatArray*)&quant165_scale, (TfLiteIntArray*)&quant165_zero, 0 };
const TfArray<4, int> tensor_dimension166 = { 4, { 1,2,2,96 } };
const TfArray<1, float> quant166_scale = { 1, { 0.014976934529840946, } };
const TfArray<1, int> quant166_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant166 = { (TfLiteFloatArray*)&quant166_scale, (TfLiteIntArray*)&quant166_zero, 0 };
const TfArray<4, int> tensor_dimension167 = { 4, { 1,2,2,16 } };
const TfArray<1, float> quant167_scale = { 1, { 0.024465490132570267, } };
const TfArray<1, int> quant167_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant167 = { (TfLiteFloatArray*)&quant167_scale, (TfLiteIntArray*)&quant167_zero, 0 };
const TfArray<4, int> tensor_dimension168 = { 4, { 1,2,2,96 } };
const TfArray<1, float> quant168_scale = { 1, { 0.010566283948719501, } };
const TfArray<1, int> quant168_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant168 = { (TfLiteFloatArray*)&quant168_scale, (TfLiteIntArray*)&quant168_zero, 0 };
const TfArray<4, int> tensor_dimension169 = { 4, { 1,2,2,96 } };
const TfArray<1, float> quant169_scale = { 1, { 0.011949624866247177, } };
const TfArray<1, int> quant169_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant169 = { (TfLiteFloatArray*)&quant169_scale, (TfLiteIntArray*)&quant169_zero, 0 };
const TfArray<4, int> tensor_dimension170 = { 4, { 1,2,2,16 } };
const TfArray<1, float> quant170_scale = { 1, { 0.0089869741350412369, } };
const TfArray<1, int> quant170_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant170 = { (TfLiteFloatArray*)&quant170_scale, (TfLiteIntArray*)&quant170_zero, 0 };
const TfArray<4, int> tensor_dimension171 = { 4, { 1,2,2,16 } };
const TfArray<1, float> quant171_scale = { 1, { 0.025087457150220871, } };
const TfArray<1, int> quant171_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant171 = { (TfLiteFloatArray*)&quant171_scale, (TfLiteIntArray*)&quant171_zero, 0 };
const TfArray<4, int> tensor_dimension172 = { 4, { 1,2,2,96 } };
const TfArray<1, float> quant172_scale = { 1, { 0.013679733499884605, } };
const TfArray<1, int> quant172_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant172 = { (TfLiteFloatArray*)&quant172_scale, (TfLiteIntArray*)&quant172_zero, 0 };
const TfArray<4, int> tensor_dimension173 = { 4, { 1,2,2,96 } };
const TfArray<1, float> quant173_scale = { 1, { 0.020874535664916039, } };
const TfArray<1, int> quant173_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant173 = { (TfLiteFloatArray*)&quant173_scale, (TfLiteIntArray*)&quant173_zero, 0 };
const TfArray<4, int> tensor_dimension174 = { 4, { 1,2,2,16 } };
const TfArray<1, float> quant174_scale = { 1, { 0.0089462073519825935, } };
const TfArray<1, int> quant174_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant174 = { (TfLiteFloatArray*)&quant174_scale, (TfLiteIntArray*)&quant174_zero, 0 };
const TfArray<4, int> tensor_dimension175 = { 4, { 1,2,2,16 } };
const TfArray<1, float> quant175_scale = { 1, { 0.025201499462127686, } };
const TfArray<1, int> quant175_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant175 = { (TfLiteFloatArray*)&quant175_scale, (TfLiteIntArray*)&quant175_zero, 0 };
const TfArray<4, int> tensor_dimension176 = { 4, { 1,2,2,96 } };
const TfArray<1, float> quant176_scale = { 1, { 0.011180038563907146, } };
const TfArray<1, int> quant176_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant176 = { (TfLiteFloatArray*)&quant176_scale, (TfLiteIntArray*)&quant176_zero, 0 };
const TfArray<4, int> tensor_dimension177 = { 4, { 1,2,2,96 } };
const TfArray<1, float> quant177_scale = { 1, { 0.013066523708403111, } };
const TfArray<1, int> quant177_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant177 = { (TfLiteFloatArray*)&quant177_scale, (TfLiteIntArray*)&quant177_zero, 0 };
const TfArray<4, int> tensor_dimension178 = { 4, { 1,2,2,32 } };
const TfArray<1, float> quant178_scale = { 1, { 0.051065120846033096, } };
const TfArray<1, int> quant178_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant178 = { (TfLiteFloatArray*)&quant178_scale, (TfLiteIntArray*)&quant178_zero, 0 };
const TfArray<4, int> tensor_dimension179 = { 4, { 1,2,2,1280 } };
const TfArray<1, float> quant179_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant179_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant179 = { (TfLiteFloatArray*)&quant179_scale, (TfLiteIntArray*)&quant179_zero, 0 };
const TfArray<2, int> tensor_dimension180 = { 2, { 4,1280 } };
const TfArray<1, float> quant180_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant180_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant180 = { (TfLiteFloatArray*)&quant180_scale, (TfLiteIntArray*)&quant180_zero, 0 };
const TfArray<2, int> tensor_dimension181 = { 2, { 4,10 } };
const TfArray<1, float> quant181_scale = { 1, { 0.02441045269370079, } };
const TfArray<1, int> quant181_zero = { 1, { 26 } };
const TfLiteAffineQuantization quant181 = { (TfLiteFloatArray*)&quant181_scale, (TfLiteIntArray*)&quant181_zero, 0 };
const TfArray<2, int> tensor_dimension182 = { 2, { 1,40 } };
const TfArray<1, float> quant182_scale = { 1, { 0.02441045269370079, } };
const TfArray<1, int> quant182_zero = { 1, { 26 } };
const TfLiteAffineQuantization quant182 = { (TfLiteFloatArray*)&quant182_scale, (TfLiteIntArray*)&quant182_zero, 0 };
const TfArray<2, int> tensor_dimension183 = { 2, { 1,2 } };
const TfArray<1, float> quant183_scale = { 1, { 0.013407166115939617, } };
const TfArray<1, int> quant183_zero = { 1, { -31 } };
const TfLiteAffineQuantization quant183 = { (TfLiteFloatArray*)&quant183_scale, (TfLiteIntArray*)&quant183_zero, 0 };
const TfArray<2, int> tensor_dimension184 = { 2, { 1,2 } };
const TfArray<1, float> quant184_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant184_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant184 = { (TfLiteFloatArray*)&quant184_scale, (TfLiteIntArray*)&quant184_zero, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,2 } };
const TfArray<1, int> outputs0 = { 1, { 112 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingValid, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 112,43,6 } };
const TfArray<1, int> outputs1 = { 1, { 113 } };
const TfLiteDepthwiseConvParams opdata2 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 113,78,35 } };
const TfArray<1, int> outputs2 = { 1, { 114 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 114,44,79 } };
const TfArray<1, int> outputs3 = { 1, { 115 } };
const TfLiteAddParams opdata4 = { kTfLiteActNone };
const TfArray<2, int> inputs4 = { 2, { 113,115 } };
const TfArray<1, int> outputs4 = { 1, { 116 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 116,45,13 } };
const TfArray<1, int> outputs5 = { 1, { 117 } };
const TfArray<2, int> inputs6 = { 2, { 117,2 } };
const TfArray<1, int> outputs6 = { 1, { 118 } };
const TfLiteDepthwiseConvParams opdata7 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 118,80,21 } };
const TfArray<1, int> outputs7 = { 1, { 119 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 119,46,81 } };
const TfArray<1, int> outputs8 = { 1, { 120 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 120,47,32 } };
const TfArray<1, int> outputs9 = { 1, { 121 } };
const TfLiteDepthwiseConvParams opdata10 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 121,82,33 } };
const TfArray<1, int> outputs10 = { 1, { 122 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 122,48,83 } };
const TfArray<1, int> outputs11 = { 1, { 123 } };
const TfLiteAddParams opdata12 = { kTfLiteActNone };
const TfArray<2, int> inputs12 = { 2, { 120,123 } };
const TfArray<1, int> outputs12 = { 1, { 124 } };
const TfLiteConvParams opdata13 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 124,49,34 } };
const TfArray<1, int> outputs13 = { 1, { 125 } };
const TfArray<2, int> inputs14 = { 2, { 125,2 } };
const TfArray<1, int> outputs14 = { 1, { 126 } };
const TfLiteDepthwiseConvParams opdata15 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 126,84,36 } };
const TfArray<1, int> outputs15 = { 1, { 127 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 127,50,85 } };
const TfArray<1, int> outputs16 = { 1, { 128 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 128,51,37 } };
const TfArray<1, int> outputs17 = { 1, { 129 } };
const TfLiteDepthwiseConvParams opdata18 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 129,86,38 } };
const TfArray<1, int> outputs18 = { 1, { 130 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 130,52,87 } };
const TfArray<1, int> outputs19 = { 1, { 131 } };
const TfLiteAddParams opdata20 = { kTfLiteActNone };
const TfArray<2, int> inputs20 = { 2, { 128,131 } };
const TfArray<1, int> outputs20 = { 1, { 132 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 132,53,39 } };
const TfArray<1, int> outputs21 = { 1, { 133 } };
const TfLiteDepthwiseConvParams opdata22 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 133,88,40 } };
const TfArray<1, int> outputs22 = { 1, { 134 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 134,54,89 } };
const TfArray<1, int> outputs23 = { 1, { 135 } };
const TfLiteAddParams opdata24 = { kTfLiteActNone };
const TfArray<2, int> inputs24 = { 2, { 132,135 } };
const TfArray<1, int> outputs24 = { 1, { 136 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 136,55,41 } };
const TfArray<1, int> outputs25 = { 1, { 137 } };
const TfArray<2, int> inputs26 = { 2, { 137,2 } };
const TfArray<1, int> outputs26 = { 1, { 138 } };
const TfLiteDepthwiseConvParams opdata27 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs27 = { 3, { 138,90,42 } };
const TfArray<1, int> outputs27 = { 1, { 139 } };
const TfLiteConvParams opdata28 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs28 = { 3, { 139,56,91 } };
const TfArray<1, int> outputs28 = { 1, { 140 } };
const TfLiteConvParams opdata29 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs29 = { 3, { 140,57,7 } };
const TfArray<1, int> outputs29 = { 1, { 141 } };
const TfLiteDepthwiseConvParams opdata30 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs30 = { 3, { 141,92,8 } };
const TfArray<1, int> outputs30 = { 1, { 142 } };
const TfLiteConvParams opdata31 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs31 = { 3, { 142,58,93 } };
const TfArray<1, int> outputs31 = { 1, { 143 } };
const TfLiteAddParams opdata32 = { kTfLiteActNone };
const TfArray<2, int> inputs32 = { 2, { 140,143 } };
const TfArray<1, int> outputs32 = { 1, { 144 } };
const TfLiteConvParams opdata33 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs33 = { 3, { 144,59,9 } };
const TfArray<1, int> outputs33 = { 1, { 145 } };
const TfLiteDepthwiseConvParams opdata34 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs34 = { 3, { 145,94,10 } };
const TfArray<1, int> outputs34 = { 1, { 146 } };
const TfLiteConvParams opdata35 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs35 = { 3, { 146,60,95 } };
const TfArray<1, int> outputs35 = { 1, { 147 } };
const TfLiteAddParams opdata36 = { kTfLiteActNone };
const TfArray<2, int> inputs36 = { 2, { 144,147 } };
const TfArray<1, int> outputs36 = { 1, { 148 } };
const TfLiteConvParams opdata37 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs37 = { 3, { 148,61,11 } };
const TfArray<1, int> outputs37 = { 1, { 149 } };
const TfLiteDepthwiseConvParams opdata38 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs38 = { 3, { 149,96,12 } };
const TfArray<1, int> outputs38 = { 1, { 150 } };
const TfLiteConvParams opdata39 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs39 = { 3, { 150,62,97 } };
const TfArray<1, int> outputs39 = { 1, { 151 } };
const TfLiteAddParams opdata40 = { kTfLiteActNone };
const TfArray<2, int> inputs40 = { 2, { 148,151 } };
const TfArray<1, int> outputs40 = { 1, { 152 } };
const TfLiteConvParams opdata41 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs41 = { 3, { 152,63,14 } };
const TfArray<1, int> outputs41 = { 1, { 153 } };
const TfLiteDepthwiseConvParams opdata42 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs42 = { 3, { 153,98,15 } };
const TfArray<1, int> outputs42 = { 1, { 154 } };
const TfLiteConvParams opdata43 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs43 = { 3, { 154,64,99 } };
const TfArray<1, int> outputs43 = { 1, { 155 } };
const TfLiteConvParams opdata44 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs44 = { 3, { 155,65,16 } };
const TfArray<1, int> outputs44 = { 1, { 156 } };
const TfLiteDepthwiseConvParams opdata45 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs45 = { 3, { 156,100,17 } };
const TfArray<1, int> outputs45 = { 1, { 157 } };
const TfLiteConvParams opdata46 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs46 = { 3, { 157,66,101 } };
const TfArray<1, int> outputs46 = { 1, { 158 } };
const TfLiteAddParams opdata47 = { kTfLiteActNone };
const TfArray<2, int> inputs47 = { 2, { 155,158 } };
const TfArray<1, int> outputs47 = { 1, { 159 } };
const TfLiteConvParams opdata48 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs48 = { 3, { 159,67,18 } };
const TfArray<1, int> outputs48 = { 1, { 160 } };
const TfLiteDepthwiseConvParams opdata49 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs49 = { 3, { 160,102,19 } };
const TfArray<1, int> outputs49 = { 1, { 161 } };
const TfLiteConvParams opdata50 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs50 = { 3, { 161,68,103 } };
const TfArray<1, int> outputs50 = { 1, { 162 } };
const TfLiteAddParams opdata51 = { kTfLiteActNone };
const TfArray<2, int> inputs51 = { 2, { 159,162 } };
const TfArray<1, int> outputs51 = { 1, { 163 } };
const TfLiteConvParams opdata52 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs52 = { 3, { 163,69,20 } };
const TfArray<1, int> outputs52 = { 1, { 164 } };
const TfArray<2, int> inputs53 = { 2, { 164,2 } };
const TfArray<1, int> outputs53 = { 1, { 165 } };
const TfLiteDepthwiseConvParams opdata54 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs54 = { 3, { 165,104,22 } };
const TfArray<1, int> outputs54 = { 1, { 166 } };
const TfLiteConvParams opdata55 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs55 = { 3, { 166,70,105 } };
const TfArray<1, int> outputs55 = { 1, { 167 } };
const TfLiteConvParams opdata56 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs56 = { 3, { 167,71,23 } };
const TfArray<1, int> outputs56 = { 1, { 168 } };
const TfLiteDepthwiseConvParams opdata57 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs57 = { 3, { 168,106,24 } };
const TfArray<1, int> outputs57 = { 1, { 169 } };
const TfLiteConvParams opdata58 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs58 = { 3, { 169,72,107 } };
const TfArray<1, int> outputs58 = { 1, { 170 } };
const TfLiteAddParams opdata59 = { kTfLiteActNone };
const TfArray<2, int> inputs59 = { 2, { 167,170 } };
const TfArray<1, int> outputs59 = { 1, { 171 } };
const TfLiteConvParams opdata60 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs60 = { 3, { 171,73,25 } };
const TfArray<1, int> outputs60 = { 1, { 172 } };
const TfLiteDepthwiseConvParams opdata61 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs61 = { 3, { 172,108,26 } };
const TfArray<1, int> outputs61 = { 1, { 173 } };
const TfLiteConvParams opdata62 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs62 = { 3, { 173,74,109 } };
const TfArray<1, int> outputs62 = { 1, { 174 } };
const TfLiteAddParams opdata63 = { kTfLiteActNone };
const TfArray<2, int> inputs63 = { 2, { 171,174 } };
const TfArray<1, int> outputs63 = { 1, { 175 } };
const TfLiteConvParams opdata64 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs64 = { 3, { 175,75,27 } };
const TfArray<1, int> outputs64 = { 1, { 176 } };
const TfLiteDepthwiseConvParams opdata65 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs65 = { 3, { 176,110,28 } };
const TfArray<1, int> outputs65 = { 1, { 177 } };
const TfLiteConvParams opdata66 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs66 = { 3, { 177,76,111 } };
const TfArray<1, int> outputs66 = { 1, { 178 } };
const TfLiteConvParams opdata67 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs67 = { 3, { 178,77,29 } };
const TfArray<1, int> outputs67 = { 1, { 179 } };
const TfLiteReshapeParams opdata68 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs68 = { 2, { 179,5 } };
const TfArray<1, int> outputs68 = { 1, { 180 } };
const TfLiteFullyConnectedParams opdata69 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs69 = { 3, { 180,30,3 } };
const TfArray<1, int> outputs69 = { 1, { 181 } };
const TfLiteReshapeParams opdata70 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs70 = { 2, { 181,1 } };
const TfArray<1, int> outputs70 = { 1, { 182 } };
const TfLiteFullyConnectedParams opdata71 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs71 = { 3, { 182,31,4 } };
const TfArray<1, int> outputs71 = { 1, { 183 } };
const TfLiteSoftmaxParams opdata72 = { 1 };
const TfArray<1, int> inputs72 = { 1, { 183 } };
const TfArray<1, int> outputs72 = { 1, { 184 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4240, (TfLiteIntArray*)&tensor_dimension0, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 5120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data44, (TfLiteIntArray*)&tensor_dimension44, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data45, (TfLiteIntArray*)&tensor_dimension45, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data46, (TfLiteIntArray*)&tensor_dimension46, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data47, (TfLiteIntArray*)&tensor_dimension47, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data48, (TfLiteIntArray*)&tensor_dimension48, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data49, (TfLiteIntArray*)&tensor_dimension49, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data50, (TfLiteIntArray*)&tensor_dimension50, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data51, (TfLiteIntArray*)&tensor_dimension51, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data52, (TfLiteIntArray*)&tensor_dimension52, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data53, (TfLiteIntArray*)&tensor_dimension53, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data54, (TfLiteIntArray*)&tensor_dimension54, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data55, (TfLiteIntArray*)&tensor_dimension55, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data56, (TfLiteIntArray*)&tensor_dimension56, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data57, (TfLiteIntArray*)&tensor_dimension57, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data58, (TfLiteIntArray*)&tensor_dimension58, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data59, (TfLiteIntArray*)&tensor_dimension59, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data60, (TfLiteIntArray*)&tensor_dimension60, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data61, (TfLiteIntArray*)&tensor_dimension61, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data62, (TfLiteIntArray*)&tensor_dimension62, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data63, (TfLiteIntArray*)&tensor_dimension63, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data64, (TfLiteIntArray*)&tensor_dimension64, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data65, (TfLiteIntArray*)&tensor_dimension65, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data66, (TfLiteIntArray*)&tensor_dimension66, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data67, (TfLiteIntArray*)&tensor_dimension67, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data68, (TfLiteIntArray*)&tensor_dimension68, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data69, (TfLiteIntArray*)&tensor_dimension69, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data70, (TfLiteIntArray*)&tensor_dimension70, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data71, (TfLiteIntArray*)&tensor_dimension71, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant71))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data72, (TfLiteIntArray*)&tensor_dimension72, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant72))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data73, (TfLiteIntArray*)&tensor_dimension73, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant73))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data74, (TfLiteIntArray*)&tensor_dimension74, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant74))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data75, (TfLiteIntArray*)&tensor_dimension75, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant75))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data76, (TfLiteIntArray*)&tensor_dimension76, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant76))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data77, (TfLiteIntArray*)&tensor_dimension77, 40960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant77))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data78, (TfLiteIntArray*)&tensor_dimension78, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant78))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data79, (TfLiteIntArray*)&tensor_dimension79, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant79))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data80, (TfLiteIntArray*)&tensor_dimension80, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant80))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data81, (TfLiteIntArray*)&tensor_dimension81, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant81))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data82, (TfLiteIntArray*)&tensor_dimension82, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant82))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data83, (TfLiteIntArray*)&tensor_dimension83, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant83))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data84, (TfLiteIntArray*)&tensor_dimension84, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant84))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data85, (TfLiteIntArray*)&tensor_dimension85, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant85))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data86, (TfLiteIntArray*)&tensor_dimension86, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant86))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data87, (TfLiteIntArray*)&tensor_dimension87, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant87))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data88, (TfLiteIntArray*)&tensor_dimension88, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant88))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data89, (TfLiteIntArray*)&tensor_dimension89, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant89))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data90, (TfLiteIntArray*)&tensor_dimension90, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant90))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data91, (TfLiteIntArray*)&tensor_dimension91, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant91))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data92, (TfLiteIntArray*)&tensor_dimension92, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant92))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data93, (TfLiteIntArray*)&tensor_dimension93, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant93))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data94, (TfLiteIntArray*)&tensor_dimension94, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant94))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data95, (TfLiteIntArray*)&tensor_dimension95, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant95))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data96, (TfLiteIntArray*)&tensor_dimension96, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant96))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data97, (TfLiteIntArray*)&tensor_dimension97, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant97))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data98, (TfLiteIntArray*)&tensor_dimension98, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant98))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data99, (TfLiteIntArray*)&tensor_dimension99, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant99))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data100, (TfLiteIntArray*)&tensor_dimension100, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant100))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data101, (TfLiteIntArray*)&tensor_dimension101, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant101))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data102, (TfLiteIntArray*)&tensor_dimension102, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant102))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data103, (TfLiteIntArray*)&tensor_dimension103, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant103))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data104, (TfLiteIntArray*)&tensor_dimension104, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant104))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data105, (TfLiteIntArray*)&tensor_dimension105, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant105))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data106, (TfLiteIntArray*)&tensor_dimension106, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant106))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data107, (TfLiteIntArray*)&tensor_dimension107, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant107))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data108, (TfLiteIntArray*)&tensor_dimension108, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant108))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data109, (TfLiteIntArray*)&tensor_dimension109, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant109))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data110, (TfLiteIntArray*)&tensor_dimension110, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant110))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data111, (TfLiteIntArray*)&tensor_dimension111, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant111))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension112, 4225, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant112))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16384, (TfLiteIntArray*)&tensor_dimension113, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant113))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension114, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant114))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8192, (TfLiteIntArray*)&tensor_dimension115, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant115))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension116, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant116))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 52272, (TfLiteIntArray*)&tensor_dimension117, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant117))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension118, 52272, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant118))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 52272, (TfLiteIntArray*)&tensor_dimension119, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant119))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 24576, (TfLiteIntArray*)&tensor_dimension120, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant120))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 12288, (TfLiteIntArray*)&tensor_dimension121, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant121))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension122, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant122))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 12288, (TfLiteIntArray*)&tensor_dimension123, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant123))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension124, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant124))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13872, (TfLiteIntArray*)&tensor_dimension125, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant125))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension126, 13872, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant126))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13872, (TfLiteIntArray*)&tensor_dimension127, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant127))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6656, (TfLiteIntArray*)&tensor_dimension128, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant128))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3072, (TfLiteIntArray*)&tensor_dimension129, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant129))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension130, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant130))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3072, (TfLiteIntArray*)&tensor_dimension131, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant131))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6144, (TfLiteIntArray*)&tensor_dimension132, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant132))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3072, (TfLiteIntArray*)&tensor_dimension133, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant133))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension134, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant134))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3072, (TfLiteIntArray*)&tensor_dimension135, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant135))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension136, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant136))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3888, (TfLiteIntArray*)&tensor_dimension137, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant137))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension138, 3888, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant138))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3888, (TfLiteIntArray*)&tensor_dimension139, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant139))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1536, (TfLiteIntArray*)&tensor_dimension140, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant140))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 768, (TfLiteIntArray*)&tensor_dimension141, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant141))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension142, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant142))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 768, (TfLiteIntArray*)&tensor_dimension143, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant143))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1664, (TfLiteIntArray*)&tensor_dimension144, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant144))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 768, (TfLiteIntArray*)&tensor_dimension145, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant145))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension146, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant146))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 768, (TfLiteIntArray*)&tensor_dimension147, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant147))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1536, (TfLiteIntArray*)&tensor_dimension148, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant148))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 768, (TfLiteIntArray*)&tensor_dimension149, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant149))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension150, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant150))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 768, (TfLiteIntArray*)&tensor_dimension151, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant151))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension152, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant152))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 768, (TfLiteIntArray*)&tensor_dimension153, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant153))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension154, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant154))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3328, (TfLiteIntArray*)&tensor_dimension155, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant155))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1536, (TfLiteIntArray*)&tensor_dimension156, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant156))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension157, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant157))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1536, (TfLiteIntArray*)&tensor_dimension158, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant158))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3072, (TfLiteIntArray*)&tensor_dimension159, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant159))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1536, (TfLiteIntArray*)&tensor_dimension160, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant160))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension161, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant161))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1536, (TfLiteIntArray*)&tensor_dimension162, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant162))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension163, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant163))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2400, (TfLiteIntArray*)&tensor_dimension164, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant164))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension165, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant165))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2400, (TfLiteIntArray*)&tensor_dimension166, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant166))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 832, (TfLiteIntArray*)&tensor_dimension167, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant167))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension168, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant168))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension169, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant169))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension170, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant170))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 768, (TfLiteIntArray*)&tensor_dimension171, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant171))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension172, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant172))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension173, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant173))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension174, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant174))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension175, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant175))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension176, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant176))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension177, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant177))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension178, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant178))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5120, (TfLiteIntArray*)&tensor_dimension179, 5120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant179))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension180, 5120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant180))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5120, (TfLiteIntArray*)&tensor_dimension181, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant181))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension182, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant182))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension183, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant183))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension184, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant184))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_ADD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_ADD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_ADD, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_ADD, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs27, (TfLiteIntArray*)&outputs27, const_cast<void*>(static_cast<const void*>(&opdata27)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs28, (TfLiteIntArray*)&outputs28, const_cast<void*>(static_cast<const void*>(&opdata28)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs29, (TfLiteIntArray*)&outputs29, const_cast<void*>(static_cast<const void*>(&opdata29)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs30, (TfLiteIntArray*)&outputs30, const_cast<void*>(static_cast<const void*>(&opdata30)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs31, (TfLiteIntArray*)&outputs31, const_cast<void*>(static_cast<const void*>(&opdata31)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs32, (TfLiteIntArray*)&outputs32, const_cast<void*>(static_cast<const void*>(&opdata32)), OP_ADD, },
  { (TfLiteIntArray*)&inputs33, (TfLiteIntArray*)&outputs33, const_cast<void*>(static_cast<const void*>(&opdata33)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs34, (TfLiteIntArray*)&outputs34, const_cast<void*>(static_cast<const void*>(&opdata34)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs35, (TfLiteIntArray*)&outputs35, const_cast<void*>(static_cast<const void*>(&opdata35)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs36, (TfLiteIntArray*)&outputs36, const_cast<void*>(static_cast<const void*>(&opdata36)), OP_ADD, },
  { (TfLiteIntArray*)&inputs37, (TfLiteIntArray*)&outputs37, const_cast<void*>(static_cast<const void*>(&opdata37)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs38, (TfLiteIntArray*)&outputs38, const_cast<void*>(static_cast<const void*>(&opdata38)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs39, (TfLiteIntArray*)&outputs39, const_cast<void*>(static_cast<const void*>(&opdata39)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs40, (TfLiteIntArray*)&outputs40, const_cast<void*>(static_cast<const void*>(&opdata40)), OP_ADD, },
  { (TfLiteIntArray*)&inputs41, (TfLiteIntArray*)&outputs41, const_cast<void*>(static_cast<const void*>(&opdata41)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs42, (TfLiteIntArray*)&outputs42, const_cast<void*>(static_cast<const void*>(&opdata42)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs43, (TfLiteIntArray*)&outputs43, const_cast<void*>(static_cast<const void*>(&opdata43)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs44, (TfLiteIntArray*)&outputs44, const_cast<void*>(static_cast<const void*>(&opdata44)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs45, (TfLiteIntArray*)&outputs45, const_cast<void*>(static_cast<const void*>(&opdata45)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs46, (TfLiteIntArray*)&outputs46, const_cast<void*>(static_cast<const void*>(&opdata46)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs47, (TfLiteIntArray*)&outputs47, const_cast<void*>(static_cast<const void*>(&opdata47)), OP_ADD, },
  { (TfLiteIntArray*)&inputs48, (TfLiteIntArray*)&outputs48, const_cast<void*>(static_cast<const void*>(&opdata48)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs49, (TfLiteIntArray*)&outputs49, const_cast<void*>(static_cast<const void*>(&opdata49)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs50, (TfLiteIntArray*)&outputs50, const_cast<void*>(static_cast<const void*>(&opdata50)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs51, (TfLiteIntArray*)&outputs51, const_cast<void*>(static_cast<const void*>(&opdata51)), OP_ADD, },
  { (TfLiteIntArray*)&inputs52, (TfLiteIntArray*)&outputs52, const_cast<void*>(static_cast<const void*>(&opdata52)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs53, (TfLiteIntArray*)&outputs53, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs54, (TfLiteIntArray*)&outputs54, const_cast<void*>(static_cast<const void*>(&opdata54)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs55, (TfLiteIntArray*)&outputs55, const_cast<void*>(static_cast<const void*>(&opdata55)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs56, (TfLiteIntArray*)&outputs56, const_cast<void*>(static_cast<const void*>(&opdata56)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs57, (TfLiteIntArray*)&outputs57, const_cast<void*>(static_cast<const void*>(&opdata57)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs58, (TfLiteIntArray*)&outputs58, const_cast<void*>(static_cast<const void*>(&opdata58)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs59, (TfLiteIntArray*)&outputs59, const_cast<void*>(static_cast<const void*>(&opdata59)), OP_ADD, },
  { (TfLiteIntArray*)&inputs60, (TfLiteIntArray*)&outputs60, const_cast<void*>(static_cast<const void*>(&opdata60)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs61, (TfLiteIntArray*)&outputs61, const_cast<void*>(static_cast<const void*>(&opdata61)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs62, (TfLiteIntArray*)&outputs62, const_cast<void*>(static_cast<const void*>(&opdata62)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs63, (TfLiteIntArray*)&outputs63, const_cast<void*>(static_cast<const void*>(&opdata63)), OP_ADD, },
  { (TfLiteIntArray*)&inputs64, (TfLiteIntArray*)&outputs64, const_cast<void*>(static_cast<const void*>(&opdata64)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs65, (TfLiteIntArray*)&outputs65, const_cast<void*>(static_cast<const void*>(&opdata65)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs66, (TfLiteIntArray*)&outputs66, const_cast<void*>(static_cast<const void*>(&opdata66)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs67, (TfLiteIntArray*)&outputs67, const_cast<void*>(static_cast<const void*>(&opdata67)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs68, (TfLiteIntArray*)&outputs68, const_cast<void*>(static_cast<const void*>(&opdata68)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs69, (TfLiteIntArray*)&outputs69, const_cast<void*>(static_cast<const void*>(&opdata69)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs70, (TfLiteIntArray*)&outputs70, const_cast<void*>(static_cast<const void*>(&opdata70)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs71, (TfLiteIntArray*)&outputs71, const_cast<void*>(static_cast<const void*>(&opdata71)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs72, (TfLiteIntArray*)&outputs72, const_cast<void*>(static_cast<const void*>(&opdata72)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 185;
  for(size_t i = 0; i < 185; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_PAD] = *tflite::ops::micro::Register_PAD();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = *tflite::ops::micro::Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = *tflite::ops::micro::Register_ADD();
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 73; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 73; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  184, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 73; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
