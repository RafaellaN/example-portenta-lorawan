/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 20.01.2021 15:07:25

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 132896;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_PAD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[185];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[73];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,64,64,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 40, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data3[10] = { 201, 167, 9, 43, -25, -37, 15, 148, -136, 202, };
const TfArray<1, int> tensor_dimension3 = { 1, { 10 } };
const TfArray<1, float> quant3_scale = { 1, { 1.7205573385581374e-05, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[2] = { -3, 3, };
const TfArray<1, int> tensor_dimension4 = { 1, { 2 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00012754299677908421, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int32_t tensor_data5[2] = { 4, 1280, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data6[8] = { 39162, 29007, 1562, 56214, 3401, 23897, 89589, -7220, };
const TfArray<1, int> tensor_dimension6 = { 1, { 8 } };
const TfArray<8, float> quant6_scale = { 8, { 6.3853767642285675e-05, 7.4868614319711924e-05, 8.2704791566357017e-05, 4.9248865252593532e-05, 0.0001240224955836311, 0.00010339350410504267, 5.8254167925042566e-06, 1.6714864614186808e-05, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int32_t tensor_data7[48] = { -774, 5029, 161, 45827, -579, -8004, -70, 3227, -2356, 5756, 41, 406, 7618, -911, -604, 4506, 2726, 2366, 5347, 16119, -3047, 1217, 6523, 326, 9158, 5079, 2836, 718, -1137, 9108, 5756, 1965, 6408, -265, 2313, 5476, 7441, 4631, 3221, 4703, 5949, -561, 5975, 280, -1072, 3652, 10124, 747, };
const TfArray<1, int> tensor_dimension7 = { 1, { 48 } };
const TfArray<48, float> quant7_scale = { 48, { 0.00019173600594513118, 0.0001119479929911904, 0.00029281672323122621, 2.1388983441283926e-05, 0.00029373954748734832, 7.7849683293607086e-05, 0.00028900001780129969, 0.00015207001706585288, 0.00020256709831301123, 8.7523381807841361e-05, 0.00022598083887714893, 0.00030826195143163204, 8.3916063886135817e-05, 0.00011935827933484688, 0.00026277030701749027, 0.00016497528122272342, 0.00011514205107232556, 0.00024955513072200119, 0.00015048126806505024, 5.0181926781078801e-05, 8.2471553469076753e-05, 0.00024569092784076929, 8.5939347627572715e-05, 7.6750126027036458e-05, 9.3157606897875667e-05, 7.4572897574398667e-05, 7.2581249696668237e-05, 0.00028912982088513672, 0.00018012423242907971, 9.7855241619981825e-05, 0.00010725876927608624, 9.142326598521322e-05, 8.0047226219903678e-05, 0.00015204920782707632, 0.0002026887668762356, 0.00013802852481603622, 6.5873071434907615e-05, 8.6994004959706217e-05, 9.9859724286943674e-05, 0.00014675647253170609, 0.00013951986329630017, 0.00020450052397791296, 0.00012720029917545617, 0.00029738814919255674, 0.0001699319836916402, 0.00014325822121463716, 8.6182015365920961e-05, 0.00036185569479130208, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[48] = { -748, 599, 9175, -3198, -167, -628, -2945, 2161, -404, 2059, -2877, 17826, -2941, 10978, -1716, 1642, -860, 3222, 1541, 13924, 1203, -2369, 8163, -768, -407, 1457, 1143, -4846, -3717, -513, 15187, 8591, -3233, -3571, -1672, -14, 3096, 19436, 16377, 4734, 2139, -4232, 204, 13584, -2964, 29789, 18904, -6481, };
const TfArray<1, int> tensor_dimension8 = { 1, { 48 } };
const TfArray<48, float> quant8_scale = { 48, { 0.00015295136836357415, 0.00011793274461524561, 7.7624536061193794e-05, 0.00023941023391671479, 0.00015462828741874546, 0.0002625242923386395, 0.00010790927626658231, 8.3610510046128184e-05, 0.00011554556840565056, 0.00016157662321347743, 6.6985259763896465e-05, 4.2103700252482668e-05, 0.0003203044761903584, 9.0884837845806032e-05, 5.7716672017704695e-05, 0.00020250838133506477, 0.00011683337652357295, 7.621237455168739e-05, 0.00018536916468292475, 0.00020794442389160395, 0.00016877746384125203, 9.0911773440893739e-05, 0.00013853357813786715, 0.00054871058091521263, 0.00013503560330718756, 0.00019250100012868643, 0.00060158991254866123, 0.00015362103295046836, 0.00010694108641473576, 0.00017099594697356224, 6.2399383750744164e-05, 0.00020908351871185005, 0.00016133356257341802, 0.00015408771287184209, 0.00014533700596075505, 0.00011091254418715835, 0.00019257589883636683, 0.0001016933674691245, 7.8328281233552843e-05, 8.2042177382390946e-05, 9.4037488452158868e-05, 0.0002192142273997888, 0.00010322914749849588, 6.5698950493242592e-05, 0.0001593353517819196, 3.8182224670890719e-05, 0.00013645848957821727, 8.2047612522728741e-05, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int32_t tensor_data9[48] = { 447, -1431, 3423, 1832, 3346, 2064, -2032, 4905, -1688, 1118, 8125, 11694, 3057, 1402, 15899, 1108, 7052, 1419, 601, 6919, 566, 8942, 1599, 4595, 2581, 4580, 6219, 3542, -967, 2071, -785, 5654, 1894, 4555, -6047, 9922, -107, 12562, 898, -3450, 4624, 3270, 3913, 294, 15702, 2124, 2037, 735, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.00010137201752513647, 0.0001590242754900828, 0.000167080681421794, 0.00019159959629178047, 8.7492611783090979e-05, 0.00024589957320131361, 0.00010998463403666392, 0.00015614854055456817, 0.00013910868437960744, 0.00023645980400033295, 0.00010848858801182359, 7.6467083999887109e-05, 0.00016252418572548777, 0.00027567034703679383, 3.9799506339477375e-05, 0.00014009323786012828, 8.197251008823514e-05, 0.00012943524052388966, 0.00010672357166185975, 0.00012232216249685735, 0.00023087408044375479, 7.0865811721887439e-05, 0.00022524059750139713, 0.00018252796144224703, 0.00024384271819144487, 0.00015878303383942693, 0.00012085609341738746, 0.00012114546552766114, 7.2156093665398657e-05, 0.00023397564655169845, 0.00017372373258695006, 6.9757377787027508e-05, 0.00019540758512448519, 0.00014075887156650424, 6.3615916587878019e-05, 6.7272827436681837e-05, 0.00014562979049514979, 4.4342443288769573e-05, 0.00025108494446612895, 0.00012369708565529436, 0.00015732389874756336, 0.00020804349333047867, 0.00018111016834154725, 0.00018387471209280193, 4.8833811888471246e-05, 0.00018481008009985089, 0.0001340501185040921, 0.00012069122021785006, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int32_t tensor_data10[48] = { -4088, -4897, 3603, 6859, -183, -8880, 5268, -4175, 644, -3360, -268, -3751, -3540, -1890, 24507, -5508, 3152, 1823, -8012, -1652, -553, -7142, -401, 394, 22611, -1061, -2802, -9372, -6700, -848, -2973, 1554, -318, -6565, 608, 9678, -13670, 14535, 1151, 7938, 2160, -2941, -3247, -280, -1039, -107, 2444, -195, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.00016819385928101838, 0.00019239411631133407, 0.00010046597890323028, 0.00014410466246772557, 0.00011737809836631641, 6.1541810282506049e-05, 0.00014398513303603977, 0.00016172087634913623, 6.9630819780286402e-05, 8.8417720689903945e-05, 0.00013577517529483885, 0.00022416701540350914, 9.0502748207654804e-05, 0.00013323106395546347, 0.00013427509111352265, 0.00014571820793207735, 0.00013962922093924135, 0.00011716139852069318, 7.8202043368946761e-05, 8.3055303548462689e-05, 0.00015738290676381439, 0.00013076912728138268, 7.2807881224434823e-05, 0.0001586422004038468, 6.5095009631477296e-05, 0.00010789473162731156, 0.00013247145398054272, 9.1156143753323704e-05, 0.00017925660358741879, 0.00016166064597200602, 7.34852728783153e-05, 0.00016368839715141803, 0.00010180794197367504, 9.7961266874335706e-05, 0.00027125139604322612, 0.00011177963460795581, 6.4388463215436786e-05, 0.00010970014409394935, 7.5127776653971523e-05, 0.00013857509475201368, 0.00015213998267427087, 9.7340795036870986e-05, 0.00016611734463367611, 0.00010230388579657301, 0.00020061702525708824, 7.4395626143086702e-05, 5.1690207328647375e-05, 0.0002477783418726176, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int32_t tensor_data11[48] = { 2409, 3939, -1456, 3626, 14804, -1331, 6845, 833, -687, 3229, 9, 8751, 15940, 12455, 10843, 4100, 706, 5215, 1468, 3574, 442, 3351, 139, 935, -341, 2120, 976, 859, 2344, 741, 2402, 1188, 2885, 2445, 6759, 9867, 3821, 6476, 760, 1451, 128, 2894, 5227, 1461, 2843, 3429, 332, -354, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 6.6576445533428341e-05, 7.7822413004469126e-05, 0.00025425411877222359, 0.0001775350101524964, 6.4788713643793017e-05, 0.00017518164531793445, 0.00010190981265623122, 0.00011744656512746587, 0.00021611747797578573, 0.00021623697830364108, 0.00011425834964029491, 8.4594830696005374e-05, 6.1980259488336742e-05, 4.5753102313028648e-05, 8.2139886217191815e-05, 0.00018280807125847787, 0.00032476312480866909, 0.00015102437464520335, 0.00010318718705093488, 0.00012494655675254762, 0.00018837008974514902, 0.00019732979126274586, 0.00017547330935485661, 0.00017585656314622611, 0.00026080329553224146, 0.00017489992023911327, 0.00019787755445577204, 5.7960776757681742e-05, 9.251816663891077e-05, 0.00017819166532717645, 0.00012417932157404721, 0.00019885138317476958, 9.0226814791094512e-05, 0.00016205993597395718, 0.00012658565538004041, 9.5039948064368218e-05, 0.00011048041778849438, 6.3527193560730666e-05, 8.9177650806959718e-05, 0.00026366865495219827, 0.00017160899005830288, 0.00022699583496432751, 6.3546183810103685e-05, 0.00017596634279470891, 0.00011151561193400994, 0.00017417344497516751, 0.00027888116892427206, 0.00032513021142221987, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(8) int32_t tensor_data12[48] = { -312, -517, -4927, -13577, 10117, -3717, 1039, -3776, -3825, -2251, -1193, -4103, 24879, 2024, 29267, -3470, 8235, 19023, -4081, 7752, 7808, -1433, 400, -3205, 2076, -5934, 17391, 6003, -4476, -6958, 193, 13826, 16558, 17270, 17265, 25724, 15532, -3512, -3511, 13591, -30, 34024, -5202, -4468, -4746, -8085, -12889, -9705, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 0.0003072069666814059, 0.00046908261720091105, 0.00018434104276821017, 7.5664022006094456e-05, 0.00020486545690800995, 0.00021235138410702348, 0.00016578139911871403, 0.00012564528151415288, 0.00010207056766375899, 9.6942596428561956e-05, 0.00015923635510262102, 0.00025736357201822102, 0.00015953679394442588, 0.00031235491042025387, 8.3491861005313694e-05, 0.00015846520545892417, 5.6051507272059098e-05, 6.9180612626951188e-05, 0.00016941109788604081, 0.00010076582839246839, 5.9536399930948392e-05, 0.00010749712964752689, 0.00023156593670137227, 0.00017800851492211223, 4.3600368371699005e-05, 0.00015978743613231927, 6.7495275288820267e-05, 0.00037355590029619634, 0.00013210154429543763, 0.00016488018445670605, 6.0491296608233824e-05, 7.0667454565409571e-05, 0.00013028635294176638, 6.456084520323202e-05, 9.4967108452692628e-05, 0.00010212021879851818, 8.2848899182863533e-05, 0.00021223237854428589, 0.00019577291095629334, 4.3323252612026408e-05, 0.00013603444676846266, 4.6512901462847367e-05, 0.00020154952653683722, 7.0680071075912565e-05, 0.00012574267748277634, 7.0113375841174275e-05, 0.0001065919641405344, 9.2641013907268643e-05, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(8) int32_t tensor_data13[48] = { 18869, 7825, 24368, 3975, 6698, 7175, -7291, 7869, 4511, -4681, -5411, 9324, -5296, -8117, 13397, 2742, -3481, 3852, -3147, 5424, 123, 7257, 3238, -4222, -653, -8095, 4684, -6119, 6786, 13248, 252, 865, 12878, 18212, 14615, 7880, 9016, -8041, 1187, 7774, -1429, -7533, 6946, 2840, 448, -11367, -20303, 3861, };
const TfArray<1, int> tensor_dimension13 = { 1, { 48 } };
const TfArray<48, float> quant13_scale = { 48, { 0.00024069487699307501, 0.00035158998798578978, 4.8287041863659397e-05, 0.00042587309144437313, 0.00029507302679121494, 0.00025948925758711994, 0.00067857420071959496, 0.00040967584936879575, 0.00053973187459632754, 0.00031261454569175839, 8.6319676483981311e-05, 0.00022257806267589331, 0.00028553116135299206, 0.00057518115499988198, 0.00031452154507860541, 0.00093724485486745834, 0.00056454906007274985, 0.00018379869288764894, 0.00063800037605687976, 0.00090934365289285779, 0.00048937328392639756, 0.0002395507472101599, 6.6051470639649779e-05, 0.0002896861988119781, 0.00072441564407199621, 0.00051592616364359856, 0.00051608507055789232, 0.00023792525462340564, 0.0004776127461809665, 0.00042319914791733027, 0.00017957326781470329, 0.00032818099134601653, 0.00044948258437216282, 0.00015924796753097326, 0.00021121148893143982, 0.00021315687627065927, 0.00031195612973533571, 0.00057171296793967485, 0.00028271818882785738, 0.00037023008917458355, 0.00081952649634331465, 0.00037783791776746511, 0.00050099246436730027, 0.00013961494551040232, 0.00075427419506013393, 0.00027667623362503946, 0.00033817838993854821, 0.00024881449644453824, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(8) int32_t tensor_data14[48] = { 6406, 10475, 2033, 4462, 3082, 4481, 2331, -2048, -710, 1391, 7254, 1930, 474, -28, 12942, -2915, 1613, 4323, 5671, 77, 4725, 4039, 11534, 3357, 6704, 141, -109, 8275, 2490, 326, 695, 2309, 3674, 3375, 11565, 5841, 533, 6205, 161947, 4312, 3795, 4783, 1790, -960, 3247, 9852, 3476, -944, };
const TfArray<1, int> tensor_dimension14 = { 1, { 48 } };
const TfArray<48, float> quant14_scale = { 48, { 0.00010701898281695321, 0.00010963516251649708, 0.00025692660710774362, 9.9137119832448661e-05, 0.00010775871487567201, 8.2327431300655007e-05, 0.00027113055693916976, 7.5375690357759595e-05, 9.2759531980846077e-05, 0.00017992671928368509, 0.00012765529390890151, 0.00018155536963604391, 0.00031684106215834618, 7.9875491792336106e-05, 5.7813293096842244e-05, 8.0990379501599818e-05, 0.00031226823921315372, 0.00018135938444174826, 0.00015292433090507984, 0.00022343920136336237, 0.00012038335989927873, 0.00013525038957595825, 8.3662860561162233e-05, 0.00010756775009213015, 9.4403469120152295e-05, 0.00022149471624288708, 0.00033140761661343277, 6.4102649048436433e-05, 0.00013211778423283249, 0.00015090251690708101, 0.00031960042542777956, 0.00014617825218010694, 0.0001228727342095226, 6.2249637267086655e-05, 8.9205175754614174e-05, 0.00011798550258390605, 0.00026006440748460591, 9.8263415566179901e-05, 8.0881536632659845e-06, 0.00016637354565318674, 9.294140909332782e-05, 0.00011636834824457765, 0.00025203681434504688, 0.00029868516139686108, 0.0002079586120089516, 5.9377151046646759e-05, 0.00013568787835538387, 0.00030102560413070023, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(8) int32_t tensor_data15[48] = { 24538, -4660, 643, -2485, 13501, 12374, -2321, 6679, 1035, -4845, -9579, 41420, 13192, -1693, 7774, -500, 479, -1777, 7814, -128, 17805, 12773, -3098, -310, -1214, -264, 32638, -3152, 19098, -34, 36170, -497, 18764, -1055, -144, -322, 6, 943, 4851, 20179, -3655, -4082, 7332, -2717, 22140, -6857, 119, 4688, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 6.2920458731241524e-05, 0.000121219054562971, 6.1932616517879069e-05, 0.0002288495161337778, 7.1138521889224648e-05, 0.00014445290435105562, 0.00010940385254798457, 0.00016868433158379048, 0.00024416839005425572, 0.00021973550610709935, 0.00020105006115045398, 3.2049858418758959e-05, 5.0226830353494734e-05, 0.00020483507250901312, 0.00033411645563319325, 0.00020563924044836313, 7.2527953307144344e-05, 0.00012974662240594625, 0.00014126551104709506, 0.00010907532850978896, 8.0350422649644315e-05, 0.00013566140842158347, 0.00018655827443581074, 0.00029095931677147746, 0.0002046460285782814, 0.00011268235539318994, 4.4253622036194429e-05, 0.00026348518440499902, 8.7050342699512839e-05, 0.00013360707089304924, 4.3256419303361326e-05, 0.00014044011186342686, 9.0214911324437708e-05, 0.00026837835321202874, 0.00023557957320008427, 0.00017255455895792693, 6.0911730543011799e-05, 9.3220463895704597e-05, 0.00038374355062842369, 6.8071996793150902e-05, 0.00030805476126261055, 0.0001989556330954656, 5.1788774726446718e-05, 7.4759831477422267e-05, 5.9668702306225896e-05, 0.00030372480978257954, 0.00010524532262934372, 4.9591908464208245e-05, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(8) int32_t tensor_data16[96] = { 3807, 5615, -452, -1694, 4731, 5490, 4541, -2047, 3083, 7353, -11733, 4561, 1507, 10344, 8752, 3038, 10338, -3, 2013, -2589, 6077, 8981, 133, -4420, 5610, 2527, 4485, 1921, 2636, 5224, 4159, 4174, 3153, 5619, 2379, -2195, 10737, 14247, 8708, -231, 6073, 2017, 6418, 4941, 1159, -1502, -577, 3068, 2482, 3259, -3701, 722, 3967, 4279, -657, 3426, 6988, 6602, 1496, -197, 5574, 3069, -3928, 863, 3752, 1717, -2423, 4619, 6027, 3118, -2719, 717, 4823, -672, 1694, 3603, 2996, 4586, 6655, 3502, 9031, 4138, 2524, 780, 12880, 8991, 977, 1049, 2280, -2541, 4253, 16293, 9514, 2522, 6001, 4889, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 9.7746298706624657e-05, 6.496631249319762e-05, 0.00012991632684133947, 0.00027637035236693919, 6.3839885115157813e-05, 0.0001087099954020232, 9.3182017735671252e-05, 5.7642002502689138e-05, 0.00014924413699191064, 0.00011313776485621929, 5.485509245772846e-05, 8.8093103840947151e-05, 0.00015751000319141895, 7.5568415923044086e-05, 6.2802384491078556e-05, 0.00018429303599987179, 6.1098515288904309e-05, 9.015510295284912e-05, 7.6143754995428026e-05, 7.9342637036461383e-05, 7.7717879321426153e-05, 7.9344114055857062e-05, 0.00016262994904536754, 0.00011734964937204495, 0.0001018334151012823, 0.00018204819934908301, 9.844177111517638e-05, 8.2512095104902983e-05, 0.00011794594320235774, 0.00015600179904140532, 0.00010880226182052866, 9.2672824393957853e-05, 0.0001301546290051192, 9.2416186816990376e-05, 6.7202279751654714e-05, 6.7585395299829543e-05, 6.300389941316098e-05, 5.3398489399114624e-05, 5.4578333219978958e-05, 8.1927908468060195e-05, 0.0001264259044546634, 8.7412307038903236e-05, 0.00012673900346271694, 8.3868355432059616e-05, 0.00027490899083204567, 0.00010916517931036651, 9.308277367381379e-05, 6.2988183344714344e-05, 9.9269389465916902e-05, 9.2474168923217803e-05, 9.1800720838364214e-05, 0.00010210146137978882, 8.4689425420947373e-05, 8.9994122390635312e-05, 0.00010661176929716021, 8.3939012256450951e-05, 0.00011348976840963587, 7.589061715407297e-05, 8.4446517575997859e-05, 0.00010165932326344773, 6.23521045781672e-05, 0.00011592210648814216, 8.4930601587984711e-05, 0.00015771703328937292, 6.6744578361976892e-05, 0.00012912058446090668, 7.5824071245733649e-05, 0.00010863720672205091, 6.3875449995975941e-05, 0.00021073760581202805, 6.3721498008817434e-05, 0.0001332580141024664, 8.6307241872418672e-05, 7.0584246714133769e-05, 0.00013765947369392961, 9.6402123745065182e-05, 9.9738812423311174e-05, 6.8003479100298136e-05, 8.3578277553897351e-05, 0.00012686467380262911, 9.3075948825571686e-05, 0.00010689049668144435, 0.0001740999286994338, 9.0039851784240454e-05, 7.6607779192272574e-05, 9.619569027563557e-05, 0.00015216745669022202, 0.00021042441949248314, 6.7471744841895998e-05, 0.00010536305489949882, 0.00015172662097029388, 3.9753645978635177e-05, 4.8212616093223915e-05, 0.00016775769472587854, 0.00010500264761503786, 6.4412648498546332e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(8) int32_t tensor_data17[96] = { 14386, 219, -715, -85, 19868, -131, -136, -1090, -9, -2209, -1275, 19874, -9979, 3766, 1141, 34458, 2097, -4095, 10781, -3631, -7400, -457, 760, 11, -158, -2358, 99, 9212, -2805, -205, -134, -10459, -11564, 1092, -1124, 350, -1650, -610, 30576, 3022, 3485, -4973, 663, -80, 19992, -20, 508, 16464, 13730, 20759, -2328, -112, 15385, -10634, -802, 14540, -835, 604, -4236, 8020, -4245, -1226, 1853, -3856, -124, 16774, -1658, -339, -2811, -772, -1433, -2980, -663, 9418, 14607, -11972, 2451, -9725, -14565, -322, 81, -330, -112, 490, 1085, 1413, 14, 15572, 295, -72, -40, -392, -6959, -102, -14068, 14326, };
const TfArray<1, int> tensor_dimension17 = { 1, { 96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.00010729055065894499, 0.00022326171165332198, 0.00015672283188905567, 7.4656541983131319e-05, 7.0666559622623026e-05, 0.0002772125881165266, 0.00015447592886630446, 0.00020207282796036452, 0.00011615408584475517, 0.00012911108206026256, 0.00056904065422713757, 6.5887885284610093e-05, 6.8179455411154777e-05, 0.00011246271606069058, 0.00011818462371593341, 2.692626731004566e-05, 0.00013541644148062915, 0.00023830153804738075, 0.00011592367081902921, 0.00016952201258391142, 0.00010464253864483908, 0.00018078227003570646, 4.4630207412410527e-05, 0.00026651160442270339, 0.00014246652426663786, 7.9013618233148009e-05, 0.00019302759028505534, 6.3050058088265359e-05, 0.000123064179206267, 0.0001117268402595073, 0.00012562290066853166, 0.00011722416093107313, 9.7559517598710954e-05, 0.00017037717043422163, 0.00020561387646012008, 0.00019521286594681442, 0.00019687978783622384, 0.0001489837741246447, 5.2273517212597653e-05, 0.00035704454057849944, 0.00010327802010579035, 7.0486639742739499e-05, 0.00010680329432943836, 0.00015928168431855738, 4.8422978579765186e-05, 0.00012878369307145476, 9.5708659500814974e-05, 0.00011839124636026099, 7.1417569415643811e-05, 7.4194584158249199e-05, 0.00010568326979409903, 6.9532201450783759e-05, 7.1935683081392199e-05, 7.4215291533619165e-05, 0.00022287415049504489, 5.5440617870772257e-05, 0.00012201954086776823, 0.0001607164740562439, 7.5539341196417809e-05, 0.00010610217577777803, 0.00029293788247741759, 8.8253356807399541e-05, 0.00015407452883664519, 5.7762623328017071e-05, 0.00025260404800064862, 7.5160125561524183e-05, 0.00033913672086782753, 0.00012820400297641754, 0.00018278395873494446, 0.00011104188160970807, 0.00030671223066747189, 8.1691141531337053e-05, 0.00015133483975660056, 7.8391465649474412e-05, 5.6551019952166826e-05, 9.1348090791143477e-05, 0.00017984083388000727, 0.0001213186260429211, 0.00012750696623697877, 0.00012428882473614067, 0.00018293010361958295, 0.00014030803868081421, 8.691080438438803e-05, 0.00030030871857888997, 0.00017665473569650203, 0.00014250080857891589, 0.00016230613982770592, 4.7169382014544681e-05, 0.00017484283307567239, 0.00017292442498728633, 0.00012007487384835258, 0.00026078536757268012, 0.00014929944882169366, 6.4656982431188226e-05, 9.7057032689917833e-05, 8.6771207861602306e-05, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(8) int32_t tensor_data18[96] = { 851, 4666, 3127, 4044, 709, -4468, 2858, 6523, -8763, 897, -802, 10565, -3120, 3775, 3679, 266, 4298, 3549, -455, 3205, 3424, 1996, 8083, 1865, 20204, -1299, 1655, 6349, -1745, 3758, 6919, -48, -145, 871, 5499, 4277, 6636, 6224, 5690, 2777, 1414, 4775, -2786, 10210, -322, 2325, 4164, 2878, 856, 4391, 738, 3575, 1194, -1645, 3708, -283, -1719, 1322, 2325, 346, -2961, 2822, 5115, -1162, 1648, 3086, 481, 2999, 874, 1958, 4272, 13026, 562, 616, 888, 5673, 4991, -2539, 9786, 5416, 1028, 1113, 2614, -2689, 8001, 2778, -1997, 3364, -853, -5231, 3336, -3223, 2489, 631, -778, 3116, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00015215194434858859, 9.0686145995277911e-05, 7.8572134952992201e-05, 7.9751182056497782e-05, 9.9834520369768143e-05, 6.5754720708355308e-05, 0.0001010425912681967, 8.9843342720996588e-05, 5.0746832130244002e-05, 8.2640770415309817e-05, 0.0001424873189534992, 8.336800237884745e-05, 7.6005751907359809e-05, 6.6433814936317503e-05, 0.00012568246165756136, 0.00027676278841681778, 6.395084346877411e-05, 0.00016164868429768831, 0.00010677389218471944, 0.00010336857667425647, 0.00010778834257507697, 6.9038869696669281e-05, 7.5500662205740809e-05, 0.00021632861171383411, 4.3830223148688674e-05, 7.5472242315299809e-05, 0.00011175670806551352, 9.8708405857905746e-05, 0.00015469442587345839, 6.2181177781894803e-05, 9.0664310846477747e-05, 0.00029236011323519051, 8.7663844169583172e-05, 0.00012936320854350924, 8.9833563833963126e-05, 6.8242406996432692e-05, 9.2548340035136789e-05, 0.00012371609045658261, 9.4108065241016448e-05, 9.0843313955701888e-05, 0.0001143014887929894, 0.00010808897786773741, 4.9543086788617074e-05, 6.0158865380799398e-05, 0.00012491144298110157, 0.00019301650172565132, 0.0001346726348856464, 0.00013702342403121293, 8.9720408141147345e-05, 0.00011416779307182878, 0.00016109566786326468, 0.00011376170004950836, 6.3695653807371855e-05, 0.0001277302362723276, 0.00014099680993240327, 9.6474279416725039e-05, 0.00014750058471690863, 7.1073664003051817e-05, 0.00011971937783528119, 0.00013824107008986175, 0.00012584078649524599, 0.00021141389152035117, 9.9400662293191999e-05, 9.3616821686737239e-05, 0.0001785073836799711, 0.00012553372653201222, 0.00010587007272988558, 0.00011107769387308508, 0.00013150913582649082, 8.5187326476443559e-05, 6.2648679886478931e-05, 6.1216596805024892e-05, 0.00011031935719074681, 0.00023328907263930887, 0.00011662927136057988, 9.7259900940116495e-05, 7.488744449801743e-05, 0.00010051175195258111, 9.0550536697264761e-05, 9.2966780357528478e-05, 0.0001051257859217003, 7.8426310210488737e-05, 0.00011115238885395229, 0.00016447584494017065, 4.8904377763392404e-05, 0.00010550682054599747, 0.0001275974209420383, 7.0072863309178501e-05, 6.7176857555750757e-05, 9.7295764135196805e-05, 7.9003642895258963e-05, 0.00013836061407346278, 0.00016475887969136238, 0.00019377470016479492, 5.8716210332931951e-05, 8.5552739619743079e-05, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(8) int32_t tensor_data19[96] = { 17751, 11706, -2237, -9095, 101, -311, -918, -2741, -1333, -3854, 2759, -36, 8587, 27063, 5840, 33057, 2048, 296, 1342, 16147, -5551, 860, -1038, -4906, -1130, -12310, 21731, -19900, -32, 47, -7842, 18156, -479, 2802, -4515, -125, -1766, -1386, 3108, 114, -1989, -14942, 5079, -392, 787, 723, 11024, 292, 14037, 146, -666, 16062, -5901, 1131, -19185, -7414, -5890, -12, 13107, -534, -8699, 165, 8194, 13932, 829, -9646, -4474, -1149, -361, -6093, -66, 4824, 8027, -7256, -221, -72, -3073, 12460, -931, 24566, -5789, -245, -856, -1775, 16142, 10188, 46, 7874, 805, 2907, -5058, -34, -120, -2794, 35, -61, };
const TfArray<1, int> tensor_dimension19 = { 1, { 96 } };
const TfArray<96, float> quant19_scale = { 96, { 4.5043329009786248e-05, 9.8175492894370109e-05, 8.9318484242539853e-05, 9.7282834758516401e-05, 0.00021098511933814734, 0.00029172044014558196, 0.00016364305338356644, 9.4369985163211823e-05, 0.00039667441160418093, 0.00013221819244790822, 7.9350269515998662e-05, 0.00013545587717089802, 0.00015825568698346615, 7.2467992140445858e-05, 0.00010222280980087817, 3.2534830097574741e-05, 0.00010551659943303093, 9.2639675131067634e-05, 0.00015521822206210345, 7.0145710196811706e-05, 6.3199098804034293e-05, 0.00015074810653459281, 0.00014110363554209471, 0.00014720069884788245, 0.0001893978042062372, 0.00012040511501254514, 5.0877231842605397e-05, 7.728869968559593e-05, 0.00013392258551903069, 0.00023390923161059618, 0.00011324843217153102, 4.096092379768379e-05, 0.00012676347978413105, 0.00012973669799976051, 0.00014727555389981717, 0.00018089382501784712, 0.00013906278763897717, 0.00010607015428831801, 9.9467615655157715e-05, 0.00019091938156634569, 0.00010029017721535638, 9.0431924036238343e-05, 0.00022798673307988793, 0.00015796217485330999, 0.00018215100863017142, 0.00010527472477406263, 7.3077280831057578e-05, 0.00020677689462900162, 7.4018207669723779e-05, 0.00014017539797350764, 0.00011797845218097791, 8.3150822320021689e-05, 0.00019951452850364149, 0.00020854582544416189, 7.263562292791903e-05, 0.0002461110707372427, 9.4210394308902323e-05, 0.00021026612375862896, 5.9258465626044199e-05, 0.00012458280252758414, 0.0001077898996300064, 8.894842176232487e-05, 0.00021460160496644676, 0.00010556319466559216, 6.2104452808853239e-05, 0.00010663874127203599, 0.00012934453843627125, 8.4947358118370175e-05, 0.00016052489809226245, 6.569308607140556e-05, 0.00024555102572776377, 0.00013196672080084682, 0.00012419129780028015, 3.6440258554648608e-05, 0.00015788734890520573, 0.00024691323051229119, 6.5516636823303998e-05, 0.00011306394299026579, 0.00012334766506683081, 0.00011148457997478545, 0.00010423637286294252, 0.00027326139388605952, 9.2739217507187277e-05, 7.5910880696028471e-05, 8.9003449829760939e-05, 0.00011064993304898962, 0.00020664047042373568, 0.00023321191838476807, 0.00025322200963273644, 0.00029747866210527718, 9.3075228505767882e-05, 9.0198605903424323e-05, 0.00013626446889247745, 9.8441312729846686e-05, 0.00020087901793885976, 0.00011527372407726943, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(8) int32_t tensor_data20[96] = { 4352, 12013, 817, 1466, 1796, 648, 5898, 1736, 9646, 800, 5706, -5237, 4735, 6508, 69, -2933, 6977, 4198, 7036, -867, 9147, 2678, 5582, 3330, 1443, 3905, 1212, 4629, 622, 3878, 3368, 1078, 3607, 3257, 592, 151, 6053, -420, 1677, 286, 2679, 2963, 5270, 4220, 11229, 4925, 9089, 5978, -339, 5478, 6731, 520, -4062, 2035, 4710, 1233, 2527, 8495, 3020, -2395, 240, 7864, 1523, 7579, 3310, 433, -5314, 8612, 4406, 5352, 11215, -829, 1783, 11494, -825, 4148, 2208, 1111, 4163, 9393, -2894, -1766, 5561, 1034, 4588, 2505, 283, 5541, 6850, 2588, 10352, 2650, 4224, 1066, 3584, 1201, };
const TfArray<1, int> tensor_dimension20 = { 1, { 96 } };
const TfArray<96, float> quant20_scale = { 96, { 7.1499176556244493e-05, 5.0926941185025498e-05, 0.00010064968228107318, 0.0001124947884818539, 9.1589463409036398e-05, 8.0127319961320609e-05, 8.274855645140633e-05, 6.1442180594895035e-05, 5.860294186277315e-05, 0.00017414180911146104, 9.7796015325002372e-05, 5.9420890465844423e-05, 5.856197458342649e-05, 8.4084043919574469e-05, 0.00011981830903096125, 9.0748995717149228e-05, 6.1185615777503699e-05, 0.00010897108586505055, 6.8417837610468268e-05, 8.1615784438326955e-05, 6.2183149566408247e-05, 8.9003115135710686e-05, 6.8348439526744187e-05, 0.000122183992061764, 0.00013666655286215246, 0.0001068919082172215, 6.8272827775217593e-05, 5.6470264098607004e-05, 0.00012141653860453516, 0.00010267260222462937, 8.8414155470672995e-05, 7.5052303145639598e-05, 6.6976608650293201e-05, 8.751715358812362e-05, 5.689404861186631e-05, 9.7672062111087143e-05, 8.2137761637568474e-05, 0.00014478355296887457, 0.00015506151248700917, 0.00012428271293174475, 0.00010610219032969326, 0.00014815072063356638, 7.1748749178368598e-05, 8.0137840996030718e-05, 6.6249602241441607e-05, 0.00011910950706806034, 6.1139500758145005e-05, 8.061835978878662e-05, 0.00012851851352024823, 6.4723666582722217e-05, 6.9099274696782231e-05, 0.00012933019024785608, 8.4083156252745539e-05, 0.00013481281348504126, 0.00011059294774895534, 8.8936729298438877e-05, 9.2775037046521902e-05, 5.5734530178597197e-05, 8.4198298281989992e-05, 9.2102403868921101e-05, 0.00010523237142479047, 8.3267259469721466e-05, 0.00014557402755599469, 8.5949439380783588e-05, 0.00010082278458867222, 9.7197182185482234e-05, 7.1190872404258698e-05, 5.5288128351094201e-05, 8.227127545978874e-05, 7.0139518356882036e-05, 5.3480111091630533e-05, 6.8607580033130944e-05, 0.00011082193668698892, 5.4925229051150382e-05, 9.1558387794066221e-05, 9.1473411885090172e-05, 0.00014275468129198998, 0.00013542169472202659, 8.6059430032037199e-05, 7.000903133302927e-05, 8.7393294961657375e-05, 0.00015352203627116978, 8.9101864432450384e-05, 0.00016819770098663867, 7.6987773354630917e-05, 0.00011672119580907747, 8.3729290054179728e-05, 0.00010797307186294347, 7.2371767600998282e-05, 6.7622044298332185e-05, 4.8497829993721098e-05, 0.00011667481157928705, 8.356933540198952e-05, 0.00010531390580581501, 0.00010412939445814118, 9.8887423519045115e-05, } };
const TfArray<96, int> quant20_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(8) int32_t tensor_data21[48] = { 226, 9013, 899, -66, 115, 84, 7548, 6808, -343, -7665, -180, 488, 6000, 3868, 23333, 19291, -70, -1876, 1630, 6530, 18852, -24, -417, -344, 4316, -48, 3968, 20638, 6946, 13050, 63, 2325, -1176, -3320, -3451, 252, -15, 44, -151, 3802, 4874, 4539, -6966, 636, 5875, -497, 9923, 23, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.00010454820585437119, 0.00013754631800111383, 0.00058787257876247168, 6.997316813794896e-05, 0.00050391949480399489, 0.00065559922950342298, 0.00015642843209207058, 0.00019240616529714316, 7.0198366302065551e-05, 0.00019383389735594392, 0.00043982395436614752, 0.0002537136897444725, 0.00024226766254287213, 0.00018416284001432359, 5.9018089814344421e-05, 5.5846689065219834e-05, 0.00011203526810277253, 0.00044009112752974033, 6.5097898186650127e-05, 9.2136993771418929e-05, 5.8601955970516428e-05, 0.00051139801507815719, 0.00088911748025566339, 0.00023215166584122926, 5.6290533393621445e-05, 0.0001505247491877526, 9.3636634119320661e-05, 0.00010051007848232985, 0.00015842457651160657, 0.00012313660408835858, 0.00034377444535493851, 0.00021741977252531797, 9.4153867394197732e-05, 0.00023708703520242125, 8.417577191721648e-05, 7.8482589742634445e-05, 0.00027045590104535222, 0.00037217661156319082, 0.00011957568494835868, 0.00021603077766485512, 8.8643180788494647e-05, 0.00023444069665856659, 0.00010810705862240866, 0.00032300269231200218, 8.8510409113951027e-05, 0.0002999853459186852, 0.0001068379933713004, 0.00051624455954879522, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(8) int32_t tensor_data22[96] = { -730, 26652, -10819, 8620, 2572, -12637, -13490, -7829, 27904, 7986, 27141, -9400, 29042, 32048, -173, -7594, -21404, 15907, 25267, 15471, 32961, -12673, -15835, -4433, 5072, -9039, -11224, 14297, -405, 4783, -5750, -9709, 16983, 657, 23, 507, 116, -604, 67, -1049, 17716, 7311, 28923, -10574, 35053, 247, 2176, 17691, 1807, 29321, -111, -4633, -13998, 43490, 325, -4835, 644, 19496, -15357, 4204, -7371, 30098, 261, -24338, 11950, 1964, -8245, -8183, 4295, 17417, 18370, -3451, 150, 14014, 21551, -3068, 18327, 31713, -22975, -8174, -9172, -4540, 24667, -1545, -32305, -20913, -11992, -12558, 20700, 28189, -21068, -3007, 30466, -1329, 127, 881, };
const TfArray<1, int> tensor_dimension22 = { 1, { 96 } };
const TfArray<96, float> quant22_scale = { 96, { 7.1520342316944152e-05, 8.0996403994504362e-05, 7.6945660111960024e-05, 4.2767391278175637e-05, 3.4984259400516748e-05, 8.4477185737341642e-05, 7.4648567533586174e-05, 0.0001096638516173698, 6.0268921515671536e-05, 2.22988091991283e-05, 4.2987998313037679e-05, 0.00012143226922489703, 6.7062923335470259e-05, 5.7102639402728528e-05, 4.0294551581609994e-05, 0.00010562371608102694, 7.7617034548893571e-05, 8.960618288256228e-05, 6.2968341808300465e-05, 7.6587748480960727e-05, 8.1020676589105278e-05, 8.4836137830279768e-05, 7.8839759225957096e-05, 4.8718695325078443e-05, 4.7866527893347666e-05, 5.2021798182977363e-05, 7.1110356657300144e-05, 4.6607099648099393e-05, 2.9014552637818269e-05, 4.744634497910738e-05, 5.6603996199555695e-05, 8.8806693383958191e-05, 0.00011370942957000807, 6.3291961851064116e-05, 0.00018328240548726171, 5.2289771701907739e-05, 7.5358911999501288e-05, 4.562974936561659e-05, 3.6052300856681541e-05, 5.9406738728284836e-05, 4.944236934534274e-05, 5.9144920669496059e-05, 6.0249261878198013e-05, 5.3199932153802365e-05, 8.3288774476386607e-05, 7.9720899520907551e-05, 4.1048522689379752e-05, 7.9895049566403031e-05, 4.5581713493447751e-05, 6.7361957917455584e-05, 9.1109432105440646e-05, 3.9292750443564728e-05, 9.8101714684162289e-05, 2.8199134249007329e-05, 7.5560921686701477e-05, 5.6904191296780482e-05, 4.3040599848609418e-05, 9.3317874416243285e-05, 9.5113064162433147e-05, 4.780747985932976e-05, 4.1983686969615519e-05, 5.6870878324843943e-05, 3.5250850487500429e-05, 6.6763328504748642e-05, 0.00010872263374039903, 6.8006826040800661e-05, 0.00013080959615763277, 9.8658718343358487e-05, 7.0109497755765915e-05, 6.5627536969259381e-05, 8.7342457845807076e-05, 8.6704851128160954e-05, 4.327527858549729e-05, 0.00011469194578239694, 4.4294229155639187e-05, 7.5279422162566334e-05, 3.5035198379773647e-05, 3.3304153475910425e-05, 8.2744838437065482e-05, 7.0789996243547648e-05, 6.5858068410307169e-05, 6.485319318016991e-05, 0.00011025605635950342, 3.3877775422297418e-05, 8.7340253230649978e-05, 4.4556149077834561e-05, 8.4066807175986469e-05, 5.1152292144251987e-05, 5.548298213398084e-05, 5.7796532928477973e-05, 7.992758764885366e-05, 3.9515074604423717e-05, 6.4864812884479761e-05, 5.2869894716423005e-05, 4.5791770389769226e-05, 3.7213678297121078e-05, } };
const TfArray<96, int> quant22_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(8) int32_t tensor_data23[96] = { -4194, 6376, 8143, 6656, 5112, -731, 4280, 11889, 150, 14862, 4106, 1144, 4951, 11601, 1306, 2492, 11319, 183, -4534, 4831, 3449, -886, 3712, 1438, -254, 2069, 14148, 4875, 9901, 2154, 2559, 5464, -2291, 14751, 4402, 12523, 6061, 12311, 3170, 1008, 84, 3652, 5736, 567, 1268, 3140, 10283, 4465, 3931, 11636, 2972, 5051, 2661, 6628, -827, 4339, 11917, 11441, -4130, -3512, -436, 5509, 10376, -3172, 1404, 6106, -96, 175, 24551, -294, 876, 5678, -645, 4408, 1819, 10112, 4913, 8905, 12, 2227, 3917, 1817, 6963, 5495, 7293, 4905, 1566, 5379, 480, 6923, 3873, 2626, 5247, 2878, 1171, 3682, };
const TfArray<1, int> tensor_dimension23 = { 1, { 96 } };
const TfArray<96, float> quant23_scale = { 96, { 4.5896300434833393e-05, 6.3777049945201725e-05, 5.7284883951069787e-05, 4.4415541196940467e-05, 3.7364370655268431e-05, 4.8600322770653293e-05, 5.3553289035335183e-05, 5.3748244681628421e-05, 6.7106935603078455e-05, 5.0719103455776349e-05, 5.8472203818382695e-05, 7.0358677476178855e-05, 8.4231447544880211e-05, 7.1504029619973153e-05, 5.0890630518551916e-05, 8.7479049398098141e-05, 6.2030427216086537e-05, 6.4347725128754973e-05, 8.3440121670719236e-05, 4.8551799409324303e-05, 0.00010776982526294887, 9.4090079073794186e-05, 0.00010576350177871063, 9.0695284598041326e-05, 4.7936668124748394e-05, 8.5932639194652438e-05, 4.1943298128899187e-05, 0.00012581505870912224, 6.6168067860417068e-05, 7.6465563324745744e-05, 8.1710488302633166e-05, 7.3578856245148927e-05, 7.6909789640922099e-05, 6.2709681515116245e-05, 6.7990004026796669e-05, 4.8944384616333991e-05, 5.7745241065276787e-05, 6.5016640292014927e-05, 9.7425843705423176e-05, 8.090152550721541e-05, 0.00010065284732263535, 7.6958858699072152e-05, 6.7918736021965742e-05, 6.0703598137479275e-05, 8.7331725808326155e-05, 9.3133814516477287e-05, 4.5635017158929259e-05, 7.2297902079299092e-05, 0.00010203421697951853, 5.1078317483188584e-05, 6.9648493081331253e-05, 6.9808222178835422e-05, 5.9431495174067095e-05, 5.2917454013368115e-05, 5.5063934269128367e-05, 0.00010152489994652569, 6.1302889662329108e-05, 3.9232581912074238e-05, 5.7285942602902651e-05, 7.6523676398210227e-05, 7.7582815720234066e-05, 0.00010936167382169515, 6.5541535150259733e-05, 4.3886109779123217e-05, 6.0738992033293471e-05, 6.059930456103757e-05, 4.9067806685343385e-05, 5.0853777793236077e-05, 3.1166600820142776e-05, 9.4966853794176131e-05, 7.3441275162622333e-05, 6.1756705690640956e-05, 6.1862512666266412e-05, 7.0958099968265742e-05, 9.0199777332600206e-05, 5.0087248382624239e-05, 5.0946193368872628e-05, 4.1384620999451727e-05, 5.5030486691975966e-05, 9.6834854048211128e-05, 0.00010611240577418357, 6.6301799961365759e-05, 7.5656600529327989e-05, 9.0854504378512502e-05, 7.0075955591164529e-05, 7.9096695117186755e-05, 6.2681450799573213e-05, 8.9852350356522948e-05, 6.0607533669099212e-05, 0.00010134244803339243, 0.00012094381963834167, 6.7297449277248234e-05, 7.2162270953413099e-05, 5.1537099352572113e-05, 5.803433305118233e-05, 7.0780319219920784e-05, } };
const TfArray<96, int> quant23_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(8) int32_t tensor_data24[96] = { -238, -952, 5009, -635, -10427, -1949, -644, -268, -10, 27113, 1348, 25, -55, 1425, 11311, -3763, 776, 3380, -1849, 102, -13112, -10017, -1008, 239, -2173, 1048, 23206, -25060, -51, 1477, -650, 1315, 6238, -3555, -2382, -14179, -3957, -5946, 98, -9202, 5974, -82, -1920, 14589, 928, 1474, -1099, -2464, 614, -8085, 2206, -9143, 143, 16, -920, -1635, -824, -2063, 359, -181, -2335, 2000, -2496, -193, -2180, 10600, -9459, 8643, -7831, -557, 1297, 1230, 40, 633, 5760, -1557, 3801, 801, -5312, -301, 1632, -14027, -722, 11, 445, -3299, 1702, -3694, -2624, -17719, 7152, 12290, -2509, -6161, -4995, -75, };
const TfArray<1, int> tensor_dimension24 = { 1, { 96 } };
const TfArray<96, float> quant24_scale = { 96, { 0.0002129740605596453, 0.00013855993165634573, 0.00019225101277697831, 0.00015564868226647377, 0.00011605356849031523, 0.00013063014193903655, 0.00014356915198732167, 0.00010014925646828488, 0.00013683660654351115, 5.5659751524217427e-05, 0.00012074027472408488, 9.6437033789698035e-05, 0.00015342113329097629, 9.3074238975532353e-05, 0.00012284499825909734, 0.00010413224663352594, 0.00012814845831599087, 0.00015496691048610955, 0.00014940425171516836, 0.00020602589938789606, 6.5683576394803822e-05, 7.636393274879083e-05, 0.00010601158282952383, 8.1884914834517986e-05, 0.00027186938677914441, 0.00017195033433381468, 0.00010019443288911134, 4.6782017307123169e-05, 9.0730965894181281e-05, 0.00015743958647362888, 0.00015864225861150771, 0.0001760738086886704, 0.00016344095638487488, 9.3529619334731251e-05, 0.00017666273924987763, 8.1861231592483819e-05, 0.0001835207367548719, 7.9541649029124528e-05, 8.0800622527021915e-05, 5.2711053285747766e-05, 0.00012553069973364472, 0.00017551713972352445, 0.00012263108510524035, 0.00011736374290194362, 0.00015876209363341331, 9.0616849774960428e-05, 0.00012720350059680641, 0.00018960557645186782, 9.4214236014522612e-05, 0.00011747766984626651, 0.00014451806782744825, 0.00015808343596290797, 0.00018729973817244172, 0.00016812773537822068, 0.00020707478688564152, 0.00018985445785801858, 0.0001047306795953773, 0.00019454459834378213, 0.00016522237274330109, 0.0001680583372944966, 0.00019757820700760931, 4.1551033064024523e-05, 0.00010722869774326682, 0.00027643112116493285, 0.00010491464490769431, 7.3698291089385748e-05, 0.00012553973647300154, 0.00019887831876985729, 0.00012155154399806634, 0.00012770951434504241, 0.0001183362037409097, 0.00017687247600406408, 0.00019037784659303725, 0.00023990448971744627, 9.5543204224668443e-05, 0.00015410187188535929, 0.00027500925352796912, 0.00015042010636534542, 9.274426702177152e-05, 0.00020458761719055474, 0.00010669823677744716, 9.5216244517359883e-05, 0.00010686027235351503, 0.00011733557767001912, 0.00012656938633881509, 9.7746778919827193e-05, 0.00010195675713475794, 9.6679912530817091e-05, 0.00011625554907368496, 7.4045216024387628e-05, 0.00010383934568380937, 0.00013698478869628161, 0.00017775672313291579, 0.00017452065367251635, 0.00018122639448847622, 0.0001424364309059456, } };
const TfArray<96, int> quant24_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(8) int32_t tensor_data25[96] = { -1090, 7822, 7406, 1659, 3779, 3973, 16628, 5884, -2322, 18361, 5167, -439, 1, 3995, -2013, 13577, 1941, 13980, -85, 3298, 5201, 3692, 1442, 4044, -223, 6531, -823, -700, 1616, 1200, 5184, 3713, 1615, -807, 4008, 5951, 1315, 3252, 6204, -66, 4519, 2145, -5733, 13650, -1446, -1718, 2571, 14227, -1282, 7853, -1037, 5475, 2818, 2533, 6811, 5563, 5552, 14737, -4104, -6767, 4732, 5790, 4112, 641, -3306, -7904, 4616, 265, 6161, 3477, -922, 2691, 2754, -93, 5709, 3329, -1928, 1667, -9505, 5015, 3948, -934, 16805, 14575, -13282, -233, 1992, 10134, 3056, 2877, 10409, 2660, 3553, 5753, -2340, -2252, };
const TfArray<1, int> tensor_dimension25 = { 1, { 96 } };
const TfArray<96, float> quant25_scale = { 96, { 5.9630667237797752e-05, 4.8040255933301523e-05, 3.5087676224065945e-05, 0.00011498661478981376, 8.0858029832597822e-05, 6.6668777435552329e-05, 5.2972314733779058e-05, 5.6196313380496576e-05, 5.3953601309331134e-05, 3.9977665437618271e-05, 6.8804562033619732e-05, 9.5892195531632751e-05, 6.9315559812821448e-05, 6.3748339016456157e-05, 4.2720988858491182e-05, 3.8416957977460697e-05, 8.7035012256819755e-05, 4.377592631499283e-05, 6.1582686612382531e-05, 7.4211762694176286e-05, 6.5340696892235428e-05, 5.4386975534725934e-05, 7.6174124842509627e-05, 0.00010971304436679929, 7.7560856880154461e-05, 6.0847389249829575e-05, 4.8311543650925159e-05, 0.00011849202564917505, 7.5813084549736232e-05, 7.7378943387884647e-05, 4.2249590478604659e-05, 7.4493509600870311e-05, 8.147896733134985e-05, 6.9711066316813231e-05, 9.5602103101555258e-05, 5.165364927961491e-05, 4.9096539441961795e-05, 0.00011819748760899529, 7.2858943894971162e-05, 8.3295002696104348e-05, 7.2226284828502685e-05, 6.5422354964539409e-05, 6.9580200943164527e-05, 5.2120063628535718e-05, 6.5810912929009646e-05, 6.1684157117269933e-05, 5.0271970394533128e-05, 3.2857991755008698e-05, 7.4349649366922677e-05, 0.00010067876428365707, 6.6265551140531898e-05, 7.6472482760436833e-05, 0.00010194332571700215, 0.00010795577691169456, 6.1958526202943176e-05, 5.9470497944857925e-05, 5.0038896006299183e-05, 5.3713782108388841e-05, 4.1286541090812534e-05, 5.4635853302897885e-05, 6.0030946769984439e-05, 8.1445032265037298e-05, 0.00012822277494706213, 5.6358781876042485e-05, 5.8646026445785537e-05, 3.005208054673858e-05, 5.8542274928186089e-05, 5.1919734687544405e-05, 4.1959963709814474e-05, 5.1103022997267544e-05, 4.2212654079776257e-05, 4.8035628424258903e-05, 7.5880248914472759e-05, 7.850753900129348e-05, 3.866856059175916e-05, 6.9255707785487175e-05, 0.00012893331586383283, 9.3736474809702486e-05, 3.8857961044413969e-05, 4.5551860239356756e-05, 8.1396981840953231e-05, 0.00014345135423354805, 3.7855246773688123e-05, 4.452894427231513e-05, 2.8534783268696629e-05, 0.00012332259211689234, 7.1977607149165124e-05, 5.7340468629263341e-05, 0.0001208437024615705, 0.00010071071301354095, 4.5289747504284605e-05, 5.2246505219954997e-05, 0.0001001291093416512, 7.9218341852538288e-05, 6.960125028854236e-05, 5.188157592783682e-05, } };
const TfArray<96, int> quant25_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(8) int32_t tensor_data26[96] = { -3274, 5521, 20471, -6870, -2598, -1337, 66, -745, -4939, -1943, 1135, -283, -334, 5548, 10652, 18996, -915, 119, -669, -2589, -1825, 2201, 4623, 497, -2860, 15627, 11765, -5680, 16577, -4020, 72, 448, 6408, -8388, -4622, 5862, 20786, 23384, 1564, 3226, 664, 14833, 8768, 2215, 2154, 4483, 522, -14676, -1078, -27323, -5153, -3162, -18036, 985, -8525, -8573, -13599, -1942, -1382, -1689, -7510, -3515, 14058, -8159, -1990, -9531, -1717, -5478, 1661, -3789, -8099, -608, 1259, 9190, 12704, 329, -7076, -864, -5392, 11929, -2224, 1980, -1313, -25154, -789, 1373, -3690, -4775, -991, -59, 5323, 57, 13747, -13796, 693, 1827, };
const TfArray<1, int> tensor_dimension26 = { 1, { 96 } };
const TfArray<96, float> quant26_scale = { 96, { 0.00012125831563025713, 0.0003121408517472446, 0.00013830448733642697, 8.6964828369673342e-05, 7.8849901910871267e-05, 8.1999685789924115e-05, 9.5550007245037705e-05, 0.00023062690161168575, 0.00015301043458748609, 0.00011151201761094853, 0.00013693975051864982, 9.1353147581685334e-05, 0.00020883763500023633, 9.009236964629963e-05, 0.00013641144323628396, 9.5579365734010935e-05, 8.5783962276764214e-05, 0.00023138312099035829, 0.00013028143439441919, 0.00011299327888991684, 0.0001108285941882059, 9.9686578323598951e-05, 8.7449872808065265e-05, 9.7612479294184595e-05, 0.00012606191739905626, 0.00013267672329675406, 0.00016616322682239115, 9.4009046733845025e-05, 8.8543769379612058e-05, 0.00011474895291030407, 0.00018934556283056736, 0.00018188428657595068, 9.9687335023190826e-05, 0.00019140703079756349, 9.6624018624424934e-05, 0.00034561404027044773, 0.00010021228808909655, 7.1243841375689954e-05, 0.00011237158469157293, 8.6291831394191831e-05, 0.00022108819393906742, 9.6405805379617959e-05, 0.00014966493472456932, 0.00015039961726870388, 0.00012300371599849313, 7.8769960964564234e-05, 0.00013322826998773962, 0.00015021146100480109, 0.00017800689965952188, 6.496996502391994e-05, 0.00014661751629319042, 7.6050950156059116e-05, 7.3436982347629964e-05, 0.00011899527453351766, 0.00016485420928802341, 0.00010750006185844541, 0.00011706987424986437, 9.96190938167274e-05, 0.00022412178805097938, 0.00031322496943175793, 0.0001097442363970913, 8.3687591541092843e-05, 7.0961614255793393e-05, 0.00013077353651169688, 0.00017182109877467155, 0.00018962616741191596, 0.00023872184101492167, 0.00014204511535353959, 0.00018496949633117765, 0.0001299041323363781, 0.00016423883789684623, 0.00014123840082902461, 0.0001316490670433268, 0.00011245375208090991, 7.8335775469895452e-05, 0.0001508357236161828, 0.00010549396392889321, 8.8085194875020534e-05, 0.0001391829428030178, 0.00013529116404242814, 0.00010096499318024144, 0.00013319069694261998, 0.0001124523114413023, 9.0177629317622632e-05, 0.00047384639037773013, 0.00010086018301080912, 0.00014271661348175257, 0.00021041750733274966, 9.5587718533352017e-05, 7.5033603934571147e-05, 0.00013480341294780374, 0.00015409347543027252, 5.9492671425687149e-05, 7.4117881013080478e-05, 8.1166137533728033e-05, 0.00023471665917895734, } };
const TfArray<96, int> quant26_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(8) int32_t tensor_data27[96] = { -7252, 305, -3168, -9362, 3333, 5558, -16204, 10171, 2289, -212, -2783, -6302, -699, -503, 786, 16114, -7298, 7955, 933, 3304, 10259, 6020, 4241, 14513, 1424, 5197, -5893, 6153, 1330, 92, 13408, -3931, 1833, -2609, -242, 8084, 11511, 3405, 6925, 1578, -282, -10349, 2094, -9765, 2202, -5848, -1991, 5083, 309, -5103, 7837, 10685, 24594, -917, 2990, 6489, 12798, 11727, 9293, 3126, -8350, 3305, -6500, 495, 2616, -4367, -3673, -6553, -13271, -1066, 4536, -11789, 4443, 389, -5779, -501, 229, 1810, -2570, 5406, 3711, 5583, 2810, -2729, 13318, -6924, 6377, 5160, 1115, -340, 7906, 998, -1188, 1769, 2630, -2555, };
const TfArray<1, int> tensor_dimension27 = { 1, { 96 } };
const TfArray<96, float> quant27_scale = { 96, { 5.3997897339286283e-05, 1.0224803190794773e-05, 5.1868875743821263e-05, 5.2791343478020281e-05, 8.5550178482662886e-05, 7.2971612098626792e-05, 3.0662453355034813e-05, 7.0069698267616332e-05, 6.8157962232362479e-05, 6.4544641645625234e-05, 9.7836324130184948e-05, 4.4312626414466649e-05, 0.0001461949577787891, 7.5116775406058878e-05, 6.3455896452069283e-05, 4.6182627556845546e-05, 4.8352405428886414e-05, 6.8442008341662586e-05, 0.00011540896230144426, 5.7668450608616695e-05, 3.8402376958401874e-05, 8.1106620200444013e-05, 6.7012515501119196e-05, 3.8231926737353206e-05, 7.4331277573946863e-05, 9.097837028093636e-05, 5.8974987041437998e-05, 7.0514615799766034e-05, 3.5164957807864994e-05, 3.7185789551585913e-05, 4.0737264498602599e-05, 5.2256378694437444e-05, 9.3683192972093821e-06, 0.00010234747605863959, 3.4064723877236247e-05, 4.185294164926745e-05, 4.4201045966474339e-05, 6.3938510720618069e-05, 6.489538645837456e-05, 5.7940833357861266e-05, 5.3181829571258277e-05, 3.0283956220955588e-05, 9.7546420875005424e-05, 4.944145621266216e-05, 0.00012165251246187836, 6.2713523220736533e-05, 8.0919482570607215e-05, 6.4207932155113667e-05, 5.3797008149558678e-05, 4.0957940655061975e-05, 6.3380175561178476e-05, 3.8997113733785227e-05, 3.8337890146067366e-05, 6.0454745835158974e-05, 0.00010731512156780809, 7.6801152317784727e-05, 5.3097697673365474e-05, 3.9636215660721064e-05, 4.4639942643698305e-05, 0.00010435441799927503, 5.6895598390838131e-05, 6.9573186920024455e-05, 3.6605830246116966e-05, 0.00012821744894608855, 3.0403656637645327e-05, 6.831160862930119e-05, 7.3326242272742093e-05, 4.0229962905868888e-05, 3.9938920963322744e-05, 7.9554039984941483e-05, 7.4870018579531461e-05, 4.1937462810892612e-05, 2.554473394411616e-05, 8.2302743976470083e-05, 4.2188552470179275e-05, 7.8215314715635031e-05, 5.7642453612061217e-05, 5.2741575927939266e-05, 0.00010084299719892442, 0.0001139327505370602, 5.4182492021936923e-05, 6.5993699536193162e-05, 5.5665950640104711e-05, 5.7809062127489597e-05, 5.4963926231721416e-05, 5.9903632063651457e-05, 5.6100892834365368e-05, 5.69415460631717e-05, 5.9465179219841957e-05, 5.0833004934247583e-05, 5.3458210459211841e-05, 0.00012278667418286204, 5.9845380746992305e-05, 4.663857544073835e-05, 4.3495590944075957e-05, 4.6609675337094814e-05, } };
const TfArray<96, int> quant27_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(8) int32_t tensor_data28[96] = { -1478, 3122, 11764, -2632, -3868, -486, -4048, -3991, 9737, -6174, 6114, 1180, -4773, -934, -4224, -17812, 15362, -5327, -7497, -1749, -6847, -2781, 21120, 1791, -197, -2048, -3636, 13011, -328, -14693, 10098, -3823, 2334, -2200, 14402, -10714, 4573, -1867, -8384, -7173, 10044, -9771, 21420, -2846, -4870, -2529, -4210, 187, -918, 10218, 299, 10923, 2463, -2205, -2652, -3288, -9464, 14988, 12565, -5605, -2255, -3442, -8918, -6584, 17447, -1883, -2056, -3108, -1760, -4638, 20950, -1637, -10188, 6, -4320, -4513, -14252, 8175, -973, 4172, 12637, 8903, 17802, 5145, 7269, -258, 11949, -9558, 23, 12936, 8380, 9483, 8419, 4343, 10774, 11214, };
const TfArray<1, int> tensor_dimension28 = { 1, { 96 } };
const TfArray<96, float> quant28_scale = { 96, { 0.00023229657381307334, 0.00078519829548895359, 0.00016971405420918018, 0.00019350503862369806, 0.00016861045151017606, 0.00015996434376575053, 0.00019865011563524604, 0.00016416222206316888, 0.00013699021656066179, 0.00012625234376173466, 0.00013199269596952945, 0.00012752710608765483, 5.1561739383032545e-05, 8.7790220277383924e-05, 0.00015255488688126206, 0.0001360070746159181, 0.00015934862312860787, 9.9562712421175092e-05, 8.1733160186558962e-05, 0.00010235446825390682, 0.00016218128439504653, 7.244253356475383e-05, 0.00010392235708422959, 0.00020964418945368379, 0.00015754722699057311, 0.00013484136434271932, 0.00019050162518396974, 0.00012692085874732584, 0.00023332261480391026, 0.00010226231097476557, 0.00014587301120627671, 0.00011467664444353431, 0.0011714694555848837, 0.00020084324933122844, 0.00015738896036054939, 0.00014325192023534328, 0.00015125045320019126, 0.00011558301048353314, 0.00013202907575760037, 0.00018057167471852154, 0.00013509936979971826, 0.00018713207100518048, 0.00010578110959613696, 0.00030556396814063191, 6.1713784816674888e-05, 0.00021314129116944969, 8.1428785051684827e-05, 0.00012320886889938265, 0.00023122120182961226, 0.00019658030942082405, 0.00016669387696310878, 0.00010881714842980728, 0.00021788894082419574, 0.0001758795406203717, 4.5969161874381825e-05, 0.00011560149869183078, 7.9015713708940893e-05, 0.00019530447025317699, 0.00023844558745622635, 0.00014150768402032554, 0.00029413151787593961, 0.00012975053687114269, 0.00018624261429067701, 5.3402058256324381e-05, 0.00020703474001493305, 0.00011901303514605388, 0.00016776545089669526, 0.00026623602025210857, 0.00026133761275559664, 0.00020718027371913195, 0.00010661459964467213, 0.0002645502972882241, 0.00024196543381549418, 0.00011679351155180484, 0.0002621093881316483, 0.00012655486352741718, 9.4122260634321719e-05, 0.00017638254212215543, 9.2789356131106615e-05, 6.2488223193213344e-05, 9.846123430179432e-05, 0.00012964900815859437, 0.00011909068416571245, 0.00013304819003678858, 0.00018082965107169002, 0.00019703044381458312, 0.00011536671809153631, 0.00013470817066263407, 0.00018031522631645203, 0.00015440498827956617, 0.00021756479691248387, 5.5826276366133243e-05, 0.00011731783160939813, 0.00011394244938855991, 0.000189710219274275, 0.00014478167577181011, } };
const TfArray<96, int> quant28_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(8) int32_t tensor_data29[1280] = { -541, -525, -1080, -396, -722, -574, -680, -913, -840, -1108, -176, 195, -611, -1276, 91, -521, -803, -956, -877, 54, -696, -1335, 134, -1169, -825, -838, -957, -388, -946, -970, -820, -441, -571, 244, -770, -977, 13, -988, -508, -565, -625, 37, 36, -927, -459, -1649, -1176, -346, -1422, -847, -805, -606, -1193, -1787, -302, -888, -664, -721, -873, -1568, -1075, -1002, -1224, -343, -394, 40, -456, -108, 33, -443, -871, -647, -128, 57, -887, -684, -642, -304, -242, -869, -625, -29, -565, -1263, -933, -987, -169, -671, -551, -295, -1163, -1826, -868, -1750, -499, 690, -1148, -509, -935, -1, -509, -1293, -747, -1006, -886, -538, -803, -66, -440, -745, -492, -1117, -755, -278, -965, -587, -371, 237, -364, -1159, -905, -514, -1150, -172, -649, -19, -755, -1603, -748, -447, -790, -365, -1362, -25, -953, -479, -1265, -880, 232, -1123, -512, -462, -1170, -1261, -1071, -1469, -664, -242, -705, -875, -23, -581, -472, -1078, -340, -1400, -1031, -17, -690, -1255, -759, -663, 101, -905, -537, -1631, -77, -610, -514, -1147, -340, -648, -712, -357, 375, -562, -460, -1205, -564, -822, -502, -1600, -647, -358, -487, -796, -982, -871, -204, -563, -735, -402, -858, -778, -847, -791, -757, -992, -513, -81, -526, 34, -274, -693, -518, -501, -629, -796, -1102, -423, -506, -1700, 119, -100, -947, -929, 612, -1029, 114, -872, -1045, 77, -121, -1666, -423, -601, -827, -236, 107, -233, -495, -730, -94, -1624, -297, -591, -1183, 76, -893, -1150, -1244, -1784, -259, -1076, -1101, -999, -567, 502, -822, -372, -1519, -1093, -760, -951, -44, -107, -973, -866, -1662, -741, -866, -833, -409, -824, -480, 24, -294, -501, -252, -280, -717, -2360, -554, -533, 108, -325, -731, -1109, -592, -64, -645, -1021, -883, -1571, -779, -447, -900, -386, 169, -680, -919, -1125, -631, -279, -894, -744, -1161, 94, -990, -1341, 308, -153, -814, -756, -117, -457, -892, -773, -762, -1041, -398, -1410, -1153, -339, -748, -1339, -1292, -817, -689, -575, -427, 179, -974, -335, -2437, -845, -869, -1061, -433, -449, -662, -962, -550, -520, -480, -228, -798, -391, -520, -1568, -521, -751, -914, -819, -456, -1704, -1282, -1321, -408, -807, -423, -995, 328, -272, -608, -872, -254, -667, -1564, -1285, -1346, 431, -1081, -328, -719, -525, -681, -470, -1378, -204, -83, -694, -1406, -196, -429, -1155, -590, -883, -442, -473, -424, -776, -179, -611, -383, -821, -1167, -536, -1063, -712, -916, -892, -730, -768, -393, -518, -1692, -752, -1072, -1301, -594, -218, -1059, -1108, -130, -1622, -466, -1027, -1567, -274, -1138, 664, -327, -1052, -345, -266, -168, -981, -240, 203, 149, -517, -195, 62, -1021, -84, -647, 125, -1332, -512, -417, 65, 267, -708, -108, -591, -905, -140, -649, 150, -1038, -881, -316, -1530, -338, -1302, -535, -256, -746, -1570, -723, -41, -468, -255, -254, -659, -147, -182, -424, -1028, -773, -1069, -227, -846, -643, -615, -1069, -906, -279, 289, -594, -756, -162, -528, 260, -340, -689, -303, -1008, -657, 189, -595, -727, -916, -251, 70, -525, -472, -1348, -994, -489, -501, -952, -594, -649, -343, -990, -704, -510, -586, -191, -389, -741, -641, -1198, -1411, -464, -646, 98, -138, -1530, -609, -840, -1148, 903, -1180, -1547, -819, -613, -902, -601, -1369, 732, -391, -567, 81, -874, -1421, -492, 174, -456, -1004, -95, -436, -824, -1962, -207, -627, -1390, -193, -680, 68, -1165, -473, -948, -505, -721, -1309, 332, 387, 209, -435, -250, -679, -138, -373, -571, -260, -697, -1855, -176, -378, -156, -767, -1329, -1329, -1597, -499, -865, -689, -92, -1156, -807, -497, -130, -600, -730, -385, -544, -936, -412, -803, -646, -1180, -187, -1102, -293, -554, -775, -400, -715, -1287, -639, -34, -356, -1159, -396, -698, 55, -688, -270, -932, 39, -182, -84, -1084, 65, -908, -711, -600, 111, -592, -831, -1011, -728, -1113, -341, -1675, 18, -786, -576, -363, -834, 271, 213, -184, -610, -500, -405, -564, -1654, -615, -807, -556, -981, -761, -1456, -824, -163, -448, -506, -349, -720, -580, -1066, -1323, -989, -540, -431, 142, 116, -894, -404, -1599, -1012, -988, -337, -801, -637, -510, -677, -659, -500, -643, -1183, -565, -447, -1825, -846, -406, -958, -1674, -1089, -406, -1041, -811, 41, -316, -381, -905, -472, -1231, -524, -719, -355, -942, -571, -211, -1213, -452, -9, -568, -118, -1276, -336, -93, -270, -501, -376, -465, -984, -736, -573, -227, -1550, 9, -1174, -353, -473, 462, -704, -245, -1228, -534, -1191, -1011, -784, -670, -884, -1413, -2079, -690, -1131, -560, -944, -183, -1460, -1011, -789, -142, -1159, -1318, -781, -1166, -269, -747, -1214, -970, 471, -529, -417, -89, -886, 40, -1067, -400, -391, -420, 114, -119, -1013, -837, -1039, -119, -155, -606, -1942, -192, -1852, -348, -1010, -455, -352, -574, -1162, -238, -900, -752, -795, -1174, -1242, -525, -841, -466, -421, -851, -345, -1271, -392, -330, 0, -580, -744, -1434, -833, -763, 110, -182, -338, 341, -1461, -571, -347, -852, -460, -936, -1143, -894, -628, -646, -105, -362, -535, -1014, -1249, -492, -1182, -894, -1613, -150, -959, -515, 800, -1189, 50, 244, 235, -422, 146, -232, -522, -993, -693, -556, -407, -12, -1541, -366, -629, -617, -337, 38, -234, -1405, -1632, -156, -1158, -512, 308, -492, -183, 62, -710, -1535, -150, -485, -718, -1053, -1348, -640, -1234, -685, -1228, -272, -1622, -1508, -1119, -670, -258, -609, -704, -863, -650, -857, -1146, -1522, -1108, -716, -581, -114, -887, -718, -245, -537, -1207, -389, -1744, -907, -1757, -233, -127, -580, -626, -1288, -812, -103, -659, -804, -1081, 199, -667, -89, -1010, -683, 428, -230, 348, -419, -1190, -1068, -1434, -289, -1013, -929, -94, -449, -332, -1069, -1397, -559, -252, -276, 24, 261, -249, -821, -1257, -44, -18, -137, -230, -259, -561, 338, -809, -445, -469, -1533, -843, -664, -371, -1210, -1381, -299, -861, -588, -924, -422, -355, -607, -78, -485, -1272, -689, -1052, -1114, -1155, 285, -873, -454, -1034, 3, -498, -380, -442, -636, -912, -524, -921, -437, -776, -1139, -761, -1170, -325, -364, -163, -683, -320, -671, -711, -312, -798, -1088, -1052, -704, -1923, -45, -4, -923, -316, -784, -685, -262, -393, -1034, -544, -1080, -206, -646, -471, -361, -837, 316, -74, -853, -1088, -378, 113, -798, -565, -1408, -168, -290, -256, -169, -861, -623, -597, -31, -1052, -359, -1215, -931, -858, -1121, -76, -1321, -1624, -476, -1031, -424, 236, -1782, -233, -1364, -995, -607, -270, -1059, -1041, 114, -879, -146, -994, -1307, -868, -444, -594, -445, -778, 90, -380, -1140, 130, -943, -694, -763, -577, 163, -147, -499, -205, -727, -624, -938, -999, -682, -454, -1080, -363, -413, -1435, 54, -944, -624, -998, -890, -954, -852, -968, -1349, -588, -643, -1200, -796, 149, -147, -361, -297, -1774, -522, -839, -595, -754, -372, -287, -2118, -942, -765, -217, -1689, -1040, -833, -314, -475, -470, -590, -592, -677, -679, -1029, -992, -1212, -287, -754, -391, -650, -434, -611, -324, 107, -56, 132, -792, -914, -636, -658, 77, -867, -601, -416, -930, -709, -34, -265, -442, -385, 108, -732, -632, -1723, -650, -371, -541, -402, -604, -1581, -862, -760, 43, -645, -718, 493, -856, -827, -1575, -245, -619, -569, -1324, -29, -432, -139, -81, -609, -929, -885, -731, -4, -1361, -1386, -573, -1124, -252, 124, -574, -229, -879, -857, -1096, -1801, -739, -112, -1013, -65, -875, -223, -974, -1143, -230, -806, -795, -203, -1601, -352, -392, -1963, -614, -216, -646, 454, -808, -607, -761, -156, -1877, 490, -375, -1745, 32, -739, -950, -786, -474, 16, -387, -1756, -1315, -9, -959, -276, -772, -138, -1598, -78, -752, 137, -395, -913, -956, -589, -398, -677, -649, -806, -1033, -1056, -79, -493, 37, -976, -126, -73, -367, -1029, -503, -1131, -1413, -513, -800, -557, -59, -1097, -1591, -352, -540, -558, -680, -222, -1123, -213, -733, -1049, -770, -883, -404, -59, -701, -277, 1026, -962, -257, -127, -492, -1052, -218, -703, -694, -354, -1266, -913, -423, -485, -461, -1555, -69, -1164, -835, -1212, };
const TfArray<1, int> tensor_dimension29 = { 1, { 1280 } };
const TfArray<1280, float> quant29_scale = { 1280, { 0.00037798294215463102, 0.00032447942066937685, 0.00030613661510869861, 0.00034975347807630897, 0.00033164708293043077, 0.00027329442673362792, 0.00030022201826795936, 0.00025786241167224944, 0.00031040603062137961, 0.00033006398007273674, 0.00031124270753934979, 0.0003326516889501363, 0.00035125171416439116, 0.00031304723233915865, 0.00026120731490664184, 0.0003681364469230175, 0.00029505780548788607, 0.00037484202766790986, 0.00037234567571431398, 0.00035547866718843579, 0.000257279840297997, 0.0002872055338229984, 0.00035748942173086107, 0.00028517283499240875, 0.00029813314904458821, 0.00030829411116428673, 0.00028933794237673283, 0.00033783534308895469, 0.00034740363480523229, 0.00027166356449015439, 0.00037106627132743597, 0.00036229955730959773, 0.000237002779613249, 0.00036581879248842597, 0.00026548770256340504, 0.00027038075495511293, 0.00031871022656559944, 0.0002804331888910383, 0.00042966828914359212, 0.00025114297750405967, 0.0004073261225130409, 0.00027054621023125947, 0.00034154867171309888, 0.00032046594424173236, 0.00026899680960923433, 0.00030152354156598449, 0.00028364843456074595, 0.00027233076980337501, 0.00030958277056924999, 0.00025554149760864675, 0.00035523856058716774, 0.00032502051908522844, 0.00029036100022494793, 0.00031777226831763983, 0.0003155985614284873, 0.00041869725100696087, 0.00029327947413548827, 0.00032270929659716785, 0.00039706149254925549, 0.00030384815181605518, 0.00027246013632975519, 0.000233519371249713, 0.00028216297505423427, 0.00028515484882518649, 0.00026961328694596887, 0.00031620074878446758, 0.00033079012064263225, 0.00026885926490649581, 0.00040676613571122289, 0.0004217576642986387, 0.00033308111596852541, 0.00034026170033030212, 0.00033240113407373428, 0.00026617775438353419, 0.00035923841642215848, 0.00033462929422967136, 0.00022836131392978132, 0.00038815478910692036, 0.00034057415905408561, 0.00023870248696766794, 0.00020438601495698094, 0.00033274313318543136, 0.0003083774063270539, 0.00035667236079461873, 0.00038307555951178074, 0.000330947688780725, 0.00029574858490377665, 0.00033349479781463742, 0.00031024226336739957, 0.00032100384123623371, 0.00027060389402322471, 0.00033238570904359221, 0.00025454245042055845, 0.0002948975597973913, 0.00037248153239488602, 0.00028916969313286245, 0.00022557389456778765, 0.00031935126753523946, 0.000470162951387465, 0.00031779866549186409, 0.00032638193806633353, 0.00035276429844088852, 0.00030600611353293061, 0.00028501581982709467, 0.00031860164017416537, 0.00035819626646116376, 0.00033676836756058037, 0.00035463672247715294, 0.00025753630325198174, 0.00036819078377448022, 0.00025309040211141109, 0.00023899025109130889, 0.00020577170653268695, 0.00036194012500345707, 0.00026303066988475621, 0.00037947017699480057, 0.00031639228109270334, 0.00034602533560246229, 0.00033316173357889056, 0.00030375926871784031, 0.00031030864920467138, 0.00035137520171701908, 0.00026243994943797588, 0.00033968361094594002, 0.00031265380675904453, 0.00036902102874591947, 0.00035828421823680401, 0.00026578104007057846, 0.00033231446286663413, 0.00027434679213911295, 0.00033673376310616732, 0.0004217963432893157, 0.00029340962646529078, 0.00034589035203680396, 0.00025964758242480457, 0.00027516053523868322, 0.00028570691938512027, 0.00033767652348615229, 0.00043029439984820783, 0.00027663094806484878, 0.00039948505582287908, 0.00025651484611444175, 0.0002486460143700242, 0.00023586141469422728, 0.00028018752345815301, 0.00036861293483525515, 0.00029815509333275259, 0.00028234889032319188, 0.00037303785211406648, 0.00036843508132733405, 0.00025718161487020552, 0.00035197235411033034, 0.00046225354890339077, 0.00030909181805327535, 0.00031422788742929697, 0.00030073002562858164, 0.00034686381695792079, 0.00027844641590490937, 0.00033009046455845237, 0.00030470063211396337, 0.00032718770671635866, 0.00029749327222816646, 0.00028943768120370805, 0.00032265129266306758, 0.00027534840046428144, 0.00031031109392642975, 0.0003559005563147366, 0.00036771994200535119, 0.00023771445557940751, 0.00031989681883715093, 0.00026146919117309153, 0.00034282237174920738, 0.00036164774792268872, 0.00039562402525916696, 0.00034247347502969205, 0.00035226758336648345, 0.0004043408262077719, 0.0003050169616471976, 0.00026501517277210951, 0.00028974772430956364, 0.00028676551301032305, 0.00024935608962550759, 0.00028997895424254239, 0.00031041083275340497, 0.00057013367768377066, 0.00028134605963714421, 0.0002777059271465987, 0.00030719212372787297, 0.00029962003463879228, 0.00038503389805555344, 0.00023220472212415189, 0.00043353569344617426, 0.00029453614843077958, 0.00032214718521572649, 0.00028906628722324967, 0.00025447513326071203, 0.00025360309518873692, 0.00028187668067403138, 0.00029417398036457598, 0.00029865678516216576, 0.00024585588835179806, 0.00035157351521775126, 0.00033749765134416521, 0.00027715988107956946, 0.00022763106971979141, 0.00026469203294254839, 0.00024588321684859693, 0.00024284070241264999, 0.00035795662552118301, 0.00040252023609355092, 0.00023965525906533003, 0.00027423573192209005, 0.00029184904997237027, 0.00028252473566681147, 0.00040354757220484316, 0.00025916387676261365, 0.00020483789558056742, 0.00035011637373827398, 0.00032728366204537451, 0.00022376909328158945, 0.00029785884544253349, 0.00040926455403678119, 0.00022739377163816243, 0.00027852924540638924, 0.00029740578611381352, 0.0003220227372366935, 0.00030589889502152801, 0.00030827606678940356, 0.00029259460279718041, 0.00031931651756167412, 0.00031708786264061928, 0.00031975787715055048, 0.00037727344897575676, 0.00024395810032729059, 0.00039092125371098518, 0.00033134676050394773, 0.00026716940919868648, 0.00038027582922950387, 0.00026526529109105468, 0.00025665952125564218, 0.00031007445068098605, 0.00023977372620720416, 0.00033357820939272642, 0.00030497382977046072, 0.0002992851659655571, 0.00034759732079692185, 0.00022061010531615466, 0.00023291233810596168, 0.00027688164846040308, 0.00026145795709453523, 0.00028883127379231155, 0.00031469608074985445, 0.00031030236277729273, 0.000406331178965047, 0.00026376705500297248, 0.00029439135687425733, 0.00027988463989458978, 0.0003006468468811363, 0.00029304431518539786, 0.00036032142816111445, 0.00034721614792943001, 0.00037006766069680452, 0.00027724704705178738, 0.00035820272751152515, 0.00028416709392331541, 0.00032066137646324933, 0.0004186414007563144, 0.00028239301173016429, 0.00027338328072801232, 0.00028417754219844937, 0.00031009435770101845, 0.00025861425092443824, 0.00029376934980973601, 0.0003520305035635829, 0.00031303515424951911, 0.00029883027309551835, 0.00028819535509683192, 0.0003172186843585223, 0.00041010227869264781, 0.00038758074515499175, 0.00028204673435539007, 0.0002982072182931006, 0.00028079378535039723, 0.00030188047094270587, 0.00022480239567812532, 0.00031454808777198195, 0.00031498930184170604, 0.00029795916634611785, 0.00027560046873986721, 0.00027609869721345603, 0.00030614269780926406, 0.00030499487183988094, 0.00034146479447372258, 0.00042983290040865541, 0.00041044145473279059, 0.00028646714054048061, 0.00024578132433816791, 0.00022537859331350774, 0.00025905307848006487, 0.00029002455994486809, 0.0003231663431506604, 0.00033740710932761431, 0.00034849598887376487, 0.00032833818113431334, 0.00033019660622812808, 0.00034387162304483354, 0.00033898619585670531, 0.00027528966893441975, 0.00031583543750457466, 0.00025705748703330755, 0.00030129757942631841, 0.0002102710132021457, 0.00029131252085790038, 0.00026709566009230912, 0.00036751641891896725, 0.00029768364038318396, 0.00036446284502744675, 0.00026751257246360183, 0.00029900489607825875, 0.00030921699362806976, 0.00040714943315833807, 0.00033227750100195408, 0.00024488565395586193, 0.0002756289322860539, 0.00025719281984493136, 0.00035034236498177052, 0.00031055434374138713, 0.00033000385155901313, 0.00026273561525158584, 0.00033303431700915098, 0.00029277315479703248, 0.00024608935927972198, 0.00029740596073679626, 0.0004682128201238811, 0.00033099920256063342, 0.00033524545142427087, 0.00030443561263382435, 0.00037175390752963722, 0.00035832799039781094, 0.00035968190059065819, 0.00030463660368695855, 0.00031212822068482637, 0.00027378741651773453, 0.00038299610605463386, 0.00025887481751851737, 0.00030138238798826933, 0.00031921066693030298, 0.00025768138584680855, 0.00027280714130029082, 0.00030664392397738993, 0.00031151968869380653, 0.00025708158500492573, 0.00046904655755497515, 0.00037283202982507646, 0.00040370516944676638, 0.00029995149816386402, 0.00028445667703635991, 0.00025012635160237551, 0.00029343829373829067, 0.00031107821268960834, 0.00028043525526300073, 0.00032704346813261509, 0.00027256316388957202, 0.00041846540989354253, 0.00047037188778631389, 0.00041015673195943236, 0.00023702188627794385, 0.00029211203218437731, 0.00029723771149292588, 0.00033897682442329824, 0.00032427537371404469, 0.00030569141381420195, 0.00027454327209852636, 0.00025999831268563867, 0.00029600260313600302, 0.00028949012630619109, 0.00030355670605786145, 0.0003443133900873363, 0.00026603383594192564, 0.00031834712717682123, 0.00029034906765446067, 0.00023340714687947184, 0.00033340946538373828, 0.00026613264344632626, 0.00033299083588644862, 0.00043758697574958205, 0.00029433617601171136, 0.00027881388086825609, 0.00028326286701485515, 0.00046341199777089059, 0.00025203489349223673, 0.00028446444775909185, 0.00029873693711124361, 0.00038208771729841828, 0.00023369006521534175, 0.00032387312967330217, 0.00026473985053598881, 0.00031970447162166238, 0.0003025948244612664, 0.00023912076721899211, 0.00025282060960307717, 0.00027866268646903336, 0.00041889157728292048, 0.00031721725827082992, 0.00036036522942595184, 0.00026869645807892084, 0.0003304685524199158, 0.00023973073984961957, 0.00027428969042375684, 0.00034201188827864826, 0.00029686855850741267, 0.00033836063812486827, 0.00028335500974208117, 0.00030108564533293247, 0.00034517227322794497, 0.00029752581031061709, 0.00045049251639284194, 0.00038737853174097836, 0.00032146353623829782, 0.00025544827803969383, 0.00034492611302994192, 0.00039976404514163733, 0.00037068405072204769, 0.00033695646561682224, 0.00035662343725562096, 0.00031162594677880406, 0.00026549724861979485, 0.00034505382063798606, 0.00034550312557257712, 0.00040744070429354906, 0.00032750840182416141, 0.00027127968496643007, 0.00023927763686515391, 0.00034650025190785527, 0.00036718920455314219, 0.00033020309638231993, 0.00032935163471847773, 0.00027994337142445147, 0.00030283024534583092, 0.00024248837144114077, 0.00025185573031194508, 0.00034786388278007507, 0.00027586205396801233, 0.00026269318186677992, 0.00041303277248516679, 0.00029851225554011762, 0.00036212656414136291, 0.00043250271119177341, 0.00029859886853955686, 0.00022929921397008002, 0.00030772024183534086, 0.0004066378460265696, 0.00041762241744436324, 0.00038017128827050328, 0.00029186080791987479, 0.00031603022944182158, 0.0004253567021805793, 0.00033645902294665575, 0.00039200010360218585, 0.00028143415693193674, 0.00027009897166863084, 0.000256787781836465, 0.00032175067462958395, 0.00032406978425569832, 0.00038856815081089735, 0.00026418926427140832, 0.00035135893267579377, 0.00030129041988402605, 0.00034488315577618778, 0.00033347358112223446, 0.00033847271697595716, 0.00034160274663008749, 0.00040203961543738842, 0.00032358054886572063, 0.00032238208223134279, 0.00027921132277697325, 0.00026003748644143343, 0.00024246903194580227, 0.00028979138005524874, 0.00037993726436980069, 0.00034179308568127453, 0.00041811083792708814, 0.00032019097125157714, 0.00028174152248539031, 0.00035119950189255178, 0.00027142342878505588, 0.00026883644750341773, 0.00030553271062672138, 0.00028029779787175357, 0.00035407600807957351, 0.00033719412749633193, 0.00037259692908264697, 0.00024476321414113045, 0.00037929121754132211, 0.00030844516004435718, 0.00030006872839294374, 0.00023802273790352046, 0.0003620355564635247, 0.0002525272429920733, 0.00024503457825630903, 0.00023824864183552563, 0.00031390416552312672, 0.00029854208696633577, 0.00037908874219283462, 0.00039936555549502373, 0.00026125414296984673, 0.00026725910720415413, 0.000344938162015751, 0.00040548259858042002, 0.00031734025105834007, 0.00030101757147349417, 0.00036481520510278642, 0.00033550517400726676, 0.00028308946639299393, 0.00028871290851384401, 0.00028229685267433524, 0.00024907515035010874, 0.00026991072809323668, 0.00028023691265843809, 0.00029899796936661005, 0.00033510359935462475, 0.00039905725861899555, 0.0002991323999594897, 0.00040404699393548071, 0.00025776386610232294, 0.00028825912158936262, 0.00025347771588712931, 0.00039856784860603511, 0.00021809141617268324, 0.00032714122789911926, 0.00034540329943411052, 0.00022943867952562869, 0.00029093780904076993, 0.00034347103792242706, 0.00025571044534444809, 0.00028147318516857922, 0.00028979804483242333, 0.0003234606992918998, 0.00037220297963358462, 0.00028691260376945138, 0.00030567075009457767, 0.00032194089726544917, 0.00033320719376206398, 0.00031786473118700087, 0.00035272282548248768, 0.00027537808637134731, 0.00026872422313317657, 0.00030352661269716918, 0.00026555568911135197, 0.00034586861147545278, 0.00028322075377218425, 0.00027377199148759246, 0.00028019628371112049, 0.00032194089726544917, 0.00034767852048389614, 0.00033841340336948633, 0.00028574396856129169, 0.00034704877180047333, 0.00029246738995425403, 0.00025889815879054368, 0.00025854838895611465, 0.00027338159270584583, 0.00028452026890590787, 0.00037342385621741414, 0.00036731277941726148, 0.00043300434481352568, 0.00028060824843123555, 0.00023146209423430264, 0.00026192961377091706, 0.00030469376360997558, 0.00027993929688818753, 0.00028245491557754576, 0.00026260351296514273, 0.00029324230854399502, 0.00024134287377819419, 0.00032657105475664139, 0.00033764517866075039, 0.00031683265115134418, 0.00033891128259710968, 0.000307080103084445, 0.0003400171990506351, 0.00032657221890985966, 0.00032566252048127353, 0.00026863074162974954, 0.00040363890002481639, 0.00026429985882714391, 0.00029381480999290943, 0.00036841255496256053, 0.00028247034060768783, 0.00030131626408547163, 0.00027151868562214077, 0.00031247950391843915, 0.00029264503973536193, 0.00032246220507659018, 0.00025816200650297105, 0.00034376650000922382, 0.00025684628053568304, 0.0002723858633544296, 0.00028012532857246697, 0.00030261909705586731, 0.0003058820147998631, 0.00038819320616312325, 0.00032192619983106852, 0.0003111191326752305, 0.00031707613379694521, 0.00023629433417227119, 0.00032633225782774389, 0.00026995292864739895, 0.00031558028422296047, 0.00035903605748899281, 0.00030830394825898111, 0.00034091083216480911, 0.00036572449607774615, 0.00027614299324341118, 0.00036788324359804392, 0.0002555453684180975, 0.00026527312002144754, 0.00020935219072271138, 0.00045496696839109063, 0.00031804488389752805, 0.00029714324045926332, 0.00037519336910918355, 0.00030395056819543242, 0.00024828899768181145, 0.00026493147015571594, 0.0003176206664647907, 0.0002730568521656096, 0.00033206786611117423, 0.00034157803747802973, 0.00027187872910872102, 0.00022116649779491127, 0.00043489792733453214, 0.00022602497483603656, 0.00030857938691042364, 0.00021262494556140155, 0.00027948495699092746, 0.00030370851163752377, 0.00027757021598517895, 0.00027386622969061136, 0.00037394440732896328, 0.00030070854700170457, 0.00027766643324866891, 0.00027675440651364625, 0.00024373356427531689, 0.00035217744880355895, 0.00027046405011788011, 0.00025471652043052018, 0.00029151164926588535, 0.00032783899223431945, 0.00025467577506788075, 0.00028414989355951548, 0.00037924724165350199, 0.00034096246236003935, 0.00028331033536233008, 0.00039063426083885133, 0.00026498737861402333, 0.00034246541326865554, 0.00037560737109743059, 0.00025569487479515374, 0.00038054210017435253, 0.00030170587706379592, 0.0002578274579718709, 0.0002687306550797075, 0.00032404539524577558, 0.00028811272932216525, 0.00038619723636657, 0.0002527539327275008, 0.00027004114235751331, 0.000364330830052495, 0.00044277243432588875, 0.00031735736411064863, 0.00027598111773841083, 0.00030080371652729809, 0.00036575229023583233, 0.00033587255165912211, 0.00031550152925774455, 0.00034308235626667738, 0.00028677607770077884, 0.00029552279738709331, 0.00043963806820102036, 0.0003905347257386893, 0.00037168886046856642, 0.00035143014974892139, 0.00040758895920589566, 0.00028354860842227936, 0.00026551968767307699, 0.00027616199804469943, 0.00026148193865083158, 0.00024318340001627803, 0.00028085749363526702, 0.00025323903537355363, 0.00029698049183934927, 0.0003025021287612617, 0.00028035577270202339, 0.00035418642801232636, 0.00034359010169282556, 0.00028506829403340816, 0.00032940501114353538, 0.00032199497218243778, 0.00031004269840195775, 0.00031661978573538363, 0.00031473138369619846, 0.00026212038937956095, 0.00037596814217977226, 0.00027775086346082389, 0.00025514117442071438, 0.00031040579779073596, 0.00032137086964212358, 0.00028471020050346851, 0.00032189377816393971, 0.00036343137617222965, 0.00037588991108350456, 0.0002290396805619821, 0.00038352981209754944, 0.00027333051548339427, 0.00028656021459028125, 0.0003351982741151005, 0.00027838675305247307, 0.00026022258680313826, 0.00028668568120338023, 0.00027588484226725996, 0.00029053364414721727, 0.00025445912615396082, 0.00026994894142262638, 0.00040519138565286994, 0.00028879751334898174, 0.00029179392731748521, 0.00029804257792420685, 0.00030741997761651874, 0.00023448721913155168, 0.00022408437507692724, 0.00030625809449702501, 0.00035759093589149415, 0.0003100805333815515, 0.0003339016402605921, 0.00032872523297555745, 0.00030112906824797392, 0.00037044857162982225, 0.00030414565117098391, 0.00024170309188775718, 0.00032949549495242536, 0.00026653191889636219, 0.00023655412951484323, 0.00036297398037277162, 0.00037078623427078128, 0.00032283429754897952, 0.0002648990775924176, 0.00025682419072836637, 0.00029240307048894465, 0.00037637766217812896, 0.00027970824157819152, 0.00037044080090709031, 0.00027781786047853529, 0.00025113427545875311, 0.00027016564854420722, 0.00030181696638464928, 0.00023976605734787881, 0.00030492607038468122, 0.00029351442935876548, 0.00031889925594441593, 0.00032202326110564172, 0.00028222621767781675, 0.00033810589229688048, 0.0002175525005441159, 0.00027130503440275788, 0.00027152578695677221, 0.00033732652082107961, 0.00026752892881631851, 0.00035289066727273166, 0.00025362599990330637, 0.00024946552002802491, 0.00029967655427753925, 0.00034545167000032961, 0.00031785477767698467, 0.00020813388982787728, 0.00041618317482061684, 0.00036148482467979193, 0.0002480521216057241, 0.00034966677776537836, 0.00029810320120304823, 0.00062607857398688793, 0.00026518129743635654, 0.00025817390996962786, 0.00028286883025430143, 0.00030991574749350548, 0.00029092680779285729, 0.00031835795380175114, 0.00025930622359737754, 0.00036221128539182246, 0.00024110118101816624, 0.00028462678892537951, 0.00032867150730453432, 0.00039456348167732358, 0.00034967326791957021, 0.00027138445875607431, 0.00031920897890813649, 0.00024612559354864061, 0.00034094660077244043, 0.00032473605824634433, 0.00034249489544890821, 0.00024796390789560974, 0.00033744412939995527, 0.00027038931148126721, 0.00027038928237743676, 0.00031201017554849386, 0.00026667449856176972, 0.00035583632416091859, 0.00039070035563781857, 0.00024294600007124245, 0.00029164465377107263, 0.00026974643697030842, 0.00028249691240489483, 0.0003355742956046015, 0.00022662637638859451, 0.00037947329110465944, 0.00027885561576113105, 0.00027270882856100798, 0.00033199507743120193, 0.00032363773789256811, 0.00029400104540400207, 0.00027310661971569061, 0.00039403504342772067, 0.00031999149359762669, 0.00031855280394665897, 0.00028161329100839794, 0.00036957339034415781, 0.00026868673739954829, 0.0003035009722225368, 0.00025346272741444409, 0.00033058601547963917, 0.00035806404775939882, 0.00022665293363388628, 0.00027427676832303405, 0.00028827995993196964, 0.00031029453384689987, 0.00035629607737064362, 0.00025352169177494943, 0.0002779905335046351, 0.00032323220511898398, 0.00024234465672634542, 0.00024114457482937723, 0.00027154723647981882, 0.00031015835702419281, 0.00024209183175116777, 0.00028537711477838457, 0.00025059713516384363, 0.00026475699269212782, 0.0002656247525010258, 0.00026218051789328456, 0.000320932682370767, 0.00024822959676384926, 0.00031286414014175534, 0.00034721827250905335, 0.00029877247288823128, 0.00032183996518142521, 0.00031687604496255517, 0.00025614479091018438, 0.00033206449006684124, 0.00030057679396122694, 0.00031949242111295462, 0.00034948516986332834, 0.00034588811104185879, 0.00026574442745186388, 0.00024328635481651872, 0.00026418079505674541, 0.00025686921435408294, 0.00028604068211279809, 0.00035979869426228106, 0.00026308861561119556, 0.00028920196928083897, 0.00033733190502971411, 0.00032148833270184696, 0.00036161867319606245, 0.00038686121115460992, 0.00031678698724135756, 0.00041303256875835359, 0.0003170641721226275, 0.00024064700119197369, 0.00027335676713846624, 0.00037227582652121782, 0.00035263996687717736, 0.00029974666540510952, 0.00032205451861955225, 0.0002945904852822423, 0.00030661973869428039, 0.00041211713687516749, 0.00037604931276291609, 0.00028481296612881124, 0.00034465172211639583, 0.00035346383810974658, 0.0002887739974539727, 0.00028885665233246982, 0.00033782509854063392, 0.00032759006717242301, 0.00032812700374051929, 0.00031795669929124415, 0.00036479605478234589, 0.00027726232656277716, 0.00030870735645294189, 0.00031611151644028723, 0.00029351800912991166, 0.00028679083334282041, 0.00029981005354784429, 0.00026179154519923031, 0.0003792991628870368, 0.00032949022715911269, 0.00030498768319375813, 0.00030561129096895456, 0.00028771633515134454, 0.0003094322164542973, 0.00025635387282818556, 0.00041478796629235148, 0.00025326551985926926, 0.00035540721728466451, 0.00028112990548834205, 0.00034692033659666777, 0.00029168094624765217, 0.00032559718238189816, 0.00032724431366659701, 0.00028260229737497866, 0.00034170315484516323, 0.00026592792710289359, 0.00031074509024620056, 0.00029182847356423736, 0.0002523357979953289, 0.00031825935002416372, 0.00028198325890116394, 0.00028081052005290985, 0.00032419624039903283, 0.00027070034411735833, 0.00026399714988656342, 0.0002945068699773401, 0.00028808772913180292, 0.00033256117603741586, 0.00032660382566973567, 0.00028933319845236838, 0.00031110760755836964, 0.00033071890356950462, 0.00024873472284525633, 0.00031660997774451971, 0.00037328153848648071, 0.00034058126038871706, 0.00027793977642431855, 0.00024367672449443489, 0.00025160581571981311, 0.00031186133855953813, 0.00032939898665063083, 0.00040637041092850268, 0.00036539978464134037, 0.0002675213327165693, 0.0002840801898855716, 0.00032306267530657351, 0.0004964509280398488, 0.00032024981919676065, 0.00028258073143661022, 0.00036571186501532793, 0.000352322036633268, 0.00035269247018732131, 0.00029239439754746854, 0.00028953116270713508, 0.00034223604598082602, 0.00031567199039272964, 0.00032092022593133152, 0.00031473030685447156, 0.0002902433043345809, 0.0002893568598665297, 0.00037436012644320726, 0.00032095203641802073, 0.00030282919760793447, 0.00040289654862135649, 0.00023891811724752188, 0.00039639210444875062, 0.00036448368337005377, 0.0002772719890344888, 0.0003075147105846554, 0.00032963580451905727, 0.00026269315276294947, 0.00028992141596972942, 0.00045804199180565774, 0.0003213962190784514, 0.00034448644146323204, 0.00030244590016081929, 0.00026807989343069494, 0.00031849555671215057, 0.00029189072665758431, 0.00030618600430898368, 0.00028598218341358006, 0.00029281666502356529, 0.00039144657785072923, 0.00032691087108105421, 0.00032298982841894031, 0.00031065871007740498, 0.00039186171488836408, 0.00031827462953515351, 0.00034189457073807716, 0.00031862343894317746, 0.00033159117447212338, 0.00023975354270078242, 0.00030718126799911261, 0.00023656264238525182, 0.00023294592392630875, 0.00027762955869548023, 0.00026080108364112675, 0.00034717502421699464, 0.00041151218465529382, 0.00026531927869655192, 0.00033992307726293802, 0.00033012166386470199, 0.00043986248783767223, 0.00028802364249713719, 0.00027891356148757041, 0.00026491892640478909, 0.00029331509722396731, 0.00030063057783991098, 0.00038804623181931674, 0.0003262521349824965, 0.00026097134104929864, 0.00029103466658852994, 0.00033939527929760516, 0.00038669881178066134, 0.00026176721439696848, 0.00039915632805787027, 0.0002309596020495519, 0.00028470079996623099, 0.00037194506148807704, 0.00035575730726122856, 0.00036301981890574098, 0.00036644577630795538, 0.00037025296478532255, 0.00024211413983721286, 0.00033498261473141611, 0.0002524129522498697, 0.00030272573349066079, 0.00028825193294323981, 0.00033324881223961711, 0.00034927038359455764, 0.00033946524490602314, 0.00038387396489270031, 0.00030672250431962311, 0.00031881511677056551, 0.00033868142054416239, 0.00028201710665598512, 0.0002847667783498764, 0.0002434437774354592, 0.00028128083795309067, 0.00032423614175058901, 0.00035985096474178135, 0.00030649072141386569, 0.00034922562190331519, 0.00028068668325431645, 0.00034595327451825142, 0.00032402857323177159, 0.00033210802939720452, 0.0002742205688264221, 0.0003127837844658643, 0.00031903188209980726, 0.00025797419948503375, 0.00025167519925162196, 0.00035649130586534739, 0.00027479167329147458, 0.00030970139778219163, 0.00029108466696925461, 0.00037118952604942024, 0.0002534541126806289, 0.00025390274822711945, 0.00031501008197665215, 0.00028667910373769701, 0.00031129369745030999, 0.00035353715065866709, 0.00036323201493360102, 0.00030423351563513279, 0.00032358110183849931, 0.00028707846649922431, 0.00025409282534383237, 0.00030469225021079183, 0.00040931167313829064, 0.00026315310969948769, 0.00025648530572652817, 0.00029781751800328493, 0.00026691635139286518, 0.00027456929092295468, 0.00035175628727301955, 0.00029820276540704072, 0.00032988618477247655, 0.00031252508051693439, 0.00037692495970986784, 0.00034610560396686196, 0.00034535364829935133, 0.00036716263275593519, 0.00029060675296932459, 0.00039380407542921603, 0.00026589565095491707, 0.00034097849857062101, 0.00029192402143962681, 0.00043494839337654412, 0.0002932428615167737, 0.00033330192673020065, 0.00031639303779229522, 0.00028760975692421198, 0.00037713703932240605, 0.0003154321457259357, 0.00034062642953358591, 0.00032892238232307136, 0.00029324233764782548, 0.00035108925658278167, 0.00026874468312598765, 0.00027323764516040683, 0.00023977459932211787, 0.00027474641683511436, 0.00031302857678383589, 0.00044449258712120354, 0.00031290831975638866, 0.00036063202423974872, 0.00036703867954201996, 0.00032959846430458128, 0.00032265664776787162, 0.00035894586471840739, 0.00027224741643294692, 0.00031995133031159639, 0.00032452525920234621, 0.00036387206637300551, 0.00028469887911342084, 0.00031562251388095319, 0.00032836306490935385, 0.00032027147244662046, 0.00029478559736162424, 0.00042796460911631584, 0.00030310521833598614, 0.00032484298571944237, 0.00027761730598285794, 0.00028904600185342133, 0.00026086316211149096, 0.00026316748699173331, 0.00030385618447326124, 0.00033378263469785452, 0.00028970863786526024, 0.0003087728691753, 0.00022854207782074809, 0.00037899840390309691, 0.0003431837831158191, 0.0002943335275631398, 0.00037112407153472304, 0.00027605870855040848, 0.00032606165041215718, 0.00023539410904049873, 0.00025212630862370133, 0.00026714912382885814, 0.00032698240829631686, 0.00028420469607226551, 0.00029193007503636181, 0.00033293323940597475, 0.00035493489122018218, 0.00031970423879101872, 0.00029415119206532836, 0.00026270985836163163, 0.00028210773598402739, 0.00029106004512868822, 0.00025145942345261574, 0.00027676508761942387, 0.00023528392193838954, 0.00030744669493287802, 0.00032017199555411935, 0.00029639471904374659, 0.00031158296042121947, 0.00041841345955617726, 0.00033224961953237653, 0.00026494151097722352, 0.00022804818581789732, 0.00040436681592836976, 0.0003407378972042352, 0.00042875716462731361, 0.00024550693342462182, 0.00032788564567454159, 0.00041632886859588325, 0.00025207677390426397, 0.00030644089565612376, 0.00028789276257157326, 0.00025417262804694474, 0.00027158865123055875, 0.00030566944042220712, 0.00035893602762371302, 0.00023240137670654804, 0.00028457556618377566, 0.0003088703379034996, 0.00028678285889327526, 0.00031739947735331953, 0.00035050066071562469, 0.00026897576753981411, 0.00032923769322223961, 0.00034696893999353051, 0.00031432678224518895, 0.00033970474032685161, 0.00037896953290328383, 0.00037348890327848494, 0.00024845267762430012, 0.00030413159402087331, 0.00025295323575846851, 0.00032812668359838426, 0.00029637914849445224, 0.00025609164731577039, 0.00027028907788917422, 0.00038995413342490792, 0.00022433229605667293, 0.00036343286046758294, 0.00027945759939029813, 0.00045984645839780569, 0.00044629283365793526, 0.00024721981026232243, 0.00029266040655784309, 0.00033315023756586015, 0.00028120804927311838, 0.00027505209436640143, 0.00035517680225893855, 0.00030088218045420945, 0.00027163908816874027, 0.00041167659219354391, 0.00026925874408334494, 0.00031174023752100766, 0.00029271893436089158, 0.00035532060428522527, 0.00026137995882891119, 0.00033328932477161288, 0.00028823749744333327, 0.00026747776428237557, 0.00028016691794618964, 0.00042939401464536786, 0.00025456669391132891, 0.00024987399228848517, 0.00038359602331183851, 0.00027513294480741024, 0.0003816089010797441, 0.00032989477040246129, 0.00026414653984829783, 0.00038676187978126109, 0.0002474526409059763, 0.0003078185545746237, 0.00036532408557832241, 0.00023517910449299961, 0.00024518347345292568, 0.0003142673522233963, 0.00029937742510810494, 0.00022446029470302165, 0.00033369180164299905, 0.0002883381093852222, 0.00023122027050703764, 0.00041357724694535136, 0.00031227758154273033, 0.00031643584952689707, 0.00037024635821580887, 0.00044645188609138131, 0.00025564344832673669, 0.00034544290974736214, 0.00028904099599458277, 0.00024291456793434918, 0.00028236088110134006, 0.00035744291380979121, 0.00032267422648146749, 0.00036348483990877867, 0.00025888558593578637, 0.00028135083266533911, 0.00030052312649786472, 0.00030645771767012775, 0.00034341987338848412, 0.0004189279570709914, 0.00030344631522893906, 0.00029164316947571933, 0.00039615732384845614, 0.00034133211011067033, 0.00036409584572538733, 0.00027941283769905567, 0.00026553930365480483, 0.00026846773107536137, 0.00024457363178953528, 0.00029556432855315506, 0.0003334780631121248, 0.00026401696959510446, 0.00027177552692592144, 0.00025386319612152874, 0.0002733626461122185, 0.00032065011328086257, } };
const TfArray<1280, int> quant29_zero = { 1280, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(8) int8_t tensor_data30[10*1280] = { 
  14, -87, -10, -40, -47, -81, 84, -12, -54, -1, -4, 59, 103, -17, -6, -74, 32, 72, 17, 61, -9, -84, -89, -84, 101, -27, 9, -4, -2, -27, 5, -16, -92, 70, 41, 20, -80, -55, 64, 50, -31, -33, 73, 82, 1, -49, -48, -24, 71, 3, -56, -80, 10, 32, -50, 70, 68, 13, -28, -21, -47, 22, 89, 58, -27, -4, 31, -12, 49, 42, 77, 64, -79, 36, -7, -24, 21, -55, -11, -89, -81, 83, 78, 35, 17, 19, 66, -107, 40, 37, 26, 44, 74, -18, -80, -68, 58, -12, -36, 1, -16, -113, 33, -95, -44, 0, 34, 76, -24, 58, 13, 33, -18, -96, -67, 45, -86, 19, 41, -28, 80, 43, -90, -68, -66, 57, 30, -51, -76, 77, 74, -9, 24, 21, -1, 58, 72, -22, -84, 15, 20, -46, 51, 58, -26, 23, 34, 89, -44, 76, 11, -17, -47, -4, 88, -82, -66, -64, 44, -9, -89, 53, 101, -85, -29, -73, 13, -63, -16, 97, -78, -68, 63, 11, 63, -10, 39, 48, -63, -74, 8, 55, 76, -9, 88, 8, 80, -27, -21, 95, -76, 74, 4, 43, -45, -38, -12, -23, -26, 62, 4, -65, 65, -7, -12, 79, -42, 98, -77, 83, 74, 76, -15, -78, 71, 15, -30, -22, 32, -78, 64, 36, -96, 71, -9, 74, -55, 80, 44, 70, 104, 45, 52, -86, 5, -62, -97, -13, -14, -74, 94, 50, 69, 29, 77, 23, 49, 33, -13, 27, -46, 52, -36, -77, -45, -44, -82, -1, 13, 44, 75, -38, 51, -35, -12, -27, 1, 30, -43, -74, 69, 29, -32, 62, 18, -24, -24, 77, -68, 108, -85, -69, -24, 45, -65, 63, -69, 84, 24, -42, -94, 20, 56, 94, -83, -70, 39, -29, -7, -76, -49, 71, -86, 73, 46, -26, 55, -58, -10, 76, -67, -24, 40, -29, 23, 77, 46, 111, -93, -35, -77, 67, -16, -88, 36, -19, 9, -87, 71, -76, -98, 8, 68, -68, -83, -89, 0, -45, -52, 58, -22, 65, -62, -23, -19, -71, -1, 20, -36, -104, -84, 11, 33, -105, 58, -33, -30, 31, 2, 6, 41, 23, 28, -32, 8, -19, -78, 16, 63, 16, 57, -65, 73, -36, 49, -89, 72, -75, -17, -75, 91, 71, 5, 13, -114, 23, -67, -63, 90, -98, -30, -67, 55, -44, -18, 33, -58, -47, -48, 78, -75, 38, -69, -87, 1, -70, 25, -28, 46, 61, 33, -60, -31, -38, -16, -30, 66, -3, -41, 93, -18, -81, 39, 39, 86, -23, 50, -45, 3, 28, 0, 18, 11, -33, 73, 15, -62, 20, -58, 26, -2, 80, -65, -32, -67, -84, 37, -30, 20, -32, -84, 79, 26, -46, 30, 85, -11, 14, -33, -3, 76, -39, -41, 0, 3, 64, 56, -53, 1, -90, 1, -20, -14, 44, -24, 23, -53, -55, -93, 9, 86, 44, -59, -36, -38, 3, -13, -103, -5, -77, 69, 63, 84, 90, -24, -70, 50, -67, 28, -32, -43, -26, -78, -60, 17, -13, -28, -26, -59, 10, 55, 43, 60, 54, 56, -26, -11, 73, 35, 76, -74, 64, 92, 60, 27, -75, 59, 50, 58, -64, 46, 46, 71, 53, -86, 78, -17, 60, 34, 57, 73, -71, 93, 72, 69, 25, 23, -71, 83, -34, -50, -24, -76, -20, -63, -83, -42, 23, -12, -65, 58, -50, -31, -14, 71, -46, -13, 41, 91, -72, -5, -36, -76, -2, -22, -55, 70, -43, 5, -29, -63, 71, -29, -49, 25, -98, -3, 5, -64, 34, 3, 39, -1, 64, 17, -102, 48, 61, -46, 12, -45, 93, 60, 52, -51, 54, 77, -116, -60, -34, -9, 32, -84, -52, -79, 89, -4, 14, -14, -39, 21, 47, -56, 6, 62, -2, 12, -28, 20, 64, 20, -68, 85, -74, -71, -37, 13, -90, 55, 88, 94, -31, 46, -94, -31, 49, -53, 13, 4, 2, -32, 31, -55, 41, -26, 25, -18, 4, -92, 57, 27, 32, 81, 48, -1, 6, -67, -40, -41, -92, -37, -12, 96, 51, -37, 42, 76, 0, 49, 11, 57, -60, -24, 17, 92, 49, 59, 92, -47, -8, -101, -64, 4, -24, 66, -84, 24, 93, 72, 33, 44, -26, 73, -37, -81, 51, -20, 67, 71, 35, -62, 51, -74, -30, -61, 79, -3, -44, 38, 68, 52, -62, 31, 97, 45, 64, 31, -70, 94, 86, -22, 69, -25, 102, -7, -87, 61, 19, 57, -54, -61, 88, -58, -15, -20, 88, 9, -34, 57, 28, 24, 78, -54, -50, 22, -72, 53, 14, -19, 16, -74, -50, -17, -94, -64, -52, -63, -75, -36, -26, -74, -56, 48, -51, 41, 81, -62, 83, 82, 27, 18, 43, -63, 84, -87, 0, 52, -80, 8, 55, 78, 83, -45, 92, -26, 95, -63, 71, -2, -79, -65, -87, 25, 20, -41, 32, -25, 15, 19, 69, -44, -61, 6, -30, -50, 74, -46, 51, -59, 39, -72, 16, -37, -69, -65, 95, 21, -65, 3, 30, 36, 68, 21, -60, 79, -55, 4, 18, -73, 41, 20, -79, 9, 72, 47, 12, -25, 15, -18, 38, -37, -54, 27, -19, -45, 57, 55, 45, 15, 44, 88, -9, -7, -66, 38, 77, -64, 16, -34, 9, 41, -13, -113, -51, -83, -40, 89, -66, -1, 43, 66, 33, -37, 48, -6, 57, 22, 2, 30, 56, 84, -84, 53, -55, -48, -29, 3, 79, -11, -5, 58, -21, -100, 48, 88, 103, -17, -38, 45, -94, -4, -43, -46, -34, -59, 68, -24, 25, -10, 26, -75, 72, -57, -55, 0, -82, 87, -23, 67, 40, 80, 61, 85, 43, 38, 81, -77, -50, -59, -65, -28, 12, 22, 83, 16, -89, 25, -39, -37, 92, 33, -5, -63, 33, 13, -7, -47, 60, -42, -44, 100, -60, -63, 20, -101, -6, -37, 83, -67, 0, -60, -29, -2, -78, -20, 87, 33, -85, -14, -10, -53, 71, 62, 72, 29, -39, -10, 19, 27, 71, -57, 50, -17, 61, 20, -66, -53, 87, -65, 6, -63, -14, -86, 71, 23, -33, -18, 40, -88, -26, 58, -85, -8, -87, 18, 8, -82, 38, -98, 41, -59, 84, 15, -4, -69, -66, -54, 82, -29, -64, -34, -81, 21, 61, -28, -47, 27, -17, -75, 8, 5, -90, 10, -51, -35, 94, -14, 44, -77, 40, 35, 69, -66, 2, -94, 82, 4, -18, 8, -60, 74, -48, 19, 64, 22, -4, 90, -28, 67, -17, -26, 14, -46, 97, 84, -29, 0, -45, 14, -7, 5, 47, -16, 28, -28, -21, -62, 14, 48, 29, 50, 57, -81, -82, -63, -9, -33, -56, -61, 48, -28, 9, 74, -96, -50, 6, 63, 23, -38, 60, 62, 44, -30, -57, -21, 11, -16, 5, 17, 9, -15, -70, -57, 96, 55, 9, 21, 5, -84, 44, 29, -85, -15, 5, 69, 17, 62, -98, -84, 69, -56, 23, 87, -88, 37, -26, -76, -54, 16, 72, 15, 35, 37, -46, 79, -24, 22, 64, 96, -83, -10, -16, 53, -5, -33, 40, 4, 66, -35, 73, 67, 78, 9, -53, 43, 29, -55, 9, 35, 38, -105, 63, 109, 41, 6, -10, 81, -39, -46, 14, 17, 7, -34, 59, 61, 52, 62, 68, 9, -31, 3, 84, -62, 20, 26, -51, -22, -60, -73, -29, -9, 32, 28, 80, -33, 28, 85, -54, 67, -104, -33, -46, -23, 23, 23, -63, 66, -30, -89, 9, -3, -61, -40, 83, 67, 32, -59, -74, 7, 76, 78, 2, -6, 46, 14, 22, 59, -79, 41, -56, -31, 10, 45, 32, -32, -62, 29, -78, 1, -15, 52, 31, 86, 28, -81, 21, -97, 62, -35, -80, -37, 36, 36, 15, 62, 34, 51, 47, 61, 35, 
  36, 36, 62, 10, -25, 40, -22, -59, -111, -88, -52, -34, 58, 92, 78, -73, -43, -4, -42, -15, 54, -47, 18, -44, 84, 3, -20, -97, -15, 31, -81, -84, -66, 40, 44, 50, 49, -37, -65, -52, -37, -80, 28, -52, 60, 103, 23, 54, -50, -54, -47, 25, -3, -2, 77, 1, 63, -84, 81, -83, -71, 68, 61, 10, 81, -28, -18, -13, 63, -57, -34, -18, -54, 33, 93, -9, 65, 85, 71, 40, 8, 74, 28, 79, -11, 21, -73, 60, -48, 41, -3, -19, 53, 39, -72, 66, -15, -5, 84, 33, 33, -107, 19, -110, 67, 60, 57, 86, -60, 22, 46, 68, -98, -63, 67, 59, -25, -76, -33, 15, -78, 64, -32, -3, -79, -42, 16, -55, 12, 63, 16, 4, 65, 28, -19, -46, -24, -20, -43, -49, -5, -63, 56, -77, -10, 21, 71, 80, 3, -81, -64, -34, -76, -67, 22, 18, -35, 105, 32, 53, 1, -59, 7, -34, -65, -20, 28, -27, -46, 106, -22, 23, -2, 76, 1, 65, -96, -67, -32, 5, 12, 41, 37, -93, 69, -18, -47, 80, 68, -92, -50, -28, 65, -41, -21, 8, -49, 37, 56, -31, 30, -84, 57, -36, 25, 11, -49, 56, 13, -20, 37, -70, 52, -43, -91, -87, 28, -63, 53, -8, 24, -45, -57, 79, 25, -18, -13, 76, 14, 5, -13, -81, -51, 18, 71, 23, 36, -49, 83, 5, 28, -82, -3, 26, 77, 8, -44, -32, -23, -2, 16, -83, 17, -58, -42, -21, -64, -72, -30, -11, -30, -63, -34, -7, 54, 80, -48, -36, 23, 37, 89, -54, 15, -73, -44, 52, -68, 56, -59, -44, 78, -23, 58, 44, -79, -83, -41, -48, 52, -26, -44, 52, 9, 15, -55, 5, -91, 74, 85, -33, 54, 37, -32, -52, 0, 17, -18, 64, 17, -54, -34, -35, 84, 57, -33, -7, 12, -73, -21, -3, -22, 24, 60, -101, -67, -78, -64, 71, -62, 53, 53, 63, 31, 74, 15, -67, -92, 67, 43, 76, 16, 93, -72, 42, 70, -27, 81, 114, 41, 7, 36, -84, 36, -96, -22, -59, 52, 27, -50, -9, -99, -2, 37, 41, -98, -77, 72, 39, 111, -57, -67, 59, -63, -102, 24, 84, 42, 11, -20, 86, 71, 17, -4, -44, -89, -30, 72, 79, -43, 84, -56, 7, 26, -30, 72, -44, -50, -92, -96, 58, -24, -23, -21, 29, 39, 44, -83, 56, -6, 91, 21, 98, -87, -51, 23, 30, 82, -62, -70, 2, -91, -70, 73, 5, -46, -60, -72, 35, -33, -63, 77, -55, -38, 8, 71, -5, 46, -61, 15, 42, 27, 50, -58, 6, -62, 68, -68, 53, 19, 59, 25, 47, -30, -85, 37, -16, -27, -108, 98, 8, -46, 16, -29, 27, 74, 59, -55, -78, -9, 61, 75, 44, -88, -46, 1, -13, 5, -78, -1, -48, -25, 67, -24, 25, -23, -8, 46, -57, -39, -61, 23, 70, -48, 38, 60, -1, -54, 47, -77, 57, 70, -52, -42, 19, 55, -44, 17, 33, 15, 30, 86, 47, 14, -60, 39, 50, 20, -60, 83, -35, 28, 51, 68, 63, 55, 69, 6, -7, -64, 44, 38, 46, -94, 92, -74, 41, 61, -47, -43, 23, 60, 77, 106, 38, -18, 77, -12, 51, 35, 66, -20, -43, -86, 8, -75, 69, -67, 31, -65, 28, -25, -83, 78, -23, -38, 72, 2, 26, 72, -46, 8, -21, -42, -87, 99, -8, 17, -84, -7, -76, -37, -43, -19, 18, -72, 7, 3, -48, 3, -75, 47, -4, -84, -27, 42, 11, -89, -73, 31, -46, 85, -49, 1, -73, -62, 68, 63, -116, -67, 68, -34, -39, 4, 71, -41, -38, 68, 78, 0, 36, 13, -48, -15, -63, -10, 24, -90, 64, -23, -39, 41, -2, 62, 38, -26, 51, -84, 85, 64, -74, 11, 76, -76, -78, 28, -31, -2, -104, 12, 33, 31, 53, 66, -4, 21, -26, 25, 74, 62, -74, -78, -35, -62, 76, -79, -55, 0, -72, -66, 80, -110, -23, 85, -49, 8, 63, -45, -36, 76, -69, 28, 63, -5, -31, 91, 92, 37, -71, 44, -38, 60, -36, 9, -108, -40, -33, 69, 53, -81, 16, 77, -49, 39, -15, 44, -91, -86, -41, -43, -39, -34, -73, 90, 29, 54, -56, -11, 45, 57, 34, -74, -29, -38, -89, -28, 39, -45, -36, 51, 54, 66, 33, -9, 87, 20, -30, -78, -69, -5, 71, -19, -24, -2, -79, -55, -47, 88, -99, -39, 26, 6, 78, 22, -81, -43, -18, -65, -88, -71, 34, -83, -22, -65, -56, 66, 61, -20, -32, 100, -52, -82, -45, -32, 6, -37, -29, -9, -50, -37, -60, 76, 57, -16, -2, 43, 43, 19, -73, 44, 47, 23, -40, 91, -18, 88, 3, -26, -77, 75, 10, 42, -52, 5, 36, 36, -32, 67, 25, -58, -27, 88, -15, -45, 56, 15, 13, 101, 44, -87, 93, 89, -73, 82, 36, -27, 53, -29, -63, 11, -78, 8, 39, -52, 2, -38, -107, -65, 3, -21, 19, -85, 48, 49, 23, 41, 41, -56, 72, -8, 34, -3, 74, 20, 79, 19, 112, 0, -67, 63, -30, -76, -16, 0, -53, -29, 8, 76, -15, -50, -62, 89, -3, 7, 95, -58, 53, -30, -61, -47, 95, 51, -93, -85, -32, 44, 54, 0, -28, -64, -30, 45, -16, -52, 57, -84, -23, -16, 68, -54, 17, 86, 81, 45, 18, 7, -98, -82, -83, -52, 12, -54, -19, 41, 47, 21, -7, -59, -3, 30, -60, 33, 28, 69, 48, -41, 2, 104, -40, 0, 15, -11, -9, -15, -15, -74, 6, 23, 47, -21, 56, 93, 34, -92, -90, 5, 36, -90, -58, -15, -32, -43, 28, -48, -87, -78, 22, 92, -7, -13, -84, 43, 31, -84, 40, -9, 41, 11, 66, -34, 58, 63, 7, -33, 10, 13, 20, 1, 14, -49, -61, 51, -4, 0, 76, 16, 24, -57, -52, 53, 89, 5, 50, -71, 20, -102, -40, -39, -11, 90, -60, 68, 50, 13, 69, -40, 74, -3, 53, -3, 25, -11, 40, -66, 27, -72, -64, -35, 47, -3, -58, 48, 21, -74, 15, -81, 18, 45, 39, -98, -35, 7, 50, -84, -93, 61, -86, -67, 20, 22, -78, 47, -75, 1, -85, -29, -35, -32, 53, 37, 18, 44, -47, 27, -45, -54, 41, -45, 37, -77, -74, 8, 19, 89, -23, 75, -76, 51, 58, -86, -33, 22, 69, 60, -39, 40, 67, 67, -83, -37, 36, -72, -92, 55, -63, -44, -27, -35, -65, 108, -40, 36, 25, 41, -19, 22, -95, 65, -63, -63, -77, -13, -55, 83, -9, 32, 52, -17, 4, -54, 72, 95, -65, -21, 79, 3, -92, -19, 18, 17, 105, -76, -5, 37, -1, -73, -58, 26, -37, -44, 76, -67, -29, -9, 79, -55, -96, -4, -110, -35, -91, 37, 30, -70, -17, 18, 102, 11, 107, 47, -2, -55, 14, -1, -39, -44, 66, 55, 50, 72, -22, -19, -24, 0, -50, 77, -6, 52, -9, 47, 61, -1, -13, 13, 26, 54, -27, -37, -55, 30, 55, 27, 16, 76, 58, -89, -53, -87, 35, 1, 18, -62, -5, 48, 37, -15, 10, -85, -49, -36, 38, -52, -56, 2, -25, 38, 72, -76, -30, -68, 38, 34, 40, 73, 81, -48, 62, -3, 80, 72, 96, -87, -10, -68, -2, 8, 82, -62, -38, -79, 9, 1, 27, 18, 85, -37, 96, 62, -21, -65, 47, -34, -58, -56, 48, 68, 22, -85, 0, -54, 107, 38, -57, 43, 13, 77, -23, 44, 60, -71, -72, 70, 82, -74, 39, 62, 13, -83, 57, 19, 84, -54, -96, 53, -12, -17, 32, 52, 2, 25, -85, 
  -7, -63, -35, 70, 44, -72, -63, -91, -69, -37, -80, 82, 16, 56, 17, 51, 3, -31, -101, -20, -85, 77, 37, -73, -73, -2, 3, -30, 38, 39, 46, -75, -48, -41, -40, -71, 54, -16, 36, -10, -4, 40, -57, 57, -51, 14, -8, 2, -71, 55, -111, 34, 94, 4, 76, 61, 74, 63, 28, -34, -60, -68, -67, 60, -64, -77, 19, -77, -45, -86, -74, 67, 12, -20, 22, 12, 57, -24, -33, -12, 55, 73, 34, -5, -23, -75, -24, -50, -89, 98, -59, -25, 18, -94, -69, 90, -68, 71, -61, -1, -68, -14, 31, -12, -43, -24, 13, -31, 39, -35, 74, -8, 28, -52, 50, 3, 94, 78, -61, -83, -27, 43, -3, -114, -91, -74, -54, -66, 37, 52, -33, -32, 29, -84, -90, 43, 102, -5, -4, -48, -93, -12, 89, -47, 2, -11, -37, -63, 27, -31, -53, 70, -39, 23, 17, -19, 12, -42, 44, -40, -16, -30, -82, 10, 85, -51, -37, 86, -44, 34, -94, -120, 84, 1, 66, 82, -71, 34, 31, -51, 10, -35, 77, -8, 17, 29, -7, -26, -23, -23, -78, -23, 56, 58, -87, 72, 50, 77, -72, -78, 49, 1, 8, 28, -83, -33, -24, -62, 63, 3, -80, -75, 14, 24, 20, -32, -88, -45, -11, 5, -10, 95, -28, -51, 48, 8, -85, 82, 23, 21, -83, 33, -96, -87, -28, 3, -73, 6, 39, -3, -47, -21, -48, -27, 52, 2, 45, 1, 56, -25, -63, -73, -6, 42, -9, 43, -64, 24, 81, 47, 40, 88, 39, -13, -89, 36, -87, -77, -12, 13, -61, -75, 48, -56, 69, -19, -56, -72, 58, 48, 18, -43, -17, 92, 26, -11, -4, 50, 63, -1, 81, 27, 69, -57, -84, -70, -67, 35, -6, 24, 71, -92, -53, 57, 62, 56, 60, 67, 84, 70, 70, 13, 55, -41, 68, 20, -71, 69, 79, -83, -87, 13, -74, 13, 70, 32, 1, -37, 55, -26, -120, -82, 53, -18, -37, 23, 69, 50, -30, -33, 36, -51, 0, 83, -51, 22, 76, -91, -87, -121, 92, -69, 38, 21, -60, 61, 25, -16, 50, -20, -22, -84, -59, 57, -119, 51, -48, 99, -6, -66, -11, 16, -10, -41, 35, -44, 89, -42, -12, -19, -37, -20, -39, 16, 82, 30, -44, -97, 30, 37, -21, -50, 33, -95, -60, 32, -2, 75, 95, -44, -91, -67, -51, -11, 15, 28, -20, -30, -25, -59, 23, -24, -90, -73, -24, -34, -8, -27, -73, -65, 28, 27, 75, 40, 65, -77, -86, 23, 99, -19, -82, -58, -100, -99, -43, -15, 43, -16, 24, 71, -88, 46, 19, -32, 23, -37, 27, -24, -45, -65, -64, 44, 108, -21, -50, 13, -11, -65, 44, 63, 19, 47, 20, -6, 11, 45, -72, 75, 36, 40, -39, -19, -21, -29, 35, 30, -39, -45, 35, -21, 15, 95, 67, 1, 20, -81, 5, -112, -25, -63, 71, 61, -92, -51, -74, 47, -5, 80, -58, 63, -63, 77, 49, 77, -40, -16, 4, 36, 48, 44, -73, 56, -36, 4, 40, 8, -100, 48, 61, 23, 66, -70, -52, 90, -46, 80, -66, 56, -35, 27, 84, 91, 27, 91, -52, -71, 29, -17, 24, 86, -50, -62, 25, -75, -5, -96, -80, 15, 86, 22, 46, -118, -39, 80, 90, -47, -15, 33, 55, 84, 81, -3, 73, -42, -4, 17, 45, -12, -75, 39, -14, 55, 81, -55, -56, 66, 4, -97, -39, 98, 77, -69, 103, -52, 6, -23, 82, -68, -4, -73, -99, -35, -37, -10, 59, 18, 25, 81, -53, 90, 51, -38, -24, 36, -30, 9, 25, -56, -48, -53, -78, 46, 34, 44, -67, -33, 93, 36, -98, -22, 62, -16, 79, 41, -68, -33, -20, 77, -80, 78, 0, -36, 54, 8, -74, -45, 36, 31, -31, 83, 74, 59, -72, 89, 54, -50, 69, -70, -5, 7, -76, -28, 17, 37, 0, -65, -67, 32, 92, 15, -12, 60, -61, -23, -36, -109, 80, -12, -19, -61, 93, -86, 13, -89, 89, 14, -59, -73, 95, 65, -36, 7, -16, 73, 91, -19, -47, -55, -34, 78, -35, 2, -9, -43, 1, -44, -4, 61, 51, -91, -8, 20, -73, -24, -30, 14, -36, 60, 49, -8, 43, -70, -11, -79, -61, -57, 43, 0, -71, 62, 45, -35, 70, 75, -67, -6, 85, 77, -104, 63, -55, 80, 89, -23, -45, -100, 17, -83, 18, -5, -32, -34, 45, 85, -66, -49, 44, 68, 62, -43, -30, -33, -49, -67, -42, -79, 5, -56, 81, 38, -74, -6, -91, -57, -56, 3, 54, -76, -104, -92, -36, -9, 33, 10, -48, -42, -79, 27, -103, 77, -24, 85, -11, -93, 43, -10, 51, -64, -35, 1, 12, -75, -87, -4, -46, 5, -23, 33, 4, 41, 89, -16, -48, -35, 20, -18, -39, -62, 26, 26, -32, -11, 1, 29, -56, 61, 5, 31, -33, 21, -31, 69, 52, -64, 12, 23, 19, 43, -69, 40, 2, -34, 50, -15, -60, -71, -4, 56, -49, 24, -23, -38, 44, 52, -70, -79, 63, -40, 28, 95, -6, 35, -60, 82, 29, -99, -54, -82, -96, 62, 9, -21, -17, -28, -4, 1, 83, -60, 40, 21, -7, 48, 71, -71, -50, 10, -72, 43, -90, -80, -44, -52, -84, 21, 20, -38, -31, -71, 72, 24, -102, -6, 44, 85, 94, -56, -1, 28, -24, 61, 17, -66, -99, 119, 85, 1, -32, -41, 57, -90, 9, 26, 27, -60, 38, -51, 31, 80, -46, -79, 21, 46, 59, 26, 85, -89, 65, 68, 73, -82, -42, 68, 62, -21, 58, 57, -39, 61, 86, 80, 64, 22, -20, 1, -23, -6, 72, 2, -92, 28, -97, -42, 54, -84, 9, 18, 81, 60, 47, -69, -61, -54, -68, -46, -42, -76, 19, 61, -74, -50, 55, 64, 24, -51, -95, 80, -53, -59, 96, -27, 47, -2, 89, 8, -52, -73, 10, -27, 86, -55, -75, -62, 50, 95, -47, 44, -54, 53, -3, 34, -2, -103, -24, -69, -46, 55, -73, -14, -33, 21, -58, 34, 0, -54, -34, -26, 15, -66, 24, 17, 63, -6, 30, -80, -39, -80, 91, 20, -40, 67, -69, -39, -32, 34, 68, -48, -14, -5, 98, -15, 107, 50, -46, 73, -56, -82, -47, 86, 44, -40, -55, 27, 96, -17, -11, -12, 71, -70, 25, -40, -24, -79, -67, 14, 5, 83, 65, -47, 6, 28, 6, 4, -65, -38, -77, 59, -63, -52, -38, 5, 61, -44, -13, -88, 15, 86, -38, 19, 55, 26, -65, -23, 49, -48, -89, -45, 46, 27, 75, -73, 36, 45, -28, 51, 66, 10, -12, -45, -36, 61, 20, -72, 48, 52, -89, 30, -49, -20, -97, -35, 53, 82, -72, 97, 9, -79, -8, -80, 85, -17, -23, -63, 41, -11, -57, -34, 20, 23, -3, -15, -56, 53, -41, -7, 49, -9, 75, 52, -41, -68, 57, 44, 65, -48, -30, -39, -31, -36, -46, -8, 0, 28, 84, -10, -80, 48, 8, -49, 69, -89, -14, -80, -23, 5, 68, -49, 63, -37, 58, -39, 14, 86, 42, -69, 58, 19, 16, 2, 102, 10, -4, -38, 6, 28, -80, 11, 59, 53, 46, 26, -23, -26, -88, 48, -51, -35, -45, -28, 89, 19, -67, 48, 75, -88, 8, -9, -34, -66, -7, -67, -81, -39, -35, 46, -48, 69, -93, 53, -33, -44, 82, -71, -31, 28, -55, 54, 21, -69, -48, -56, 8, -5, -66, -89, -82, 16, -40, 90, 57, 51, 12, -34, 30, 34, -22, -75, -46, 7, -115, 16, 56, -1, -56, 18, 43, 18, 3, -38, 4, -25, -26, -31, 40, -59, 83, 92, 65, 0, 91, 23, 
  -63, 47, -28, -24, 52, 82, 84, 22, -99, 28, -92, -22, 70, 9, -65, 2, 77, 20, 14, -1, -44, -71, 80, 26, 0, -78, 29, 17, -71, -61, -18, 53, 38, 35, 29, 52, -8, -63, -42, 66, 42, 58, 109, 79, 58, 92, -51, 62, 75, 57, -32, -54, -74, -35, -9, -45, -81, 69, -31, -25, -8, -8, 7, 10, -47, 86, 57, 72, -35, 57, -17, 17, 20, -61, -46, -20, -68, -97, -3, 38, 64, -65, -32, -20, 67, 74, -27, 25, -39, -47, -72, -41, 67, 30, -54, 71, -20, -47, -6, -54, 33, 17, 56, -51, 35, -99, -26, -36, -74, 48, -10, 62, -102, -11, -3, 1, 6, -78, 27, -4, -26, -43, 6, 1, -59, -42, -88, 91, -38, -7, 97, 93, -91, 36, 88, -10, 26, -15, 75, -67, 70, 78, 43, -7, -62, -11, -14, -33, -86, -92, 61, -14, 80, -11, 62, 22, -19, 99, -60, 2, -5, -50, -36, -30, 73, -55, 42, -76, 54, -72, 46, 36, 50, 29, 44, -72, -52, 82, 22, 33, -7, -23, 15, -61, 6, -20, 10, -56, -44, 31, -46, 18, -69, -101, -27, -58, 2, -29, -101, 29, 74, -45, -43, 77, -80, 61, -57, -96, 73, 26, -78, -7, 65, -46, 62, 38, 61, 28, 23, -56, 44, -73, -50, -3, 70, -61, -60, 86, 16, 10, -9, 39, 18, -22, 44, -33, -56, 14, 0, -21, -64, -28, -21, 40, -24, -69, 1, -47, 68, 1, -47, 83, 78, 17, -22, -67, 45, 59, -87, 81, -16, 79, -9, 67, 81, 30, 55, -35, 2, 56, -44, 72, -108, -35, -83, -111, -31, 21, 96, 24, -59, 67, 38, 3, 86, 85, -77, 99, 86, 24, -21, -5, -43, 72, 11, -64, -22, -77, -64, -51, 4, 7, 83, 89, -36, -58, 91, 39, 108, 16, -2, -13, 67, -25, 14, -93, 14, -15, 37, -57, -42, -77, -76, -4, -36, 24, -33, -91, -52, 93, -13, 72, -48, -27, 33, 94, -52, 21, 8, -67, 16, 38, 35, 29, -68, -32, -31, -92, 42, 24, -51, -30, 64, 75, 67, -55, -23, 104, -6, -96, -106, 46, 67, 88, -47, -72, 55, -3, 45, 15, -30, 88, 22, 18, 42, 96, -11, 73, -22, 17, 39, -64, 16, -15, 116, 82, 92, 7, 20, 78, -16, 9, 77, -70, -88, -83, 3, 100, 3, 54, -50, -23, 76, -84, -20, -18, 27, 46, -57, -69, 40, -87, -4, -81, -66, -24, 55, 27, 65, 91, -90, -85, -89, -51, 71, -65, 3, 55, 14, -92, -25, -26, 84, 33, 109, -82, 26, 69, 10, 23, -82, 64, -40, -6, 27, -93, -48, -29, 10, -74, -77, 44, 111, -81, 47, -70, 10, -37, -41, 34, -11, 5, -35, -64, 20, 72, -84, 16, -8, -1, -30, 44, -7, -22, 34, -36, -62, -40, -26, -88, 37, 85, -77, -99, -26, -45, 17, 122, 24, 37, 38, -3, -4, -7, -101, -68, -72, 21, 72, -63, -14, 0, 1, -44, -70, 9, 79, 17, 15, 6, 30, -8, 33, -18, 36, -9, 14, 7, -6, -48, -68, 100, 8, -94, -43, 19, -44, 1, -27, 16, -71, 72, -74, 24, -24, 10, 75, -2, 13, 40, -64, -27, 4, 85, 34, 81, -43, -11, 38, 59, 40, -62, -14, -77, -99, 51, 34, 82, -62, -81, 47, -73, 51, -53, -90, -65, -30, -38, -34, 18, -73, 6, 7, -31, -9, -52, 22, 56, 76, -85, 41, 55, 6, -71, -18, 35, 24, -70, -26, -20, -32, 31, -13, 58, 28, -28, 57, -6, 72, -87, -39, -98, 88, 69, -7, 29, 85, 26, 75, 94, 32, 60, 8, 23, -6, -52, -84, 27, -27, 66, -64, -33, 77, -37, 14, -29, 53, -21, -2, 62, -21, 78, -69, -40, -50, 73, 65, -33, 69, -58, -11, 71, 52, 41, 30, 1, -79, -90, 12, -55, 89, 67, -18, -45, -61, -41, -46, -33, -63, -81, -75, -4, 45, 69, -83, 59, 5, -10, 16, 25, -48, -24, 38, 26, -5, 44, -98, 0, -72, -30, 10, -32, -8, -23, 28, -24, 22, -30, 80, 48, 62, -62, -6, 8, -33, -32, 35, -42, -79, -12, -7, 40, 19, -73, 90, -16, -105, -5, -93, 2, 47, 70, -23, -50, 8, 60, 4, 17, 19, -31, 62, -36, 38, 65, 63, -26, 61, -78, -72, -70, -41, 63, -75, -26, -66, -59, 83, 80, -26, -13, 76, 43, 38, -40, -24, 42, 51, -40, -54, 2, -7, -5, 56, -36, -63, 33, 72, -88, -72, 109, -4, 86, -75, -67, 48, -54, 49, -95, 113, 27, -16, 12, 71, -10, -75, -58, 5, 23, 80, 34, -43, 41, 94, 4, 20, 33, 80, -22, -1, 7, 82, -11, -27, -2, 91, -92, 6, -71, 43, -35, -34, -20, -32, 27, 70, -79, -91, -43, 33, -4, 67, 1, 36, 11, 4, 71, -20, -35, 33, 67, -60, 45, -61, -87, 73, 4, 8, -67, -51, 28, 43, -2, -92, -5, -39, -73, 70, -41, -71, -102, -73, -19, -71, -55, -30, -7, -55, -54, 1, -13, 10, 58, -52, 6, 92, -31, 38, 29, -18, 61, 17, -61, -7, 111, -29, -83, -34, 29, -21, -56, -40, 73, 77, 18, 29, 29, 81, 33, -58, 34, -28, -52, -79, 108, 32, -17, -17, -82, 46, -49, -27, -80, -78, 21, -24, 26, 20, 73, -30, -75, 16, 84, 59, 18, -22, -26, -42, -47, -47, 51, -57, -40, -13, -66, 2, 79, 38, 8, 37, -67, 16, 54, 64, -59, 75, 78, 26, 84, -72, 72, 68, -54, 36, 6, 62, 64, -47, 46, 17, -73, -31, 78, 32, 75, -107, 65, 30, 65, 35, -60, -45, 34, 89, 75, 50, 12, 35, 63, 83, -1, -34, 54, 33, 59, 4, -79, 34, -91, 8, -29, 15, -78, -2, -65, -7, -87, 43, -50, 52, -60, 89, 46, -8, 29, 66, 39, -79, 11, -39, -5, -35, -66, 92, -75, -28, 41, -22, 23, -25, -33, 13, 85, -33, 103, -50, -54, -61, 58, -11, 99, 15, 88, -22, -49, -26, -110, 5, 79, 75, 46, -40, -69, 33, -39, -69, -43, 45, 27, 28, 67, -93, -35, 58, 61, 25, -35, -73, 46, -36, 30, 57, -65, -86, -33, 45, -49, -54, 55, -55, 77, -49, 35, 28, 83, -9, -43, 84, -80, -79, 8, -26, 54, -13, 26, 5, -73, 66, 19, -14, 37, 77, -9, -67, 28, 30, -59, 96, 65, 7, -27, 68, -46, -68, -59, 86, -50, -16, 19, 66, -65, 51, -38, 57, -38, 91, -55, -36, -52, -37, -10, -37, -88, 66, -23, 29, -86, -6, -53, 33, -16, -62, 73, 20, -32, 18, -35, 55, 54, -79, -51, -70, -26, -35, -16, 27, -98, 65, 50, -2, 2, -78, 74, 44, 69, 59, 9, 67, -80, -15, 89, 18, 85, 67, -1, 50, -76, 82, 7, -26, 38, -78, -3, -72, -17, -87, -33, 54, -34, 8, -10, 78, -50, -72, 34, -36, -2, -47, 13, -23, -6, -52, -54, 95, 43, -35, 76, 13, 92, -2, 42, 51, -44, -60, 35, 42, 73, -13, -57, 36, -55, -6, -42, -79, 23, -5, -19, -65, 43, 6, -73, -110, 23, 14, 98, 3, 12, -24, 80, -87, -25, -60, -54, -78, 105, 62, -50, 83, 87, -47, 40, -16, -19, -63, 31, 64, -50, 27, -43, -27, -9, 40, 71, -61, -64, -49, 70, 19, -38, -91, 71, 46, 12, -77, -48, -82, -6, 80, 67, -68, 43, -54, 64, -52, -76, -35, -32, 87, -16, 67, 58, 42, 30, 72, 49, 22, -18, -68, 91, -59, 65, -23, -55, 71, -20, 39, -62, -27, -75, -18, 10, 
  -72, -22, 1, -68, -28, -53, 35, -43, -35, -71, -6, -21, 38, -101, 76, 67, -10, -68, -6, 75, -56, 85, 59, -70, 28, 1, 76, -45, 43, 50, 33, -25, -78, -28, -86, -35, 34, 9, -79, -19, -25, 77, -76, 81, -59, -24, -82, 28, -97, 21, -62, -79, 34, -104, 71, 11, -43, 83, 65, -63, 29, 69, -11, -53, -73, -8, 110, -36, -26, 88, -45, -29, 79, 109, -45, 21, -58, -60, 85, 2, -94, -20, 57, -28, -69, -54, 84, 7, -3, 10, -81, -4, -43, -87, 87, -4, 89, 64, 78, 30, 71, -54, -60, 69, 18, -18, -3, 66, 9, 43, 0, 32, -71, 29, 1, -86, 0, 24, -2, -71, 7, 2, -57, -44, -32, 38, 71, 80, 72, 71, 8, -24, 70, -15, 66, 26, -63, -57, -17, -49, 65, -82, -101, -12, 81, -56, 41, 41, -25, 91, 59, -12, -30, -9, 46, 69, 78, 88, 73, 29, 105, -10, 18, 80, 57, 65, -25, 76, -8, -107, 2, -26, -34, -60, 48, 45, 31, -85, -40, -36, -13, 96, -66, -8, -92, 36, -15, -92, 53, 69, -52, 2, 47, -57, 102, 62, -25, -25, 38, 83, 56, 36, 72, 101, -94, 100, -31, 13, -2, 48, 3, -59, 13, -77, 42, 61, -62, 49, -75, 77, -81, -100, -32, -31, 25, 6, -11, -5, -18, -39, -68, -74, -66, 21, 63, 95, 62, 73, 39, -59, -58, -15, -4, 62, -93, -90, -40, 76, -94, -26, 4, -8, 2, -51, -42, 54, 20, 94, 53, 80, 66, -69, 55, 10, 78, 67, 54, 75, -11, 74, 66, -5, 65, -47, -54, 14, -10, -19, -31, 8, -86, 31, 48, 51, -73, -82, -74, 4, 74, -56, -35, 110, 2, 14, -62, 52, 51, 6, 81, -4, 65, 67, 53, 48, -90, -36, 89, -6, -63, -20, 14, 53, -48, 102, -32, 100, -63, -34, 37, -39, -31, -67, -28, 22, 18, -44, -59, -15, 51, 32, -43, -33, -4, -54, -54, 17, 49, -57, 60, 70, 2, 96, -40, -80, 95, 34, 80, -89, -101, -44, -90, 43, -7, -15, 61, 78, -43, -39, -50, 66, 37, -23, -21, -66, 66, 61, -48, -78, 58, -11, -17, 38, 71, -18, 39, -25, 52, -3, 77, 69, -6, -45, -46, -76, 19, -83, -37, 5, 52, 90, -34, 14, 90, 18, -72, 60, 93, 70, -29, -42, -40, -40, 41, -47, 73, -106, -20, -64, -46, -33, 6, -87, -87, 39, -59, 71, 93, 12, -93, -24, -14, -60, 43, 22, -2, -17, 45, -55, 35, -77, -13, 8, 18, 7, -40, 24, 42, -62, -62, -77, -52, 70, -80, -53, 74, 68, -52, -30, 61, -83, 76, 59, 92, -51, -1, 19, 71, -76, -28, 9, -31, -30, -61, 16, -75, -62, -6, 4, 26, -72, -8, 64, 83, -65, 9, -65, -84, -62, 45, -50, -15, -80, -65, 77, 48, 72, 71, -9, -70, -61, 84, 55, 28, -90, 37, 70, -91, -10, -57, 20, 68, 29, -48, -32, -77, 46, -30, 17, -67, -2, -51, 62, -35, 22, -22, 16, 68, 106, -20, -18, 73, 80, -54, -52, 47, 25, -73, 62, -101, 28, 77, -32, -12, 84, -11, 78, -37, 95, -18, 91, -86, -61, -6, 55, -2, 78, 11, -37, 32, 27, 35, -119, 10, -6, 25, 59, -43, -54, -49, -92, 46, -56, -40, -6, 47, -97, 4, 46, -96, 13, 14, 13, -12, 34, -60, 51, -68, -2, 22, 57, 89, -38, 2, -10, -28, -54, -79, 73, -21, -56, -42, 49, 90, -5, 82, -2, 74, -90, -15, -11, -24, -13, 18, 15, -66, 28, 52, 32, -11, -60, -73, -76, -49, -12, -54, 90, -12, -15, -6, -92, -71, -30, -69, -10, 62, 48, -53, -16, -6, 46, -54, 57, 20, -63, -93, 18, 17, -85, -71, -45, 40, -69, -28, 3, -14, -41, 41, -3, 49, 33, 6, 86, 8, 9, -76, 19, -4, -78, -15, -67, 56, 82, 57, 62, 59, 59, -22, -10, -43, 86, 47, -76, 46, 47, -72, 6, -54, 75, -45, -61, -36, 1, 36, 13, -13, 77, 33, -53, 69, 87, 68, 92, 18, 48, -30, -39, -63, 67, 37, -39, 38, 20, 30, 45, -45, -29, 45, 4, 31, 71, -81, -89, -5, -85, 76, -34, -20, -86, -80, -9, -54, -75, -68, -21, 45, -16, 53, 56, -111, 1, -83, 31, -7, 43, 62, 98, 23, -65, 31, 16, -103, 7, -79, 4, 40, 50, -63, 43, 24, 31, -16, -81, -66, 0, 8, -39, -19, -30, -63, -3, -30, 36, 62, -75, 52, 89, -12, -102, -55, -77, -86, -27, -7, 42, -8, -48, -62, -49, -83, 59, -81, 46, 38, -78, -3, -2, 97, -90, 64, -26, 87, -46, -92, 22, 51, 70, -68, 24, -12, -3, -95, -26, 1, -44, -34, 65, -20, -50, -53, 66, 30, 11, 27, 76, -67, 15, -15, 90, -57, 27, -46, 78, -18, -36, -29, -17, -50, -30, -49, 49, -89, -52, -44, -17, -33, 102, -37, 73, -75, 56, 65, 85, 65, 14, -23, 89, -53, -7, 35, 9, 79, 4, -27, -52, 31, -33, 7, -9, 74, 64, -65, 98, 49, 67, -69, 19, 72, 56, -22, 36, -97, -6, 51, -11, 51, -98, 14, 70, 52, -45, 0, 26, 43, -45, 31, 34, 58, -25, 43, -43, -41, -60, -35, 92, 46, 5, 7, -100, -24, -90, -89, -8, 77, 85, 87, -44, 84, 0, 49, -71, 63, 73, 42, 88, 42, 58, -27, -10, 9, 39, 57, 55, 75, -29, -62, 33, 73, 43, -60, -70, -8, 10, -78, 81, 34, 20, 16, 29, 12, 13, -96, -84, 75, 65, -33, -73, 97, 71, 71, 66, -80, 20, 1, 2, 74, -68, -5, 39, -34, 17, 48, 85, 101, 55, 44, -41, -29, 68, 33, 55, 13, 51, 39, -19, 1, 59, -14, 88, 68, -70, 2, -87, 72, 31, -14, -57, 21, -17, 74, -49, 47, 32, -53, -24, -60, -65, -39, -13, -66, -8, -51, -64, 56, 49, -3, 27, 91, 69, 12, 29, -72, -42, 108, -32, -43, 15, 44, -77, 27, 78, -41, 58, -58, 79, 74, -22, 63, 12, 86, 24, -34, -45, 44, 39, 80, 84, 57, 69, -72, 34, -19, 87, -87, -15, 64, 24, -72, 82, 28, 30, 32, -80, -17, -85, -36, -11, -25, -6, 81, -50, 63, -67, 110, -6, -74, 2, 22, -50, -6, -81, 16, 29, 87, 20, 98, -70, 47, -41, -90, -85, 23, -57, -19, 78, 74, -4, 60, -83, 101, 47, 85, 9, 64, 48, 69, 59, 19, 19, 2, -43, -61, 92, -39, -61, 75, -43, 58, 36, 18, 78, 64, -23, 3, -25, 78, 48, -68, 55, -50, 14, 71, -33, 2, -7, 24, -47, 41, 76, 79, 23, 59, -8, -51, -48, -33, -39, 75, -27, -43, -2, -50, -36, -13, -46, -70, -72, -76, -94, 70, -69, 32, -68, 52, -85, -61, 29, 97, -13, -22, -90, -21, 67, -62, -76, 0, 65, -3, 91, 68, -72, 26, -64, -13, -82, -48, 61, 8, 16, 92, 13, 12, -1, -101, 84, 18, 14, 38, 20, -71, 61, 45, 7, 66, -55, -21, 57, -90, -31, 46, 83, 41, 31, -10, -86, -23, -24, -62, 30, -21, -28, -57, 31, 11, 19, -40, 64, -27, 21, -72, 63, 40, 74, -74, 68, -12, -88, 83, 102, -67, -7, 5, 43, 86, 27, -20, -44, -68, -68, -75, -26, -6, 72, -51, 65, -63, -62, -72, 53, -65, -18, -49, -1, -48, 15, 22, 72, 75, 48, -20, -86, -87, -21, -1, 53, 98, 70, -8, 17, -1, 5, -16, 31, -10, 74, 41, -54, 0, -69, -64, -5, 
  -85, 10, -24, 92, 29, 3, 43, -70, 110, 57, 61, 76, 42, 100, -29, -24, -8, 73, -1, 51, 34, 41, 84, -78, -15, -61, 3, 69, -45, -49, -27, 61, 36, 84, 68, -46, 17, -83, -89, 18, -31, -63, 40, 55, -16, 84, 12, 64, 105, -27, -53, -90, 55, 26, -30, 56, -14, 40, -51, -33, -56, 39, 43, -87, 84, -24, 35, 58, -18, 76, -57, 50, 89, 48, 0, 98, -81, 88, -86, -96, 41, -6, -70, -88, 4, -68, -55, 40, 9, -46, 69, 47, -32, -16, 39, -47, 51, -98, -75, 85, -24, 63, -69, 19, -53, 62, -50, -20, 94, 66, -10, 19, 67, -31, 72, -45, 59, -9, -44, 98, -55, 55, -46, -43, 18, -76, 6, -29, 68, -38, -56, -31, -49, 34, 10, 79, -35, -68, 4, 34, 3, 10, 112, 59, 76, 44, -49, -19, 25, -76, 50, -11, 53, -23, -3, 89, -20, -52, -121, -56, 63, -37, -66, -84, -8, -17, 6, 46, 60, 36, 34, -33, -14, 53, 28, -87, -43, 10, -72, -62, 36, 16, 30, 63, -47, 34, 11, -76, -71, -97, -51, 1, 61, -104, -81, 29, -9, 33, -56, 84, 1, 87, 62, -51, 31, -11, -26, 56, -21, 21, -78, -37, -45, 12, 70, -21, 0, -45, 61, 83, 72, -60, -57, -16, 24, -51, 18, 3, 68, 84, 17, -68, -38, 59, 28, 51, -108, -26, -7, -12, -74, 70, -25, -81, -26, -93, -62, 55, 113, 64, 1, -62, -10, -19, -78, 4, 66, -24, -67, 88, 29, 12, -58, -96, -4, -70, -61, -73, -40, -70, 79, -101, -3, -40, 8, 102, -98, 85, 15, -8, 25, -78, -51, -55, -15, 92, 91, 24, -33, -67, -53, 59, -30, -60, -46, 47, -27, -36, 26, -36, -30, 80, 63, 44, 84, -71, 46, -19, 24, -10, 35, -17, -78, -51, 84, 56, -53, -36, -29, 69, -2, -4, -54, -36, -17, -7, -61, -54, 18, 48, 52, -90, -69, 54, -80, -65, 16, 53, 8, -20, -64, -108, -73, 59, 7, 28, -84, -1, -49, -67, -7, 27, 49, -74, 76, -20, -37, 18, -45, -37, -46, -36, 77, -64, 27, -10, 73, 21, 43, 13, -12, 47, -29, -3, 40, -8, -2, 49, -85, 89, 102, -76, -83, -76, -23, -53, 39, 66, 7, 0, -76, 8, -87, 69, -44, 63, -75, -48, 42, -68, -79, -79, -40, 43, -71, -41, -63, -20, -44, 15, -6, 76, -57, -79, 88, 16, 87, -48, 34, 1, -40, 15, -36, 1, 87, -16, -12, -10, 37, -103, -35, -57, -16, -70, 86, -26, 71, 4, -41, -59, 1, -89, 60, 43, -53, 5, -85, 45, 37, 14, -19, 62, 70, 90, -13, 22, 20, -72, 21, 7, -100, 2, 82, 31, -63, -48, -75, -31, 61, -30, -51, -58, -11, -14, 0, -25, 0, 8, 62, -52, 35, -76, 57, -58, -60, -45, 103, 35, -66, -82, -84, 62, 72, 20, -9, -73, -64, -70, -2, 93, -53, 78, -40, 10, -84, -84, -22, -81, -15, -30, -59, -25, -6, 21, 29, 13, 91, -3, 65, 4, -78, -94, 110, -35, 59, -88, -49, -46, 92, -82, -49, 69, 38, -43, -81, 76, -58, 73, 77, 4, 54, 2, 17, -32, -38, -21, -10, -101, 18, 31, -28, -17, 74, -13, 1, -84, -27, -64, -38, -23, 78, 42, -73, -49, 16, -20, 86, -39, -53, -59, 33, -13, 4, -54, -48, -69, -94, 47, 26, -14, -1, -3, 28, -76, 40, -59, -69, -74, -2, -23, -10, 26, 11, 75, -26, 12, 14, 75, 42, 7, 64, 44, -49, -6, 37, -68, -59, -70, -29, -78, 5, 51, 85, -2, 93, -31, 44, -7, -88, -57, -7, 14, -8, -50, 15, 74, -46, -41, 74, -81, -31, -38, -44, -92, 39, 77, 87, 86, -92, -68, -106, 56, -51, 38, 6, 71, 40, -70, -3, 35, 12, 42, -70, 35, -61, -88, -14, 7, -53, 19, -9, 76, -41, -23, 46, -52, -10, 54, -34, 49, -102, 19, -44, 3, -57, 49, 38, -19, -31, -85, -35, -15, 106, 23, -56, 32, -59, -81, 70, 75, 60, -38, 85, -39, -21, -70, -53, -63, 107, -83, -68, 19, 89, -76, -92, -100, 61, 70, 51, 71, 30, 29, -54, 25, -105, -32, 21, 3, -17, 43, 46, 94, 32, 88, -68, 33, 48, -9, 112, -29, 28, -74, -14, -27, 13, -101, 68, -73, -23, -48, -17, 57, 60, 26, -90, 90, 52, -113, 32, -77, 51, -43, -62, -51, 33, 50, -52, -30, -74, 43, 82, -46, 56, -83, 11, 63, -10, -67, 29, 68, -48, -37, -52, 86, 13, -31, -17, 54, -8, -3, 59, -67, 67, -97, -54, 67, 57, 19, 91, -40, 66, -23, -90, -42, -64, 66, 61, 74, 87, -10, 19, -67, -57, 45, -71, 58, 70, 18, -34, -66, 97, 37, -66, -21, -40, 7, 75, -64, -16, -94, 91, -103, 60, -84, 41, -76, 66, 57, -61, 69, 4, 13, 39, -70, -82, -8, 6, 56, 58, -58, 88, 36, 15, 88, 8, 73, -7, -45, 59, 55, 70, 49, -60, 23, 55, 39, -47, 72, 78, -68, 26, 65, -50, 46, -10, -74, 50, 0, 15, -35, 108, -30, -67, 58, -19, 104, 61, 89, -24, -5, 38, 40, 74, -89, 67, 21, -37, 72, 50, -45, -52, 98, -59, 83, 28, 41, -44, -21, 65, 20, -56, 3, -112, 4, -30, -66, 23, -35, 89, -6, 102, 18, 85, 22, 72, 83, -20, 54, 10, 21, 1, 39, 13, -2, 67, 8, 17, 11, 31, 105, -63, 66, -11, 13, -15, 56, -45, -71, -22, 1, -23, -23, 45, 24, 95, -11, 39, 44, -54, -54, 37, -39, 31, 90, 59, -34, 31, -41, -92, 41, 5, -46, -109, 12, 65, -27, 25, 4, -45, -72, 54, -24, -87, 0, -27, -4, 58, 46, -59, -58, -17, 35, -68, 49, -19, 2, -93, 55, 22, -1, -51, 91, 42, 1, -1, -79, -24, -75, 43, -93, 48, 40, 27, -1, 29, -35, 85, -16, -39, 66, 88, 31, 9, -93, -79, -103, -53, -68, -75, -12, -29, 79, -48, 19, -80, 54, 75, -18, 27, 90, -43, -37, -24, -11, 17, 83, -38, -77, -94, -43, -74, 83, -73, -41, 57, 27, 19, -22, -3, 15, -35, -75, -67, 78, -54, -9, 52, 75, -48, -23, -16, -4, -60, -14, 3, 27, 53, 9, 68, -63, 93, -59, -32, 76, 26, -36, -75, 54, 52, -46, -12, -41, 96, 42, 72, 45, 6, 16, -3, 76, 51, 23, 69, -21, -60, -2, -79, -37, 1, 2, 30, 74, 59, 38, 62, 92, -5, -48, -75, -51, 95, -95, -45, -54, -3, 7, -43, 89, -30, -52, 51, 27, -22, -23, -7, -19, 27, 92, -17, -57, -78, -57, 81, -80, -42, 53, 34, -69, 13, -81, 87, -3, 12, 57, 50, 13, 70, -30, 9, -12, -69, -63, -24, 96, -53, -36, 41, -76, 0, 61, 47, 7, -87, 27, 24, 13, 20, -70, 55, -73, 0, 39, -6, -84, -29, 69, 39, 78, 64, 30, -30, -9, -3, 79, -41, 84, 48, -23, 20, 52, 90, 3, 2, -33, -12, -62, -79, -61, -67, 76, -10, 50, 17, 93, -7, -40, 83, -66, -17, -80, 67, -21, 10, -17, -65, 90, -85, -40, 3, 62, 15, -34, 39, -6, 32, 63, -73, -51, 19, 14, 61, -46, 77, -16, 29, -68, -89, 82, -32, -84, 60, -75, 33, 21, 89, 16, 89, -84, -31, 4, -66, 34, -15, 12, 32, -10, 75, -22, 60, 75, -20, -9, 97, 82, 6, -9, -21, -76, 16, 37, -25, 92, -97, -85, 59, -35, 20, 32, 71, 35, 
  72, 0, 51, 39, -42, 72, -60, -67, 73, -62, -69, 47, -17, 61, 40, 9, -52, -46, -82, -31, 17, -87, 1, -66, 55, -9, 54, -42, -62, -79, 29, -71, 21, 66, -91, -47, -52, 57, 38, -76, -50, 85, 24, -66, 42, -105, 35, 26, 108, -29, -27, 61, -60, -34, 26, -35, -11, 19, -56, 97, 60, -63, -43, 73, -86, -96, 23, 58, 30, -17, 1, 48, -19, -7, 70, -13, -66, -50, 18, 61, 36, -50, -13, 63, 53, -67, -35, 8, 25, 59, -102, 29, 67, -68, -77, 17, -3, 101, -37, 23, -18, -39, 43, 44, -96, 47, 33, 83, -26, -62, 77, -43, 70, 23, 111, 97, 18, 9, 30, -92, -85, -104, 37, -106, 61, -51, -45, 84, -70, 29, 95, 72, 96, 88, 67, 53, -85, -55, 43, -25, -85, -5, 13, 81, 78, -8, 49, -34, 25, 40, -1, 69, -65, -66, -77, 58, -53, 50, 6, -20, -10, 102, 60, 76, -48, -9, -74, -57, -84, 50, -82, 104, -14, -16, -24, 6, -79, -2, 22, -80, 13, 52, 22, -67, 77, -5, 58, 58, -8, 34, 41, 63, 28, 51, -12, -26, -78, 31, -40, 95, -12, -95, 44, 44, 69, -4, -31, -37, 70, 30, -10, -94, 15, -35, -59, -27, -31, 36, -16, 34, 81, 51, -27, 60, -43, 40, 12, -12, -48, 25, 16, -92, -16, 29, -68, -73, -100, 91, -2, 103, 85, -61, -76, -17, -70, 23, 94, -8, -91, -31, 54, 35, 9, 3, -26, 53, 22, -14, 85, -81, -13, -24, 64, 71, -91, 35, 22, -34, 34, 31, 7, 25, 12, -54, -31, 27, -37, -16, 37, -74, 95, 33, -5, 99, 88, 45, 23, 12, -79, 76, 65, 25, -25, -8, -20, -78, -104, -74, 51, -42, 32, 98, -2, -14, -79, -88, -32, -10, -19, 18, -17, -75, 33, -49, 69, -90, 18, 66, -2, -11, -16, -76, -74, 22, 31, 75, 10, 94, -44, -40, 0, 39, -51, 85, 59, -51, 56, -78, 69, -94, 13, 51, -5, -12, -67, -37, 5, 6, 11, -121, 73, -15, 81, -29, -37, -2, -79, 63, 24, 13, 38, 31, 66, -10, -30, 22, 103, 53, 4, -16, -10, 34, 87, -39, 43, 18, -76, 81, -65, 43, -70, -84, -85, -31, -43, -40, 16, -50, 45, -87, -77, -1, 21, 35, 40, -38, 71, 52, -18, 64, -88, 78, 38, 6, 35, -30, 64, 104, -24, 87, -31, 59, 86, -78, 27, 92, -89, 59, 7, -4, -36, -55, 90, -84, 25, -16, 4, 6, -73, -68, -24, -14, -41, 33, -20, 39, -81, 52, 25, -86, 72, 47, -95, -77, 54, -80, -27, 27, -86, 38, 67, -52, -36, 7, -82, -85, -61, 74, -91, 86, -58, 83, 71, -82, 7, -119, -41, 70, 24, 9, 42, 41, 2, 2, -13, -13, -88, 45, -8, 63, -78, -82, 13, 60, 46, 70, 50, -21, 88, 70, -14, 103, 68, 14, 33, 27, -42, -17, 58, 46, 23, 13, -16, -78, 7, -67, 53, -80, -50, 6, -14, 60, -23, 39, -23, 28, 46, 58, -63, -21, 56, -76, 18, -35, -74, 56, -24, -32, 7, -96, 26, -29, -53, -70, 29, -74, 31, -49, -1, 29, 51, -13, 46, 26, -37, 27, -7, -14, 41, -43, -9, 50, 49, 20, -28, 41, 5, 29, 101, 3, -22, -18, 84, -89, -37, -29, -48, 14, 80, 9, 14, 39, 9, 65, 91, -24, 42, -85, 6, 40, -69, -49, 29, -43, 26, -57, 21, -45, 68, -13, 4, -58, -48, -79, 51, 29, 38, -37, -70, -50, 37, 18, 63, -80, 34, -8, -78, 86, 21, 20, 48, 47, 71, 2, 36, 26, 2, 11, 57, -14, -8, -56, -20, -37, -17, -82, -23, 4, 74, -62, 70, 87, 26, 43, 78, 40, -85, 25, 47, -19, 55, 35, 72, -90, -92, -88, 8, -65, 65, -99, 76, -109, 67, -55, 27, 48, 46, 14, -62, 50, 47, 23, -76, -3, 41, 15, -47, -52, 38, -26, -9, 31, 83, 84, 7, -72, 51, 23, 16, 49, 9, -42, 31, -39, -60, -87, 6, -12, 19, 35, -25, -3, -14, -107, 68, -76, 1, -67, -3, -78, -85, 4, 16, 4, 14, 2, -80, -42, 81, -12, -101, 12, 35, -30, 78, -81, -86, 7, 61, 71, 16, 20, -69, 74, 24, 37, -33, 35, -16, 8, 26, -5, -84, 42, -5, 0, -49, 62, 28, 8, -71, -75, -47, 46, -107, -50, -5, -2, -58, 17, -43, -65, 34, -46, -23, 62, -35, -91, 84, -33, 76, -43, -30, -51, 61, 56, 66, 6, 109, -66, -11, 18, 93, -49, -43, 44, -56, -70, 51, -28, 70, -78, 28, -17, -76, -89, -66, 25, -10, 56, -22, -57, 11, 4, -20, 97, -53, 27, -80, -25, -38, 75, -53, -2, -24, 6, 67, -4, 26, -27, 89, -79, -86, -12, -25, 18, 52, 34, 49, -48, -91, -93, -48, 12, 89, 6, -49, 88, -57, -7, -30, -67, 68, -81, -29, 81, -89, -76, -71, -8, 13, -27, -29, -74, 21, 41, -11, -78, -100, -41, -88, 33, 79, -9, -18, -97, 32, 43, 8, 57, 29, -69, -76, -42, -79, -45, -107, -15, 43, 22, -5, 51, -47, 34, 12, 2, 14, 21, -13, 75, 12, -83, -20, 46, -12, -90, 14, 62, -74, 74, -75, -44, -96, -61, 99, -70, -84, 85, -8, 44, -88, -2, -111, -34, -3, -23, -16, -99, 40, 52, 83, -89, 31, -31, 39, 32, 77, 98, -8, 24, 39, -75, -56, -60, -58, 41, -63, 3, 66, -93, 32, 19, 61, -61, -103, 34, -63, 64, 89, -8, -55, -76, 72, -32, 17, -13, 23, 38, -40, 52, 18, -48, 87, 57, 87, -17, -62, 56, 0, 23, -60, 43, 44, 84, 23, -59, 13, 109, -40, -46, 90, -73, 96, -17, -55, -45, -14, 19, 0, -68, -20, -79, -51, -70, 32, 2, 87, 87, 10, -6, -63, 81, 74, -64, -71, -13, -40, -66, 39, -29, -60, 11, 97, -49, -55, -60, -76, 19, -83, -62, -13, 7, 105, -91, 49, 44, -16, 66, -85, -45, 16, -92, 24, 66, -97, -38, 70, 82, -1, -21, -86, 76, 17, 25, -41, -77, -38, -25, -62, -6, 105, 71, -19, 81, 16, 54, -104, 4, 8, -46, -66, -82, -66, -8, -62, 71, 4, 18, -31, 55, 38, -82, 16, 70, -26, 33, -89, -105, -30, 60, 49, 60, 21, 24, 7, -37, 67, -81, -53, -18, -62, -46, 14, 68, -72, 2, 51, 78, 18, 10, -25, -7, 22, 53, 70, 3, -91, -89, 4, 61, -40, -31, 19, -53, 32, -2, 97, 12, 25, -83, 65, 43, 107, -54, 27, 41, -70, -39, 15, -55, 86, -44, -44, -20, 18, 65, -44, -17, -9, -43, 86, 2, -37, 12, 8, -75, -8, -9, -72, 22, 33, 82, -4, 9, 38, 31, 4, 40, -16, 58, -37, 72, 94, -39, 55, -6, 65, -82, -80, -17, 33, 52, -70, 30, 72, 8, -66, 70, -53, 28, 78, -13, -28, 88, 34, -18, -1, 15, 17, -19, -28, -55, 57, 78, 12, -71, -14, 54, -59, -24, 59, 56, 39, 51, -79, -88, 71, 59, 32, -32, -6, 16, 88, -58, 53, -60, -69, 57, -31, 19, -31, -26, -79, -41, 15, -74, -29, 91, -47, -100, -48, -69, 96, -17, 75, 0, 30, 59, -42, 12, 43, -39, -79, 52, -32, 45, -65, -56, 14, 37, -51, 1, -79, -55, -43, -55, 36, -76, -7, 32, -20, -34, -61, -67, -89, -4, -40, 77, 6, 60, 79, 77, 67, -18, 51, 64, -18, 36, 30, 1, -94, 50, -19, 70, 56, -24, -38, 59, 84, -46, 
  75, -15, 62, 69, 52, -1, 48, 70, -15, 30, -66, -54, -56, 7, 87, -24, -25, 38, -17, -28, 7, -79, 90, -47, 7, 31, -49, -6, -57, 45, -22, -11, -3, 88, -6, 30, -27, 55, 85, 7, -91, -78, -51, -51, -62, -21, 92, -68, 25, -56, -31, -86, -33, -26, 61, 41, 38, 23, -18, -52, -19, -47, 80, 78, 63, 22, -6, 9, -66, 102, -43, -4, 47, -30, -65, -44, 13, -66, 51, 66, -64, 3, 61, -21, 77, -38, 22, -78, -68, 61, -12, -44, -17, -72, 15, 71, -3, 44, 50, 1, 28, 69, -78, 4, 47, -46, 81, 26, 32, 83, -56, 98, -10, 29, 98, 53, -19, -83, -39, -85, 86, -21, -30, -68, -9, -39, 27, -21, -49, -30, 16, 8, 93, 77, -39, 52, 67, 23, -72, 26, 46, 30, -58, -63, -23, 15, -61, 5, -100, -83, -1, 62, 84, -10, 49, 57, -68, -12, -8, 74, -25, -34, 58, 47, -73, -20, 18, -15, -59, -96, -40, -4, -47, 27, 88, 89, 36, 38, -39, 79, 54, 28, -75, -48, 2, 69, -75, 64, 9, -1, -15, 7, 17, 91, 61, 72, -75, 98, -68, 56, 66, -21, -21, 77, -80, -89, 51, 35, -40, 26, 89, 39, -19, -92, -25, -101, 0, 62, 91, -3, -69, -66, -7, -6, -82, 35, 39, 7, 15, 47, 88, -36, 96, 22, -47, -75, -38, 56, 11, -19, 55, 33, -52, -46, -23, 25, -39, 77, 24, 100, -55, 91, 72, -8, 96, 58, -94, -44, -47, 86, -58, -15, -59, -3, -68, 72, 78, -8, -60, 74, 30, 38, -75, 31, -66, -87, 103, -19, -63, 71, -77, -56, -66, -36, -53, 71, 3, 48, 96, -30, 45, 108, 79, -17, -41, 48, 26, 17, 28, -59, -54, 33, 71, -51, -84, -12, -81, -5, 7, -30, 45, 36, -55, 30, -21, -40, -92, -47, -3, 12, -33, -52, -50, -29, 18, -52, -49, 48, 107, -24, -10, 80, 8, 7, 1, 2, 82, 13, -79, -57, 11, -10, 20, -54, -1, 10, 30, 56, 7, -64, 11, -2, 86, 59, -34, -8, -17, 12, -53, -71, 68, 68, -84, 8, -57, 36, -90, -39, -50, 21, -14, 1, 59, 45, -33, -14, -63, 37, 46, -86, -79, 79, -87, -64, 15, 85, 79, 34, 66, -38, -29, -14, -83, 27, 69, 8, 35, 6, 74, 65, -67, -46, -45, 44, -31, 26, 63, 13, 75, -72, -7, -73, -36, 17, 54, -35, -10, -63, 1, 66, 13, -48, -26, 48, 65, 103, 27, 81, -76, -77, 15, -71, 55, 72, -51, 5, -35, 11, -23, 75, -3, -52, 75, 23, 61, 91, 35, 57, 1, -87, 16, -59, -23, 25, -34, -3, -93, -78, -36, -77, 91, -50, -9, -24, -61, 53, 29, 33, 31, -13, -39, -45, -66, 5, -23, -61, -80, 59, 74, 66, -23, -18, 62, 92, -8, 0, -63, 64, -24, -51, 74, 55, -65, 3, 88, -65, -84, 67, 11, 64, 89, -62, 73, -96, -59, -78, -11, -9, 69, 96, -21, -110, 76, 38, -85, 31, -37, 16, -48, 26, -65, -91, -45, -63, 21, -28, -43, 77, 90, -4, 65, 10, -86, 87, -37, -70, -40, -76, 23, 62, -42, -34, -19, 3, -76, -77, 50, 51, -12, 68, -44, -67, -53, 1, -77, -65, -64, 30, 80, -62, -47, 71, -62, -11, 53, -21, 79, 48, 6, -20, -76, -57, -85, 22, 56, 56, 17, 22, 42, -45, -10, 93, -52, 41, 17, -38, -57, -22, -55, -74, 64, -82, -30, -76, -22, -25, -89, 1, 90, -3, -64, -98, -54, 55, -70, 72, 90, -7, 83, 56, 66, 90, 65, -31, 85, 0, -56, 74, -77, 89, -22, 53, -28, -64, -77, 75, 47, 77, -19, -73, 72, 64, 26, 63, 64, 60, -66, 87, 89, -35, 7, -25, 96, -9, -9, 28, -62, 32, 89, -13, 19, -64, 34, 67, -28, -35, -10, 77, -83, -68, 12, 1, 80, -56, 42, -40, -44, -11, -49, 48, -5, -8, -108, 88, -35, -83, -40, 70, -44, -53, 85, 26, -33, 69, -37, 27, 13, -7, 30, -55, 11, 31, -45, 72, -88, 66, 8, 57, 51, -44, 37, -92, -9, -3, 51, -81, -29, 68, -54, -39, -36, 75, 17, -62, -49, -38, -9, 58, 76, -26, 60, -17, 34, 92, 92, -5, 22, -54, 82, 27, -92, 52, 35, -6, 2, 26, 45, 82, -81, 93, -83, 60, -103, -18, -19, 5, -30, 49, -68, 42, 69, 47, 15, -43, 36, -85, -38, 37, 17, -64, 72, -47, 30, 31, 12, -22, 41, -65, -46, 12, 59, 84, -81, 80, 18, 86, 29, 6, 96, 24, -64, -14, -21, 89, -80, -25, 88, -2, -88, 51, -6, 75, 53, -7, 19, 67, 74, -75, -72, -39, 72, -50, 53, 88, -43, -31, 40, -36, -74, -6, -64, -91, -11, -8, -4, 84, -12, -10, -67, 32, -48, 108, 61, -94, 43, -74, -21, -23, 41, -35, 92, -57, 52, 89, 90, 4, 101, -17, -15, 79, 90, 29, 87, 40, 33, -14, 5, -8, 94, -59, 82, 79, -75, 45, -86, 10, 91, -93, -15, 6, 84, -34, 95, 30, -47, 30, 47, -41, 84, -12, -50, -18, -44, -48, 66, 47, 46, -85, -56, 35, 26, 3, 9, -75, -64, 37, 76, 74, 18, -9, -62, -18, -25, 1, 55, 17, -81, 22, 36, -19, 28, 52, -44, 53, -20, -13, -20, 52, -79, -29, 41, 72, 70, -102, -28, -45, 95, -16, -32, 67, 88, -101, 11, -41, 58, 24, 95, -30, 14, 52, -20, 56, 55, -20, -3, -10, 79, 55, -72, 19, 40, 71, 64, -40, 42, 44, -8, -35, -83, 3, -7, -23, -43, 74, -90, -40, 0, -90, 10, 85, 75, 12, 93, -99, -15, 85, 21, 58, -73, 4, -16, 0, -65, 84, 38, -29, -3, -13, -17, -22, -51, -18, 2, -63, 39, -77, -4, 13, -8, 33, 8, 16, -79, 45, -34, 26, 69, 47, 7, 51, -11, 26, -33, 69, 77, 87, -47, 28, 78, 83, -81, -6, -74, 35, -59, -93, -58, 84, -65, -71, 58, 2, -31, 60, -34, -75, -77, -17, 14, 95, 5, -27, -66, -51, 13, 84, -14, 46, 90, -15, -62, 4, 36, 61, -69, 92, 99, -12, 47, -27, -66, 84, -86, -35, 118, 3, 23, -24, 31, -12, 3, -48, -20, -54, -96, -61, -43, 38, 29, -50, -34, 29, 56, -14, 61, 19, -51, 25, 45, -51, 79, 54, 15, 101, -27, -33, 84, -40, -86, -2, -38, -31, 50, 19, -4, 29, 2, 64, 2, 78, 88, 59, -86, 89, 12, -13, 46, 73, 44, 81, -16, 21, -50, 72, 24, 30, -54, 53, -44, -57, -62, -49, 15, -43, 38, -29, -75, 89, 5, 63, 14, -34, -16, 33, 50, -12, -83, -38, -79, -77, -9, -78, 28, -31, -20, 73, 50, -8, -29, 69, -5, 65, -48, -13, 82, -32, 48, -5, 0, -20, 7, -71, 112, 20, 35, -64, -87, 67, 82, -94, 62, -8, -19, -21, 40, -37, 80, -49, 47, 87, 111, -41, 48, -46, -13, -1, -60, 28, 75, 41, -74, 54, 59, 34, -27, 85, 12, 73, 21, -55, -32, -32, -48, -87, -97, -10, -44, 26, -79, 63, -46, -50, 59, 47, 29, 17, -78, -65, -36, 69, 60, 12, 52, 7, 83, 31, -9, 29, 44, -63, -49, 18, 8, -59, 20, 71, 15, 91, -7, -76, 28, 15, 9, 8, -5, 3, -81, -93, 80, -78, 37, 61, -34, -91, 30, 79, -15, -9, -70, 11, 14, 47, -68, 0, 83, 57, 7, 77, 10, -74, 33, 18, -57, 91, -66, -8, 91, 78, 19, 58, 
  -51, 52, -85, -46, 18, -71, 52, 61, 66, -90, 84, -32, -79, -48, 80, 48, 15, 16, 82, 33, 64, 94, -36, -8, 74, 26, -14, 35, -27, -69, -35, 27, 87, -60, -78, 88, -52, 4, -56, -14, 9, 64, -66, 22, -43, 71, -14, -94, -24, 34, -75, -67, 37, 58, 35, -23, 31, -34, 18, -79, 3, 32, 24, 1, 80, -62, 95, 81, -20, -37, -73, -46, -22, 22, 32, 61, 77, 20, -81, 11, -85, -17, -52, -78, -49, 46, 27, -7, -28, -28, 97, -53, -72, -61, -49, -33, -78, 7, -18, 30, 16, -24, -90, -51, 109, -71, -29, 90, 17, 76, 78, 5, 53, -56, -65, -116, -13, 6, -28, 67, -44, -26, 58, -34, -15, 78, 4, -14, -12, -71, -71, 33, 21, -1, -59, 74, -63, 61, -64, -2, 68, -21, 11, 57, -59, 33, 71, -80, -89, 92, -12, -42, -51, -18, -63, -73, 70, 108, -41, 69, -7, -41, -83, -11, 51, -17, 58, -9, -43, -41, -77, 116, 3, 67, 27, 86, -80, 33, 57, -62, 45, 68, -21, -77, -36, 70, -62, -90, 11, -33, 8, -3, -61, -91, 45, -39, -17, 92, -28, 12, 34, 80, -17, 30, 51, -34, 50, 58, -37, 19, -12, -30, 44, -76, -62, -28, 81, 6, -108, 51, -51, -31, 70, 54, -85, -40, 46, -22, 11, 34, -26, -82, 5, 8, -68, 71, -35, 15, -28, -72, 60, 84, 44, -54, 49, -13, 60, -13, -40, -98, 74, 43, -21, -13, -56, -28, 27, -54, -57, -29, 14, 4, 38, 87, 44, 32, -17, -44, -43, 31, 39, 50, -67, -52, 10, -36, -5, -12, -54, 70, -50, 58, -68, 16, 28, 28, 15, 33, -46, -34, 72, -10, -81, 75, 61, -30, -57, -26, -76, 70, -29, 26, 18, -54, -47, -77, 82, -50, -8, 68, 33, -8, -75, -25, 63, -18, -11, 37, -37, 15, 17, 6, 20, -52, 78, 13, -96, 51, -29, 87, -17, -21, -26, 83, 26, 50, -40, -41, -63, -42, -41, -46, -42, -74, 7, 19, -82, -66, 39, 96, -21, 46, 65, -39, -71, 5, -76, -74, -66, -14, -84, -34, 94, -24, 74, 54, -35, 64, -17, 11, 5, 9, 40, -67, -50, -79, -12, 40, 30, 86, -35, 83, -63, -64, 98, -35, -5, -36, -8, 69, 67, 37, 37, 30, -20, 25, -42, -31, 39, -59, -6, -26, -36, -87, -96, -62, -82, 38, -70, 63, 11, 89, 79, 82, -49, 38, 6, 73, -24, 67, -25, 68, 74, 77, 46, 90, 37, 53, 52, -85, -63, 25, 13, -50, 78, 78, -32, -6, -52, 25, -4, -86, 64, -55, 12, -42, 46, 44, -7, 72, -69, -72, 4, 25, -78, 68, -30, 8, 71, 11, 30, 27, -12, 64, 8, -64, -41, -58, 20, -11, 76, 45, 37, -21, -92, -3, 75, 56, -93, -47, 3, 95, 68, 44, -77, 86, 44, -26, -68, -91, -57, -9, -54, 37, 24, 42, 62, -35, 18, 13, 36, 19, -41, 43, -45, 56, 68, 22, -80, 72, 70, 48, 61, 58, 25, -12, -19, -40, 57, -21, 26, -24, -1, 66, 29, -34, 21, 83, -59, -70, 32, 73, 35, -24, -3, 20, 35, -75, 61, -47, 3, -75, 32, -54, 19, 98, -25, 37, 68, -99, -29, -7, -58, -8, -78, 18, 107, -37, 17, 42, 48, -90, 10, -23, 8, -91, 22, 86, 30, -7, 54, -88, 15, 85, 36, 75, -10, 36, -90, -45, 10, -9, -39, 46, 77, -20, 65, 6, 47, -56, -14, 7, 37, -80, 70, -62, -23, -2, 93, -98, -35, -37, 38, 71, 31, 39, -47, -10, 77, -72, -63, -4, 77, 90, 77, -77, 40, 38, 19, -69, -85, -14, 30, -27, 9, -35, -95, -6, -83, 41, -83, 83, 66, -67, -2, -41, 1, -75, -2, 77, -66, 29, 67, 32, -21, 16, 28, 71, -3, 71, 14, -17, -66, -67, -59, 29, -35, 51, -81, 35, 48, -20, -40, -66, -56, 8, 17, 88, -42, 48, -16, 18, -64, 41, -95, -10, -26, -46, 1, -29, 32, 96, -59, -63, 56, 3, -52, 22, 39, -9, -65, 21, 15, 26, 33, -64, -39, 24, -58, 1, 45, -40, 39, 80, -42, -84, -55, 71, 79, -79, -78, -86, -4, -41, -61, -61, 85, -32, 11, 61, -75, -70, -8, -52, 83, -92, 24, -54, -5, -92, -22, -21, -37, -19, -25, 19, -32, 32, 41, 84, 1, 5, -56, -56, 6, 50, -89, 71, 44, 96, -76, -68, -83, -27, -84, -73, -82, 71, 76, 4, -26, 3, -16, -45, 21, 41, 13, 10, 13, -30, 79, -4, -65, -40, -62, 33, -21, 22, -7, 5, -50, -10, -39, -18, 74, 12, -22, -47, -45, -59, -53, 58, 22, 32, 36, 79, -23, -6, -52, 45, -82, -92, -85, -57, 39, -30, -6, 1, -38, 25, 61, -23, -30, -49, 83, 40, 49, 54, -62, 63, -78, -88, 78, -32, 8, -41, -47, 0, -5, -35, 63, -33, -53, 18, 29, 38, 35, -31, 42, 76, 61, 92, -1, -48, 75, -56, -31, -3, -41, -107, -68, 81, -10, -63, 46, 103, 86, -76, -60, 18, -94, -6, 31, 2, 39, 16, 75, -46, 25, -46, 7, -45, 96, 95, 81, -70, -48, 0, -59, 80, -16, 78, -6, -7, 1, -13, 85, -99, -86, 58, 64, 74, -60, 67, -65, 38, 69, -1, 65, -93, 27, 32, 54, -84, -2, -99, -28, 37, -60, 17, 102, -13, -28, 45, 33, -6, -44, 93, -80, -67, 35, -38, 40, 16, -13, -45, 30, 19, -82, 30, 1, -88, 0, 45, -7, -3, -4, -44, 63, -93, 5, 53, -4, 31, -74, -25, 82, 18, 38, -49, 40, 37, 76, -43, 55, -34, 28, -21, 95, -75, 4, 33, 6, 38, -21, -27, 58, 54, 68, -68, -89, 25, 67, -64, 52, -26, -58, -68, 3, -10, 75, -36, 32, 27, 23, -58, 63, 64, -3, 18, -22, 5, -80, 40, 35, 82, -27, 65, -8, -41, 73, -70, 84, 36, -45, -5, 11, 11, 57, 3, -26, -42, -6, 41, -5, 44, -10, -11, 98, -61, 44, -12, -64, -15, 8, -54, -16, -69, -63, 75, -17, 20, -24, 79, 27, 21, -16, 65, 10, 0, -64, 93, 62, 37, -91, -76, 24, -25, 53, 14, -79, -33, 62, 11, 26, -41, -46, 50, -59, 30, 58, -98, -28, -37, -59, 51, 36, -49, -18, -62, -10, -41, -96, -99, 77, -4, -83, 72, -65, -25, 55, 62, 26, -1, -83, 21, -63, 51, 110, 4, 39, -47, -62, -63, -75, -53, -50, 71, 15, -44, 11, -56, -41, 48, 53, 54, 66, -58, 90, -86, 49, 64, -15, -20, 47, -67, -68, -41, 53, -42, 21, 49, 23, -43, -42, -58, 16, 69, -73, 3, 19, 71, -74, 78, -11, -70, -60, -64, 36, -65, -55, -55, -16, -4, -47, -23, 39, -35, 89, 64, 27, -46, 55, 14, 12, -19, 14, -54, 30, -8, -44, 21, 96, -52, 1, -98, 93, -63, 68, -64, 56, -81, -47, -45, -5, 3, 66, -38, -42, -86, 38, 28, 22, 62, 54, 93, 84, 15, -69, 43, 13, 92, -4, -56, 96, 17, -42, -75, -63, 2, -110, 37, -25, -15, 14, 24, -52, 75, 47, -7, -27, -14, -47, 25, 72, 16, -89, -28, -66, 15, 45, 18, -81, 39, -40, 66, 54, 14, -41, 41, -56, 18, -40, 52, 62, 1, -41, -53, 4, 93, -49, -46, -73, -32, -14, -62, 73, -44, 51, 99, -84, -66, -29, -79, -33, 9, -87, -81, -62, 72, 44, 44, 88, 26, 24, -89, -70, -15, 54, 23, -26, 35, -82, 67, 36, 15, -37, 70, -63, -8, 
  -21, 55, 22, 14, 65, 33, -52, 11, -27, -63, -54, -18, -3, 61, 8, -48, 52, 55, 25, -4, -47, -2, 54, 50, 35, 89, 22, 13, 45, 45, 110, -33, 60, 10, -35, -19, -15, 5, -57, -26, -76, 48, 81, 71, 18, 63, -84, 67, -35, -35, -4, 61, 19, 16, 93, 74, -8, -40, 0, 35, -25, -34, -88, 33, -66, -66, 41, -65, -11, 50, -25, -40, -19, 24, -60, -5, 46, -76, 79, 51, -47, -10, -46, 56, -16, -22, -44, 61, -45, 38, 31, -85, 33, 40, -68, 74, -10, 77, -49, 16, -90, -72, -56, 61, -92, 9, -87, -50, -72, -99, 99, 37, -49, 57, 10, 67, 22, 91, -59, 87, 40, -29, 63, 85, 10, -59, 8, -58, 102, 61, 87, 37, 81, 39, 3, 78, 45, 21, 82, -73, 46, 66, -82, 31, 38, 34, 42, -68, -86, 83, 16, -69, -87, -57, -55, 26, -85, 83, -127, -28, -52, 51, 26, 92, -85, 70, -78, -52, 2, 44, -68, 114, -44, -42, -73, 9, 63, 88, 84, 48, -43, 71, -31, -8, -20, 48, 70, 38, -15, 28, 78, 98, 7, -45, 110, -51, 74, -60, -17, -77, -79, -12, -44, -72, 89, 46, -55, -5, 64, -12, -73, -85, -83, 24, 39, -79, 75, -21, -90, 74, 83, 53, -28, 17, -77, -51, -24, 19, -15, -83, -64, 54, 19, 71, -26, 31, 55, 22, -40, -27, -85, 72, -54, -64, -93, -68, 52, 79, 0, 54, 3, -75, -11, -2, 79, -48, -86, -82, -4, 25, -10, -66, -76, -30, -39, -57, 99, -61, 24, 20, -88, -13, -75, 14, -87, -39, -40, 55, -12, -18, 37, -25, -41, -39, -53, 36, 42, 87, 36, -16, -49, -42, 47, 80, -2, -13, -15, -26, 96, -41, 9, 97, 76, -73, 45, -68, -51, -73, -31, -29, -46, 37, -39, 32, -15, -46, -20, 31, 24, -65, 25, -79, 17, 86, 30, -61, 5, -71, -61, -28, 83, -22, -57, 1, -79, -15, -70, 83, 34, -40, -25, 49, 2, 77, 28, -90, -34, 65, 2, 4, 45, -20, 2, -46, -45, 20, -12, -69, 26, -56, -25, -48, 64, 47, -19, 67, -18, 29, 66, 8, 84, 43, 25, -28, 49, 94, 17, 77, 93, -19, -38, -16, 34, 11, 70, 33, -12, 70, -44, 40, -10, 33, 43, 83, 80, 45, -65, 17, 75, -54, 4, -21, -48, 76, -44, -18, 11, -94, 47, -73, 113, 1, 15, -82, -3, -50, 63, 59, -22, -59, -55, 44, 21, 44, 47, -27, 13, 12, -6, -18, -39, 71, -19, 60, -20, -35, -50, -40, -71, 79, -48, -55, 48, -20, -18, -88, 0, 2, -60, -83, -67, -1, 16, 80, 80, 82, -33, -67, -17, -44, -15, 38, 42, -83, 28, 18, -8, 31, -8, 82, -25, -71, 56, 81, -47, 91, 13, 43, 23, -54, 59, 42, -7, -52, 37, -39, 23, 110, -9, -20, 59, -29, -29, 10, -74, 48, 17, -102, 74, 87, 16, -49, 0, -48, -43, 5, -83, -52, 51, -73, 68, -65, -27, -68, -58, 39, -40, 79, -15, -51, -45, -4, -39, 29, -28, -7, 91, 66, -48, -3, 29, 78, 8, -45, -57, 43, 0, 61, -85, -46, 40, -41, -4, -4, 11, 81, -37, 59, -43, 29, 66, -56, -56, 2, -25, 59, 71, 53, 26, 34, 53, 48, -76, 54, -8, -68, -41, 57, 63, -82, 42, -25, 31, 35, 19, 76, -2, 1, -75, -65, 101, -77, 75, -3, 28, 48, 94, -35, -64, -81, 80, -18, 11, 10, 55, 5, -59, 78, 57, 6, 60, -91, 27, 104, 58, 52, 29, 13, 41, -77, 42, 26, -75, 3, -58, 71, 54, -25, -23, 88, -64, -47, 73, 47, -59, 38, 40, 33, -39, 28, 5, 7, 69, -79, 12, 6, -84, 35, 63, 67, 58, 75, 8, 40, 15, -74, -46, -17, -32, 28, -90, -4, 107, -46, -35, -50, 7, 88, 4, 25, -62, 4, -96, -31, -48, 36, -32, -3, -25, -52, 40, 38, -56, -51, -57, 97, 43, -74, -79, -64, -74, 69, 38, 64, -36, -10, -23, 73, -46, 31, -2, -69, 23, -45, -8, 54, -73, -45, 62, 58, 83, -64, -61, 78, -22, -77, 18, 58, 11, -38, 13, -21, 18, -9, -5, -80, 16, 59, -74, -17, 67, -54, -42, 21, 3, 28, 36, -45, 22, -7, 2, -47, -32, 2, -42, -57, 59, 37, 0, 10, 91, 86, -74, -51, -18, -19, 68, 86, -71, 63, -15, -30, -50, -5, 46, 47, -12, 4, 15, 25, -51, 11, -84, 80, 2, 37, -48, -56, 56, 86, -62, 0, 88, -64, 22, 62, -85, 41, 86, 63, -72, -74, 76, 33, 69, 4, 88, -34, 46, -39, -84, 55, -36, 42, 27, 23, 76, -62, 6, -29, 54, -29, -36, -66, 0, -46, -83, -23, 26, -3, -84, 49, 63, 0, 56, -27, -64, 85, -66, 42, 67, -14, -50, -11, -41, 47, -6, 39, -15, 40, -48, -40, 77, -27, 12, 22, 30, 15, 84, 64, 32, 51, 77, -40, 46, 99, -55, 1, 85, -23, -12, 87, 31, 31, 23, 30, -92, 16, -3, -92, 52, -40, -84, -39, -1, -11, 7, 7, 61, 89, -97, 59, 63, -2, -33, 95, -40, 25, -26, 27, 11, -83, -92, 41, 22, 80, -63, -46, 25, 51, 2, 8, -21, 21, 91, -79, -32, -41, -38, 69, -70, 42, 27, -119, -32, -2, -72, 101, 82, 0, 51, 81, -99, 18, 89, -65, -33, -67, 80, -84, 9, -118, 72, 40, -88, -15, -7, -67, 95, -7, -49, -100, -40, 44, 9, -65, 56, 76, 69, 17, 33, 58, -50, -32, -45, -51, -74, 17, -77, 5, 11, 75, -46, 82, 67, 14, -10, -18, 105, -70, 22, -74, 82, -89, -80, -78, -7, 68, -51, 93, 54, -46, -11, 82, -19, 60, 40, 78, -30, -70, -50, 90, -29, 70, -80, -39, -69, -59, -14, -72, 31, 61, -45, -18, 94, 85, -72, 88, 60, 76, -23, 80, -86, -37, -38, -60, 45, -87, 67, 98, 20, -42, 57, 56, 82, 69, -29, -14, 69, 71, 71, 98, -58, -75, 25, 63, 80, 38, -35, 94, -59, 23, 28, 32, 28, -80, 16, 42, 44, 10, -53, -90, -28, 77, 32, -29, 0, 73, -67, -56, 87, 10, -16, 26, 13, -12, 80, 8, 5, 90, 73, -49, 83, 43, -95, -85, 60, 86, -90, 4, 86, -17, -60, -91, -34, 84, -30, -86, -37, 67, -62, -26, 85, -60, -1, -66, -80, -53, -44, 91, -50, -59, 16, -92, -18, -16, -20, 92, 81, -43, -25, -70, -3, -11, -4, -71, 44, 36, -18, -91, 94, -71, 101, 9, -44, -90, 71, -64, 6, -2, 23, -74, 88, -69, 12, 5, 14, -58, -82, -75, 34, 51, 9, 11, 25, 5, 80, 67, 73, -57, -7, 30, -82, -88, 75, 65, 11, -84, 95, -24, 62, -39, -81, 83, -81, -17, 10, 40, 66, 94, 15, 78, 35, 18, 46, 73, 59, 89, 18, -29, 92, 53, 100, -39, -45, 103, 84, -16, -59, -27, 115, 47, -62, 35, 56, -48, 104, -12, 20, -2, 40, 95, 68, 62, 42, -74, -56, 19, -23, -21, -114, -15, -23, 48, 44, 42, 34, -77, 90, 33, 54, 49, -20, -69, 20, -36, -8, -34, 103, 94, -22, 86, 3, 74, 50, -73, -34, -71, -74, -41, 31, 64, -73, -10, 20, 47, 18, 61, 50, 64, 92, 18, 44, -75, 38, -5, 68, -83, -34, -37, 52, -17, 91, -55, -16, 59, -3, -70, -8, 50, -46, -71, 52, 87, -81, 6, -93, 2, -27, 16, 37, -50, 48, -85, 2, 77, -68, 23, 5, 91, 
};
const TfArray<2, int> tensor_dimension30 = { 2, { 10,1280 } };
const TfArray<1, float> quant30_scale = { 1, { 0.00073123682523146272, } };
const TfArray<1, int> quant30_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(8) int8_t tensor_data31[2*40] = { 
  -53, -10, -59, -63, 117, 6, 112, 1, 48, -98, -108, -60, 74, -31, 123, -20, -108, 12, 95, 12, 86, -40, 102, -65, -51, 98, 6, -120, -81, -93, 33, 14, 0, 100, 19, 54, -10, -116, 71, 87, 
  97, 127, -95, -80, 12, 102, 18, -55, 72, -110, -97, 58, -65, 2, 33, 85, -94, 100, 107, 80, -74, -4, -18, 55, 113, -13, -86, -94, 63, 93, 117, -118, 29, 10, -60, 49, -78, 49, -53, -21, 
};
const TfArray<2, int> tensor_dimension31 = { 2, { 2,40 } };
const TfArray<1, float> quant31_scale = { 1, { 0.0029424254316836596, } };
const TfArray<1, int> quant31_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(8) int32_t tensor_data32[48] = { 11216, 4620, 56110, -4192, -2458, 10991, -1511, 1910, 4464, 184, 11756, 794, 4313, 6784, 4676, 7915, 4834, 4886, -1374, 11270, 2771, 544, 1999, 21444, 45472, 7948, 6509, -2364, -269, 10677, 12482, 17073, 20307, 8190, 13913, -1792, 872, 3863, 15113, 12318, 1197, 25100, 24581, 9071, 11832, 3537, 7036, 1626, };
const TfArray<1, int> tensor_dimension32 = { 1, { 48 } };
const TfArray<48, float> quant32_scale = { 48, { 7.7191951277200133e-05, 0.00011841767263831571, 2.2968033590586856e-05, 0.00012006548058707267, 0.00016125304682645947, 9.4980568974278867e-05, 0.0001251444045919925, 0.00028516200836747885, 0.00013956590555608273, 0.00011311595153529197, 7.2767099482007325e-05, 0.00019983306992799044, 0.00012148896348662674, 0.00011549620830919594, 0.00011761389760067686, 9.8512966360431165e-05, 9.9821496405638754e-05, 0.00010846530494745821, 0.00019960693316534162, 7.7488570241257548e-05, 0.00013971698353998363, 0.00019178447837475687, 0.000148275081301108, 4.6455199480988085e-05, 3.417028347030282e-05, 0.00010830131213879213, 0.00012175223673693836, 0.00015676365001127124, 0.00026554643409326673, 8.0769685155246407e-05, 7.1877031587064266e-05, 5.6532448070356622e-05, 4.8420737584820017e-05, 0.00010422391642350703, 6.5529457060620189e-05, 0.00011788119445554912, 0.00018168748647440225, 0.00011061295663239434, 5.8585043007042259e-05, 7.1999849751591682e-05, 0.00013318771379999816, 4.0129554690793157e-05, 4.5586439227918163e-05, 8.8208966189995408e-05, 7.8709432273171842e-05, 0.00017856500926427543, 0.00010928178380709141, 0.00012437469558790326, } };
const TfArray<48, int> quant32_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(8) int32_t tensor_data33[48] = { -613, 1779, 685, -24, 47, 8270, -196, -3602, -4834, -473, -6679, -68, -4168, -5717, -707, -83, -8569, 15709, -3520, 213, -511, -188, -700, -36, 20004, 713, -400, -1230, -16, 852, 48, -7858, -94, 11843, -3, 7061, -96, -3626, 147, -4, -4431, -506, 3274, 5584, -97, 8274, -53, -1785, };
const TfArray<1, int> tensor_dimension33 = { 1, { 48 } };
const TfArray<48, float> quant33_scale = { 48, { 0.00030712567968294024, 0.0001425920199835673, 0.00061897205887362361, 0.00017518243112135679, 0.00018800824182108045, 0.00029739132151007652, 0.00026198060368187726, 0.00018459683633409441, 0.00036694807931780815, 0.00020055555796716362, 0.00043545823427848518, 0.00018420818378217518, 0.00013935449533164501, 0.00014050875324755907, 0.00014455500058829784, 0.00051252188859507442, 0.00025335981626994908, 8.941198029788211e-05, 0.00013413142005447298, 0.00057005364215001464, 0.00025212578475475311, 0.00032900483347475529, 0.00018828721658792347, 0.00077713694190606475, 0.00025269016623497009, 0.00030633414280600846, 0.00020142579160165042, 0.00017734355060383677, 0.00026303814956918359, 0.000211224818485789, 0.0003632407751865685, 0.00051511678611859679, 0.00044469747808761895, 0.00010959400970023125, 0.00049660057993605733, 0.00018672757141757756, 0.00018090309458784759, 9.7959389677271247e-05, 0.00053949229186400771, 0.00089308153837919235, 0.00019945827079936862, 0.00087173195788636804, 0.0006496888236142695, 0.00019247035379521549, 0.00024811385083012283, 0.00012079961015842855, 0.00019546155817806721, 0.00030568373040296137, } };
const TfArray<48, int> quant33_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(8) int32_t tensor_data34[48] = { -2330, 6393, 5824, -1096, 49, 13339, 4362, 2103, 12390, 1831, -2908, 2275, 4781, 2095, -407, 1049, -1987, 10366, -3659, -1131, 1316, 1278, 562, -550, 197, 3714, -2232, -1967, -1099, -3325, 12040, 3693, 857, 1448, 559, 1649, 1532, 10216, 1653, 666, 9118, -2721, 754, 1798, -2504, -2387, 14460, 3790, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.00023356913879979402, 0.00013286020839586854, 0.00013405975187197328, 0.0002269703836645931, 0.00038174475776031613, 6.747439329046756e-05, 0.00019553536549210548, 0.00019583448010962456, 8.2045989984180778e-05, 0.00030526137561537325, 0.00016266222519334406, 0.00021880990243516862, 0.00014137227844912559, 0.00022487535898108035, 0.00025248952442780137, 0.00017230668163392693, 0.00020407361444085836, 9.4553171948064119e-05, 0.00013088327250443399, 0.0002737205068115145, 0.00028688620659522712, 0.00020989374024793506, 0.0002304978552274406, 0.00022948395053390414, 0.00026925723068416119, 0.00014640695007983595, 0.00020207266788929701, 0.00016391574172303081, 0.00021774347987957299, 0.00013405480422079563, 9.092727123061195e-05, 0.00018378613458480686, 0.00025984810781665146, 0.0002305422822246328, 0.00021655368618667126, 0.00022171359159983695, 0.00019029277609661222, 8.7628330220468342e-05, 0.00028226413996890187, 0.0001999858213821426, 0.00010902207577601075, 0.00010115397162735462, 0.00028764217859134078, 0.00023838029301259667, 0.00020775861048605293, 0.00019330233044456691, 7.3767143476288766e-05, 0.00013810904056299478, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(8) int32_t tensor_data35[8] = { -10732, 11174, 42, -13196, -403, -13503, 210, 186, };
const TfArray<1, int> tensor_dimension35 = { 1, { 8 } };
const TfArray<8, float> quant35_scale = { 8, { 0.00030368627631105483, 0.00038437871262431145, 0.00025765754980966449, 0.00030472243088297546, 0.00020117139501962811, 0.00031614291947335005, 0.0012729937443509698, 0.0017876139609143138, } };
const TfArray<8, int> quant35_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(8) int32_t tensor_data36[48] = { -326, 32270, 34487, -894, -394, -16806, 25760, 22132, -13122, 354, -1432, 21268, 25187, -19465, -14421, -881, -263, 35585, -954, 472, 56905, 15126, -11367, -8987, 20090, 15571, -3688, -2341, -4566, -155, 35585, 1003, -4240, 12911, 16758, 18758, -3459, 49085, -5104, -184, 32820, -145, -3222, 18422, -40, -1105, -10368, 17067, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00020005663100164384, 8.796961628831923e-05, 7.1843271143734455e-05, 7.8099052188917994e-05, 4.8121411964530125e-05, 0.00010595981439109892, 8.8873013737611473e-05, 7.9401979746762663e-05, 0.00025156201445497572, 5.1098613766953349e-05, 0.00011691202234942466, 7.3300441727042198e-05, 6.7310240410733968e-05, 0.00017837474297266454, 6.3432431488763541e-05, 5.9346337366150692e-05, 6.8162516981828958e-05, 0.0001231254282174632, 0.00031399886938743293, 5.4375301260733977e-05, 4.4435430027078837e-05, 5.7680172176333144e-05, 6.732167094014585e-05, 0.00011769926641136408, 6.9389825512189418e-05, 7.75225053075701e-05, 0.00013674350338988006, 0.00013914295413997024, 0.00012689319555647671, 0.00018472403462510556, 0.00011677168367896229, 6.7107197537552565e-05, 4.7623099817428738e-05, 7.1955444582272321e-05, 6.380154809448868e-05, 6.2520521169062704e-05, 8.0355734098702669e-05, 8.1965357821900398e-05, 6.981813203310594e-05, 7.1404589107260108e-05, 0.00010767760977614671, 0.00017004874825943261, 5.6855551520129666e-05, 7.0727750426158309e-05, 0.00015846700989641249, 0.00012313883053138852, 0.00018827505118679255, 9.226293332176283e-05, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(8) int32_t tensor_data37[48] = { 787, 8172, -8216, 5220, 4283, 7470, 3977, 13517, 13139, 6938, -2846, -404, 1505, 4959, 5608, -966, 20, 7431, 13882, 778, 2950, 14286, 3977, 7011, 18945, 9893, 2506, 13380, 2995, 6987, -2861, 10002, 1963, 9523, 9613, 6379, 73774, 16792, 6779, 20636, 3520, 1196, 6622, 2099, 4660, 2585, 3130, 4051, };
const TfArray<1, int> tensor_dimension37 = { 1, { 48 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00023471700842492282, 9.5666953711770475e-05, 9.2146947281435132e-05, 0.00011939514661207795, 0.0001117672654800117, 8.704276115167886e-05, 0.00012244295794516802, 6.7331107857171446e-05, 6.8268323957454413e-05, 0.0001021943025989458, 0.00013361321180127561, 0.00015520759916398674, 0.00014906714204698801, 0.00012528944353107363, 9.5755684014875442e-05, 9.7048396128229797e-05, 0.00013989431317895651, 9.6894342277664691e-05, 6.7745029809884727e-05, 0.00014797943003941327, 0.00016471119306515902, 5.8167770475847647e-05, 0.00014005324919708073, 0.00010130782175110653, 4.8643552872817963e-05, 9.1462585260160267e-05, 0.000111154600745067, 6.8786685005761683e-05, 8.4587249148171395e-05, 0.00011437242210377008, 0.00016769625653978437, 8.0391480878461152e-05, 0.00018690549768507481, 8.1368867540732026e-05, 7.2384609666187316e-05, 0.00012326093565206975, 2.117777694365941e-05, 5.5550699471496046e-05, 9.1075933596584946e-05, 4.8006204451667145e-05, 0.00010554394975770265, 0.00016535106988158077, 0.00010413279960630462, 0.00010456256859470159, 0.00013698986731469631, 0.00011584249295992777, 0.00013567310816142708, 8.9867709903046489e-05, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(8) int32_t tensor_data38[48] = { 19443, -23714, -1365, 2866, -523, 14931, 3901, -2324, -10038, 3040, -4514, -3318, -9717, -16923, 6908, 149, -11121, 42114, -2437, -16798, 19146, -464, -141, -993, -377, 134, -3528, -131, -1307, -403, 80, 27011, 21334, -1207, 9222, 23178, 233, 21179, 1162, 127, -2090, -9758, -1327, 4215, 2928, 32646, 18159, -5356, };
const TfArray<1, int> tensor_dimension38 = { 1, { 48 } };
const TfArray<48, float> quant38_scale = { 48, { 6.2628743762616068e-05, 5.6921049690572545e-05, 0.00073376076761633158, 0.00019700317352544516, 0.00016521847283001989, 8.2616097643040121e-05, 9.1492423962336034e-05, 0.00032779548200778663, 7.3114846600219607e-05, 0.00026460681692697108, 0.00013056356692686677, 0.00010141522943740711, 0.00011711916886270046, 7.607100997120142e-05, 9.6762858447618783e-05, 6.0125978052383289e-05, 5.8339825045550242e-05, 3.7799392885062844e-05, 0.00034151205909438431, 4.0996827010530978e-05, 6.9876979978289455e-05, 0.00030694258748553693, 0.00014565201126970351, 0.00014186129556037486, 0.00022648389858659357, 0.00020700524328276515, 0.00020056850917171687, 0.00025259805261157453, 0.00019278404943179339, 0.00016011214756872505, 0.00011733340943465009, 7.1948525146581233e-05, 7.0237911131698638e-05, 0.00018025355529971421, 0.00010337743151467294, 8.4016261098440737e-05, 0.00046816695248708129, 0.00011292996350675821, 0.00010291681974194944, 0.00036702532088384032, 0.00012668273120652884, 0.00011461633403087035, 0.00019492629508022219, 0.00012461940059438348, 0.00017784026567824185, 4.7653033107053488e-05, 8.660134335514158e-05, 0.00015110535605344921, } };
const TfArray<48, int> quant38_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(8) int32_t tensor_data39[48] = { 38833, 7594, 1747, 1302, 7227, 2763, 7787, 4667, 3389, -8425, 15939, 1413, 9567, 2293, 5612, 2620, 8508, -790, 12133, 255, 4387, -931, 3888, 7419, 2847, -4665, 2717, 13966, 829, 7151, 2226, 15078, 728, 6276, -445, -1929, 3070, 2833, 458, 1990, 15856, -1013, 13576, 4395, 1612, 5862, 6001, -2350, };
const TfArray<1, int> tensor_dimension39 = { 1, { 48 } };
const TfArray<48, float> quant39_scale = { 48, { 2.7974543627351522e-05, 0.00010745161125669256, 0.00015292127500288188, 0.00016072246944531798, 0.00010352571553084999, 0.00016663958376739174, 0.0001020927302306518, 0.00014717182784806937, 0.00012844083539675921, 9.115194552578032e-05, 6.1675687902607024e-05, 0.00017228568322025239, 8.2514641690067947e-05, 0.00017032296454999596, 0.00011845991684822366, 0.00014080222172196954, 8.8697306637186557e-05, 0.00019639350648503751, 7.391430699499324e-05, 0.00015838182298466563, 0.00014857971109449863, 0.00012194005103083327, 0.00014063334674574435, 9.6904812380671501e-05, 0.00014567219477612525, 0.0001355923741357401, 0.00016207282897084951, 6.6077940573450178e-05, 0.00019979715580120683, 0.00010953980381600559, 0.00014383354573510587, 6.4453153754584491e-05, 0.00015104311751201749, 0.0001281499135075137, 0.00015112906112335622, 0.00019355348194949329, 0.00018455232202541083, 0.0001385302166454494, 0.00016789448272902519, 0.00016541412333026528, 5.8055702538695186e-05, 0.00016876158770173788, 6.3298815803136677e-05, 0.00010302762530045584, 0.00013706478057429194, 0.00013057833712082356, 0.00010831024701474234, 0.00013376881543081254, } };
const TfArray<48, int> quant39_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(8) int32_t tensor_data40[48] = { -581, 111, 13800, 2584, -539, -7209, -1839, 15044, 8441, -3587, -2912, -8281, -1908, 22241, 13265, -558, 7250, -7351, 3466, -2181, 20487, -4426, -2100, -1859, 3078, -5664, -27, -3215, 9796, -31043, -3442, 972, -4645, -1768, -1970, -2109, 11155, -6923, -148, -15461, -3307, 7020, -6704, -1106, 3069, -4778, 9240, -4102, };
const TfArray<1, int> tensor_dimension40 = { 1, { 48 } };
const TfArray<48, float> quant40_scale = { 48, { 0.00024415436200797558, 0.00014352113066706806, 7.3092895036097616e-05, 8.4909836004953831e-05, 0.00021178633323870599, 9.8212338343728334e-05, 0.00022935695596970618, 0.00010652802302502096, 0.00013148982543498278, 0.00036999868461862206, 0.00026494445046409965, 5.8775185607373714e-05, 0.00024851335911080241, 5.8134541177423671e-05, 9.9213662906549871e-05, 0.00016519143537152559, 0.00011644394544418901, 0.00010247110913041979, 0.00013028465036768466, 0.0002374037285335362, 6.8719367845915258e-05, 0.00013758787827100605, 0.00020331762789282948, 0.00018186154193244874, 0.00014653750986326486, 0.00022659286332782358, 0.00021385838044807315, 0.00034157340996898711, 8.3757273387163877e-05, 7.7718279499094933e-05, 0.00018395527149550617, 0.00018577887385617942, 6.1382299463730305e-05, 0.00028927772655151784, 7.0420632255263627e-05, 0.00010864362411666662, 0.00012562253687065095, 7.396709406748414e-05, 6.5071806602645665e-05, 7.4838389991782606e-05, 0.00019561783119570464, 0.00011324624210828915, 0.00019594728655647486, 0.00015849436749704182, 0.00013014675641898066, 8.0488542153034359e-05, 0.00012789388711098582, 0.00012667385453823954, } };
const TfArray<48, int> quant40_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(8) int32_t tensor_data41[48] = { 2018, -2052, 4886, 2573, 4824, 108, 2429, 5116, -3004, -1898, -1422, 13550, 4695, 4963, 8607, -4606, -4420, 11696, 3346, 6459, 5223, 29646, 18579, 1171, -2023, 2415, -593, -1325, 2673, 2326, 7056, 10711, -1311, 378, 15000, 5700, 12299, 3075, 1866, -1922, 5023, -2829, 14789, -508, 406, 2395, -2683, 5919, };
const TfArray<1, int> tensor_dimension41 = { 1, { 48 } };
const TfArray<48, float> quant41_scale = { 48, { 0.00017199281137436628, 0.0001687265612417832, 0.00015303558029700071, 0.00020966373267583549, 0.00010393959382781759, 0.00019534645252861083, 0.00013651364133693278, 0.00014596714754588902, 0.00015203087241388857, 0.0001773505937308073, 0.00021154002752155066, 5.6287943152710795e-05, 0.00013654692156706005, 0.00011926898150704801, 0.00010128847497981042, 0.00012048499775119126, 0.00013580340601038188, 8.3218597865197808e-05, 0.00018512720998842269, 0.00011893934424733743, 0.00015118760347831994, 3.5995319194626063e-05, 5.2589177357731387e-05, 0.0001806537329684943, 0.00018648085824679583, 0.00011340064520481974, 0.00016861961921676993, 0.0001654199295444414, 0.00016083737136796117, 0.00017625353939365596, 9.348944149678573e-05, 8.3009676018264145e-05, 0.00016118187340907753, 0.00023142382269725204, 6.0695172578562051e-05, 0.00010436827142257243, 6.9694186095148325e-05, 0.00018826805171556771, 0.00018724640540312976, 0.0001961348025361076, 0.00011583224113564938, 0.00017086289881262928, 6.0635502450168133e-05, 0.00023180196876637638, 0.00020946472068317235, 0.00022413983242586255, 0.00016587565187364817, 0.00012509505904745311, } };
const TfArray<48, int> quant41_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(8) int32_t tensor_data42[48] = { 49647, -2918, 44428, 27160, 44237, -59, 485, 32007, 1462, 4056, -7813, 25935, 2745, 38875, 61901, 17090, -7245, 58969, 48618, 40522, 36671, -13277, 729, -215, 1440, -778, -21396, -597, -3625, 42301, 61289, 41384, 17690, 39521, -6270, 14149, 36775, 38024, 35973, 8, 45648, 94, -4931, 49832, 44184, -1181, -536, 38000, };
const TfArray<1, int> tensor_dimension42 = { 1, { 48 } };
const TfArray<48, float> quant42_scale = { 48, { 3.7227306165732443e-05, 7.4481409683357924e-05, 3.7991030694684014e-05, 3.2354804716305807e-05, 4.0524602809455246e-05, 4.1978037188528106e-05, 4.0431910747429356e-05, 3.8749618397559971e-05, 5.4934902436798438e-05, 6.3124978623818606e-05, 4.8925801820587367e-05, 6.2985833210404962e-05, 4.3488620576681569e-05, 3.7254209019010887e-05, 4.8407757276436314e-05, 5.5901888117659837e-05, 0.00010211423068540171, 6.1080514569766819e-05, 2.3053964468999766e-05, 3.6629644455388188e-05, 3.9124563045334071e-05, 0.00018973393889609724, 0.00012607983080670238, 4.1824281652225181e-05, 6.3032282923813909e-05, 0.00013642874546349049, 5.1103932491969317e-05, 5.66000999242533e-05, 7.9170160461217165e-05, 2.8435517378966324e-05, 3.772558193304576e-05, 5.7056262448895723e-05, 5.1039965910604224e-05, 2.6335492293583229e-05, 9.036012488650158e-05, 5.4694399295840412e-05, 9.7238575108349323e-05, 2.9410595743684098e-05, 3.5240773286204785e-05, 6.1092381656635553e-05, 3.5046490665990859e-05, 5.8793990319827572e-05, 5.4370990255847573e-05, 3.0526680347975343e-05, 3.2579337130300701e-05, 4.1316732676932588e-05, 8.5025792941451073e-05, 4.0518869354855269e-05, } };
const TfArray<48, int> quant42_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int8_t tensor_data43[8*3*3*1] = { 
  /* [0][0][][] */ -57, 50, 9, 
  /* [0][1][][] */ -127, 121, 0, 
  /* [0][2][][] */ -42, 46, 0, 
  /* [1][0][][] */ 57, 127, 35, 
  /* [1][1][][] */ -68, -79, -44, 
  /* [1][2][][] */ 7, -41, 6, 
  /* [2][0][][] */ 31, 28, -47, 
  /* [2][1][][] */ 52, 69, -127, 
  /* [2][2][][] */ 21, 32, -58, 
  /* [3][0][][] */ 42, 53, 20, 
  /* [3][1][][] */ 53, 74, 26, 
  /* [3][2][][] */ -80, -127, -58, 
  /* [4][0][][] */ 4, -53, 47, 
  /* [4][1][][] */ 16, -127, 112, 
  /* [4][2][][] */ 5, -37, 32, 
  /* [5][0][][] */ 2, -56, 0, 
  /* [5][1][][] */ -1, 127, 2, 
  /* [5][2][][] */ 1, -75, 0, 
  /* [6][0][][] */ -15, -83, -1, 
  /* [6][1][][] */ -24, -127, -6, 
  /* [6][2][][] */ -14, -53, 5, 
  /* [7][0][][] */ 44, -127, 30, 
  /* [7][1][][] */ -19, -3, -11, 
  /* [7][2][][] */ -24, 75, -12, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant43_scale = { 8, { 0.016282709315419197, 0.019091496244072914, 0.021089721471071243, 0.012558460235595703, 0.031625732779502869, 0.026365341618657112, 0.001485481159761548, 0.0042622904293239117, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const ALIGN(8) int8_t tensor_data44[8*1*1*8] = { 
  /* [0][0][][] */ -24,-3,-45,-34,-19,37,-127,-8, 
  /* [1][0][][] */ 18,92,-1,127,9,-7,-10,-36, 
  /* [2][0][][] */ 127,-5,-35,-57,-68,46,97,-53, 
  /* [3][0][][] */ 11,-127,42,-83,16,-86,27,59, 
  /* [4][0][][] */ 127,-3,-61,-9,30,-4,-127,-48, 
  /* [5][0][][] */ 3,-33,4,37,3,-127,-1,10, 
  /* [6][0][][] */ 127,-27,114,2,108,-30,-4,8, 
  /* [7][0][][] */ -127,-3,-94,-4,-99,8,33,7, 
};
const TfArray<4, int> tensor_dimension44 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant44_scale = { 8, { 0.0030032673384994268, 0.0048306840471923351, 0.0035375126171857119, 0.0021063112653791904, 0.0054697110317647457, 0.009011988528072834, 0.0039576874114573002, 0.007405315525829792, } };
const TfArray<8, int> quant44_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const ALIGN(8) int8_t tensor_data45[48*1*1*8] = { 
  /* [0][0][][] */ -103,-104,22,-127,-61,-3,-4,-2, 
  /* [1][0][][] */ -127,-15,98,0,-51,23,3,17, 
  /* [2][0][][] */ 22,-11,21,127,25,-26,-17,-5, 
  /* [3][0][][] */ -107,-70,-26,-14,39,127,-45,-36, 
  /* [4][0][][] */ -6,-30,-8,-2,-9,8,-127,-70, 
  /* [5][0][][] */ -2,-35,-14,-2,-11,10,-127,-70, 
  /* [6][0][][] */ 127,7,16,-11,-67,18,2,-5, 
  /* [7][0][][] */ -127,-29,-15,5,68,12,-1,10, 
  /* [8][0][][] */ 22,42,-12,-11,-28,-127,41,17, 
  /* [9][0][][] */ 76,21,-13,-6,-23,-3,-8,127, 
  /* [10][0][][] */ 119,-11,-123,9,-88,-9,43,127, 
  /* [11][0][][] */ -127,104,8,-37,86,-68,9,23, 
  /* [12][0][][] */ 127,-35,-107,13,52,-4,-9,-21, 
  /* [13][0][][] */ 127,10,14,-13,-29,27,8,-13, 
  /* [14][0][][] */ -123,-83,96,-25,73,-13,-41,-127, 
  /* [15][0][][] */ 33,75,1,-4,-9,-127,-18,8, 
  /* [16][0][][] */ -11,-66,11,4,11,127,12,6, 
  /* [17][0][][] */ 32,-126,-73,-6,-35,127,-58,-16, 
  /* [18][0][][] */ 41,-18,-15,-17,-19,27,127,-13, 
  /* [19][0][][] */ -5,23,-2,-127,-10,35,-3,-10, 
  /* [20][0][][] */ -78,-31,74,10,56,101,-4,-127, 
  /* [21][0][][] */ -21,-6,34,-25,-18,12,-127,-80, 
  /* [22][0][][] */ 70,-10,8,127,-17,-11,56,40, 
  /* [23][0][][] */ 127,-13,-117,-10,29,-25,11,6, 
  /* [24][0][][] */ -32,21,28,34,10,2,-127,-85, 
  /* [25][0][][] */ 127,11,-86,8,14,-6,6,26, 
  /* [26][0][][] */ -1,54,-32,-127,-28,23,3,-2, 
  /* [27][0][][] */ 127,19,-110,-3,-105,47,22,79, 
  /* [28][0][][] */ -127,-22,-21,17,55,10,-2,33, 
  /* [29][0][][] */ -8,-127,-15,-125,-10,27,-17,-22, 
  /* [30][0][][] */ 1,92,127,34,37,-104,113,35, 
  /* [31][0][][] */ -75,-5,-127,46,1,-23,94,103, 
  /* [32][0][][] */ -3,-122,2,-127,-12,12,-10,-17, 
  /* [33][0][][] */ 15,-127,-3,-124,9,14,5,-27, 
  /* [34][0][][] */ -29,-50,32,-96,36,-55,127,80, 
  /* [35][0][][] */ -127,10,55,5,-112,-24,28,99, 
  /* [36][0][][] */ -127,15,117,-3,-44,17,-32,37, 
  /* [37][0][][] */ 127,12,-6,-7,-75,20,1,16, 
  /* [38][0][][] */ -75,1,83,37,64,-54,48,127, 
  /* [39][0][][] */ -127,-5,74,-2,-70,13,-9,5, 
  /* [40][0][][] */ -4,25,44,-16,26,-7,127,47, 
  /* [41][0][][] */ 127,-13,-74,3,54,14,7,-7, 
  /* [42][0][][] */ -15,-127,31,-9,16,6,-4,-19, 
  /* [43][0][][] */ 7,121,127,-7,51,-101,76,8, 
  /* [44][0][][] */ 6,-13,-3,117,0,-127,-2,3, 
  /* [45][0][][] */ 127,-31,35,-7,-61,105,10,1, 
  /* [46][0][][] */ 13,127,-15,105,0,127,26,39, 
  /* [47][0][][] */ -14,37,13,-27,27,-36,127,72, 
};
const TfArray<4, int> tensor_dimension45 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant45_scale = { 48, { 0.0052172639407217503, 0.0076210089027881622, 0.0010466622188687325, 0.0092311576008796692, 0.0063959560357034206, 0.0056246477179229259, 0.014708666130900383, 0.0088800685480237007, 0.011699141934514046, 0.0067761829122900963, 0.00187105149962008, 0.0048245666548609734, 0.0061891279183328152, 0.012467535212635994, 0.006817519199103117, 0.020315570756793022, 0.012237075716257095, 0.0039839912205934525, 0.013829194940626621, 0.019710788503289223, 0.010607576929032803, 0.0051924637518823147, 0.0014317211462184787, 0.0062791919335722923, 0.015702318400144577, 0.011183133348822594, 0.011186578311026096, 0.0051572299562394619, 0.010352658107876778, 0.0091731976717710495, 0.0038924014661461115, 0.0071135987527668476, 0.0097429128363728523, 0.003451833501458168, 0.0045781866647303104, 0.0046203546226024628, 0.0067619113251566887, 0.012392358854413033, 0.0061281546950340271, 0.0080250483006238937, 0.017763925716280937, 0.0081899547949433327, 0.010859432630240917, 0.0030262712389230728, 0.016349527984857559, 0.0059971902519464493, 0.0073303012177348137, 0.0053932634182274342, } };
const TfArray<48, int> quant45_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const ALIGN(8) int8_t tensor_data46[8*1*1*48] = { 
  /* [0][0][][] */ 49,106,-40,71,-2,-5,-23,10,63,-65,2,-26,10,8,-35,-53,1,-19,32,15,-58,-30,-34,8,17,15,26,-2,16,11,-21,28,-63,12,113,-127,-23,22,-12,115,-29,14,12,-1,-14,37,25,-43, 
  /* [1][0][][] */ 0,-48,35,52,-13,-13,-19,-22,46,-44,93,45,20,10,-46,-82,127,42,17,10,-73,33,37,-13,-49,-94,-32,-51,-12,-60,43,-41,-11,-23,-31,12,5,-19,85,-51,-13,33,-61,37,77,64,15,49, 
  /* [2][0][][] */ 77,-27,-14,-16,108,110,61,76,-29,-6,1,-31,-7,46,59,29,-26,-34,60,-68,-41,-50,-45,60,-93,-94,118,20,60,-67,-60,20,-127,86,106,19,-9,-2,-6,18,27,68,16,-62,-21,18,55,-45, 
  /* [3][0][][] */ 81,-31,16,-11,121,126,27,47,-37,-30,29,56,-127,42,69,24,7,11,76,-110,-94,18,35,90,7,-35,54,28,49,-58,2,-11,-119,63,-64,-122,23,-39,67,-51,53,-96,-111,-28,-63,42,-14,63, 
  /* [4][0][][] */ 37,42,-29,-38,-12,-10,-19,-18,4,-3,-8,-13,-33,-20,63,51,-40,-17,-34,43,30,-13,-14,4,-49,-41,-4,53,-13,12,-22,28,-31,-16,26,-127,-9,26,11,54,7,-12,-11,-24,43,2,86,-21, 
  /* [5][0][][] */ 68,58,-92,50,7,6,-8,30,-84,-60,-59,-22,35,21,43,26,39,-64,43,127,-71,-47,-56,51,32,-22,-35,67,33,31,-56,3,-3,2,-59,1,-7,18,-23,69,17,78,-6,-42,122,30,16,-61, 
  /* [6][0][][] */ -31,-74,20,-47,-42,-40,-80,-75,-35,-64,-116,42,-55,-51,97,91,-127,9,22,-19,18,56,68,11,-11,-9,-73,86,-82,-38,44,76,15,-56,88,38,26,45,-11,-86,-14,-60,-30,17,-42,-19,-10,63, 
  /* [7][0][][] */ 75,19,-18,42,14,14,9,4,82,-8,-13,-19,58,6,-12,-22,-53,-7,-29,1,1,-20,-23,-27,70,-127,16,-1,0,97,-17,18,-75,23,-59,-46,-15,27,28,24,24,68,-36,-16,-43,30,42,-25, 
};
const TfArray<4, int> tensor_dimension46 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant46_scale = { 8, { 0.0063191456720232964, 0.0056397188454866409, 0.0043555283918976784, 0.0027636829763650894, 0.0068573746830224991, 0.0055829053744673729, 0.005198752973228693, 0.0061262934468686581, } };
const TfArray<8, int> quant46_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const ALIGN(8) int8_t tensor_data47[48*1*1*8] = { 
  /* [0][0][][] */ -16,32,12,-127,-96,6,31,118, 
  /* [1][0][][] */ 100,6,-13,-1,-87,49,127,24, 
  /* [2][0][][] */ -5,112,-39,-28,-35,88,-49,-127, 
  /* [3][0][][] */ 63,-72,-88,117,-127,-43,-3,-25, 
  /* [4][0][][] */ 39,-63,46,-16,-127,-2,50,26, 
  /* [5][0][][] */ -17,50,-10,-92,-127,-4,-31,8, 
  /* [6][0][][] */ 51,-19,36,31,127,-26,-8,-122, 
  /* [7][0][][] */ 15,34,21,127,23,-6,-2,22, 
  /* [8][0][][] */ 23,26,15,-45,33,127,11,-28, 
  /* [9][0][][] */ 119,29,-12,19,-64,-53,127,77, 
  /* [10][0][][] */ 2,68,-73,-33,3,127,83,-58, 
  /* [11][0][][] */ -16,-35,-127,98,-62,28,-13,75, 
  /* [12][0][][] */ -98,-85,55,48,30,-127,-43,10, 
  /* [13][0][][] */ 39,33,32,51,-58,127,14,-40, 
  /* [14][0][][] */ 7,-95,6,-4,-63,-73,-127,105, 
  /* [15][0][][] */ -87,42,-6,5,93,-2,-127,-47, 
  /* [16][0][][] */ 91,78,-100,-127,55,122,111,35, 
  /* [17][0][][] */ -107,120,-127,41,-10,-23,22,-113, 
  /* [18][0][][] */ 35,-4,-91,127,-10,-36,-40,-60, 
  /* [19][0][][] */ 117,16,10,30,-43,8,127,48, 
  /* [20][0][][] */ 39,-73,-89,127,48,-29,-26,-63, 
  /* [21][0][][] */ 22,50,127,-104,43,-27,28,-102, 
  /* [22][0][][] */ -81,-37,-127,58,-28,33,6,121, 
  /* [23][0][][] */ 76,26,32,41,-127,108,59,-42, 
  /* [24][0][][] */ -11,1,-127,79,-38,30,43,66, 
  /* [25][0][][] */ 47,-34,-75,127,52,-1,-37,-13, 
  /* [26][0][][] */ -79,23,127,-98,-19,31,62,-8, 
  /* [27][0][][] */ -68,80,127,2,20,-10,74,18, 
  /* [28][0][][] */ -54,-96,38,-127,-20,9,-4,-25, 
  /* [29][0][][] */ -78,-78,-19,87,-7,-127,-13,56, 
  /* [30][0][][] */ -127,48,113,-29,40,37,64,25, 
  /* [31][0][][] */ -59,50,84,-127,-45,17,34,61, 
  /* [32][0][][] */ -77,87,93,-108,11,2,8,127, 
  /* [33][0][][] */ 6,111,-49,51,23,18,-127,-27, 
  /* [34][0][][] */ 88,15,127,-108,-90,-111,45,-43, 
  /* [35][0][][] */ 85,-5,30,106,79,-69,26,-127, 
  /* [36][0][][] */ 22,63,127,-106,25,-25,40,-110, 
  /* [37][0][][] */ -56,-46,99,64,1,-127,93,-12, 
  /* [38][0][][] */ 77,1,75,41,-30,-49,127,19, 
  /* [39][0][][] */ 52,-79,-25,10,-127,6,76,63, 
  /* [40][0][][] */ -40,36,-127,105,-49,49,-80,114, 
  /* [41][0][][] */ -108,-19,-49,0,127,14,-92,14, 
  /* [42][0][][] */ -82,59,-24,-31,127,34,-111,-50, 
  /* [43][0][][] */ 127,113,-37,123,-1,-96,54,70, 
  /* [44][0][][] */ -5,17,90,4,40,-127,19,-27, 
  /* [45][0][][] */ -7,-76,127,79,-31,-18,-117,16, 
  /* [46][0][][] */ 46,-120,-127,55,-85,30,-5,-18, 
  /* [47][0][][] */ -106,-28,43,-7,78,37,-127,-34, 
};
const TfArray<4, int> tensor_dimension47 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant47_scale = { 48, { 0.0024695855099707842, 0.0037885110359638929, 0.00073481135768815875, 0.0038412290159612894, 0.0051589338108897209, 0.0030386927537620068, 0.0040037180297076702, 0.0091231269761919975, 0.0044651017524302006, 0.0036188941448926926, 0.0023280221503227949, 0.0063932160846889019, 0.003886770224198699, 0.0036950453650206327, 0.0037627960555255413, 0.003151704091578722, 0.0031935675069689751, 0.0034701069816946983, 0.0063859815709292889, 0.0024790752213448286, 0.0044699353165924549, 0.0061357193626463413, 0.0047437325119972229, 0.001486231223680079, 0.0010932025033980608, 0.0034648606088012457, 0.0038951931055635214, 0.0050153057090938091, 0.0084955701604485512, 0.0025840471498668194, 0.0022995462641119957, 0.0018086304189637303, 0.0015491142403334379, 0.0033344132825732231, 0.002096469746902585, 0.0037713476922363043, 0.0058126887306571007, 0.0035388164687901735, 0.0018742986721917987, 0.0023034757468849421, 0.0042610457167029381, 0.0012838562251999974, 0.0014584370655938983, 0.0028220503591001034, 0.0025181339588016272, 0.0057127918116748333, 0.0034962284844368696, 0.0039790929295122623, } };
const TfArray<48, int> quant47_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const ALIGN(8) int8_t tensor_data48[8*1*1*48] = { 
  /* [0][0][][] */ 38,-47,101,67,29,-39,23,9,-3,56,-31,15,-48,-82,40,4,-107,65,-34,68,-43,70,2,-29,-1,-45,66,-28,-24,25,-32,105,-62,-10,-33,-83,-62,-46,-38,-12,-11,60,-127,10,55,24,27,53, 
  /* [1][0][][] */ -55,-32,60,-6,-27,30,-36,-30,46,-10,-2,-30,-17,15,1,20,1,21,15,-11,-58,-28,-72,-23,23,-37,-30,-33,22,-71,-8,-127,-7,-58,-67,-69,-40,-84,-23,21,41,-16,81,-105,-51,-16,-24,-6, 
  /* [2][0][][] */ -60,93,-7,38,16,11,22,-37,76,-44,71,83,100,16,32,-58,97,1,7,28,-13,20,14,127,-112,-43,9,-21,-1,83,-21,-87,-20,2,5,-79,-24,8,-38,-17,87,-84,23,-5,29,-121,0,-15, 
  /* [3][0][][] */ 61,-19,-62,32,85,-83,3,-120,-34,-8,-60,-89,-21,127,-12,20,-45,-16,-67,-48,32,83,-10,-54,113,44,53,-70,32,-94,53,-65,55,64,113,-75,-46,18,-31,45,23,87,-80,29,-3,26,8,38, 
  /* [4][0][][] */ -54,31,-43,69,94,-29,29,-45,-39,-5,-62,34,-45,-16,4,-60,11,63,-32,-41,-43,37,-70,-64,19,-10,20,-38,33,-38,-31,62,-7,77,-71,-75,-63,-63,-37,-1,66,-54,127,22,1,86,-56,-52, 
  /* [5][0][][] */ 54,8,83,-8,-6,19,53,32,127,-2,69,1,72,54,27,-61,-13,34,32,-44,-55,-71,15,43,20,-12,26,43,-38,-27,18,-19,-22,50,-20,58,49,0,-29,-46,-8,70,34,40,-18,-8,71,8, 
  /* [6][0][][] */ -5,-65,-18,12,35,-6,-1,11,-47,-18,107,57,96,68,-36,49,119,-127,-20,1,-10,-42,-103,32,-75,71,-36,-3,-19,-51,69,-54,96,13,-73,-22,-44,4,55,10,76,-72,-4,-74,-110,50,-43,25, 
  /* [7][0][][] */ -14,-24,-59,-33,19,105,-1,-4,-7,-53,-127,-100,46,52,-59,-47,-35,25,104,22,-14,-75,58,-13,110,-29,-76,90,-41,-8,-25,-83,-49,70,50,117,90,-57,-22,-40,-24,-7,38,-18,-4,-26,4,-55, 
};
const TfArray<4, int> tensor_dimension48 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant48_scale = { 8, { 0.0056594368070363998, 0.0058890972286462784, 0.0061772032640874386, 0.0091850850731134415, 0.0055113872513175011, 0.0057581379078328609, 0.0032286914065480232, 0.0051820087246596813, } };
const TfArray<8, int> quant48_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const ALIGN(8) int8_t tensor_data49[48*1*1*8] = { 
  /* [0][0][][] */ 41,22,-49,5,-42,55,-127,27, 
  /* [1][0][][] */ 4,-63,-126,-3,-9,-22,127,-109, 
  /* [2][0][][] */ -127,-50,-73,-50,-34,55,-127,-6, 
  /* [3][0][][] */ -57,-36,17,-12,-24,-127,-108,-20, 
  /* [4][0][][] */ -45,-127,-46,18,61,22,-41,-43, 
  /* [5][0][][] */ 76,-35,93,54,-127,63,-78,-106, 
  /* [6][0][][] */ 38,-127,-65,-32,-13,65,-45,-84, 
  /* [7][0][][] */ -26,-87,-58,-64,73,-127,1,22, 
  /* [8][0][][] */ 34,65,48,61,34,-49,-6,127, 
  /* [9][0][][] */ -26,-57,-52,8,45,-16,127,-12, 
  /* [10][0][][] */ -31,19,-127,22,23,20,99,-110, 
  /* [11][0][][] */ 4,-35,-34,1,-127,19,4,53, 
  /* [12][0][][] */ 93,63,-22,39,-79,127,83,-10, 
  /* [13][0][][] */ -47,-5,20,-20,42,-127,-4,69, 
  /* [14][0][][] */ -104,-49,10,37,11,69,-124,-127, 
  /* [15][0][][] */ 61,85,47,3,-127,42,114,-54, 
  /* [16][0][][] */ -3,-55,5,74,-9,-69,7,-127, 
  /* [17][0][][] */ -80,127,27,-13,-63,-49,-84,-81, 
  /* [18][0][][] */ 96,127,-87,-99,93,102,-92,-82, 
  /* [19][0][][] */ -28,79,-15,11,-127,7,-70,-98, 
  /* [20][0][][] */ -127,-3,6,13,24,20,104,48, 
  /* [21][0][][] */ -31,-4,53,16,-92,-107,-127,26, 
  /* [22][0][][] */ -5,-35,-47,-6,-127,3,5,60, 
  /* [23][0][][] */ 61,4,-16,-14,127,63,-86,81, 
  /* [24][0][][] */ 127,10,-51,25,-90,6,8,-5, 
  /* [25][0][][] */ 30,-60,64,109,-49,-127,26,108, 
  /* [26][0][][] */ 22,127,8,56,79,-19,21,-17, 
  /* [27][0][][] */ -127,114,62,-19,123,-68,1,95, 
  /* [28][0][][] */ -74,-73,-59,-35,79,-127,22,-16, 
  /* [29][0][][] */ -55,-25,47,41,127,-94,-85,72, 
  /* [30][0][][] */ 127,47,-118,-103,-77,-88,-76,-69, 
  /* [31][0][][] */ 26,3,39,64,-127,8,35,5, 
  /* [32][0][][] */ 127,17,51,40,-37,-59,88,62, 
  /* [33][0][][] */ 127,33,-45,10,-121,-63,27,49, 
  /* [34][0][][] */ 40,-13,-22,20,-46,127,18,-73, 
  /* [35][0][][] */ 127,39,-21,-37,40,-100,29,126, 
  /* [36][0][][] */ -34,-43,70,-95,-28,-15,79,-127, 
  /* [37][0][][] */ 81,-69,63,49,113,-9,38,-127, 
  /* [38][0][][] */ 67,127,10,-30,-26,22,26,80, 
  /* [39][0][][] */ 26,0,-76,73,-28,-63,-77,127, 
  /* [40][0][][] */ -16,-31,-3,-32,26,-127,23,43, 
  /* [41][0][][] */ -33,48,-127,-67,91,119,66,-111, 
  /* [42][0][][] */ 30,-47,-37,13,73,127,31,54, 
  /* [43][0][][] */ 0,49,-29,27,-127,-80,56,-59, 
  /* [44][0][][] */ -127,-50,-13,-34,52,54,-112,-72, 
  /* [45][0][][] */ -62,60,-55,17,33,-5,-69,127, 
  /* [46][0][][] */ -24,52,127,1,-57,-54,-52,40, 
  /* [47][0][][] */ -127,-115,-45,-53,104,117,-33,88, 
};
const TfArray<4, int> tensor_dimension49 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant49_scale = { 48, { 0.0029956423677504063, 0.0017039993545040488, 0.0017193841049447656, 0.0029110100585967302, 0.0048960698768496513, 0.00086539326002821326, 0.0025078400503844023, 0.0025116764008998871, 0.0010522813536226749, 0.0039151315577328205, 0.0020862254314124584, 0.0028063477948307991, 0.0018131709657609463, 0.0028841402381658554, 0.0032383059151470661, 0.0022099204361438751, 0.0026173472870141268, 0.0012126922374591231, 0.0016786442138254642, 0.0035106041468679905, 0.0036794606130570173, 0.0026919934898614883, 0.0029562516137957573, 0.002943247789517045, 0.0034533604048192501, 0.001877743168734014, 0.00259168422780931, 0.0021023023873567581, 0.0027926703914999962, 0.0017193206585943699, 0.0011661882745102048, 0.0023571501951664686, 0.0033326835837215185, 0.0029568213503807783, 0.0027774106711149216, 0.0028435890562832355, 0.0024406011216342449, 0.0011238777078688145, 0.0036201805341988802, 0.002564919413998723, 0.0013982632663100958, 0.0012973508564755321, 0.0036891563795506954, 0.0030573478434234858, 0.0026646093465387821, 0.0024792002514004707, 0.00094610097585245967, 0.0017713183769956231, } };
const TfArray<48, int> quant49_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const ALIGN(8) int8_t tensor_data50[8*1*1*48] = { 
  /* [0][0][][] */ -18,-28,48,-51,57,86,69,94,109,-47,-19,59,-28,-21,17,-19,45,43,13,-53,-30,22,-88,-38,32,-9,22,-74,-35,28,44,24,25,48,64,16,120,-54,-77,5,-55,-67,-31,0,-72,-86,-127,58, 
  /* [1][0][][] */ -11,0,-40,49,1,12,-40,-17,-57,25,18,86,-29,2,-26,127,39,59,11,-30,-43,-21,-67,21,13,-8,-17,-86,48,-10,-57,-66,62,-32,-33,-57,33,36,52,-41,6,69,50,-41,0,-36,-51,-22, 
  /* [2][0][][] */ 6,-71,-27,-5,-31,17,4,11,110,17,-7,-17,-29,-76,37,8,1,-61,-23,-4,-99,50,6,29,7,46,-37,-26,-20,-37,41,-47,-99,29,-50,55,-67,60,-20,-23,127,-20,-3,41,30,40,-57,-36, 
  /* [3][0][][] */ -31,-114,96,59,24,-108,-18,-14,-127,127,61,-53,54,10,-22,21,58,35,-29,46,75,86,32,-63,12,87,64,32,-29,-72,14,14,-25,6,53,10,-17,-83,-40,43,-27,-11,21,-69,-82,18,0,26, 
  /* [4][0][][] */ -11,55,-17,72,33,4,10,-2,-54,78,47,73,1,21,61,14,7,-103,-8,-14,89,-12,-97,59,72,-23,30,29,48,26,-11,-54,-52,127,3,16,59,-25,20,23,-26,43,-1,-24,2,-50,-32,19, 
  /* [5][0][][] */ -27,1,-8,-72,-127,33,118,27,13,60,-26,-28,-106,-8,59,-33,-85,40,-59,-85,-1,104,-3,36,107,27,-6,15,-26,-18,125,-54,-11,104,77,89,-22,52,87,38,-26,-40,-27,36,-64,50,26,55, 
  /* [6][0][][] */ 2,-22,-11,27,-55,-53,15,3,23,-13,41,6,-52,-25,33,56,5,-60,7,-59,69,-24,-1,-31,8,-2,9,38,41,2,10,127,44,-15,-13,22,3,-8,21,15,0,36,-27,-51,-3,-24,-21,37, 
  /* [7][0][][] */ -26,-16,-44,-4,6,-26,5,10,40,5,23,-1,-6,12,1,-1,30,-7,2,-5,-59,10,9,-26,0,-5,-52,-12,-13,-17,17,29,18,-9,29,11,-21,127,-12,-40,-40,-1,-46,-33,22,64,-69,-12, 
};
const TfArray<4, int> tensor_dimension50 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant50_scale = { 8, { 0.0044078095816075802, 0.006006273441016674, 0.0047021820209920406, 0.0052992375567555428, 0.0054938825778663158, 0.0047207796014845371, 0.0086245620623230934, 0.0091210557147860527, } };
const TfArray<8, int> quant50_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const ALIGN(8) int8_t tensor_data51[48*1*1*8] = { 
  /* [0][0][][] */ -80,-127,-34,28,-35,-11,52,-49, 
  /* [1][0][][] */ -12,127,44,-84,5,-88,-72,95, 
  /* [2][0][][] */ -127,-65,36,8,69,4,31,-15, 
  /* [3][0][][] */ 2,-40,-127,-58,34,-50,-34,55, 
  /* [4][0][][] */ -60,-114,102,-24,127,-57,55,2, 
  /* [5][0][][] */ -22,66,54,-93,101,34,-53,127, 
  /* [6][0][][] */ -127,100,54,74,-52,1,43,-126, 
  /* [7][0][][] */ 41,-16,59,29,52,-127,-4,104, 
  /* [8][0][][] */ -7,70,-11,-36,20,108,127,-72, 
  /* [9][0][][] */ 82,127,10,-70,-82,-67,-55,117, 
  /* [10][0][][] */ 31,-9,30,2,-21,35,-127,-79, 
  /* [11][0][][] */ -69,14,-104,-72,127,21,38,56, 
  /* [12][0][][] */ 85,36,-27,-5,127,91,13,6, 
  /* [13][0][][] */ -127,-121,-8,55,-99,47,68,9, 
  /* [14][0][][] */ -10,104,-90,127,-57,125,-16,34, 
  /* [15][0][][] */ -17,-84,-35,-93,127,65,-33,63, 
  /* [16][0][][] */ 68,-84,1,45,37,-15,34,-127, 
  /* [17][0][][] */ -84,-84,-127,100,9,97,74,-107, 
  /* [18][0][][] */ 80,-11,127,10,-34,-115,-81,-35, 
  /* [19][0][][] */ -23,127,29,30,98,-117,-68,-35, 
  /* [20][0][][] */ -68,-13,-127,-40,34,-7,-3,-4, 
  /* [21][0][][] */ -127,-22,46,64,-90,-117,120,-47, 
  /* [22][0][][] */ 55,-8,-127,-70,-37,-9,-6,52, 
  /* [23][0][][] */ -29,34,127,-23,-92,37,-10,-101, 
  /* [24][0][][] */ -89,101,84,109,127,95,0,-40, 
  /* [25][0][][] */ -52,-127,-73,36,-63,37,51,-3, 
  /* [26][0][][] */ 102,120,-127,-61,-121,-26,-65,37, 
  /* [27][0][][] */ 58,54,-64,21,-127,19,-31,-14, 
  /* [28][0][][] */ -25,72,25,-76,77,99,-127,-118, 
  /* [29][0][][] */ 42,-3,-1,-74,-127,5,17,-55, 
  /* [30][0][][] */ -90,-3,40,127,51,21,-37,-18, 
  /* [31][0][][] */ 13,-118,-2,-83,-127,58,-63,-113, 
  /* [32][0][][] */ -127,-2,28,-12,7,-32,1,23, 
  /* [33][0][][] */ 49,-72,-127,-112,-1,15,-55,14, 
  /* [34][0][][] */ 50,86,117,-6,-127,-66,73,-70, 
  /* [35][0][][] */ 107,29,18,11,-110,-43,-127,-51, 
  /* [36][0][][] */ 127,10,79,-37,11,-18,70,79, 
  /* [37][0][][] */ 127,117,-11,-7,83,81,-125,36, 
  /* [38][0][][] */ -42,96,112,127,-29,67,33,-78, 
  /* [39][0][][] */ 30,53,127,-40,90,-56,-37,15, 
  /* [40][0][][] */ 71,42,35,6,-80,-127,28,-51, 
  /* [41][0][][] */ 32,-50,18,127,-24,68,7,77, 
  /* [42][0][][] */ -18,-112,69,-49,127,-33,92,28, 
  /* [43][0][][] */ -8,-32,-106,-36,120,42,-76,127, 
  /* [44][0][][] */ 99,-21,127,-4,6,31,-52,11, 
  /* [45][0][][] */ -31,22,28,-30,-99,-127,-19,100, 
  /* [46][0][][] */ -57,84,77,35,-6,-25,44,-127, 
  /* [47][0][][] */ 40,-11,18,127,-14,-108,76,60, 
};
const TfArray<4, int> tensor_dimension51 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant51_scale = { 48, { 0.0059862155467271805, 0.0024398870300501585, 0.0023501128889620304, 0.0030450501944869757, 0.0028505090158432722, 0.00221993587911129, 0.003122781403362751, 0.0017172106308862567, 0.0017411132575944066, 0.002606360474601388, 0.0034076673910021782, 0.0039584101177752018, 0.0038018040359020233, 0.0031953782308846712, 0.0024421501439064741, 0.0024751194287091494, 0.0035678604617714882, 0.0024711904115974903, 0.0017277671722695231, 0.0037740629632025957, 0.0042007891461253166, 0.0014835090842097998, 0.0035719140432775021, 0.0025837516877800226, 0.0012406037421897054, 0.0023326589725911617, 0.0028348835185170174, 0.001754333614371717, 0.0021573107223957777, 0.0029169507324695587, 0.0042769201099872589, 0.0020503019914031029, 0.0047668321058154106, 0.0020752290729433298, 0.001846094848588109, 0.0031436430290341377, 0.00054011738393455744, 0.0014167634071782231, 0.0023227978963404894, 0.0012243487872183323, 0.0026917897630482912, 0.0042171087116003036, 0.0026557997334748507, 0.0026667607016861439, 0.0034937853924930096, 0.0029544434510171413, 0.00346020283177495, 0.0022919834591448307, } };
const TfArray<48, int> quant51_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const ALIGN(8) int8_t tensor_data52[8*1*1*48] = { 
  /* [0][0][][] */ 46,48,-79,51,13,22,-90,-29,6,-21,0,-37,-16,-1,44,5,47,-17,47,-23,19,-34,41,1,14,-26,-19,18,-13,-1,-18,0,47,21,21,14,127,59,32,-26,3,-20,-6,-21,80,30,20,-48, 
  /* [1][0][][] */ 65,26,9,-5,30,91,-13,-23,33,61,-37,-76,113,-17,17,52,23,37,30,-92,127,-24,41,58,47,30,42,22,30,-68,61,78,60,110,14,120,72,32,25,28,87,16,38,35,25,49,115,-71, 
  /* [2][0][][] */ -21,12,82,127,-50,23,-2,60,34,74,23,-78,-39,115,26,43,-83,-96,80,5,1,62,-58,-82,-29,-39,26,-8,-111,21,2,-7,-37,-29,-87,-45,18,26,-89,-19,-25,-57,-36,23,71,-77,-29,28, 
  /* [3][0][][] */ -26,52,-79,-11,18,-80,6,72,106,-84,-42,11,-7,-20,12,64,23,9,-13,-26,-5,22,-78,38,-23,-30,38,-9,64,-33,43,-53,37,-18,-29,-50,-127,-3,-81,18,-26,-58,38,-4,-54,16,-10,-36, 
  /* [4][0][][] */ 56,-22,36,-22,-62,72,27,68,-125,-50,55,46,77,-58,-71,-67,90,67,62,-31,18,-97,-19,46,-33,3,-51,-127,-56,-58,95,41,85,3,112,93,65,68,56,37,10,39,-51,-31,88,72,93,-52, 
  /* [5][0][][] */ 35,78,17,96,28,27,-52,-103,-100,30,-14,0,26,63,37,-72,78,107,-28,32,-15,-70,-18,-72,-105,-82,-41,59,-2,46,-30,40,-1,-84,67,6,-41,127,-35,-117,-15,-36,-15,-45,-5,-16,-41,96, 
  /* [6][0][][] */ 113,52,-1,127,-89,24,15,66,21,-88,66,87,82,-41,-27,-51,62,26,-72,25,74,-26,-26,-3,8,65,-42,-45,13,-40,65,58,20,-44,-4,93,98,-81,4,10,-88,76,-105,52,59,105,103,-53, 
  /* [7][0][][] */ 20,15,127,42,-35,59,-85,12,-38,95,-8,-10,45,58,15,-4,-51,-11,-59,5,-11,35,0,-40,-9,43,48,-14,4,2,19,-12,-90,-17,64,32,92,-1,37,-10,-21,-33,-32,-49,0,-28,10,25, 
};
const TfArray<4, int> tensor_dimension52 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant52_scale = { 8, { 0.0065308669582009315, 0.0029061539098620415, 0.0025179630611091852, 0.0029045506380498409, 0.003048999235033989, 0.0034119756892323494, 0.002650789450854063, 0.0039041114505380392, } };
const TfArray<8, int> quant52_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const ALIGN(8) int8_t tensor_data53[48*1*1*8] = { 
  /* [0][0][][] */ -127,41,-16,-14,61,33,7,-49, 
  /* [1][0][][] */ -5,-51,-30,-11,-56,-127,13,16, 
  /* [2][0][][] */ -72,69,3,-55,-52,41,-64,127, 
  /* [3][0][][] */ 56,44,53,-18,-50,-127,44,-20, 
  /* [4][0][][] */ 17,60,-122,32,-127,87,45,34, 
  /* [5][0][][] */ -31,45,30,-33,-84,-127,-60,-8, 
  /* [6][0][][] */ -55,127,101,-37,-70,-34,19,-41, 
  /* [7][0][][] */ -7,-2,37,66,1,-127,-5,57, 
  /* [8][0][][] */ 127,26,-79,78,-85,-67,-108,-7, 
  /* [9][0][][] */ 93,-44,-69,-75,8,-21,-47,127, 
  /* [10][0][][] */ -89,3,10,127,4,71,26,-97, 
  /* [11][0][][] */ 25,18,57,-17,10,119,127,94, 
  /* [12][0][][] */ -69,-87,-44,-92,127,-27,-20,38, 
  /* [13][0][][] */ -25,-4,-10,50,19,-127,44,69, 
  /* [14][0][][] */ 81,86,121,20,77,-127,-97,-29, 
  /* [15][0][][] */ -42,75,127,61,-9,20,45,-75, 
  /* [16][0][][] */ -99,-43,47,-74,127,6,-56,-1, 
  /* [17][0][][] */ 36,-48,-46,1,-11,127,-25,41, 
  /* [18][0][][] */ -27,127,81,-49,-64,48,87,-92, 
  /* [19][0][][] */ 16,107,84,127,-28,32,39,34, 
  /* [20][0][][] */ 9,7,65,-127,-62,-1,69,-16, 
  /* [21][0][][] */ -105,79,37,-127,121,73,123,7, 
  /* [22][0][][] */ 75,-33,-95,72,54,-54,-57,127, 
  /* [23][0][][] */ 37,-80,-127,-40,64,-12,-63,93, 
  /* [24][0][][] */ 43,-20,-98,18,-58,35,-127,122, 
  /* [25][0][][] */ -15,-22,55,11,127,-16,-85,-46, 
  /* [26][0][][] */ 11,102,127,-32,-34,-18,53,-68, 
  /* [27][0][][] */ -38,37,127,-86,22,19,89,-121, 
  /* [28][0][][] */ 61,-9,91,127,74,-29,35,101, 
  /* [29][0][][] */ 70,74,107,20,-60,31,-127,91, 
  /* [30][0][][] */ 42,-8,-87,63,-127,-40,-40,57, 
  /* [31][0][][] */ 23,127,97,-64,-73,38,107,-121, 
  /* [32][0][][] */ 64,-15,-12,29,108,127,33,-37, 
  /* [33][0][][] */ 20,-37,-127,6,22,-18,-38,72, 
  /* [34][0][][] */ 24,-56,24,-127,-4,75,-13,11, 
  /* [35][0][][] */ -26,19,89,-6,11,-127,-2,-23, 
  /* [36][0][][] */ -6,15,-32,-127,-13,10,11,-42, 
  /* [37][0][][] */ 64,-14,-22,-89,-85,127,-61,-78, 
  /* [38][0][][] */ 83,-58,-25,98,60,28,-29,127, 
  /* [39][0][][] */ 127,86,33,74,-10,94,-44,-4, 
  /* [40][0][][] */ 49,-116,-127,-38,13,18,-60,114, 
  /* [41][0][][] */ -6,-59,-127,-106,-6,-77,-43,-20, 
  /* [42][0][][] */ 60,110,91,127,-85,-34,30,51, 
  /* [43][0][][] */ 127,-38,-114,-120,-67,-40,29,68, 
  /* [44][0][][] */ -5,83,113,-79,-92,-10,80,-127, 
  /* [45][0][][] */ 41,23,-127,59,-41,33,19,67, 
  /* [46][0][][] */ 51,-44,-77,-127,17,-32,-34,52, 
  /* [47][0][][] */ 81,-122,127,-63,78,-20,8,9, 
};
const TfArray<4, int> tensor_dimension53 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant53_scale = { 48, { 0.00053397135343402624, 0.0020510104950517416, 0.0029189244378358126, 0.0030678317416459322, 0.0019760739523917437, 0.0031807762570679188, 0.0019487214740365744, 0.0028091804124414921, 0.0024516477715224028, 0.0017398863565176725, 0.0011772507568821311, 0.0032885477412492037, 0.0015750196762382984, 0.0032510838937014341, 0.0022611343301832676, 0.0026875990442931652, 0.0016930329147726297, 0.0037487121298909187, 0.0014108584728091955, 0.0030231541022658348, 0.0028360537253320217, 0.0023275623098015785, 0.0026843755040317774, 0.0018496958073228598, 0.002780555747449398, 0.0025881545152515173, 0.0030936072580516338, 0.0012612798018381, 0.0038136800285428762, 0.0020908694714307785, 0.0027454602532088757, 0.0012302662944421172, 0.0028830748051404953, 0.002446094760671258, 0.0028847150970250368, 0.0036945021711289883, 0.0035226903855800629, 0.0026442315429449081, 0.0032047294080257416, 0.0031573849264532328, 0.0011081532575190067, 0.0032212806399911642, 0.0012082325993105769, 0.0019665665458887815, 0.0026162595022469759, 0.0024924478493630886, 0.0020673999097198248, 0.0025533470325171947, } };
const TfArray<48, int> quant53_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const ALIGN(8) int8_t tensor_data54[8*1*1*48] = { 
  /* [0][0][][] */ 127,-23,22,-29,23,53,8,38,107,-79,57,9,-42,64,19,-45,11,-26,-24,-17,10,-58,8,-21,-54,-33,-38,-36,-29,75,-23,36,26,-37,14,-29,63,-63,-53,6,28,-20,-70,-1,57,-27,55,-35, 
  /* [1][0][][] */ 47,0,-8,59,51,58,19,32,65,-81,-2,4,41,21,-36,-12,-35,-43,-67,-5,5,-48,47,76,-3,-61,-4,40,-23,53,-53,127,-25,44,-21,-23,-57,-14,-9,-25,-47,-18,-35,41,20,-5,8,-85, 
  /* [2][0][][] */ -37,-27,-83,35,-84,-31,-12,48,-108,-86,-89,-33,-37,49,-127,-3,75,-89,31,-19,124,86,-26,3,50,97,16,-98,-52,3,65,3,-29,43,73,-67,68,-6,84,98,-45,103,46,-3,-83,71,-40,73, 
  /* [3][0][][] */ -2,-20,-10,36,-24,4,-10,44,73,91,-127,-29,22,-21,-22,78,-56,-17,-6,49,-22,1,74,20,8,12,-51,53,-36,25,-37,-27,13,28,33,17,52,-7,44,2,-57,85,69,20,27,-11,-31,-41, 
  /* [4][0][][] */ -27,-74,17,-46,2,92,-59,-70,1,-48,73,36,-58,-24,-16,27,68,12,-27,45,-74,-27,115,-17,-92,-17,-7,14,19,-23,-12,61,-53,46,-23,55,-34,37,-4,19,-37,39,-34,41,127,55,-11,4, 
  /* [5][0][][] */ -70,-66,57,-127,-20,21,-36,-55,-4,71,-56,71,-83,19,49,9,73,56,73,13,29,-1,-15,-68,42,-76,2,-50,-13,-36,35,-77,-8,-46,54,-8,-18,32,38,65,92,12,16,-28,-15,-12,-31,31, 
  /* [6][0][][] */ -65,-65,39,29,-58,-62,4,-69,-100,14,-127,40,18,-45,52,17,-32,19,17,124,-19,-1,82,48,-78,-20,58,19,16,-33,-34,-68,-34,58,68,-92,-44,78,56,-27,-71,59,80,-60,-7,-45,-37,4, 
  /* [7][0][][] */ 23,-2,13,-14,9,25,-43,-43,-127,-29,99,26,7,-26,30,4,15,44,2,-19,-44,13,-12,-41,36,4,-39,14,-11,-22,-27,-49,-100,-53,-34,5,57,-30,-25,0,57,4,47,-19,17,-41,40,19, 
};
const TfArray<4, int> tensor_dimension54 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant54_scale = { 8, { 0.0064658746123313904, 0.0088484436273574829, 0.0031239800155162811, 0.0053005288355052471, 0.0042757042683660984, 0.0063975281082093716, 0.0039102556183934212, 0.0054946304298937321, } };
const TfArray<8, int> quant54_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const ALIGN(8) int8_t tensor_data55[48*1*1*8] = { 
  /* [0][0][][] */ -12,12,127,-18,-4,54,-4,-85, 
  /* [1][0][][] */ 88,-61,63,-76,-16,-69,127,24, 
  /* [2][0][][] */ 62,63,75,-73,-68,24,127,-26, 
  /* [3][0][][] */ 1,25,5,-22,19,-65,127,7, 
  /* [4][0][][] */ 127,-47,-60,-40,-97,-64,-27,78, 
  /* [5][0][][] */ 28,74,127,-2,23,-43,29,-43, 
  /* [6][0][][] */ 113,111,-18,127,-80,25,23,95, 
  /* [7][0][][] */ -30,-7,-2,37,35,-122,-127,-38, 
  /* [8][0][][] */ 111,69,-43,77,-59,28,-127,-55, 
  /* [9][0][][] */ 127,-23,-38,47,2,-41,22,-83, 
  /* [10][0][][] */ 72,23,-8,13,-29,127,36,8, 
  /* [11][0][][] */ 124,-28,-9,-127,100,-65,-58,78, 
  /* [12][0][][] */ -58,108,77,-39,13,67,-88,127, 
  /* [13][0][][] */ 127,-1,-94,12,29,-85,31,-96, 
  /* [14][0][][] */ 111,31,-1,-19,-127,29,-79,-14, 
  /* [15][0][][] */ 12,14,-92,-29,-127,-52,112,96, 
  /* [16][0][][] */ -3,-54,119,-5,127,-46,-64,-36, 
  /* [17][0][][] */ 21,-17,84,-11,127,-55,-68,-2, 
  /* [18][0][][] */ 111,-41,127,49,-30,29,-38,-1, 
  /* [19][0][][] */ 68,47,56,-67,-41,-127,19,-45, 
  /* [20][0][][] */ 43,-37,56,127,11,-65,-77,80, 
  /* [21][0][][] */ 88,-15,-70,-127,53,-60,7,106, 
  /* [22][0][][] */ -46,-127,-58,-59,54,-30,110,-69, 
  /* [23][0][][] */ -12,21,29,-43,-108,-127,6,-26, 
  /* [24][0][][] */ 127,8,61,51,-12,-29,-97,73, 
  /* [25][0][][] */ 101,61,-18,-72,-23,-14,-26,127, 
  /* [26][0][][] */ -84,-31,23,-127,105,1,-45,-82, 
  /* [27][0][][] */ 111,127,-9,-54,11,62,28,6, 
  /* [28][0][][] */ 22,127,-6,10,3,-58,-10,120, 
  /* [29][0][][] */ 119,23,100,113,51,-39,-127,57, 
  /* [30][0][][] */ 127,-113,-80,108,55,7,-76,94, 
  /* [31][0][][] */ 99,-82,23,54,-85,-108,-127,58, 
  /* [32][0][][] */ -92,-72,27,-127,80,-16,-35,-84, 
  /* [33][0][][] */ 22,2,29,30,32,-73,127,42, 
  /* [34][0][][] */ -68,84,118,-93,127,-86,-82,113, 
  /* [35][0][][] */ -67,17,19,110,0,127,35,-23, 
  /* [36][0][][] */ 90,31,-32,-127,44,-9,24,46, 
  /* [37][0][][] */ 42,41,-10,5,-69,127,58,44, 
  /* [38][0][][] */ -22,-68,25,109,17,54,3,127, 
  /* [39][0][][] */ 18,0,-127,41,-6,-36,-28,67, 
  /* [40][0][][] */ 62,16,-90,4,-48,51,-53,127, 
  /* [41][0][][] */ 35,1,17,-47,-105,-127,-14,0, 
  /* [42][0][][] */ -85,61,-89,110,-13,91,-29,-127, 
  /* [43][0][][] */ -14,1,-27,-127,-21,7,-11,-77, 
  /* [44][0][][] */ 67,26,23,69,24,127,-50,36, 
  /* [45][0][][] */ 2,77,-25,18,127,-34,-74,-12, 
  /* [46][0][][] */ 66,-77,3,127,78,31,-52,85, 
  /* [47][0][][] */ -15,-88,45,-15,127,18,47,28, 
};
const TfArray<4, int> tensor_dimension55 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant55_scale = { 48, { 0.0026928877923637629, 0.002641748171299696, 0.0023960748221725225, 0.0032827006652951241, 0.0016273800283670425, 0.0030585352797061205, 0.0021373911295086145, 0.002285404596477747, 0.0023803440853953362, 0.0027767745777964592, 0.0033120776060968637, 0.00088129914365708828, 0.0021379122044891119, 0.0018673918675631285, 0.001585871446877718, 0.0018864310113713145, 0.0021262711379677057, 0.0013029518304392695, 0.002898532897233963, 0.001862230827100575, 0.0023671411909162998, 0.00056357792345806956, 0.00082338764332234859, 0.0028284916188567877, 0.0029197267722338438, 0.0017755115404725075, 0.002640073886141181, 0.0025899764150381088, 0.0025182273238897324, 0.0027595979627221823, 0.0014637622516602278, 0.0012996806763112545, 0.0025236210785806179, 0.0036233977880328894, 0.00095030304510146379, 0.0016340918373316526, 0.0010912003926932812, 0.0029477088246494532, 0.002931712893769145, 0.0030708783306181431, 0.0018135829595848918, 0.0026751968543976545, 0.00094936875393614173, 0.0036293184384703636, 0.0032795846927911043, 0.0035093526821583509, 0.0025971115101128817, 0.0019586107227951288, } };
const TfArray<48, int> quant55_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const ALIGN(8) int8_t tensor_data56[8*1*1*48] = { 
  /* [0][0][][] */ 37,-43,47,-16,18,-70,-51,-33,8,22,-9,-62,22,-16,87,-36,-15,-15,62,9,28,-107,-30,69,-48,-12,14,-73,14,55,-24,5,-12,-20,7,-19,76,29,-20,53,31,40,127,41,-12,-35,16,-22, 
  /* [1][0][][] */ 77,-65,48,0,-72,-27,-119,-67,36,-35,-14,-29,112,36,-78,33,-47,-81,37,50,28,127,63,-87,-24,31,-4,29,-12,44,6,6,31,29,35,79,-116,-23,67,29,-118,-20,54,-103,7,112,-46,70, 
  /* [2][0][][] */ 33,77,-6,6,-49,-39,30,-7,-36,67,69,4,-86,-63,68,24,36,0,-13,53,-47,78,-21,-93,-23,-22,31,27,-11,-26,-127,22,-47,-23,-27,6,-60,-45,9,68,20,-79,6,-7,-11,54,29,-45, 
  /* [3][0][][] */ 28,23,-27,-40,-9,28,42,-23,-8,9,-14,28,3,-7,36,3,-1,34,9,16,-16,-127,-4,-21,-33,3,-40,38,10,1,49,29,30,-21,-20,-12,-25,-14,25,25,-9,-21,40,-32,30,40,11,7, 
  /* [4][0][][] */ 53,54,-38,-19,-82,-6,-27,-22,-55,24,-4,-43,-21,1,59,-25,6,32,12,-26,21,127,-29,57,-38,7,10,28,3,37,26,22,-9,17,9,10,-66,9,-1,34,-22,25,-110,-55,85,6,22,-36, 
  /* [5][0][][] */ 42,-29,48,-33,-51,35,51,-18,17,54,-79,-27,-5,-13,41,-7,-41,-127,-15,0,-24,107,10,-1,46,15,-53,-34,6,-5,17,-49,41,-44,0,24,52,48,34,-32,13,-4,-61,11,15,38,-30,44, 
  /* [6][0][][] */ 37,10,4,-17,-10,-32,62,10,-17,-26,1,-4,40,32,38,-21,3,9,23,30,-21,127,7,6,30,6,-35,-21,15,-17,-4,-8,16,-14,5,-24,1,-5,-2,38,-31,-1,-8,20,-1,-22,5,-23, 
  /* [7][0][][] */ 34,-41,25,12,-50,-78,18,17,50,78,-26,15,-63,-38,-118,-14,-22,127,14,-29,35,15,-12,52,26,2,-1,-27,-3,28,-107,-73,-9,-5,-27,15,4,34,-12,20,-31,37,10,17,-11,-33,-20,22, 
};
const TfArray<4, int> tensor_dimension56 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant56_scale = { 8, { 0.0052462760359048843, 0.0038377717137336731, 0.0040546604432165623, 0.01001530047506094, 0.0058286762796342373, 0.0068926075473427773, 0.007356712594628334, 0.0053888969123363495, } };
const TfArray<8, int> quant56_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const ALIGN(8) int8_t tensor_data57[48*1*1*8] = { 
  /* [0][0][][] */ -76,74,70,59,-127,-15,-21,106, 
  /* [1][0][][] */ 120,58,-57,127,-2,-56,119,79, 
  /* [2][0][][] */ -33,-49,-71,39,127,-5,-43,3, 
  /* [3][0][][] */ 24,126,68,-99,46,96,127,90, 
  /* [4][0][][] */ -13,-23,127,-16,-62,-18,46,-46, 
  /* [5][0][][] */ -110,-113,-39,-41,77,111,-14,127, 
  /* [6][0][][] */ -127,60,-10,-19,-99,44,-99,29, 
  /* [7][0][][] */ 127,72,57,102,-21,-56,102,56, 
  /* [8][0][][] */ -59,-18,-66,-127,-50,-105,-48,58, 
  /* [9][0][][] */ 9,89,127,-75,67,-37,-32,16, 
  /* [10][0][][] */ -36,-102,82,23,-127,77,120,-31, 
  /* [11][0][][] */ -98,-127,62,60,20,-7,22,-55, 
  /* [12][0][][] */ -127,-10,51,-45,71,-61,-1,1, 
  /* [13][0][][] */ -19,-16,15,127,0,-60,-38,17, 
  /* [14][0][][] */ -77,-14,-26,44,10,-127,40,12, 
  /* [15][0][][] */ -18,48,-80,20,-88,127,31,66, 
  /* [16][0][][] */ -89,-66,6,48,-100,27,-36,-127, 
  /* [17][0][][] */ -1,-44,60,63,9,5,127,-43, 
  /* [18][0][][] */ 42,18,65,99,-40,105,127,-27, 
  /* [19][0][][] */ -44,-24,-41,118,-127,17,-41,0, 
  /* [20][0][][] */ -48,-55,-127,88,-87,117,-92,20, 
  /* [21][0][][] */ -41,52,-18,-48,48,32,-127,-3, 
  /* [22][0][][] */ -1,28,69,11,127,15,49,13, 
  /* [23][0][][] */ 120,38,-39,104,-127,-3,39,3, 
  /* [24][0][][] */ -66,67,-41,114,-55,-16,127,114, 
  /* [25][0][][] */ -53,-23,-28,127,-102,-24,-71,125, 
  /* [26][0][][] */ 98,28,-71,127,-73,-27,12,4, 
  /* [27][0][][] */ 44,-29,115,69,-53,53,127,-83, 
  /* [28][0][][] */ 127,-106,-26,-6,24,11,74,-57, 
  /* [29][0][][] */ -26,-127,-38,52,76,80,45,37, 
  /* [30][0][][] */ -55,-127,-118,127,42,-48,95,76, 
  /* [31][0][][] */ 127,28,-70,94,-23,54,-37,11, 
  /* [32][0][][] */ 9,-1,-127,59,-2,0,-112,-4, 
  /* [33][0][][] */ 63,67,99,-83,-18,-127,68,-63, 
  /* [34][0][][] */ -87,-37,31,-13,-62,-39,-22,127, 
  /* [35][0][][] */ -50,103,113,-7,-127,-79,3,4, 
  /* [36][0][][] */ 114,83,-121,127,-66,3,-14,88, 
  /* [37][0][][] */ -36,-27,-79,52,-29,17,-127,-82, 
  /* [38][0][][] */ 42,-37,34,38,-92,-10,-68,127, 
  /* [39][0][][] */ -104,-98,-86,-18,112,-2,-127,-65, 
  /* [40][0][][] */ -69,-127,49,-21,-50,-80,19,34, 
  /* [41][0][][] */ 24,-23,-5,-100,-18,36,-41,-127, 
  /* [42][0][][] */ 32,-31,-104,52,123,45,-24,127, 
  /* [43][0][][] */ 50,-23,-127,-79,-5,72,-40,89, 
  /* [44][0][][] */ 5,11,-10,-18,-127,-38,10,25, 
  /* [45][0][][] */ 127,63,-60,-59,106,-14,-107,-90, 
  /* [46][0][][] */ -2,3,23,-127,-98,-86,-74,-23, 
  /* [47][0][][] */ 72,32,127,34,4,-18,30,-28, 
};
const TfArray<4, int> tensor_dimension57 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant57_scale = { 48, { 0.0033831873442977667, 0.0019753256347030401, 0.0051667597144842148, 0.00037740924744866788, 0.0051830429583787918, 0.0013736599357798696, 0.0050994139164686203, 0.0026832800358533859, 0.0035743024200201035, 0.0015443526208400726, 0.0039874385111033916, 0.0054392912425100803, 0.0014807013794779778, 0.0021060802973806858, 0.0046365899033844471, 0.0029109937604516745, 0.0020316848531365395, 0.0044034076854586601, 0.0026552465278655291, 0.00088546157348901033, 0.0014552129432559013, 0.0043352236971259117, 0.001516402349807322, 0.0013542582746595144, 0.0016437687445431948, 0.0013158409856259823, 0.0012806982267647982, 0.0051017040386795998, 0.003178297309204936, 0.0017266586655750871, 0.0018925841432064772, 0.0016131661832332611, 0.0014124356675893068, 0.0026829128619283438, 0.0035764493513852358, 0.0024355172645300627, 0.0011623322498053312, 0.0015350118046626449, 0.0017620277358219028, 0.0025895221624523401, 0.0024618320167064667, 0.003608417697250843, 0.0022444529458880424, 0.005247422493994236, 0.002998454961925745, 0.0025277954991906881, 0.0015206842217594385, 0.006384954322129488, } };
const TfArray<48, int> quant57_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const ALIGN(8) int8_t tensor_data58[8*1*1*48] = { 
  /* [0][0][][] */ -19,32,-3,63,32,-63,12,-77,33,16,-14,22,-96,-26,40,-35,45,12,1,-127,-38,47,-77,85,86,19,-65,23,-24,85,-71,21,0,26,-36,63,-34,48,-11,102,8,61,59,-14,-2,26,-33,-20, 
  /* [1][0][][] */ -47,-25,48,22,33,-31,10,2,-16,-24,50,29,-7,3,7,65,28,-53,3,127,36,50,50,-4,-26,-10,32,-18,-10,-32,14,92,98,101,-38,-33,97,23,53,-1,94,-4,-54,3,-24,30,91,46, 
  /* [2][0][][] */ 66,12,19,-127,-36,-42,-17,-25,9,45,2,-18,14,-3,-8,-8,18,20,56,116,26,-17,4,4,15,17,0,34,-4,-4,-45,41,-17,37,-27,-33,-15,-4,5,43,-12,-10,-47,13,0,-49,-31,-17, 
  /* [3][0][][] */ 27,-79,3,-103,-25,24,-21,-27,43,-4,23,-23,-50,41,-39,-5,37,35,76,59,44,60,27,30,-38,-29,-1,86,-20,7,5,-3,17,24,-40,-15,127,-52,1,0,-46,-57,-29,20,-30,10,-62,5, 
  /* [4][0][][] */ 33,43,-37,66,55,-31,-35,1,56,44,-6,11,93,40,-11,-13,-15,-37,-42,28,-57,-93,127,-79,-18,-35,43,3,18,-34,-17,5,26,-41,16,-5,-10,32,-20,-59,45,-22,12,23,13,37,-77,9, 
  /* [5][0][][] */ -51,-38,-15,-46,-22,66,-26,9,11,-39,-78,-49,-28,22,127,54,-15,-49,1,126,44,-1,5,-58,25,-74,99,84,-43,44,22,-101,14,-4,21,45,64,120,24,-69,47,90,-28,40,25,46,-46,-31, 
  /* [6][0][][] */ -5,-11,-21,-113,-28,14,-13,-36,3,-12,-45,5,-25,54,-31,-21,35,27,33,127,-55,-14,-24,24,14,-52,-14,46,-26,32,-26,38,-75,-22,-31,21,1,-32,-31,26,-31,-53,-34,28,-38,-18,-83,-19, 
  /* [7][0][][] */ 2,-15,-17,74,12,127,2,-12,-33,1,-1,29,37,6,1,7,32,-28,-43,-4,-36,-41,-1,-18,-44,-96,2,-40,5,-13,19,-11,-1,-27,47,-7,3,27,79,-17,-11,-70,38,16,-36,18,-4,17, 
};
const TfArray<4, int> tensor_dimension58 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant58_scale = { 8, { 0.0017754115397110581, 0.0018471154617145658, 0.0031518116593360901, 0.0024260960053652525, 0.0018780670361593366, 0.0019032516283914447, 0.0017936208751052618, 0.003102476941421628, } };
const TfArray<8, int> quant58_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const ALIGN(8) int8_t tensor_data59[48*1*1*8] = { 
  /* [0][0][][] */ -12,-9,-91,93,-108,127,-46,0, 
  /* [1][0][][] */ -37,-10,8,-59,-127,14,-77,-40, 
  /* [2][0][][] */ -127,-122,-122,-93,-47,51,-11,-56, 
  /* [3][0][][] */ 51,4,36,71,-48,-21,86,127, 
  /* [4][0][][] */ -127,-68,116,-83,46,-21,7,-74, 
  /* [5][0][][] */ -88,41,3,34,-127,72,-45,-31, 
  /* [6][0][][] */ 38,-5,-127,58,-55,5,41,7, 
  /* [7][0][][] */ 35,2,-127,-26,-2,124,36,-36, 
  /* [8][0][][] */ -59,31,-81,35,100,127,-94,45, 
  /* [9][0][][] */ -36,-55,69,-102,7,-25,-127,-56, 
  /* [10][0][][] */ -25,-84,20,-59,-5,-25,17,-127, 
  /* [11][0][][] */ -90,-15,42,-106,99,-117,-127,-30, 
  /* [12][0][][] */ 51,12,18,5,39,-126,84,127, 
  /* [13][0][][] */ -113,-127,-9,-93,4,-40,-37,-18, 
  /* [14][0][][] */ 86,30,-127,92,-109,-68,-52,-16, 
  /* [15][0][][] */ -108,102,-53,-2,-123,-9,127,-63, 
  /* [16][0][][] */ 127,-44,13,51,11,-45,-9,17, 
  /* [17][0][][] */ -29,52,127,23,-40,17,64,-68, 
  /* [18][0][][] */ -68,56,-31,65,127,48,-2,15, 
  /* [19][0][][] */ -52,69,48,111,-110,127,11,-37, 
  /* [20][0][][] */ 99,127,62,56,123,-44,-90,14, 
  /* [21][0][][] */ -53,51,-27,-50,18,6,127,-44, 
  /* [22][0][][] */ 15,-23,-14,-127,38,-22,-25,46, 
  /* [23][0][][] */ 0,127,-42,18,-99,36,-9,60, 
  /* [24][0][][] */ 34,47,56,-6,-34,90,-127,9, 
  /* [25][0][][] */ 113,-25,89,28,-28,127,12,54, 
  /* [26][0][][] */ 118,22,-68,60,76,103,127,-19, 
  /* [27][0][][] */ 51,-77,84,-84,-94,-106,110,-127, 
  /* [28][0][][] */ -34,-119,-103,0,-127,7,-44,0, 
  /* [29][0][][] */ 85,6,72,-37,109,8,-127,79, 
  /* [30][0][][] */ -49,63,6,46,-88,-98,81,127, 
  /* [31][0][][] */ -127,-27,89,-20,58,26,47,-30, 
  /* [32][0][][] */ 17,15,71,-27,-125,-86,127,-36, 
  /* [33][0][][] */ 85,78,22,-27,-1,-33,72,-127, 
  /* [34][0][][] */ 20,-124,-76,-35,27,-77,-127,-19, 
  /* [35][0][][] */ -63,57,127,-62,69,-103,-18,24, 
  /* [36][0][][] */ -28,28,-82,60,70,-39,-127,17, 
  /* [37][0][][] */ -122,44,76,9,83,41,127,36, 
  /* [38][0][][] */ 103,54,127,40,34,86,-80,21, 
  /* [39][0][][] */ -58,-1,75,40,127,-112,34,-18, 
  /* [40][0][][] */ 66,-30,-91,-60,-2,127,5,84, 
  /* [41][0][][] */ 58,61,29,36,14,127,-97,31, 
  /* [42][0][][] */ -82,-23,18,37,-127,24,30,61, 
  /* [43][0][][] */ -36,-73,-86,62,-58,127,54,37, 
  /* [44][0][][] */ -7,-52,-127,89,-88,28,-49,55, 
  /* [45][0][][] */ -127,35,-120,87,26,31,-102,3, 
  /* [46][0][][] */ -127,-5,87,-37,-28,-4,-27,-42, 
  /* [47][0][][] */ -100,-108,8,-127,48,97,-71,-46, 
};
const TfArray<4, int> tensor_dimension59 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant59_scale = { 48, { 0.0018106471979990602, 0.0028403978794813156, 0.0029842965304851532, 0.0034222390968352556, 0.0015627414686605334, 0.0043921130709350109, 0.0019644806161522865, 0.0027890331111848354, 0.0024846773594617844, 0.0042235055007040501, 0.001937759225256741, 0.0013658099342137575, 0.0029029110446572304, 0.0049238610081374645, 0.00071087531978264451, 0.0025022628251463175, 0.0014641446759924293, 0.0023118960671126842, 0.0019062334904447198, 0.0021848464384675026, 0.0041237366385757923, 0.0012657633051276207, 0.0040231146849691868, 0.0032602068968117237, 0.0043553747236728668, 0.0028360888827592134, 0.0021586602088063955, 0.0021638288162648678, 0.0012888095807284117, 0.0041791349649429321, 0.0031029509846121073, 0.001245965133421123, 0.0034902549814432859, 0.002514151856303215, 0.0011362700024619699, 0.0012015876127406955, 0.0026011534500867128, 0.00079201854532584548, 0.004484731238335371, 0.0022094044834375381, 0.0028100267518311739, 0.0037159502971917391, 0.0032348830718547106, 0.0032842615619301796, 0.00087224075105041265, 0.0033009685575962067, 0.0023943241685628891, 0.0021557153668254614, } };
const TfArray<48, int> quant59_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const ALIGN(8) int8_t tensor_data60[8*1*1*48] = { 
  /* [0][0][][] */ 46,3,53,0,85,43,-13,19,-12,6,29,42,-38,-41,-20,-28,-41,-1,-50,-2,22,-28,-40,25,-9,20,55,-4,-20,18,-25,2,13,-42,-4,-54,13,-127,-24,66,-39,-11,-68,-20,57,-33,-43,-4, 
  /* [1][0][][] */ -74,41,45,43,28,-5,41,20,54,-37,24,-113,13,-13,17,28,24,44,-5,60,0,-47,-27,44,31,-19,-9,44,-45,-11,-8,85,-12,-10,11,127,-18,26,18,-47,0,56,4,27,-118,11,-45,-31, 
  /* [2][0][][] */ -41,-11,28,3,-68,4,12,-127,-62,11,13,64,32,-13,-44,-63,-63,86,33,46,13,-23,22,-32,-28,37,-85,37,-23,64,-47,-4,-60,-32,45,6,43,0,25,-12,-5,28,-7,-67,-121,-51,90,-3, 
  /* [3][0][][] */ -79,22,-33,54,25,14,55,-27,36,-52,14,-59,-6,40,11,-7,-43,67,89,53,24,86,-95,3,25,8,19,18,29,11,2,-6,-13,-6,-30,79,-30,-36,-20,-113,-36,10,11,23,-127,64,-35,-44, 
  /* [4][0][][] */ 4,-65,15,10,-61,38,-24,-20,39,-3,-8,-6,-14,-28,67,-26,12,20,-3,-4,19,25,34,-35,58,-13,32,52,-59,1,34,30,24,41,-8,-18,-41,104,25,-23,4,7,-50,-10,-41,13,127,17, 
  /* [5][0][][] */ -62,23,-27,2,44,-4,49,106,83,-62,-25,-98,33,12,-127,-77,73,20,26,-27,12,98,11,16,29,-20,91,9,66,12,53,34,61,22,-28,37,74,42,-29,45,-49,41,44,47,-37,32,-21,75, 
  /* [6][0][][] */ 19,-20,0,23,31,36,-13,24,-38,-3,-20,32,-16,4,-14,67,4,21,90,0,2,127,-15,3,8,18,24,-27,10,-4,-14,-8,-58,-22,24,0,39,40,-25,-19,-15,-5,-4,-8,-40,-14,-17,-21, 
  /* [7][0][][] */ -7,2,29,63,30,65,11,-3,-13,26,101,-11,-30,-2,-2,-61,-2,-45,-87,-36,-17,-27,61,29,4,-30,10,27,-1,-19,-64,37,0,50,-4,3,17,127,1,44,-16,27,45,27,-33,-21,0,5, 
};
const TfArray<4, int> tensor_dimension60 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant60_scale = { 8, { 0.0025229784660041332, 0.0024354653432965279, 0.0018460077699273825, 0.0026634691748768091, 0.0026084184646606445, 0.0023762197233736515, 0.0036001682747155428, 0.0030128518119454384, } };
const TfArray<8, int> quant60_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const ALIGN(8) int8_t tensor_data61[48*1*1*8] = { 
  /* [0][0][][] */ -5,-98,-87,37,-17,-63,-127,-24, 
  /* [1][0][][] */ 27,-37,-107,127,-53,-57,-11,20, 
  /* [2][0][][] */ 76,61,58,-78,-127,78,-5,-38, 
  /* [3][0][][] */ 62,79,100,-85,67,-5,-127,-37, 
  /* [4][0][][] */ 69,64,127,-68,31,-45,0,-88, 
  /* [5][0][][] */ -37,4,-46,-3,6,9,-127,17, 
  /* [6][0][][] */ 11,-58,33,-20,38,-40,-127,-50, 
  /* [7][0][][] */ -1,30,-71,-127,68,-19,74,-92, 
  /* [8][0][][] */ 83,-93,7,-127,84,-14,-54,-41, 
  /* [9][0][][] */ 86,84,-42,78,127,12,-21,-8, 
  /* [10][0][][] */ 7,-91,-53,67,-127,93,13,37, 
  /* [11][0][][] */ 33,-80,3,33,43,67,-127,-35, 
  /* [12][0][][] */ -115,127,-48,-82,-52,-76,-63,73, 
  /* [13][0][][] */ 40,-93,-97,114,-127,-4,-62,-57, 
  /* [14][0][][] */ -8,-30,57,6,-51,103,65,127, 
  /* [15][0][][] */ 7,127,-90,111,-46,55,-5,-41, 
  /* [16][0][][] */ -46,-1,-127,-24,8,-77,34,25, 
  /* [17][0][][] */ 103,85,-8,39,127,-96,15,-26, 
  /* [18][0][][] */ 45,107,22,-65,-15,-1,127,40, 
  /* [19][0][][] */ -81,-74,3,50,53,-57,127,61, 
  /* [20][0][][] */ -31,-55,66,-76,-108,-127,85,-102, 
  /* [21][0][][] */ 34,24,-39,57,-72,127,25,49, 
  /* [22][0][][] */ -42,44,-93,15,5,-50,127,-43, 
  /* [23][0][][] */ 27,-7,-1,30,104,-30,-127,26, 
  /* [24][0][][] */ 29,0,75,-92,-62,127,-42,-16, 
  /* [25][0][][] */ -78,-44,54,-96,-99,127,-21,-65, 
  /* [26][0][][] */ 127,-48,-91,37,106,35,25,18, 
  /* [27][0][][] */ 47,-79,-98,127,-52,-44,-80,-34, 
  /* [28][0][][] */ -107,-83,92,-127,43,1,38,-85, 
  /* [29][0][][] */ -6,18,106,-25,-56,-19,-127,-20, 
  /* [30][0][][] */ -48,91,127,-115,-90,-92,5,-111, 
  /* [31][0][][] */ -18,108,-127,-34,-105,23,69,-126, 
  /* [32][0][][] */ 127,-16,47,-62,-99,21,-93,55, 
  /* [33][0][][] */ -71,115,-52,122,-92,-88,106,127, 
  /* [34][0][][] */ 127,71,65,1,51,-82,-7,93, 
  /* [35][0][][] */ 78,-3,-29,-74,127,51,-54,-105, 
  /* [36][0][][] */ -51,7,29,48,-4,15,127,-24, 
  /* [37][0][][] */ -58,47,127,-20,84,103,17,60, 
  /* [38][0][][] */ 18,-91,39,127,-43,-22,-69,26, 
  /* [39][0][][] */ 73,-25,-43,43,127,-112,64,2, 
  /* [40][0][][] */ 12,110,-95,9,-127,-6,-6,104, 
  /* [41][0][][] */ 72,-6,42,-20,127,-18,-55,82, 
  /* [42][0][][] */ 125,-127,-122,58,-58,-26,34,110, 
  /* [43][0][][] */ -49,-89,88,20,80,101,-127,123, 
  /* [44][0][][] */ 79,-116,-100,70,-54,127,62,100, 
  /* [45][0][][] */ 127,85,100,62,35,-74,20,106, 
  /* [46][0][][] */ -83,73,77,-1,-127,8,-21,-35, 
  /* [47][0][][] */ -74,-40,-29,-127,-32,-18,-37,-13, 
};
const TfArray<4, int> tensor_dimension61 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant61_scale = { 48, { 0.0010052755242213607, 0.0011750847334042192, 0.0038391272537410259, 0.0026807019021362066, 0.00097828148864209652, 0.0026451670564711094, 0.0015387940220534801, 0.00177339231595397, 0.0032632804941385984, 0.0032650846987962723, 0.0017252516699954867, 0.0012773453490808606, 0.00093587511219084263, 0.00069085205905139446, 0.0012402767315506935, 0.0027603227645158768, 0.0049037826247513294, 0.0022804026957601309, 0.0015580818289890885, 0.0018866389291360974, 0.0028443068731576204, 0.0029795945156365633, 0.0026495710480958223, 0.0026553580537438393, 0.0039380169473588467, 0.0026409130077809095, 0.0029878653585910797, 0.00087518262444064021, 0.0013969843275845051, 0.0026906169950962067, 0.0018750539747998118, 0.0030025697778910398, 0.0013623858103528619, 0.0024470349308103323, 0.0019113887101411819, 0.0014350620331242681, 0.0016682065324857831, 0.00095923314802348614, 0.0013465438969433308, 0.0039812824688851833, 0.0025912215933203697, 0.003427538787946105, 0.00095951987896114588, 0.0026570155750960112, 0.0016838375013321638, 0.0026299436576664448, 0.0042109848000109196, 0.0049093253910541534, } };
const TfArray<48, int> quant61_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const ALIGN(8) int8_t tensor_data62[8*1*1*48] = { 
  /* [0][0][][] */ 62,26,24,-85,36,-47,-45,17,-57,18,47,48,-66,59,-62,18,36,31,43,41,-37,90,-50,14,-56,-59,-30,-88,40,43,-37,37,120,27,93,112,46,-11,-46,-61,-2,35,32,6,37,-127,-96,35, 
  /* [1][0][][] */ -35,-53,-3,27,13,1,95,-60,47,17,-45,-59,41,-88,-12,80,-29,5,-127,47,27,-33,11,0,-26,-30,42,57,50,-11,-19,0,13,19,44,14,-46,32,88,-27,21,-4,5,26,-32,-40,50,-39, 
  /* [2][0][][] */ 28,-67,25,5,75,-25,4,0,-8,16,16,-24,-21,-69,7,-50,14,-10,-26,116,3,-27,-127,-10,-7,63,13,79,-47,63,-104,-18,14,27,29,-33,-50,89,-43,66,-19,91,58,-11,12,-38,33,-17, 
  /* [3][0][][] */ -4,7,-43,75,-67,-13,39,52,44,22,-15,13,-54,-20,-23,54,-16,-46,-3,-85,51,-57,42,-24,16,-29,57,-12,71,33,2,29,-63,47,-7,-27,54,11,-127,-65,-2,14,-19,29,-56,10,59,-47, 
  /* [4][0][][] */ -45,-37,-25,25,6,58,-42,26,-24,90,-23,4,10,-58,-22,6,6,-16,-71,-68,-9,-5,25,23,-28,-45,26,101,-29,-23,-12,-1,-75,-27,31,127,15,3,33,-78,-38,97,22,-18,30,-45,-18,-8, 
  /* [5][0][][] */ -1,-77,40,27,-65,-27,95,0,29,18,-49,-3,-64,-10,127,27,-41,-52,-17,-20,50,29,-5,-68,-102,38,69,27,66,31,-16,65,35,37,-26,83,70,26,8,123,18,31,-30,-33,-95,60,46,-50, 
  /* [6][0][][] */ 14,12,-11,20,9,-21,55,-25,-2,-1,15,-11,-4,2,76,-14,2,28,22,-42,-23,6,77,-26,-2,-35,-25,4,31,-4,1,5,-54,12,4,-11,72,127,33,-32,0,-38,-6,25,7,2,-29,8, 
  /* [7][0][][] */ -29,2,-38,-45,-84,6,18,117,17,-11,-15,4,66,-7,127,-53,-28,-11,-56,-110,-5,30,-7,2,-1,-113,-3,-27,75,20,6,13,116,19,86,-70,-58,52,17,31,15,80,-40,-84,-22,-76,-45,17, 
};
const TfArray<4, int> tensor_dimension62 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant62_scale = { 8, { 0.0015743677504360676, 0.0030420375987887383, 0.0026126930024474859, 0.002696487819775939, 0.0019932694267481565, 0.0021052351221442223, 0.0031830829102545977, 0.0023256510030478239, } };
const TfArray<8, int> quant62_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const ALIGN(8) int8_t tensor_data63[48*1*1*8] = { 
  /* [0][0][][] */ -126,-102,-127,69,104,-18,84,101, 
  /* [1][0][][] */ -12,87,59,-16,-22,-127,20,-76, 
  /* [2][0][][] */ 38,-69,-84,-20,4,127,21,20, 
  /* [3][0][][] */ 81,-72,-6,78,51,66,-127,101, 
  /* [4][0][][] */ -127,37,-28,50,72,-61,101,-13, 
  /* [5][0][][] */ 77,-127,-87,29,-87,48,-4,31, 
  /* [6][0][][] */ -30,16,17,77,-49,-16,15,127, 
  /* [7][0][][] */ 90,-32,35,-127,-118,-39,-110,-33, 
  /* [8][0][][] */ -82,43,69,-127,38,-5,36,20, 
  /* [9][0][][] */ 37,-31,43,-34,-18,-3,127,-11, 
  /* [10][0][][] */ -56,17,-69,-4,29,-12,-127,2, 
  /* [11][0][][] */ 121,36,-50,110,-30,-76,96,127, 
  /* [12][0][][] */ -44,-15,6,93,-17,22,-25,127, 
  /* [13][0][][] */ 115,-117,-81,-111,127,-104,-96,3, 
  /* [14][0][][] */ 125,-38,104,-26,-40,-42,-127,19, 
  /* [15][0][][] */ 115,47,-64,45,-105,118,-127,10, 
  /* [16][0][][] */ 7,-27,-7,32,13,127,-46,38, 
  /* [17][0][][] */ -12,68,-19,-26,0,-127,63,33, 
  /* [18][0][][] */ -63,20,-74,16,-2,127,-52,-9, 
  /* [19][0][][] */ 49,-53,83,87,127,80,-16,-31, 
  /* [20][0][][] */ -33,6,-14,94,127,16,62,54, 
  /* [21][0][][] */ 70,83,-34,127,-30,79,-86,-1, 
  /* [22][0][][] */ 12,127,6,-55,80,5,-64,75, 
  /* [23][0][][] */ -44,-33,3,48,-7,-51,-127,-33, 
  /* [24][0][][] */ 127,24,-73,108,34,-66,-3,-78, 
  /* [25][0][][] */ -39,65,-93,-86,-127,-75,24,32, 
  /* [26][0][][] */ -56,-17,-16,-82,20,3,-43,-127, 
  /* [27][0][][] */ 26,-127,85,125,-63,-55,-107,16, 
  /* [28][0][][] */ 21,-18,-35,-127,-33,105,97,72, 
  /* [29][0][][] */ 88,42,-70,-114,127,-10,89,-123, 
  /* [30][0][][] */ 78,127,24,-26,59,-21,-49,38, 
  /* [31][0][][] */ -96,109,1,65,-127,53,65,-14, 
  /* [32][0][][] */ -113,-44,-14,83,-34,127,81,13, 
  /* [33][0][][] */ 126,96,-35,77,-127,-85,-94,-33, 
  /* [34][0][][] */ 32,89,84,-30,-127,60,-30,-20, 
  /* [35][0][][] */ -22,35,78,-21,40,-127,62,66, 
  /* [36][0][][] */ 29,27,-48,127,83,-88,69,74, 
  /* [37][0][][] */ 0,87,-126,-39,90,59,122,-127, 
  /* [38][0][][] */ -29,70,40,-102,-127,-123,-97,-76, 
  /* [39][0][][] */ 81,105,56,-85,0,-127,30,-53, 
  /* [40][0][][] */ -49,-25,-102,38,-48,11,-127,10, 
  /* [41][0][][] */ 41,-36,-127,-6,-7,-5,-14,56, 
  /* [42][0][][] */ 5,3,9,-127,-41,117,-59,-93, 
  /* [43][0][][] */ -46,-23,4,89,-19,28,-29,127, 
  /* [44][0][][] */ 90,7,68,-77,68,48,-94,127, 
  /* [45][0][][] */ -97,96,52,-37,127,40,1,-5, 
  /* [46][0][][] */ -110,-103,27,-4,127,30,20,-20, 
  /* [47][0][][] */ 77,10,1,-22,71,127,-70,-77, 
};
const TfArray<4, int> tensor_dimension63 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant63_scale = { 48, { 0.0014878085348755121, 0.0015241793589666486, 0.003571867011487484, 0.0013782326132059097, 0.0014980924315750599, 0.0011445394484326243, 0.0037693346384912729, 0.0010478943586349487, 0.0012895695399492979, 0.002501392737030983, 0.0017747003585100174, 0.0025240345858037472, 0.0044048149138689041, 0.0011104518780484796, 0.00080373691162094474, 0.0011259514139965177, 0.0043412423692643642, 0.0025213100016117096, 0.0021259977947920561, 0.0031063156202435493, 0.0016736038960516453, 0.0018802896374836564, 0.0011631050147116184, 0.0014954375801607966, 0.0013124239630997181, 0.0030792828183621168, 0.004607323557138443, 0.00089117337483912706, 0.0018367391312494874, 0.0020978900138288736, 0.004443176556378603, 0.0020322117488831282, 0.0017082119593396783, 0.00086541223572567105, 0.0012401558924466372, 0.0016402681358158588, 0.0036154896952211857, 0.001366086071357131, 0.00011244382767472416, 0.0023129726760089397, 0.0012920980807393789, 0.0016177860088646412, 0.003503887914121151, 0.0041524064727127552, 0.0028911000117659569, 0.00082547811325639486, 0.0018863716395571828, 0.0041849440895020962, } };
const TfArray<48, int> quant63_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const ALIGN(8) int8_t tensor_data64[16*1*1*48] = { 
  /* [0][0][][] */ -66,21,74,-92,-37,-34,127,-11,97,11,-80,-63,-93,49,92,-76,-59,4,82,-72,-38,-3,-14,0,-73,14,-84,-121,-62,19,-11,39,-107,-9,-92,22,74,77,-87,94,48,74,58,73,43,73,-20,-56, 
  /* [1][0][][] */ 4,-19,-4,-8,1,-34,42,-5,69,78,-70,-19,12,16,-28,11,2,7,14,32,-31,-16,7,-37,-127,-36,70,108,-24,-66,-1,-14,0,9,-6,15,0,-89,5,8,-2,-24,-12,-33,-26,31,46,5, 
  /* [2][0][][] */ -34,51,66,-53,-42,-25,55,20,-91,-4,-19,-19,-28,71,2,46,-19,26,56,42,-20,59,21,-29,127,-35,11,77,9,-10,32,-109,20,28,-48,25,9,11,-14,20,-42,-4,7,34,18,-90,71,51, 
  /* [3][0][][] */ 58,-14,61,-50,32,16,2,20,15,-26,-26,-10,27,-41,33,45,16,9,36,-63,31,-29,39,-58,-32,62,38,-8,-37,-58,0,64,-104,0,-58,-3,-16,-21,-2,32,-14,4,-12,-14,-18,-127,-16,-10, 
  /* [4][0][][] */ 3,-76,-35,-46,17,-47,-5,-3,73,-13,32,-60,47,-7,-58,19,-79,2,-31,18,-26,-25,127,-14,8,-20,3,-31,4,7,3,15,79,-23,-37,11,23,2,-18,24,-24,-35,19,-52,-5,-11,16,2, 
  /* [5][0][][] */ 16,-12,20,2,-8,4,25,19,99,70,-127,-16,39,10,-17,-9,-58,1,10,7,59,17,-91,53,35,-18,-7,2,-32,29,-84,37,23,11,-9,5,-23,68,63,-25,10,54,-39,-55,-42,-102,-25,29, 
  /* [6][0][][] */ -30,-32,76,67,-21,6,31,61,-2,-41,73,15,28,-4,25,-61,119,11,-44,-13,86,-26,78,83,-88,13,2,-5,7,-20,14,4,31,13,23,-10,-18,98,58,22,23,99,-15,-31,-17,-127,106,46, 
  /* [7][0][][] */ 19,-59,58,-16,52,-18,-68,-21,-71,63,-81,-35,17,-41,-27,55,59,-10,-58,127,-23,-65,-43,18,7,-120,-49,-39,37,-41,18,11,-27,-26,-16,-7,-13,-23,-56,8,-40,-61,89,-31,22,70,20,13, 
  /* [8][0][][] */ -13,-57,-23,9,-28,-77,-49,14,-12,-63,53,49,15,-1,32,7,-50,-36,1,-32,15,33,-127,21,51,-5,13,65,-63,41,101,21,17,-39,-14,-10,-13,45,118,113,-9,15,-16,1,-12,78,-19,-40, 
  /* [9][0][][] */ -40,9,-60,7,2,-15,26,29,84,127,-97,7,-36,-30,5,-11,-6,9,-41,17,21,54,-29,-25,-21,16,23,-84,41,35,84,-45,39,-58,-11,-9,1,59,118,21,-94,-27,0,53,25,-41,-41,29, 
  /* [10][0][][] */ -65,-43,-20,-19,25,4,-22,10,127,-27,41,-26,22,13,-50,-24,-14,8,-7,-4,-32,21,-67,-25,-70,33,-14,-38,93,-51,-3,-33,-5,-3,-14,7,35,-89,-15,-9,31,35,-12,-16,65,-111,53,-8, 
  /* [11][0][][] */ 28,74,-22,-51,-84,-1,-4,35,1,3,50,78,27,-1,21,34,18,94,-14,-40,99,26,14,-32,-46,38,9,-5,13,-41,63,-41,34,-41,-66,121,-126,35,-62,73,103,-41,3,-21,40,127,7,56, 
  /* [12][0][][] */ 73,38,-10,-6,55,5,49,-4,111,-30,6,-3,-19,8,-2,26,-1,-10,-19,-20,48,24,6,13,-35,34,-60,97,-17,38,1,-25,49,11,-4,-24,-7,20,-127,16,-36,2,75,28,-28,18,4,19, 
  /* [13][0][][] */ -8,83,-22,-40,-105,-32,49,-4,-61,20,-5,-46,1,-117,15,31,9,13,-35,-30,-12,-36,-15,11,55,46,36,48,-5,-49,35,127,17,49,66,14,59,-42,-95,7,-37,-56,16,-25,53,-29,63,25, 
  /* [14][0][][] */ 46,101,90,25,-46,-102,-82,-127,68,68,-87,43,-1,77,21,56,70,44,8,-47,-69,15,68,-75,-17,67,78,-45,-103,57,21,-41,58,79,73,18,-31,-50,-79,-60,-6,41,54,-15,50,-114,71,-17, 
  /* [15][0][][] */ -21,-79,19,58,71,-40,33,-26,-29,25,-21,-67,-66,-24,-100,103,-3,24,-16,-19,22,-62,-4,3,52,36,24,11,-12,17,19,6,70,-50,16,33,-5,-41,40,17,46,49,-69,34,-5,93,-127,9, 
};
const TfArray<4, int> tensor_dimension64 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant64_scale = { 16, { 0.0021331210155040026, 0.0047159884124994278, 0.0037654272746294737, 0.0039473539218306541, 0.0051387567073106766, 0.003999530803412199, 0.0029937024228274822, 0.0033718736376613379, 0.0035134172067046165, 0.0038972874172031879, 0.0052684559486806393, 0.003022174583747983, 0.0052865701727569103, 0.003754079807549715, 0.0028523504734039307, 0.0030647760722786188, } };
const TfArray<16, int> quant64_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const ALIGN(8) int8_t tensor_data65[96*1*1*16] = { 
  /* [0][0][][] */ 51,-81,17,-111,-39,-9,-24,44,-81,-72,26,8,127,18,-12,-34, 
  /* [1][0][][] */ 5,-66,58,52,-34,50,17,-39,49,43,116,8,50,31,127,-11, 
  /* [2][0][][] */ 47,-30,32,97,14,21,103,56,118,-127,0,60,38,66,-78,-55, 
  /* [3][0][][] */ -22,39,-66,49,74,2,-31,23,127,-37,4,-17,35,22,-67,0, 
  /* [4][0][][] */ 28,-19,-127,-36,114,-23,117,98,-27,80,31,3,16,4,30,-46, 
  /* [5][0][][] */ 8,8,45,8,-1,-127,59,-49,-51,14,-76,-67,-81,-7,-57,-6, 
  /* [6][0][][] */ -30,-25,127,19,-25,54,67,-37,96,-35,39,-3,46,-5,54,-27, 
  /* [7][0][][] */ 127,62,33,-45,25,3,-32,54,-67,-118,-42,90,24,55,39,-57, 
  /* [8][0][][] */ 78,-43,-30,123,-61,-77,33,-8,-24,14,-127,36,-72,-97,15,-74, 
  /* [9][0][][] */ -42,-127,-11,-29,-12,24,-74,46,-48,6,-23,-21,14,-53,1,-81, 
  /* [10][0][][] */ -5,-72,-60,66,18,22,127,-24,-85,63,-14,48,1,-29,30,-33, 
  /* [11][0][][] */ -66,3,-54,23,-65,78,59,42,40,-32,-20,-26,-127,-78,91,50, 
  /* [12][0][][] */ 86,-48,-127,-123,-34,3,14,-106,7,-25,44,38,87,-25,-22,65, 
  /* [13][0][][] */ 75,27,-10,-56,-25,-42,-34,17,20,-63,-70,-49,-4,1,2,-127, 
  /* [14][0][][] */ 87,-31,17,-86,-1,-102,-52,-45,-28,-94,-50,-98,-47,-127,-11,99, 
  /* [15][0][][] */ -10,111,55,-4,-27,37,-36,-127,16,-41,19,24,31,-35,-72,-53, 
  /* [16][0][][] */ -127,59,-2,12,5,-21,-114,47,-85,-10,-53,53,11,41,-11,-48, 
  /* [17][0][][] */ -74,-38,127,-10,21,-34,-17,72,-85,45,-3,53,-18,-10,-21,16, 
  /* [18][0][][] */ -24,2,11,-30,-4,-36,-12,12,-92,-39,-79,30,-107,9,-127,-16, 
  /* [19][0][][] */ -46,-95,-127,-113,-43,-6,111,-24,28,65,114,11,85,-102,-10,102, 
  /* [20][0][][] */ -29,10,36,127,-26,-60,-103,19,-68,-60,-43,-38,-50,-7,-67,14, 
  /* [21][0][][] */ -41,19,-1,58,56,22,-127,48,-21,-10,21,9,38,21,34,-71, 
  /* [22][0][][] */ -6,12,-106,45,77,-18,59,46,-72,71,-5,-11,-1,29,25,127, 
  /* [23][0][][] */ 10,127,-18,-92,22,16,47,-11,-23,-28,70,-46,-10,-19,53,19, 
  /* [24][0][][] */ 11,-89,-99,9,69,-32,-127,-20,7,-22,31,18,61,43,74,59, 
  /* [25][0][][] */ 78,69,-79,-22,-65,87,61,4,-118,-127,90,60,-78,32,-61,74, 
  /* [26][0][][] */ 34,2,75,114,2,-80,127,12,105,15,-13,-82,16,30,44,49, 
  /* [27][0][][] */ 127,-42,51,-111,-11,-33,20,97,-95,-28,-34,63,101,-56,-17,13, 
  /* [28][0][][] */ -54,-108,27,-71,-19,96,36,-13,100,-55,34,82,85,35,-39,-127, 
  /* [29][0][][] */ -86,55,-127,56,19,-29,-29,-19,1,-60,-22,27,-33,-34,-23,-71, 
  /* [30][0][][] */ 60,54,26,37,1,91,-90,59,-127,11,4,-65,-70,-97,52,-27, 
  /* [31][0][][] */ 18,50,-38,33,-31,79,31,35,-127,68,59,67,39,81,-42,10, 
  /* [32][0][][] */ 39,-85,-24,-35,127,-24,52,30,-19,13,7,-31,58,-3,54,73, 
  /* [33][0][][] */ -66,53,-18,12,25,42,54,98,-41,-109,-1,-23,-37,-31,-9,127, 
  /* [34][0][][] */ -24,57,-108,-43,-46,113,91,16,48,57,50,-52,-13,-127,-22,58, 
  /* [35][0][][] */ 34,127,-59,8,27,-86,-35,34,-17,-37,-14,-40,61,4,98,-38, 
  /* [36][0][][] */ -97,4,31,18,-127,49,31,-89,-48,-93,127,21,31,15,-70,-7, 
  /* [37][0][][] */ 17,77,-77,-1,-10,18,-16,-48,-87,77,-30,-70,-21,-14,-102,-127, 
  /* [38][0][][] */ 97,75,-111,77,-101,35,51,-32,45,-7,7,-24,30,127,-22,-111, 
  /* [39][0][][] */ 75,82,-68,-78,12,-91,36,-89,44,125,-79,-9,-127,27,8,-34, 
  /* [40][0][][] */ 127,-64,18,-34,87,29,11,18,45,-62,-1,-75,-42,-44,-11,23, 
  /* [41][0][][] */ 53,-84,36,116,105,95,-73,-81,116,38,-102,127,88,-7,69,-75, 
  /* [42][0][][] */ 127,-10,93,-43,-14,-30,66,-14,-26,-38,27,-32,-81,61,-39,2, 
  /* [43][0][][] */ 11,-21,16,127,-3,-62,15,71,89,-42,-97,-50,-39,104,-87,35, 
  /* [44][0][][] */ -38,18,1,-13,-65,-19,46,40,-46,46,31,127,-10,-4,-30,-61, 
  /* [45][0][][] */ -1,-27,127,79,-33,64,75,101,-18,-67,55,-8,-64,11,7,38, 
  /* [46][0][][] */ 6,52,41,64,-83,-71,10,-35,-1,-60,-127,-11,7,-11,-79,-5, 
  /* [47][0][][] */ -34,55,-13,-11,-39,-26,-51,89,-59,61,-127,54,-76,12,-45,5, 
  /* [48][0][][] */ 19,-12,-99,-56,127,-13,16,62,94,13,96,-18,-31,113,69,-6, 
  /* [49][0][][] */ -15,-52,63,127,11,55,32,-24,112,50,-33,56,-43,-32,-7,-14, 
  /* [50][0][][] */ 22,-45,-15,0,12,-9,29,127,-56,-82,22,31,83,29,34,28, 
  /* [51][0][][] */ -96,-46,26,-23,44,50,127,-69,-32,34,-126,-64,-94,114,-73,-66, 
  /* [52][0][][] */ -98,-99,-35,-3,30,-32,127,28,54,35,90,125,59,-41,-83,-11, 
  /* [53][0][][] */ 100,32,-23,-62,-5,15,54,-10,-64,-35,-127,124,-26,-88,5,-35, 
  /* [54][0][][] */ -8,91,54,-31,46,127,29,-34,6,-20,111,23,46,6,-80,-47, 
  /* [55][0][][] */ 36,-36,-97,-7,51,-127,-111,57,-20,22,-75,-105,-90,28,-21,58, 
  /* [56][0][][] */ 21,-38,55,-38,-72,51,-6,35,102,21,104,127,53,-56,88,-13, 
  /* [57][0][][] */ 43,17,109,-92,-53,44,-60,-127,-70,-12,11,-31,8,104,-99,120, 
  /* [58][0][][] */ 26,22,-53,3,44,44,-37,-127,72,12,6,-31,-46,-4,-9,-95, 
  /* [59][0][][] */ 16,72,-47,-42,-25,-127,-12,25,49,68,-49,-5,-64,-105,-2,-46, 
  /* [60][0][][] */ -111,-61,67,80,127,2,16,-105,67,-23,81,-25,-24,4,34,9, 
  /* [61][0][][] */ -101,45,113,3,72,-40,127,13,52,-49,26,-12,-47,-1,27,-32, 
  /* [62][0][][] */ 6,33,-106,-10,-98,105,-13,122,-127,50,5,62,-11,-70,-76,-126, 
  /* [63][0][][] */ 67,94,127,10,21,12,59,-29,72,53,14,-12,8,-62,72,17, 
  /* [64][0][][] */ -20,-48,102,11,-70,-45,30,111,48,93,-6,36,-12,56,21,127, 
  /* [65][0][][] */ -57,-92,75,50,-6,30,0,127,-62,24,83,51,61,-5,-16,-38, 
  /* [66][0][][] */ 32,17,-8,40,127,43,8,-25,-12,67,8,14,-41,-20,-45,-112, 
  /* [67][0][][] */ 127,-20,-32,-54,-83,80,-77,80,-39,-4,-12,-15,22,-118,30,44, 
  /* [68][0][][] */ -30,-78,77,36,43,-127,-31,-4,-24,-120,-31,15,44,118,46,-84, 
  /* [69][0][][] */ -62,127,-14,-20,24,33,66,-18,26,-23,9,5,39,-2,1,58, 
  /* [70][0][][] */ 122,83,-94,61,106,-30,-127,92,74,-64,-60,3,-22,49,11,-50, 
  /* [71][0][][] */ -9,-18,-44,13,-79,127,0,-30,-63,3,2,-5,-54,-27,95,61, 
  /* [72][0][][] */ 62,44,88,74,-42,-127,25,-23,-16,14,-56,-114,-15,-10,-68,99, 
  /* [73][0][][] */ -44,6,34,-118,-103,-127,52,19,-40,11,-85,-26,-36,19,54,48, 
  /* [74][0][][] */ -78,127,1,-2,125,-106,34,-23,91,-65,-67,-20,92,-95,-26,-80, 
  /* [75][0][][] */ 18,18,-22,7,-35,2,-127,22,-9,-77,-22,25,23,6,-17,-37, 
  /* [76][0][][] */ 2,-16,12,-52,-12,-63,3,-13,30,-39,2,-10,6,37,-127,10, 
  /* [77][0][][] */ -39,-39,76,-47,51,42,127,-96,92,119,19,-33,58,-51,58,73, 
  /* [78][0][][] */ -91,-14,127,9,-41,-15,15,-19,-32,-4,71,62,-49,-30,-45,-78, 
  /* [79][0][][] */ 19,-62,51,103,-2,127,30,38,-83,-22,16,12,-48,57,56,71, 
  /* [80][0][][] */ -58,-76,-71,7,5,75,-56,51,-59,-20,13,61,-4,28,-54,-127, 
  /* [81][0][][] */ -127,-27,21,-39,-22,14,-35,38,4,-38,-49,-18,55,-85,-3,-47, 
  /* [82][0][][] */ -83,86,-15,38,-76,4,41,-51,37,-14,-73,57,82,-83,14,-127, 
  /* [83][0][][] */ -34,-40,19,-5,-31,-127,35,-81,58,-46,-18,37,-14,21,-20,31, 
  /* [84][0][][] */ -62,-8,9,-43,-8,-54,-3,57,36,-21,4,-42,15,-100,21,-127, 
  /* [85][0][][] */ 54,-31,-127,79,-17,-7,34,81,2,-58,33,0,-90,64,2,41, 
  /* [86][0][][] */ 1,-33,27,1,74,-9,127,-19,34,6,5,19,-10,42,35,38, 
  /* [87][0][][] */ 34,-1,-16,-48,-15,76,-37,40,2,-127,66,-10,-62,3,-44,13, 
  /* [88][0][][] */ -26,-39,60,127,-19,12,112,-22,31,40,78,25,-54,15,-53,89, 
  /* [89][0][][] */ -35,-7,35,82,27,-14,-43,-21,-97,127,48,-10,-35,-65,122,15, 
  /* [90][0][][] */ 78,-121,70,-20,-8,-9,-49,29,-44,19,-43,-17,2,-127,27,-76, 
  /* [91][0][][] */ -127,-94,-97,34,93,123,-14,-7,32,5,93,100,104,-14,79,-127, 
  /* [92][0][][] */ -87,-15,2,-89,-52,-14,25,0,116,-127,-46,-57,-43,105,-100,49, 
  /* [93][0][][] */ 80,28,39,-3,-124,-24,127,39,-4,-46,52,30,11,18,-7,53, 
  /* [94][0][][] */ -105,-31,-45,-12,-30,-22,-94,-61,-71,127,10,37,118,53,70,17, 
  /* [95][0][][] */ 16,-63,-100,122,53,81,-47,-93,21,-103,-5,-67,127,83,36,50, 
};
const TfArray<4, int> tensor_dimension65 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant65_scale = { 96, { 0.0034088518004864454, 0.0022656666114926338, 0.0045307646505534649, 0.0096382731571793556, 0.0022263829596340656, 0.0037912048865109682, 0.0032496748026460409, 0.0020102350972592831, 0.0052048121578991413, 0.003945621196180582, 0.0019130429718643427, 0.003072201507166028, 0.0054930802434682846, 0.0026354093570262194, 0.002190200611948967, 0.0064271246083080769, 0.002130779204890132, 0.0031441126484423876, 0.0026554740034043789, 0.0027670334093272686, 0.0027103708125650883, 0.0027670850977301598, 0.0056716352701187134, 0.0040925084613263607, 0.0035513876937329769, 0.0063488367013633251, 0.0034331060014665127, 0.0028775667306035757, 0.0041133039630949497, 0.0054404824040830135, 0.0037944226060062647, 0.0032319168094545603, 0.0045390753075480461, 0.0032229667995125055, 0.0023436448536813259, 0.0023570058401674032, 0.0021972283720970154, 0.0018622447969391942, 0.0019033912103623152, 0.0028571935836225748, 0.004409037996083498, 0.003048459067940712, 0.0044199572876095772, 0.0029248655773699284, 0.0095873093232512474, 0.003807079279795289, 0.0032462135422974825, 0.0021966802887618542, 0.003461968619376421, 0.0032249889336526394, 0.0032015028409659863, 0.0035607358440756798, 0.0029535000212490559, 0.0031384986359626055, 0.0037180304061621428, 0.0029273296240717173, 0.0039578969590365887, 0.0026466459967195988, 0.0029450287111103535, 0.0035453164018690586, 0.0021744973491877317, 0.0040427236817777157, 0.0029619107954204082, 0.0055003003217279911, 0.0023276826832443476, 0.0045030135661363602, 0.0026443253736943007, 0.0037886665668338537, 0.0022276232484728098, 0.0073493653908371925, 0.0022222544066607952, 0.0046473043039441109, 0.0030099204741418362, 0.0024615891743451357, 0.0048008030280470848, 0.0033619743771851063, 0.0034783396404236555, 0.0023715861607342958, 0.0029147493187338114, 0.0044243400916457176, 0.0032459755893796682, 0.0037277508527040482, 0.006071645300835371, 0.0031400932930409908, 0.0026716566644608974, 0.003354775020852685, 0.0053067612461745739, 0.0073384428396821022, 0.0023530423641204834, 0.0036744819954037666, 0.0052913874387741089, 0.001386387855745852, 0.0016813901020213962, 0.0058504631742835045, 0.0036619130987673998, 0.0022463577333837748, } };
const TfArray<96, int> quant65_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const ALIGN(8) int8_t tensor_data66[16*1*1*96] = { 
  /* [0][0][][] */ -30,1,43,-31,-40,1,11,-62,18,14,-44,58,-6,111,-32,-18,-19,5,-4,64,26,-5,17,-1,-7,-8,35,-81,36,49,38,-5,-29,-75,-33,-20,-27,-11,-44,-9,38,-10,35,-13,15,-15,55,-50,19,6,-9,-4,2,-41,-1,3,-14,31,-10,-1,-29,-78,-43,-27,21,38,-127,5,26,-16,-34,-81,82,17,2,-27,-18,31,35,-59,51,53,6,28,5,14,-1,-7,-38,-1,47,42,-31,-10,-18,-7, 
  /* [1][0][][] */ -8,18,2,12,-7,21,9,-34,8,57,-15,19,-34,12,-7,11,-127,26,16,23,18,-18,17,-10,6,17,-35,-32,-14,5,8,76,-37,14,61,104,-36,-17,17,36,-83,-20,-15,-4,-38,-6,10,68,42,8,-12,-70,8,24,-70,17,-14,14,75,-97,-70,40,-33,16,10,-16,-49,-51,-12,-12,33,30,19,29,5,-35,-5,61,-78,13,-7,11,-36,-1,1,-52,-20,32,-69,-10,7,-32,-20,23,0,-19, 
  /* [2][0][][] */ 49,-9,14,-45,3,-7,-15,43,5,18,29,-20,-6,-32,-17,-60,19,-26,-16,22,-114,-42,-72,0,-9,-56,2,55,-1,5,-15,5,42,-38,26,-60,-72,40,23,32,30,-50,32,-45,-67,113,12,-6,42,-36,19,24,-32,83,50,37,-16,60,-122,-69,-19,6,-44,54,3,2,6,28,63,0,-127,-20,21,28,-22,4,-1,-39,-48,26,29,-24,34,13,15,-70,5,-32,34,-68,-12,-31,8,-12,29,-32, 
  /* [3][0][][] */ 41,-28,-9,-8,-11,-3,-3,53,0,-16,45,8,28,-88,9,8,-44,-6,47,-16,-127,-55,49,10,-41,2,3,10,4,-16,1,21,10,-22,-25,0,-28,-35,46,16,-13,-7,-65,9,25,19,-16,-34,41,-31,45,-46,39,19,28,38,-26,-13,-25,28,-21,-39,40,29,-8,-10,81,-6,30,-32,-28,35,-17,9,41,-86,-75,-27,-7,30,-17,14,-14,-23,22,25,46,35,40,-58,-16,-38,-26,-23,-22,11, 
  /* [4][0][][] */ -19,-2,2,-13,-127,-7,42,-83,6,-48,-41,61,18,-7,28,24,51,-33,-85,-50,-6,-68,73,1,-42,2,-19,29,17,17,26,-4,42,-5,87,-79,6,-8,-13,62,45,7,-51,-38,45,-41,-83,75,15,6,-7,53,-54,48,-11,-37,28,-14,47,-19,-98,30,-39,-62,23,0,-3,-115,0,-3,103,-5,11,61,-30,-92,-15,0,15,-24,6,6,5,36,31,4,73,-11,-56,20,10,-20,-5,-81,-16,6, 
  /* [5][0][][] */ -6,-2,33,14,18,-44,19,62,13,-12,-127,-63,-1,3,-75,-10,-77,-11,11,-7,40,-1,20,-3,-9,24,27,21,21,15,33,35,-8,34,56,-44,68,18,-23,-29,0,-21,-15,4,-11,28,-18,-54,42,-3,-8,12,-15,-50,18,10,31,8,-17,12,5,-20,10,-31,29,-8,-67,-21,-60,11,8,19,-30,-30,-6,4,3,-34,15,19,-6,0,22,19,61,-3,-39,3,-30,38,12,5,3,3,-21,-1, 
  /* [6][0][][] */ -25,-4,14,27,1,-14,-12,9,8,8,41,-54,-11,-24,-35,-41,127,-76,-9,-71,-61,65,-29,9,30,25,39,55,42,-18,-15,-22,-34,79,56,-4,-4,-28,53,-66,-27,56,43,17,4,3,-58,-37,-7,56,-40,16,-24,17,7,59,0,83,-58,-64,-48,53,9,-3,24,-36,-51,61,-42,66,83,-9,3,-53,16,-13,55,-119,-85,31,-4,-11,-11,-27,40,31,-10,3,38,56,-13,-9,-20,22,-19,-30, 
  /* [7][0][][] */ -47,40,-18,13,-69,1,34,-100,27,-74,33,10,-58,29,-35,-43,-31,-37,76,30,-123,-4,45,2,34,-39,3,43,-10,38,-5,11,-26,45,-8,-17,-40,9,44,-35,-3,20,-45,68,-33,51,-6,127,-63,28,0,-44,0,-18,-22,-86,-5,13,-62,4,-15,65,-20,-43,46,-75,-104,28,18,-8,15,73,-10,-7,-5,23,-22,24,-18,2,13,-29,11,5,-76,36,-31,-13,-108,-85,21,38,-45,21,-33,-34, 
  /* [8][0][][] */ -1,-25,6,57,-87,7,-46,22,21,61,12,77,26,15,-32,16,116,43,53,-26,-69,61,-68,41,-56,17,-62,-22,-50,-6,8,57,2,-6,28,-37,-84,-9,-41,41,24,61,11,94,60,-46,-87,-27,-29,-54,0,-32,-48,67,-5,81,-55,-43,-4,14,-72,-25,-59,43,-71,-16,-59,0,13,0,83,127,-53,55,-12,-24,78,43,-17,-41,-6,6,-48,-8,-52,-26,60,-33,40,-15,19,-18,84,-4,32,26, 
  /* [9][0][][] */ 37,16,-72,-26,40,-12,-18,41,-38,17,127,23,-12,-55,48,-49,38,7,-1,0,-56,-36,-27,12,22,-30,-18,-9,38,1,-44,52,48,-2,2,6,15,-22,68,1,-19,3,-3,-46,-41,16,18,31,-23,-74,-53,-2,-45,32,11,20,-36,-44,83,-42,-20,-7,51,4,6,-29,8,80,-33,-11,43,-60,41,-20,-31,-52,12,-58,-89,51,30,11,41,-4,11,-30,12,18,68,-31,-9,22,-12,-73,-10,9, 
  /* [10][0][][] */ -7,-11,23,1,27,5,34,6,-37,-49,-30,-34,-15,-23,53,13,64,-57,8,40,-29,-82,-5,-39,7,-14,44,12,-28,25,27,3,-14,-61,78,12,-32,25,69,-23,-4,30,-18,-39,-52,59,32,-84,-42,47,32,-56,16,-62,-33,-38,29,-33,26,4,22,-38,6,-13,25,-31,-127,56,0,-32,31,-48,10,-7,-23,23,-19,41,-22,-29,25,4,26,41,-12,13,-43,-27,73,4,-18,20,-4,-40,43,-62, 
  /* [11][0][][] */ -16,84,8,9,11,30,58,0,26,10,-24,-2,-40,-43,-113,-31,-22,6,-50,-1,75,-58,-43,45,-97,13,39,2,-30,41,2,65,-31,-7,-89,-38,-19,106,-11,45,-62,8,-51,39,-22,4,-17,4,-30,-76,-26,20,-32,127,47,32,-60,-70,-16,-35,-10,-47,-54,-37,94,-23,-17,-11,-67,-30,-114,-30,-109,-32,-12,43,59,-44,-54,-50,-16,68,-15,-53,-32,-15,23,-13,65,54,69,-24,-83,-17,-75,-3, 
  /* [12][0][][] */ -127,-39,-4,11,-19,-92,-75,58,10,88,-44,-75,73,-15,-14,-70,-26,-33,5,23,-53,-23,11,61,-24,-26,-18,-51,50,2,-12,-33,73,71,52,-19,46,-30,-21,-43,-57,40,-75,-83,-16,-115,64,-99,88,-108,-38,17,-18,-67,27,99,50,53,3,-8,-31,3,-62,-107,-35,-7,-47,47,-5,47,84,-27,56,34,-1,35,31,2,0,20,70,-1,-59,59,34,-16,-20,18,-37,-24,37,63,79,-5,-37,33, 
  /* [13][0][][] */ -29,22,-35,13,32,11,15,2,10,-24,-50,-24,4,57,-26,-10,34,-46,11,-82,23,-4,-4,0,44,-2,-57,84,-25,11,-5,66,-3,25,-68,17,-23,15,66,10,-19,59,52,58,-31,-17,-46,-4,-94,46,17,35,-19,-64,3,-48,21,88,62,-61,-9,-11,50,-15,0,-51,-52,-63,72,13,-42,66,-34,64,-24,33,42,46,-10,66,-72,27,23,8,127,58,15,18,54,-22,8,11,20,2,-56,-66, 
  /* [14][0][][] */ 7,23,-26,2,26,77,1,25,16,-23,-10,-22,-12,46,27,18,38,42,11,-74,-1,-9,-28,23,32,-29,12,-7,11,12,-24,-31,-39,23,-26,-9,33,8,-62,1,-16,30,31,-66,-8,-13,-54,110,-45,12,-6,-21,24,-25,8,17,-45,-28,88,8,-1,-32,10,33,0,-62,-127,42,81,10,23,35,-41,-71,-36,-78,-1,-28,-7,37,1,13,19,-28,27,6,20,33,-20,4,7,31,-28,-10,43,-38, 
  /* [15][0][][] */ -12,50,-24,52,46,33,41,-23,0,23,21,31,-42,-75,17,13,53,10,0,-7,-46,40,-13,15,9,7,51,-29,16,35,-1,-15,38,49,23,3,15,20,-28,-19,-19,38,4,48,17,-17,30,-10,-6,-37,-71,8,23,-45,-15,-10,-26,-38,96,23,-8,-2,44,-16,39,19,-52,80,-51,22,127,55,59,-67,-24,-66,24,-35,-3,-27,63,30,-8,-11,21,-48,26,-29,-21,30,42,33,3,-10,-43,-7, 
};
const TfArray<4, int> tensor_dimension66 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant66_scale = { 16, { 0.0032386970706284046, 0.0022982796654105186, 0.0026708068326115608, 0.0033558376599103212, 0.0025948814582079649, 0.0039373543113470078, 0.0027565392665565014, 0.0022509091068059206, 0.0028408083599060774, 0.0029867792036384344, 0.0028842096216976643, 0.0027821622788906097, 0.0018098099390044808, 0.0024064714089035988, 0.0030663332436233759, 0.0031172169838100672, } };
const TfArray<16, int> quant66_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const ALIGN(8) int8_t tensor_data67[96*1*1*16] = { 
  /* [0][0][][] */ -4,-95,29,-95,39,38,-79,48,-74,-84,-41,-69,-42,-62,65,127, 
  /* [1][0][][] */ 2,64,17,-38,127,-18,-20,34,-5,-93,18,14,19,32,-23,-107, 
  /* [2][0][][] */ 10,54,-17,-9,-25,-28,-16,78,45,-35,-77,44,-127,55,-48,101, 
  /* [3][0][][] */ 127,-14,-28,-9,29,-102,34,-51,-29,-31,55,-43,2,72,119,-44, 
  /* [4][0][][] */ -27,59,13,-18,51,26,76,13,-50,49,-21,13,127,38,-54,-67, 
  /* [5][0][][] */ -15,-70,72,22,17,127,105,-47,-44,43,27,-40,87,-56,18,10, 
  /* [6][0][][] */ -47,-93,-15,103,93,-104,33,-96,-127,-71,-61,-89,-31,-40,-81,-46, 
  /* [7][0][][] */ 73,-20,127,-38,-26,-39,50,2,11,-63,-17,-119,-65,-57,21,68, 
  /* [8][0][][] */ -63,12,52,16,-127,-25,-1,-79,-58,29,-34,45,-125,-67,-56,10, 
  /* [9][0][][] */ 18,34,-105,-48,-27,-127,-63,43,-65,12,-60,-37,-68,9,58,27, 
  /* [10][0][][] */ -78,127,-58,2,-12,-70,123,71,-25,-41,-25,10,44,-34,30,93, 
  /* [11][0][][] */ -91,-8,-58,14,-41,59,-38,10,74,-19,17,78,127,-19,0,-3, 
  /* [12][0][][] */ -113,53,127,-96,-21,77,57,-59,-24,57,125,-6,15,-19,41,109, 
  /* [13][0][][] */ -21,-112,91,31,-6,-81,-21,-111,-91,-54,127,-114,24,-63,31,-66, 
  /* [14][0][][] */ -127,81,-98,-8,39,14,47,-14,-21,-27,28,-52,-25,39,-16,84, 
  /* [15][0][][] */ -68,127,36,-12,7,28,-29,-29,-11,-69,10,-14,19,-35,11,52, 
  /* [16][0][][] */ 7,-16,-105,11,67,-9,127,-85,69,46,96,-112,-14,22,-114,-44, 
  /* [17][0][][] */ 25,100,87,9,27,10,4,-98,-47,-52,-87,-54,70,127,-49,125, 
  /* [18][0][][] */ 20,-43,-24,48,-34,-22,-24,22,43,-45,90,127,-69,-25,-44,57, 
  /* [19][0][][] */ 35,-7,56,-27,-31,-127,23,-54,7,46,-124,-97,-8,54,-19,-55, 
  /* [20][0][][] */ 39,-4,0,-66,-6,23,-12,32,-75,72,-56,127,23,124,13,37, 
  /* [21][0][][] */ 18,-56,-5,-119,105,-123,-100,127,19,-47,-33,22,124,125,-6,-40, 
  /* [22][0][][] */ 52,127,-41,-5,-53,-100,73,-3,70,28,-13,-16,-88,-16,-110,11, 
  /* [23][0][][] */ -45,41,-52,50,-12,94,-26,-66,-22,-26,-17,19,1,-127,42,-72, 
  /* [24][0][][] */ -38,-16,91,-45,127,110,-31,-27,15,9,61,-13,28,73,59,3, 
  /* [25][0][][] */ -45,-72,5,78,-25,-8,-60,37,-116,-6,127,-13,0,-33,-91,19, 
  /* [26][0][][] */ -126,1,89,-28,-46,89,79,-127,7,-64,4,-11,-75,115,-67,-20, 
  /* [27][0][][] */ -45,-15,43,8,-127,-28,71,-37,-22,34,17,-11,-8,20,19,13, 
  /* [28][0][][] */ 62,-127,-36,83,-34,-43,85,96,-10,48,1,25,-85,-9,-75,-24, 
  /* [29][0][][] */ 105,71,50,15,71,59,98,48,104,20,-92,34,33,127,88,76, 
  /* [30][0][][] */ -76,-12,-96,68,61,-71,-20,34,-127,-51,-29,-49,-36,14,-100,-10, 
  /* [31][0][][] */ 25,-127,-45,69,41,41,-36,3,-30,69,-22,2,-30,-1,-34,-44, 
  /* [32][0][][] */ 10,-20,89,-37,-59,-27,86,51,13,-109,-127,-45,-22,13,-106,84, 
  /* [33][0][][] */ 127,106,54,-33,72,-43,-64,81,73,-10,104,68,-85,59,39,21, 
  /* [34][0][][] */ 6,-21,-127,3,-14,37,20,-69,-9,80,-13,-77,-53,-76,-112,-72, 
  /* [35][0][][] */ -44,-93,127,-40,67,-30,-48,54,103,-32,51,55,-50,-64,-21,-1, 
  /* [36][0][][] */ -44,-66,-82,-69,8,-106,-31,-127,-111,-11,59,44,-9,-126,-20,1, 
  /* [37][0][][] */ -38,-72,-45,67,94,-68,40,-54,-127,-69,-46,-105,-39,13,-67,-10, 
  /* [38][0][][] */ -22,-9,51,26,127,-84,50,-63,1,-53,-24,118,33,-49,-42,-63, 
  /* [39][0][][] */ 31,-19,127,8,-49,73,-1,3,-59,-51,-22,21,-52,-104,9,10, 
  /* [40][0][][] */ 41,-43,-15,46,-101,31,-127,17,-102,60,45,-49,44,-124,51,-32, 
  /* [41][0][][] */ -127,56,-95,57,-14,29,106,-22,33,-57,20,-53,-104,11,-22,-76, 
  /* [42][0][][] */ -59,-125,98,-35,43,-79,-77,93,-112,-127,-65,58,29,-52,-22,44, 
  /* [43][0][][] */ -37,36,-46,-37,39,75,-5,-15,15,98,-49,94,95,-14,64,-127, 
  /* [44][0][][] */ -4,45,99,25,20,-87,50,12,-9,-82,-59,-33,112,4,8,127, 
  /* [45][0][][] */ -43,-53,-18,-25,51,-44,-29,-127,-47,-26,-1,13,43,-40,-1,-37, 
  /* [46][0][][] */ 29,36,-2,-127,-7,-65,-81,50,-14,45,41,-6,-6,98,-43,99, 
  /* [47][0][][] */ -47,12,-16,-21,-41,27,-14,-66,-29,15,80,22,57,-34,42,-127, 
  /* [48][0][][] */ 19,-40,21,43,51,-78,-39,-127,66,-15,61,-30,-28,-119,-100,-69, 
  /* [49][0][][] */ -13,-127,15,7,22,104,-61,3,48,9,27,38,18,52,49,-12, 
  /* [50][0][][] */ -5,-58,7,48,27,-50,-15,2,29,16,-34,-44,-2,17,-23,127, 
  /* [51][0][][] */ -2,16,83,68,104,58,60,-115,14,41,17,31,-20,127,-49,110, 
  /* [52][0][][] */ 22,-101,39,41,22,109,93,-27,-41,-50,17,-108,127,34,-18,43, 
  /* [53][0][][] */ 63,70,-2,52,-47,-59,127,34,-28,18,54,-12,12,70,-9,-2, 
  /* [54][0][][] */ -5,127,7,102,114,-72,-103,20,70,-21,27,-54,44,-92,-9,-10, 
  /* [55][0][][] */ -29,7,40,62,16,-3,-127,20,5,-34,21,54,-34,-6,-15,-24, 
  /* [56][0][][] */ 85,106,-18,84,-118,-4,-43,79,103,127,38,25,38,49,40,49, 
  /* [57][0][][] */ 23,122,-35,-42,40,86,-52,-9,98,42,56,-52,58,-86,127,47, 
  /* [58][0][][] */ 36,-5,24,-107,8,35,-111,12,5,-46,-96,11,16,-127,72,21, 
  /* [59][0][][] */ 47,-112,-20,90,26,-42,77,127,-35,-39,-120,-26,-36,-25,-45,-41, 
  /* [60][0][][] */ 24,28,-69,-19,38,-50,-46,54,-32,34,-17,-127,-6,-24,-22,-45, 
  /* [61][0][][] */ 127,24,74,-20,-15,-23,60,-99,-49,13,-52,-15,0,67,-48,50, 
  /* [62][0][][] */ 51,-93,125,28,-18,48,-9,-26,-127,61,-8,27,3,-9,9,-58, 
  /* [63][0][][] */ 34,-13,12,-9,25,0,115,-26,0,-19,21,-48,-31,-29,127,63, 
  /* [64][0][][] */ 21,71,-79,30,-52,-6,64,8,9,21,57,75,-25,47,-48,127, 
  /* [65][0][][] */ 17,55,32,-2,37,-1,-92,106,125,-113,-38,-30,-25,-3,127,-4, 
  /* [66][0][][] */ -20,-35,83,-42,-75,-48,66,-34,14,11,58,36,127,-9,-59,-26, 
  /* [67][0][][] */ 48,61,-115,59,-19,5,36,26,67,-127,-35,-4,-18,-31,32,6, 
  /* [68][0][][] */ 80,-28,85,57,-67,-9,18,3,-9,-40,-127,49,76,119,11,27, 
  /* [69][0][][] */ 122,18,-49,72,56,-119,-56,10,-2,-54,4,-46,80,41,127,-23, 
  /* [70][0][][] */ -38,-127,80,-45,-67,-23,-26,41,94,-124,6,15,-53,48,-94,36, 
  /* [71][0][][] */ -87,-76,-10,-10,-53,127,-28,74,28,-14,54,18,106,-49,42,-51, 
  /* [72][0][][] */ -35,-12,-49,19,8,42,-127,-38,14,12,109,81,-112,-61,15,74, 
  /* [73][0][][] */ 49,-82,32,-44,-78,57,12,-14,-39,-24,-127,-38,82,-48,27,27, 
  /* [74][0][][] */ -111,-3,-79,30,25,-10,-50,127,10,18,-23,77,4,-10,117,-69, 
  /* [75][0][][] */ 27,-52,127,-66,-7,28,-55,-46,26,99,35,85,14,-49,-18,-40, 
  /* [76][0][][] */ -38,-42,-28,43,121,83,20,-19,-53,-75,-101,-127,62,-19,107,7, 
  /* [77][0][][] */ 111,26,5,64,25,-32,-127,96,-34,-39,-29,43,-21,10,112,-20, 
  /* [78][0][][] */ 43,43,17,-103,-22,9,88,25,-6,28,43,69,-3,-89,-33,-127, 
  /* [79][0][][] */ 24,-22,-8,82,-17,33,-76,-17,-20,-127,7,40,-10,-72,-86,-34, 
  /* [80][0][][] */ -127,39,37,120,110,-16,120,-68,108,-32,59,-12,14,73,-66,-51, 
  /* [81][0][][] */ 19,-8,-70,43,-107,93,-51,24,19,-3,75,-127,26,58,61,-27, 
  /* [82][0][][] */ 37,-49,-5,8,-19,-55,-112,127,47,-66,-96,-51,67,-8,78,-18, 
  /* [83][0][][] */ 37,47,-43,48,-33,27,-41,127,72,-47,-18,-38,-22,-14,48,16, 
  /* [84][0][][] */ 86,102,2,-40,23,113,80,104,60,127,-5,-57,24,47,102,25, 
  /* [85][0][][] */ 104,39,-22,-69,-13,-20,-31,-24,33,29,50,3,56,-63,127,-5, 
  /* [86][0][][] */ -14,-23,63,-6,-40,32,-30,-127,-59,32,-13,94,13,-64,44,-24, 
  /* [87][0][][] */ -53,-77,89,7,77,-127,-27,-70,120,-51,-49,13,-64,-3,-29,36, 
  /* [88][0][][] */ -43,21,108,101,-7,0,-56,-21,-65,-127,41,53,-27,43,-79,15, 
  /* [89][0][][] */ 21,31,-82,5,31,19,-58,29,127,-68,13,-3,-124,-60,-30,-39, 
  /* [90][0][][] */ 75,77,58,-37,66,90,21,63,-85,24,8,-66,-28,-9,127,-8, 
  /* [91][0][][] */ 23,89,33,-14,-10,-22,17,95,77,-91,0,-24,-10,80,-93,127, 
  /* [92][0][][] */ 89,-86,-32,-15,-47,31,77,-26,57,26,-13,70,-32,127,-82,40, 
  /* [93][0][][] */ -34,2,36,69,54,-50,47,50,-33,-62,-127,-124,-28,23,109,58, 
  /* [94][0][][] */ -106,91,41,118,-86,65,-77,-18,-94,-53,-73,57,68,-127,-80,66, 
  /* [95][0][][] */ -121,-105,-10,108,-59,51,-118,87,41,14,75,41,64,-80,42,-127, 
};
const TfArray<4, int> tensor_dimension67 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant67_scale = { 96, { 0.0036449788603931665, 0.0021724933758378029, 0.0018822880228981376, 0.0019105335231870413, 0.0023916533682495356, 0.0015752316685393453, 0.0024205942172557116, 0.0021523030009120703, 0.0012157000601291656, 0.0019797568675130606, 0.0034134516026824713, 0.001997178653255105, 0.0018208072287961841, 0.0015915002441033721, 0.0030108713544905186, 0.0066301785409450531, 0.0015320177190005779, 0.0038724846672266722, 0.0025578942149877548, 0.0024763159453868866, 0.0025821966119110584, 0.0016539073549211025, 0.0018087072530761361, 0.0051824063993990421, 0.0010500046191737056, 0.0018080263398587704, 0.0026772634591907263, 0.0023646759800612926, 0.0037058871239423752, 0.0014896233333274722, 0.0021719702053815126, 0.0070038307458162308, 0.0021000904962420464, 0.0030990478117018938, 0.0021520687732845545, 0.0016348271165043116, 0.0022171044256538153, 0.0029637645930051804, 0.0022544695530086756, 0.0021762584801763296, 0.0027382266707718372, 0.0025893987622112036, 0.0011868629371747375, 0.0014411763986572623, 0.0029924006666988134, 0.0046239374205470085, 0.0032262413296848536, 0.0032825574744492769, 0.0021493579261004925, 0.0027350238524377346, 0.0038592363707721233, 0.002725295489653945, 0.0015259044012054801, 0.0030599280726164579, 0.0033777446951717138, 0.002311154967173934, 0.0035335500724613667, 0.001702653244137764, 0.0028680185787379742, 0.0033117274288088083, 0.0030146641656756401, 0.0050646685995161533, 0.0023812598083168268, 0.0022427011281251907, 0.00427635433152318, 0.0030073081143200397, 0.0025362421292811632, 0.0026609969791024923, 0.0031504561193287373, 0.0020407626871019602, 0.0015008228365331888, 0.0014665155904367566, 0.0026428301353007555, 0.0055887144990265369, 0.0027939914725720882, 0.0023299753665924072, 0.001794016920030117, 0.0024078772403299809, 0.0021692446898669004, 0.002227128716185689, 0.0025184119585901499, 0.0018787946319207549, 0.0026627862825989723, 0.0039402125403285027, 0.0011715618893504143, 0.0025275400839745998, 0.0030567464418709278, 0.0016786778578534722, 0.0016093007288873196, 0.00233083451166749, 0.0018926252378150821, 0.0033145912457257509, 0.0039469930343329906, 0.0046421010047197342, 0.0014066159492358565, 0.0020495166536420584, } };
const TfArray<96, int> quant67_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const ALIGN(8) int8_t tensor_data68[16*1*1*96] = { 
  /* [0][0][][] */ -13,27,-56,19,31,-81,34,4,-49,-21,-59,53,-38,34,127,32,-25,72,-29,43,32,-66,20,47,-10,25,0,31,61,27,-22,3,5,-19,-28,-32,15,6,5,-6,50,-79,7,19,-11,26,19,16,18,19,3,-18,85,50,-48,-13,-12,-7,-14,48,30,77,-80,-44,13,-7,-5,11,33,-18,5,22,35,-58,49,-5,-47,10,11,-64,-20,-44,-76,-47,-2,-42,43,1,-76,-3,14,-26,54,-34,-6,40, 
  /* [1][0][][] */ 24,2,-4,-64,-29,39,-48,-4,-74,-35,68,65,36,-35,-49,-72,-77,52,-10,-35,-54,52,2,-46,111,-94,-27,-43,-39,43,12,21,81,-56,-17,37,-44,-68,127,2,-25,18,36,-13,35,-35,-19,6,9,51,-31,-72,-52,41,6,49,-3,-56,-2,-4,-31,32,47,-5,13,-4,28,18,-29,7,-69,7,-18,4,10,47,-12,-14,68,40,49,54,-51,-4,-40,-85,-52,-19,50,-22,-6,2,-33,-8,45,5, 
  /* [2][0][][] */ -42,-27,-33,-21,-25,-23,28,36,-8,-127,-40,28,54,-45,40,-76,-62,43,11,-48,74,-45,-58,-18,-83,-94,-51,-20,17,62,16,8,35,-20,-2,-14,66,11,59,3,-66,-14,-21,12,5,30,-35,-2,-23,-6,21,-13,28,-14,29,-45,-22,5,-24,48,23,27,-53,12,-82,55,82,-49,75,-18,2,-28,-4,-16,10,-61,22,-24,34,28,61,-24,11,7,-126,-82,-20,24,49,4,33,-10,-4,49,81,29, 
  /* [3][0][][] */ 15,10,-61,61,-14,-28,-39,-23,-2,-51,5,-52,16,-69,-11,55,-17,-21,-7,-15,59,33,-54,-27,19,81,25,48,9,8,33,14,-57,3,1,29,-8,-36,32,-31,-27,19,-14,28,-15,7,-6,4,24,-13,27,-10,37,24,27,20,72,34,-1,20,-26,-25,35,-21,-27,41,-123,-40,-54,-55,-127,-10,-33,10,-11,39,81,52,19,34,76,-18,-18,-14,-16,-25,-9,35,46,32,66,-46,-28,22,-51,16, 
  /* [4][0][][] */ -6,107,76,-114,11,7,-1,-27,103,-66,-50,44,-42,-18,25,34,-126,32,-7,41,22,18,-62,-6,-21,-78,-1,-62,28,28,-32,13,-29,-31,-82,53,-92,9,41,-7,47,-22,0,-44,27,-75,-52,40,-5,-3,49,-64,43,-25,-40,-73,-75,-3,-35,40,-56,26,41,-5,-32,-33,-81,-52,-3,12,-15,-7,-11,-85,36,8,-86,-29,44,33,66,75,-38,-64,7,14,19,-13,60,-1,-127,-38,11,-5,-44,-37, 
  /* [5][0][][] */ -3,26,23,-71,-14,10,-21,-16,-19,11,-48,-72,-43,44,-4,-9,27,-11,25,41,-29,-12,-86,30,-56,-22,-35,-85,-8,62,-33,28,59,58,-33,36,127,-9,111,106,-26,-27,60,23,-46,50,-56,5,-47,-50,-26,-1,103,-16,-31,-58,60,34,-16,16,40,-29,-9,37,-21,-3,-102,35,56,-8,14,-68,-28,12,-18,-6,23,-15,-4,-7,-37,36,-31,-2,-4,86,33,6,35,5,-68,-22,28,-9,46,-60, 
  /* [6][0][][] */ 52,-15,29,-52,-17,-1,35,1,107,-15,-7,-33,37,-13,2,-37,83,-33,14,-36,-43,-58,23,-16,-29,-32,12,102,33,80,0,32,103,-45,57,-46,37,54,36,62,-32,28,-56,8,-76,55,-26,15,15,-48,-28,-18,48,3,-17,-100,-41,48,112,39,66,-44,-12,-91,21,30,48,9,28,-29,19,-127,43,-25,-25,-2,-66,-13,-54,-46,50,-11,-27,-3,19,52,23,-50,-16,-7,-12,-12,-23,9,51,67, 
  /* [7][0][][] */ 38,-25,105,-8,17,24,31,10,-73,86,61,30,-22,30,44,-10,-94,21,42,68,83,58,-19,33,57,-44,27,61,44,41,127,-16,80,-42,-5,-14,-38,18,41,-34,49,-115,-19,0,-11,51,-82,78,1,33,-26,-5,32,13,-31,-46,-18,-58,-24,63,-65,51,10,92,-26,-43,-49,12,-21,-45,-24,84,50,-42,17,66,-23,-68,95,22,-46,-31,52,-48,7,63,-59,-19,-109,18,-30,40,10,1,-74,-30, 
  /* [8][0][][] */ 15,87,-90,-80,-25,0,-57,23,72,-80,2,-19,33,-57,21,-27,35,-2,-25,-5,-78,95,0,-53,79,-47,-24,-34,7,45,11,-40,-83,-35,-21,37,-60,-106,30,-6,10,17,46,19,41,-49,36,-51,9,17,73,15,-2,2,-23,71,4,-14,0,1,-42,34,33,-23,1,-91,25,-29,-10,23,54,25,-22,21,-3,-2,-79,-10,-7,14,25,51,-54,23,59,-6,-1,-5,-9,31,-127,-23,17,-41,20,-13, 
  /* [9][0][][] */ -34,26,0,-56,15,-6,19,18,86,39,-18,6,0,-43,14,-8,82,-15,1,-53,36,-12,10,10,-54,-6,32,26,1,-11,-4,-34,-7,8,56,-23,-65,6,-16,-66,31,23,-2,-36,14,-8,-40,-4,-31,-7,35,-43,-90,-2,22,7,-2,-14,65,5,42,-7,24,25,-3,2,47,-127,-1,-16,-49,-7,10,26,14,-55,65,-24,-56,69,14,-43,37,-5,-63,-45,-4,-40,-81,-34,-27,-9,-7,19,6,-15, 
  /* [10][0][][] */ 28,47,31,-13,41,80,37,69,39,58,-37,-17,-19,20,21,65,81,-22,17,46,-10,79,14,40,-7,47,-6,-33,-43,-23,11,12,8,-26,-10,-30,6,60,34,49,66,40,-50,41,-13,18,-26,28,-12,-17,-68,-6,-91,8,-14,17,-27,3,-23,-55,31,-16,60,31,0,56,-34,-41,-37,-8,-21,36,-30,36,21,-14,-28,-25,14,-27,-1,17,-22,-7,-127,-38,-14,39,-21,18,-55,-6,3,-27,-56,-3, 
  /* [11][0][][] */ -8,-14,95,13,-48,32,68,-58,-2,18,-26,0,-51,70,35,-53,16,21,89,1,16,-40,-2,33,-57,-20,-11,-92,28,51,-13,-28,-17,54,8,14,-12,74,95,21,-49,-44,-32,-56,-18,35,-26,5,-65,10,-23,-8,-127,-14,14,-39,-35,13,-71,30,-55,-2,-39,-7,33,60,70,30,4,40,-48,19,3,47,-27,0,-8,-45,5,-12,-11,-30,24,11,-42,-66,-34,-30,46,36,2,-18,39,9,113,-24, 
  /* [12][0][][] */ 4,17,42,30,-2,-39,32,-45,-84,-112,59,-109,35,-57,-40,-50,68,35,-49,14,127,79,-79,-32,-55,-24,14,-27,-29,24,-41,-38,22,6,4,-70,80,-4,69,-24,66,9,-40,-24,70,-29,-49,-43,-68,-39,31,22,115,-38,20,42,19,-83,-1,-1,30,4,-27,53,-11,-23,121,4,37,-59,65,-42,49,-31,31,-22,-13,-3,-28,-12,56,-57,124,-18,30,14,-39,22,-17,-43,-39,5,6,26,-5,-90, 
  /* [13][0][][] */ 42,78,114,-30,-50,8,17,-61,66,5,-43,21,8,-72,30,43,-67,38,48,-8,38,-31,-24,33,-40,-22,-53,113,-3,82,38,-2,53,-8,-31,-7,-41,32,-21,-78,-40,31,-17,-8,2,8,-21,20,27,-20,12,-54,11,-14,-32,-45,-37,14,69,-3,-26,-3,-32,14,9,19,34,-49,0,-54,14,-12,31,-56,17,-25,0,10,51,-12,4,59,34,-67,18,14,27,-22,-12,-12,-127,4,25,42,-11,90, 
  /* [14][0][][] */ -30,-62,-50,-49,27,-17,-3,41,18,-12,20,49,3,-36,0,-38,-21,22,-21,16,9,-19,30,36,38,-24,13,40,11,-13,-49,8,17,-23,-127,1,4,-14,-18,25,50,-40,-12,-20,42,-16,24,-13,22,40,13,15,22,8,-27,-6,-27,-43,-5,27,27,34,35,-53,-1,-77,12,5,15,-25,-20,42,-22,-39,19,46,12,-3,48,-28,-23,3,89,-33,54,-69,26,-29,-62,-19,-44,3,9,41,29,-22, 
  /* [15][0][][] */ -20,-45,90,-106,43,0,50,-14,-33,88,0,10,-47,15,6,-23,-16,27,80,37,1,60,58,-8,-22,-43,32,41,-72,-9,91,-38,30,-30,7,27,-20,43,19,-29,94,-72,0,51,51,37,-24,87,-1,42,100,-80,47,-12,9,-83,-77,-48,50,-17,-93,41,4,-31,118,-69,18,-39,-13,-52,18,2,5,-17,10,13,-114,-124,12,-11,-16,-74,-43,-45,50,36,-12,-67,-37,-15,-66,127,-5,42,30,11, 
};
const TfArray<4, int> tensor_dimension68 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant68_scale = { 16, { 0.0033460177946835756, 0.0031662592664361, 0.0031831287778913975, 0.0030062617734074593, 0.0030996203422546387, 0.0033204890787601471, 0.0038297225255519152, 0.0023232889361679554, 0.0037318633403629065, 0.0053151962347328663, 0.0025991660077124834, 0.0047172061167657375, 0.0023660531733185053, 0.0036832494661211967, 0.0051660258322954178, 0.0027781585231423378, } };
const TfArray<16, int> quant68_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const ALIGN(8) int8_t tensor_data69[96*1*1*16] = { 
  /* [0][0][][] */ 108,57,-127,53,34,-57,-2,-9,88,61,-1,-70,-79,-53,46,41, 
  /* [1][0][][] */ -32,-77,16,105,-66,-83,-51,127,-33,-80,-115,-59,-15,-44,-9,-8, 
  /* [2][0][][] */ 11,-7,-52,25,-8,-127,-18,34,-27,-1,-70,-60,27,17,79,2, 
  /* [3][0][][] */ 95,98,-109,74,27,-36,69,36,3,-42,-2,36,-127,-40,-14,61, 
  /* [4][0][][] */ 47,53,-114,107,-108,-10,90,8,-91,-8,-41,28,-62,127,37,-106, 
  /* [5][0][][] */ 24,86,-46,-55,46,33,92,-61,-31,-3,-114,-30,-127,81,68,25, 
  /* [6][0][][] */ -26,13,-40,79,-6,-1,-78,-47,-34,58,-127,21,-68,10,-27,10, 
  /* [7][0][][] */ -9,15,-26,38,102,45,96,65,39,-19,80,15,127,-48,50,61, 
  /* [8][0][][] */ 30,4,-42,-127,-19,-50,15,-60,-77,115,-93,-50,-105,37,72,-64, 
  /* [9][0][][] */ -36,4,18,-101,91,98,-84,-95,-77,34,-127,-66,-5,46,-4,90, 
  /* [10][0][][] */ -37,-17,79,-67,59,70,-45,-44,-2,52,20,-65,-127,-9,-30,43, 
  /* [11][0][][] */ -127,29,-23,83,-78,-69,-95,49,-83,-45,98,-1,-33,-11,-68,21, 
  /* [12][0][][] */ -26,50,127,49,-37,-35,-5,-7,-112,-23,-59,-59,-59,-63,-92,-6, 
  /* [13][0][][] */ 127,-33,80,-11,-45,-37,-126,32,74,24,40,81,-19,-30,53,26, 
  /* [14][0][][] */ -47,127,69,8,9,-30,-32,23,-87,-46,7,20,117,-65,0,3, 
  /* [15][0][][] */ -54,21,48,-39,-16,-127,-9,15,43,41,-30,37,13,29,-90,-17, 
  /* [16][0][][] */ 15,-2,127,127,25,-37,-76,-1,-43,19,98,30,-12,56,-32,73, 
  /* [17][0][][] */ 10,-23,33,99,-36,-38,-8,-35,-20,-15,-1,36,-24,127,5,13, 
  /* [18][0][][] */ -33,-7,127,86,23,41,-42,-74,74,21,-35,-94,-70,-72,-1,30, 
  /* [19][0][][] */ 15,-8,7,65,-76,11,-66,-117,40,14,127,62,-35,-48,-73,38, 
  /* [20][0][][] */ 105,-47,-40,36,23,-35,-24,-65,-97,12,-124,127,-35,-12,44,-30, 
  /* [21][0][][] */ 67,58,-33,-27,73,-8,-64,-18,32,-40,-41,-15,-127,-56,-9,29, 
  /* [22][0][][] */ -12,25,94,-46,1,-127,-38,-13,-74,6,37,102,63,0,34,-127, 
  /* [23][0][][] */ 127,-75,10,-38,25,3,13,4,35,-40,25,-10,-103,38,15,-43, 
  /* [24][0][][] */ 20,-2,21,-22,-15,-127,-12,21,17,7,5,-11,35,-11,-29,-19, 
  /* [25][0][][] */ -32,-12,34,40,12,17,12,-33,9,74,40,-47,-64,18,-20,127, 
  /* [26][0][][] */ 42,0,-127,9,-38,48,44,-21,48,39,62,44,37,89,16,65, 
  /* [27][0][][] */ 16,-80,98,-9,-82,-125,54,59,2,-32,34,-28,-127,-58,-125,71, 
  /* [28][0][][] */ 52,77,-113,76,6,-34,67,127,61,-74,85,102,-100,-45,-6,19, 
  /* [29][0][][] */ 42,-73,-31,-86,24,16,-83,73,12,-39,-127,22,-16,-63,34,19, 
  /* [30][0][][] */ -56,-68,48,-52,-18,62,-45,69,116,-50,63,-2,4,-1,-127,17, 
  /* [31][0][][] */ -9,3,-15,2,-54,-127,-36,16,57,-65,44,-30,-126,-90,-50,2, 
  /* [32][0][][] */ -21,-78,-19,13,-90,17,-31,-29,0,-4,-105,106,-38,-127,-62,-52, 
  /* [33][0][][] */ -77,3,-68,-57,9,22,-20,-5,-127,41,-117,41,55,27,-63,-39, 
  /* [34][0][][] */ -12,65,-13,21,127,93,69,18,1,-5,92,-32,17,77,111,-23, 
  /* [35][0][][] */ -31,-107,1,-6,4,-66,37,127,-2,-53,-56,65,-59,-25,-28,40, 
  /* [36][0][][] */ -25,45,127,70,-73,78,59,-45,49,17,35,39,-8,-50,-57,-11, 
  /* [37][0][][] */ -10,4,72,-2,127,-22,-38,-38,-17,68,-24,-23,53,102,1,-51, 
  /* [38][0][][] */ -11,13,9,-9,12,0,23,-51,-27,-47,95,-12,-127,84,-80,-13, 
  /* [39][0][][] */ 127,21,5,-3,47,-29,35,-33,-24,4,-47,-48,-47,-2,-32,17, 
  /* [40][0][][] */ 20,93,-127,100,-52,8,86,27,14,-122,11,52,-83,-105,62,103, 
  /* [41][0][][] */ -20,-21,-48,45,-127,-38,-60,-10,-24,40,-33,-15,24,23,77,31, 
  /* [42][0][][] */ 50,73,-37,-8,115,83,127,69,-89,-57,-11,-102,-11,-66,4,-79, 
  /* [43][0][][] */ 48,-83,110,54,-127,-123,86,-32,29,-51,-25,-15,3,121,62,5, 
  /* [44][0][][] */ 69,111,40,20,-99,-85,-36,-5,1,13,-6,127,44,-9,22,-25, 
  /* [45][0][][] */ 36,40,-39,45,82,17,22,-65,-127,-46,-54,-82,-64,31,-81,-11, 
  /* [46][0][][] */ 62,73,86,-85,60,17,-110,-120,-127,0,29,38,-63,-51,-127,42, 
  /* [47][0][][] */ 25,55,52,-23,45,-32,30,48,17,3,-127,49,-33,-69,-57,-4, 
  /* [48][0][][] */ 12,-11,-10,-32,-65,34,47,97,-13,51,-107,19,-68,-115,4,127, 
  /* [49][0][][] */ -60,103,-1,3,-35,-16,-68,-57,-96,-78,-120,57,-127,109,-15,48, 
  /* [50][0][][] */ 4,-1,106,58,74,127,-68,-88,-1,20,64,8,46,9,29,91, 
  /* [51][0][][] */ -37,68,-12,9,-1,36,-127,18,19,-57,-85,56,56,-85,47,-4, 
  /* [52][0][][] */ -22,4,60,-91,-36,7,-69,55,-127,21,-40,-1,-67,-15,75,-72, 
  /* [53][0][][] */ 58,56,-21,37,40,-6,86,127,-46,-61,-27,14,15,40,-79,-54, 
  /* [54][0][][] */ 19,-3,60,25,12,-20,73,88,-82,-62,-91,-127,5,-26,-10,115, 
  /* [55][0][][] */ 55,57,-18,-15,-11,51,4,127,22,-33,-7,-96,82,52,15,122, 
  /* [56][0][][] */ 15,108,-73,81,123,55,-93,-73,-48,88,-52,80,104,-66,127,-45, 
  /* [57][0][][] */ -2,-22,112,59,14,-26,3,112,-45,-28,70,117,-127,-66,-11,5, 
  /* [58][0][][] */ 54,-31,43,-59,71,127,31,-98,29,20,-58,-47,-61,-45,16,-8, 
  /* [59][0][][] */ 26,-29,82,-39,83,25,72,12,33,-58,82,-41,7,-127,36,76, 
  /* [60][0][][] */ -16,35,-5,38,-50,14,6,-30,63,3,85,-127,-3,-91,-118,-99, 
  /* [61][0][][] */ -41,-44,-127,-127,60,-46,43,-54,-10,-36,-62,30,42,-9,25,57, 
  /* [62][0][][] */ -9,6,45,-24,127,6,-31,-28,-9,-43,93,22,18,-53,25,-13, 
  /* [63][0][][] */ -32,-30,127,85,-52,-28,-26,-15,32,22,-32,20,-15,39,81,-67, 
  /* [64][0][][] */ -35,24,-54,-56,27,127,-30,70,-11,7,-25,80,42,32,39,-16, 
  /* [65][0][][] */ -83,-14,71,-27,8,39,25,-39,52,-74,30,-78,-127,101,-16,87, 
  /* [66][0][][] */ 127,56,20,-84,55,-23,-56,-47,32,-15,-53,119,-36,-78,17,-92, 
  /* [67][0][][] */ -12,25,34,-18,-21,37,-62,8,-66,-38,-108,87,-82,-127,-12,-56, 
  /* [68][0][][] */ -20,-24,61,-4,2,-104,-14,-74,12,-127,11,39,21,-59,15,92, 
  /* [69][0][][] */ 115,-50,-9,64,53,94,13,-127,89,26,-91,-81,-93,62,-9,69, 
  /* [70][0][][] */ -29,-54,-33,5,-44,87,13,-113,74,45,61,13,63,16,127,4, 
  /* [71][0][][] */ 72,-19,-51,74,56,127,33,94,-11,63,99,-44,-14,50,-8,-62, 
  /* [72][0][][] */ -8,80,-37,-14,-16,127,-57,100,74,90,-90,-92,-4,36,-71,-38, 
  /* [73][0][][] */ -59,-45,-62,-4,-34,54,20,-69,74,35,37,-18,45,-9,127,-56, 
  /* [74][0][][] */ -61,-101,42,-56,86,-70,-2,-119,-72,-127,59,42,-50,-16,-4,73, 
  /* [75][0][][] */ 3,46,57,-41,104,-127,-15,-5,27,5,-65,26,-2,55,23,11, 
  /* [76][0][][] */ -39,-69,-16,-25,127,-70,94,-77,-24,-101,-3,34,4,-65,-56,46, 
  /* [77][0][][] */ -14,-18,-4,-38,15,13,17,71,122,-27,-16,55,-5,-30,75,127, 
  /* [78][0][][] */ 77,-28,67,-33,-34,1,-54,8,-47,-35,-127,-25,63,47,1,-43, 
  /* [79][0][][] */ 54,-19,-6,10,127,-36,-3,-66,-91,-40,-48,20,-109,-106,-11,44, 
  /* [80][0][][] */ 30,65,-72,-63,-35,-43,33,34,-30,-115,-41,38,53,-127,-2,-126, 
  /* [81][0][][] */ -5,-4,8,20,4,-22,19,127,13,11,-69,20,-21,16,-50,-11, 
  /* [82][0][][] */ -39,5,11,-57,-15,43,24,15,-42,-26,127,2,3,43,52,14, 
  /* [83][0][][] */ -58,-87,-65,-27,-5,38,-109,-2,-7,1,27,-25,-122,11,127,16, 
  /* [84][0][][] */ 66,39,37,42,62,-24,-88,-38,-83,-127,-45,-64,-39,33,8,-28, 
  /* [85][0][][] */ 73,2,48,95,46,50,-56,-60,16,-86,-15,-3,127,60,5,47, 
  /* [86][0][][] */ 25,-113,-16,-40,5,55,-109,-40,-53,-74,-127,122,61,-26,-84,-35, 
  /* [87][0][][] */ -101,-38,-23,-23,74,64,62,37,30,-6,-62,8,-127,-5,24,-100, 
  /* [88][0][][] */ 20,50,-32,-43,-31,47,-87,98,-127,109,-39,73,-41,-50,27,-85, 
  /* [89][0][][] */ 81,90,94,-127,-103,-7,-76,2,-57,-29,-76,-12,-63,60,-93,78, 
  /* [90][0][][] */ -44,41,-24,-80,-62,-60,-123,-27,-64,-45,-121,127,-74,83,39,1, 
  /* [91][0][][] */ 47,34,-38,-54,48,-37,-87,127,-5,60,45,22,-89,-96,-46,-21, 
  /* [92][0][][] */ 56,-27,113,10,33,-104,5,53,-19,-89,127,-85,-43,55,-26,-99, 
  /* [93][0][][] */ -63,-127,-48,24,97,95,15,66,17,-76,-112,-24,27,102,51,27, 
  /* [94][0][][] */ -58,-72,127,-63,16,42,-81,66,-75,-27,14,-57,-5,-52,32,-36, 
  /* [95][0][][] */ 26,36,127,-58,63,115,43,89,70,10,25,-10,-92,2,-30,107, 
};
const TfArray<4, int> tensor_dimension69 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant69_scale = { 96, { 0.001364293391816318, 0.00097174948314204812, 0.0019205212593078613, 0.0021465406753122807, 0.0017476410139352083, 0.0015289289876818657, 0.0015789455501362681, 0.0011723933275789022, 0.0011182171292603016, 0.0033228425309062004, 0.00186606973875314, 0.0011338245822116733, 0.0011174354003742337, 0.001604428282007575, 0.0022862826008349657, 0.0017316038720309734, 0.0011674977140501142, 0.0020793040748685598, 0.0013054974842816591, 0.001557330833747983, 0.0011865319684147835, 0.0016982902307063341, 0.0013041733764111996, 0.0023314226418733597, 0.0026077679358422756, 0.0020396306645125151, 0.0013027305249124765, 0.0010775229893624783, 0.0023167787585407495, 0.0019591210875660181, 0.0016870521940290928, 0.0014320914633572102, 0.0012779971584677696, 0.0016699363477528095, 0.001085609314031899, 0.0018637045286595821, 0.0015672907466068864, 0.0027626506052911282, 0.0029587666504085064, 0.0023714690469205379, 0.0020245618652552366, 0.0028269002214074135, 0.0013690554769709706, 0.0015291298041120172, 0.0012641248758882284, 0.0022727577015757561, 0.0011666178470477462, 0.0015382986748591065, 0.0024522931780666113, 0.0012350081233307719, 0.001318500260822475, 0.0024677810724824667, 0.0016044112853705883, 0.0025723963044583797, 0.0021102512255311012, 0.0016970235155895352, 0.0017702631885185838, 0.0010634842328727245, 0.001606608391739428, 0.001757428515702486, 0.0020079647656530142, 0.0015888430643826723, 0.0027777336072176695, 0.0016400223830714822, 0.0019238243112340569, 0.0018546433420851827, 0.0013584104599431157, 0.0010549663566052914, 0.001569838379509747, 0.001338349306024611, 0.0010204671416431665, 0.0013091181172057986, 0.0021146205253899097, 0.0010480417404323816, 0.0017470481107011437, 0.0017454265616834164, 0.0027239371556788683, 0.0025840145535767078, 0.0016421211184933782, 0.0013358595315366983, 0.0016675728838890791, 0.0029293915722519159, 0.0017001745291054249, 0.003209421643987298, 0.0014690225943922997, 0.0022271857596933842, 0.0015976590802893043, 0.0020602606236934662, 0.0013809434603899717, 0.0012903128517791629, 0.00092539901379495859, 0.0022263007704168558, 0.0015946070197969675, 0.0020095205400139093, 0.0019869185052812099, 0.0018868951592594385, } };
const TfArray<96, int> quant69_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const ALIGN(8) int8_t tensor_data70[16*1*1*96] = { 
  /* [0][0][][] */ 91,5,-43,16,-23,-94,-17,-5,59,-4,32,45,1,-53,-67,-74,127,-14,-12,53,-76,11,58,-30,3,113,38,75,-49,54,51,-89,-5,-52,7,-74,-13,-25,-76,17,14,21,11,-80,-35,-7,68,-16,-36,75,20,-1,46,50,30,-5,95,32,50,-36,-16,95,62,-58,-23,-36,52,61,-12,-13,-13,66,-20,9,49,4,31,-6,63,-23,-64,8,9,28,-22,-23,-79,-69,-55,0,11,58,8,-19,-42,53, 
  /* [1][0][][] */ 19,7,-57,1,22,63,35,23,-23,26,-5,-6,-18,13,65,22,-23,9,6,-33,35,-6,-41,-41,-73,-12,10,18,20,-13,-1,-16,24,20,-4,-78,75,-39,-49,-17,-13,-18,-53,28,-122,-8,-24,-38,51,-36,7,36,81,-6,5,118,11,9,-67,-17,-13,87,-68,78,-29,-47,45,6,22,10,3,26,28,1,58,-10,34,-20,-8,-127,13,10,-28,4,56,41,4,0,-30,-62,-39,6,66,18,-33,40, 
  /* [2][0][][] */ -26,-33,-127,0,-87,4,48,-4,39,-19,18,104,8,15,-16,63,73,39,-40,-7,-20,24,52,24,-5,55,38,-38,0,59,67,-25,-89,-1,-54,-18,20,18,34,-1,12,23,-9,-20,17,1,16,-29,41,-5,-37,8,-67,2,-28,-77,-86,-22,57,16,4,24,-32,46,47,-65,26,50,-3,6,-50,27,1,-21,10,-53,-8,-19,-83,-17,-52,-1,60,4,-11,7,-22,37,-11,21,-71,44,24,29,96,61, 
  /* [3][0][][] */ 16,-70,51,-39,30,-110,91,31,-15,-26,7,-21,57,-2,-35,127,-72,-2,16,6,-65,0,-47,83,99,-53,-5,22,24,28,13,-9,-15,-6,-40,17,22,39,4,46,-14,-21,-85,-4,-16,5,16,41,35,116,13,-22,9,-46,0,-24,9,28,-31,-5,27,3,-14,-58,2,-39,86,11,-32,20,64,41,-10,36,45,-56,31,6,29,39,118,42,43,-27,85,-48,-31,-22,-4,7,-87,9,-65,54,-1,-9, 
  /* [4][0][][] */ 41,37,1,-9,56,-33,-15,-10,44,-14,-57,55,-35,0,-2,-23,-117,19,59,-14,0,-7,10,-38,-18,-127,-13,18,33,30,-13,-71,-35,9,23,15,46,6,-44,-68,-12,-33,17,-66,6,1,-103,-101,-29,63,31,24,-66,-9,-2,-84,55,14,-10,-48,11,17,34,38,-50,14,-27,-39,-6,1,5,61,87,-22,26,-21,8,-3,-56,-13,80,46,46,15,-11,-48,-7,121,17,56,-21,20,12,-34,-14,-63, 
  /* [5][0][][] */ -82,100,-98,27,-95,-94,-75,0,7,6,2,-5,-16,39,8,45,-9,-4,27,-23,54,5,-74,16,2,-51,-3,48,-5,-70,127,-15,16,-5,-33,-50,40,40,84,-14,15,71,-28,2,-24,-4,56,-6,-44,23,12,-35,-7,-13,-10,41,21,-9,28,-19,66,1,70,-23,10,49,-38,-7,52,9,10,16,51,10,-9,8,11,32,93,-17,86,-47,-8,-63,25,17,60,0,6,-41,-57,40,-36,-21,-68,40, 
  /* [6][0][][] */ 17,-74,119,28,-47,31,-3,41,24,-27,47,39,22,30,-36,62,-23,-27,-75,-26,92,30,-41,-6,-19,23,52,-23,-18,-4,89,62,20,-7,-52,13,-32,11,-39,-62,15,-3,62,71,12,-16,-68,8,33,11,42,-18,-71,22,-3,10,127,34,-12,9,-4,-20,-32,6,11,63,96,-91,60,-3,-32,29,51,-15,3,-47,7,-39,-46,-46,-91,67,50,7,-40,44,95,-99,82,18,44,-71,18,-28,-95,-14, 
  /* [7][0][][] */ 23,37,-51,-32,5,-12,-47,90,57,-22,71,22,31,-2,62,-59,67,11,66,-43,-47,28,-35,-19,-41,-38,20,10,79,-35,-19,-43,45,-32,42,52,-37,-2,53,-68,-29,30,-47,-75,-27,15,37,33,-51,-74,42,48,-101,8,3,-2,23,1,18,35,-45,69,0,11,16,59,34,-86,25,-20,-16,-53,-76,12,24,-127,42,-7,-80,58,-24,19,-7,-23,51,35,-59,-15,-16,50,45,1,-18,-55,-77,-16, 
  /* [8][0][][] */ -12,-44,-26,16,40,47,0,-66,-19,-2,-24,-40,24,-59,-27,-34,64,-7,16,25,32,-19,-17,79,20,-64,-10,7,16,-31,16,33,75,-49,-51,-3,-9,5,44,-22,25,-24,22,36,35,-12,10,13,-75,43,35,22,-4,-28,-8,-15,-8,-9,-45,-46,43,42,6,127,-18,2,63,-53,9,3,-18,75,34,-26,-17,86,-3,-2,1,-54,-64,20,6,-16,24,15,4,20,55,11,86,25,-66,29,-6,-31, 
  /* [9][0][][] */ -11,-64,15,-16,-23,-50,16,23,60,-14,24,47,-6,-20,3,-123,39,-20,14,-25,-88,20,31,-4,-29,36,-32,51,29,14,49,-55,-15,-30,-52,123,35,-7,-36,-40,-4,20,-20,-21,34,-6,-13,-44,15,-22,39,61,22,-38,30,16,19,-3,-82,-21,-75,-29,89,35,-32,2,-17,34,60,-19,53,-28,13,45,-20,82,-13,-35,50,-9,9,73,-25,-17,43,-20,119,31,60,50,-24,-35,-13,127,63,9, 
  /* [10][0][][] */ -12,-63,6,24,-69,-54,42,-69,-22,93,-112,-13,-38,-48,-7,127,-74,48,-13,-16,-23,71,-71,9,60,-13,-81,71,2,36,17,-7,48,-12,-38,-17,-46,45,-38,-53,-11,6,-21,-84,-81,20,44,-34,-2,-60,33,42,85,21,7,13,70,36,127,10,31,-55,66,41,9,41,-3,-94,41,41,35,-30,27,36,18,2,-17,-20,-56,26,4,0,0,7,62,5,48,-32,-19,-54,66,0,-5,-6,90,41, 
  /* [11][0][][] */ -29,-48,18,12,-22,8,-57,60,35,17,-1,40,36,-60,51,-12,22,37,5,-1,29,-43,11,-23,10,-57,24,-65,-5,69,28,22,-89,-52,-31,-55,89,-4,-33,1,-16,4,-35,83,-50,-10,-65,66,-76,30,-11,1,89,58,-2,-62,5,-5,-13,68,23,-36,58,-1,-29,-47,97,4,57,-36,-64,1,37,-28,-34,68,-1,-16,-84,-10,48,-106,-85,23,40,73,60,-6,43,39,-80,34,2,48,22,-127, 
  /* [12][0][][] */ 41,44,-17,9,-1,-68,41,79,-10,6,-20,-120,-5,11,-13,10,-39,-9,-11,-23,-20,39,-101,48,85,28,1,24,19,-80,-28,-2,36,-43,48,53,30,30,-47,-30,-18,70,10,80,-58,-13,-1,11,3,22,31,35,33,23,12,-89,3,3,28,58,17,23,20,70,26,-25,-42,-20,28,26,-51,45,-68,-30,10,-35,21,-9,44,-55,26,12,8,-13,50,-17,-127,37,41,-3,-31,-39,-18,51,19,44, 
  /* [13][0][][] */ 37,53,8,-31,45,-108,-39,-94,18,-30,2,59,127,-54,-89,-55,-58,-21,35,-20,-7,-11,-32,40,12,-48,60,0,39,60,38,40,-17,-21,-6,-5,31,-18,25,-48,-9,-27,34,-13,-86,2,-71,-21,21,-37,-23,39,-88,-4,-4,69,-28,-15,49,-58,-27,-6,-5,-86,-13,-8,-72,60,-18,19,-13,-65,7,-9,16,85,62,-19,-15,-77,29,-76,-18,25,-13,12,-28,1,-10,-17,78,-9,29,3,7,6, 
  /* [14][0][][] */ -60,8,-75,0,101,43,127,-14,-18,70,-14,4,25,44,-22,39,26,-28,6,51,-89,29,78,-18,-32,6,61,49,-28,-40,-33,-82,-48,74,4,-3,20,23,49,-16,-14,20,20,30,-47,18,23,74,-26,-20,-4,27,-74,-24,-25,-95,-26,23,39,-69,66,-45,-34,2,-32,-28,3,9,19,-1,-13,9,4,-6,-5,-10,-8,22,4,19,-19,-52,29,-29,12,104,42,19,39,-3,45,-40,9,87,-46,-73, 
  /* [15][0][][] */ -68,5,27,40,-35,-59,-25,48,-54,9,26,-21,1,1,-2,51,-8,2,18,45,29,-17,35,-33,-47,-9,4,21,-43,44,74,-40,2,75,65,30,-127,24,-39,-59,8,-15,4,-3,57,11,-34,57,16,8,8,35,-20,-11,-7,-13,18,5,-8,-25,-21,33,-65,52,-51,5,-64,1,-45,-23,1,14,-54,-5,26,-63,38,-29,49,-27,-44,26,-95,-5,-80,-31,-18,68,-63,-32,49,-10,-1,86,38,8, 
};
const TfArray<4, int> tensor_dimension70 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant70_scale = { 16, { 0.0035922289825975895, 0.0039423629641532898, 0.0041291066445410252, 0.0033167514484375715, 0.003604835132136941, 0.0038310966920107603, 0.0032346916850656271, 0.0038906519766896963, 0.0040743337012827396, 0.0040277522057294846, 0.0041856481693685055, 0.0038464744575321674, 0.0036225516814738512, 0.0040772831998765469, 0.0041390075348317623, 0.0040598027408123016, } };
const TfArray<16, int> quant70_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const ALIGN(8) int8_t tensor_data71[96*1*1*16] = { 
  /* [0][0][][] */ -34,4,33,-120,-32,87,100,-9,63,-70,-71,2,84,127,11,-2, 
  /* [1][0][][] */ 63,-36,14,-85,37,127,28,-76,1,62,48,1,2,6,107,111, 
  /* [2][0][][] */ -46,-48,-46,-9,54,10,-38,-127,-17,-26,38,55,2,5,-2,-8, 
  /* [3][0][][] */ -92,-7,70,90,79,76,86,-114,-19,52,69,-75,19,-6,-127,-99, 
  /* [4][0][][] */ -127,54,24,29,-91,84,96,-31,48,-36,-23,98,-18,-43,-106,-121, 
  /* [5][0][][] */ 127,-46,64,110,94,-62,-117,63,-34,88,-54,-31,52,-41,100,-19, 
  /* [6][0][][] */ -14,80,53,60,-127,55,-21,51,-63,7,-23,-14,-2,21,100,37, 
  /* [7][0][][] */ 2,94,-20,-41,-37,127,-39,-13,-71,-71,-98,114,26,-54,-3,-38, 
  /* [8][0][][] */ 96,-16,-96,-61,107,121,-41,56,-20,-127,56,103,37,14,7,93, 
  /* [9][0][][] */ 80,123,-11,27,116,49,127,122,8,-79,-109,18,108,19,-34,-42, 
  /* [10][0][][] */ -14,-90,-5,17,40,73,21,95,53,127,105,-41,-15,50,-25,-18, 
  /* [11][0][][] */ 54,-4,-63,-51,45,-51,11,20,8,16,-78,37,-5,109,127,60, 
  /* [12][0][][] */ -6,17,-2,-37,-127,45,26,4,-15,-5,17,-55,40,20,-44,-42, 
  /* [13][0][][] */ 122,127,-24,3,104,45,30,9,28,14,5,-96,-2,-18,-17,-6, 
  /* [14][0][][] */ -92,-27,-32,82,92,9,-7,27,10,-50,-16,24,-2,38,-127,-16, 
  /* [15][0][][] */ -32,-10,22,-87,127,58,-45,24,11,59,-52,10,1,7,18,14, 
  /* [16][0][][] */ -32,3,-13,79,-93,-121,-42,93,-18,-28,25,-38,-8,-33,-127,-125, 
  /* [17][0][][] */ 50,1,53,-60,-36,-39,82,38,-44,64,-13,34,48,17,127,52, 
  /* [18][0][][] */ 127,18,57,104,-15,31,-48,-54,-12,15,0,57,29,-6,96,-38, 
  /* [19][0][][] */ 65,54,-24,-112,122,45,-4,-32,-94,126,-14,127,36,-106,-123,-43, 
  /* [20][0][][] */ -42,23,-4,26,-12,-115,-93,-73,93,-46,-71,28,85,50,-66,-127, 
  /* [21][0][][] */ -5,-42,67,18,-8,48,9,-38,-22,-50,-98,-49,27,-3,54,127, 
  /* [22][0][][] */ 7,99,66,10,-118,-17,89,25,60,-43,28,127,72,76,-20,42, 
  /* [23][0][][] */ 3,98,38,-73,-2,89,33,-127,-66,30,-117,-12,54,-74,65,-25, 
  /* [24][0][][] */ 46,-13,-21,-51,-5,18,-127,-10,17,76,-97,-42,-11,60,-49,35, 
  /* [25][0][][] */ -45,-7,23,24,-89,107,45,-37,-34,-4,23,-41,65,127,-71,67, 
  /* [26][0][][] */ 91,103,-127,34,51,-7,4,82,41,-7,1,-34,-73,31,29,121, 
  /* [27][0][][] */ 38,127,51,-75,52,5,53,-73,40,-51,-57,-67,-30,37,-44,11, 
  /* [28][0][][] */ -27,110,34,-70,-4,2,127,-2,104,-18,18,117,48,82,-107,10, 
  /* [29][0][][] */ -86,4,2,127,-6,-24,-71,53,-18,50,15,-53,-58,-17,23,-15, 
  /* [30][0][][] */ 73,-48,34,23,4,25,-127,11,-63,-23,-16,-49,35,-72,4,34, 
  /* [31][0][][] */ -97,-77,-20,41,-44,-32,127,49,77,-86,39,-66,0,-74,10,34, 
  /* [32][0][][] */ 45,20,-26,-127,-92,-85,12,14,56,27,22,-22,-45,-91,28,50, 
  /* [33][0][][] */ -29,13,49,9,105,34,-37,21,41,13,1,89,-42,26,6,127, 
  /* [34][0][][] */ -37,16,-54,94,-21,2,-73,-3,-18,-84,78,-40,-19,1,127,11, 
  /* [35][0][][] */ -18,107,28,59,-35,-118,-5,-76,77,88,-127,53,-22,0,-96,-2, 
  /* [36][0][][] */ -16,-127,62,-29,36,-35,44,58,74,-107,74,11,-100,-81,-33,-15, 
  /* [37][0][][] */ -41,-3,81,-15,-93,44,127,-72,-13,36,-53,50,66,50,-24,-20, 
  /* [38][0][][] */ 95,31,39,-37,36,-5,44,-113,-127,78,67,113,-9,116,27,66, 
  /* [39][0][][] */ -30,62,-127,-50,70,-17,-69,85,-43,-59,37,-107,-17,-38,-15,-125, 
  /* [40][0][][] */ -25,2,-127,-75,40,61,98,41,116,73,35,-85,-31,9,-60,-7, 
  /* [41][0][][] */ -26,-63,-33,-15,38,-26,-58,12,-37,16,15,-48,-65,-84,-16,-127, 
  /* [42][0][][] */ -35,-33,22,47,127,17,18,-28,-35,-4,-21,-34,-34,-76,56,12, 
  /* [43][0][][] */ -127,-44,5,-92,-18,70,66,-73,0,-10,50,5,-43,-16,24,-41, 
  /* [44][0][][] */ -65,-44,-127,96,90,31,29,37,50,85,-8,-100,9,-34,-95,50, 
  /* [45][0][][] */ -77,29,21,-38,-28,-100,18,-13,-101,17,-122,-2,14,47,-127,25, 
  /* [46][0][][] */ -16,-90,64,-11,10,28,-15,38,-13,-46,70,-31,51,-43,-127,-45, 
  /* [47][0][][] */ 14,-20,-6,-10,72,74,-127,-4,21,-11,-77,27,26,47,15,74, 
  /* [48][0][][] */ -49,44,-34,93,10,127,-44,34,-5,75,-38,2,-13,-61,44,-24, 
  /* [49][0][][] */ 55,9,-13,53,25,-82,-67,20,32,-103,-50,47,-65,22,106,127, 
  /* [50][0][][] */ 127,-35,33,98,-58,-7,1,0,98,-87,66,-73,-63,29,39,-4, 
  /* [51][0][][] */ 60,-64,127,-57,110,-52,18,124,24,45,17,-11,-60,-111,25,-115, 
  /* [52][0][][] */ 51,-127,71,82,19,-2,-23,18,67,-29,7,0,11,86,42,38, 
  /* [53][0][][] */ 121,-12,-51,-32,93,-41,-101,15,-127,59,-13,-16,84,102,3,26, 
  /* [54][0][][] */ 11,2,-73,25,45,-66,-71,113,-11,4,127,20,-67,-65,72,101, 
  /* [55][0][][] */ -26,-66,-22,30,-37,28,127,39,81,-81,29,-40,-19,-15,-59,80, 
  /* [56][0][][] */ 59,-71,51,92,60,-72,-52,-25,88,20,63,124,-18,120,-109,127, 
  /* [57][0][][] */ 26,-62,39,-127,57,47,69,3,36,33,-119,45,107,65,22,15, 
  /* [58][0][][] */ 4,68,-47,69,-122,-76,86,24,-57,43,3,-60,127,48,69,-47, 
  /* [59][0][][] */ 49,3,-83,-9,127,-74,-34,2,40,39,66,-30,-105,-75,8,-76, 
  /* [60][0][][] */ -8,-8,-68,98,127,-49,109,25,63,0,-21,-88,63,79,-116,-42, 
  /* [61][0][][] */ 56,127,-16,12,78,-27,20,-5,37,-28,-30,-54,-2,75,-5,4, 
  /* [62][0][][] */ 28,-90,-31,-12,127,12,-5,46,72,-37,96,26,-90,-34,-32,102, 
  /* [63][0][][] */ 106,-49,-43,-31,1,17,-22,104,25,37,29,16,46,85,-62,127, 
  /* [64][0][][] */ -8,105,-23,-78,-40,7,111,-127,14,6,-84,-111,-56,-126,42,-53, 
  /* [65][0][][] */ 39,62,-127,-14,-111,-63,-98,59,100,44,-17,126,-14,-13,-41,62, 
  /* [66][0][][] */ -16,70,9,0,-6,-29,-109,-41,-13,84,-35,127,-83,19,123,74, 
  /* [67][0][][] */ 26,52,-51,66,17,-127,-68,-21,-15,-29,-18,-13,-71,-76,26,-4, 
  /* [68][0][][] */ -89,63,52,-127,96,10,27,3,41,-77,118,-58,-99,-65,-118,-66, 
  /* [69][0][][] */ 4,-11,-1,-1,66,-110,34,53,-30,37,-43,-13,23,-127,27,-13, 
  /* [70][0][][] */ 53,-89,-66,48,54,-100,-127,-14,38,4,12,-48,-48,-6,36,89, 
  /* [71][0][][] */ -44,0,4,29,-73,44,-95,25,49,-26,127,-94,-35,37,55,-37, 
  /* [72][0][][] */ 33,-117,63,25,127,-80,9,-70,34,14,70,80,7,-9,-95,24, 
  /* [73][0][][] */ -8,82,-48,18,-127,-53,-26,-38,-7,-38,-22,-54,-76,4,-4,-18, 
  /* [74][0][][] */ 19,97,-34,-57,-99,-74,39,-32,-83,83,-127,-37,-14,26,12,-99, 
  /* [75][0][][] */ 62,91,39,-41,90,52,-10,-35,30,30,49,127,2,-108,-125,-14, 
  /* [76][0][][] */ 43,-9,-30,83,53,-20,31,-1,-6,-6,56,85,-73,-47,127,15, 
  /* [77][0][][] */ -127,88,-66,-34,12,63,8,3,-92,64,12,-25,-17,-106,-87,-106, 
  /* [78][0][][] */ 12,127,50,124,-42,52,65,42,51,78,21,-70,-19,-25,-22,67, 
  /* [79][0][][] */ -71,-7,-41,58,127,41,-55,64,42,-37,74,33,38,89,-25,13, 
  /* [80][0][][] */ -84,1,-42,52,19,-77,19,127,8,4,-5,-17,-25,66,-6,-79, 
  /* [81][0][][] */ -47,-11,-23,127,-41,-43,15,37,-32,-66,76,-68,-38,8,57,27, 
  /* [82][0][][] */ -13,-16,26,127,71,52,-89,-7,12,-6,69,67,19,9,-118,34, 
  /* [83][0][][] */ 51,68,6,-61,-38,-14,-57,-28,-127,-55,22,70,0,-39,2,-28, 
  /* [84][0][][] */ -17,-127,-61,0,22,-70,-40,55,25,-106,25,-62,-77,-82,66,-107, 
  /* [85][0][][] */ -16,-48,-19,1,61,127,-60,-109,-67,45,1,-61,45,13,94,-87, 
  /* [86][0][][] */ 60,-111,89,74,40,-94,22,18,-20,-39,120,21,-70,49,-127,-45, 
  /* [87][0][][] */ -38,16,-42,-74,127,52,63,6,-8,0,10,28,-10,22,57,35, 
  /* [88][0][][] */ -11,29,127,-58,-11,37,-87,8,-92,16,2,-34,32,9,82,-6, 
  /* [89][0][][] */ 42,-42,-53,15,-11,4,127,5,-38,29,87,-60,102,5,-23,-38, 
  /* [90][0][][] */ 16,-46,9,17,-24,-82,-17,7,1,-52,40,17,5,50,-35,127, 
  /* [91][0][][] */ 27,64,-3,58,-67,-34,10,127,90,-34,-66,-36,-24,11,-19,35, 
  /* [92][0][][] */ 13,127,2,32,23,53,-82,-40,15,56,-14,-38,57,37,-11,32, 
  /* [93][0][][] */ -5,-20,90,-25,-1,72,-98,10,-95,30,30,70,45,127,-60,-21, 
  /* [94][0][][] */ -42,4,17,-58,113,-6,3,26,-34,71,2,72,-78,16,-127,-23, 
  /* [95][0][][] */ -76,44,-2,32,-5,48,6,85,25,-27,-25,-127,64,38,-68,-108, 
};
const TfArray<4, int> tensor_dimension71 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant71_scale = { 96, { 0.0016735501121729612, 0.0023255490232259035, 0.0020888203289359808, 0.0016195562202483416, 0.001362444250844419, 0.0017721488839015365, 0.0019527524709701538, 0.0019598612561821938, 0.0024469690397381783, 0.0018494075629860163, 0.0021321144886314869, 0.0025655396748334169, 0.0030713924206793308, 0.0026073034387081861, 0.0018556620925664902, 0.0031898121815174818, 0.002261860528960824, 0.0023463577963411808, 0.0030425377190113068, 0.0017703796038404107, 0.0039296895265579224, 0.0034308750182390213, 0.0038565313443541527, 0.0033070880454033613, 0.0017479496309533715, 0.003133424324914813, 0.0015294089680537581, 0.004587685689330101, 0.0024127343203872442, 0.0027882193680852652, 0.0029794690199196339, 0.0026829591952264309, 0.0028044176287949085, 0.0022866285871714354, 0.0024791688192635775, 0.0017846946138888597, 0.0021056067198514938, 0.0023707489017397165, 0.0035525092389434576, 0.0029499712400138378, 0.0036701778881251812, 0.0028062069322913885, 0.0024765701964497566, 0.0022134794853627682, 0.0031844400800764561, 0.0033960060682147741, 0.0016640227986499667, 0.0026362510398030281, 0.0037205477710813284, 0.0018625058000907302, 0.0025396435521543026, 0.0025454680435359478, 0.002167093800380826, 0.001929567544721067, 0.0020078362431377172, 0.0037019762676209211, 0.0022353318054229021, 0.0014305661898106337, 0.0020888589788228273, 0.002790338359773159, 0.0028289586771279573, 0.0039877342060208321, 0.0023898885119706392, 0.0016002511838451028, 0.0022147700656205416, 0.0022096764296293259, 0.0017891951138153672, 0.0018543183105066419, 0.0011364504462108016, 0.0034628454595804214, 0.0026779426261782646, 0.0022518795449286699, 0.0022557377815246582, 0.002587396651506424, 0.0032890199217945337, 0.0018263676902279258, 0.0018576880684122443, 0.0015090375673025846, 0.0020066166762262583, 0.0035309595987200737, 0.0038692539092153311, 0.0024176107253879309, 0.0027587215881794691, 0.0033128939103335142, 0.0025552303995937109, 0.0028841602616012096, 0.0022855992428958416, 0.0032763516064733267, 0.0022099765483289957, 0.0036953233648091555, 0.004410062450915575, 0.0024539157748222351, 0.0026313052512705326, 0.0018792346818372607, 0.0021161481272429228, 0.0025809141807258129, } };
const TfArray<96, int> quant71_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const ALIGN(8) int8_t tensor_data72[16*1*1*96] = { 
  /* [0][0][][] */ 40,-48,85,20,-30,-64,64,-3,-6,35,59,-19,112,-19,55,-56,15,32,2,-3,22,33,5,-24,35,10,-26,33,13,-10,27,30,6,127,-6,-41,-16,4,12,37,-12,13,-97,27,4,-22,-65,5,7,36,40,5,16,-19,-40,-5,53,-46,56,-22,-24,-39,72,21,20,11,-24,53,-60,-7,-20,11,40,41,6,27,52,58,-18,42,-20,52,33,0,26,60,-44,97,10,-70,-12,-10,-100,-74,-3,-45, 
  /* [1][0][][] */ 21,-2,-82,-14,-12,-10,-5,-57,-38,5,-81,-40,28,-75,-75,9,11,32,60,-43,27,-9,26,-37,-19,-7,43,-13,-31,-6,33,-32,-54,25,29,-54,23,-82,-27,3,-8,8,5,34,16,41,-28,-15,35,-74,-127,-38,86,8,67,37,43,-5,34,13,-7,-50,10,-12,23,-11,10,9,-44,85,-34,47,23,64,4,-17,17,50,51,47,29,0,58,-34,-36,59,25,-60,-47,-19,-16,17,-7,-6,-36,-5, 
  /* [2][0][][] */ -36,0,28,-25,3,-49,58,16,-62,17,-36,96,-88,19,22,-10,-45,-69,-34,12,39,-2,26,-63,7,-36,-32,-27,33,-63,-40,30,-9,-67,17,24,62,43,58,41,-26,-32,-59,27,-42,-16,-6,-32,112,-28,-68,82,-58,-13,-22,-27,-6,-35,-6,-30,-15,46,-40,43,21,33,-15,-47,16,15,45,-53,-8,-64,5,-29,-13,-39,7,22,-15,52,32,-18,56,4,127,-42,-34,27,-16,1,-48,45,37,38, 
  /* [3][0][][] */ 80,5,26,-46,-9,-45,67,36,19,-7,1,-96,47,-13,-17,9,8,35,-26,71,-25,25,-25,0,-28,37,40,-10,-15,43,24,-31,-76,39,16,7,-15,-28,15,-50,-60,30,-15,15,4,-1,20,28,-44,-51,26,-52,-57,-55,37,59,18,-58,18,24,18,8,19,-39,16,-4,1,23,127,-73,-123,-1,15,-48,-14,102,-81,-39,-29,10,36,8,73,62,-4,-13,5,45,31,-8,46,-28,-1,-70,95,-4, 
  /* [4][0][][] */ 10,21,9,40,17,-99,16,4,-7,41,-51,5,-17,10,-35,-58,-11,26,26,-34,1,56,-8,-28,-39,-26,-17,12,0,51,20,5,20,-71,9,-73,58,2,9,-3,-7,7,-24,2,34,-7,-23,3,-14,-100,26,72,10,-22,20,25,-33,28,-17,12,11,53,15,5,55,-11,-20,56,-67,-28,-127,-13,11,-23,4,-75,29,41,23,-11,19,-6,-43,-3,-17,3,-43,-32,25,6,-30,12,17,-15,-82,-3, 
  /* [5][0][][] */ -13,-114,-28,-4,22,83,-87,-46,20,-5,21,4,39,-5,-34,-79,-44,-12,-26,-27,12,72,51,42,-28,74,-56,-92,13,-4,20,55,8,-50,12,42,-22,32,-17,59,-18,57,-70,-24,36,-39,-2,15,-52,24,-30,30,-9,57,-9,-58,-38,-11,17,47,28,27,-42,-83,-27,76,-37,-54,25,-127,23,54,13,7,42,26,-95,-8,-117,-3,-6,-1,35,20,14,-38,-45,-31,95,69,-23,-80,-54,-31,-67,-85, 
  /* [6][0][][] */ 17,-30,64,92,10,51,39,118,63,14,112,-107,82,84,-6,8,51,41,23,36,14,53,10,-69,30,38,17,-27,-52,-4,26,40,-33,87,-30,22,-99,91,19,39,-38,17,-80,-21,10,-8,-18,-63,-2,-5,122,-74,29,74,42,19,54,-41,-34,54,19,4,-9,97,44,-49,9,-82,-90,-36,81,-25,52,-6,22,-25,-76,57,-64,9,0,93,26,34,-18,86,34,-91,22,66,-55,-14,-127,-49,121,13, 
  /* [7][0][][] */ -12,23,31,-3,85,-3,-22,-25,10,12,20,25,-40,-21,-48,-9,-7,-28,-11,-31,-20,-22,2,39,41,-15,28,-1,16,18,1,18,-23,-36,28,-27,127,15,2,-14,-3,-4,70,4,25,-5,-31,78,20,44,-52,12,-22,-64,-63,-26,9,-26,3,-23,5,-55,5,50,-1,112,-1,-25,76,47,43,-12,-3,-54,-16,5,-32,12,-15,-22,23,-66,27,7,38,-7,21,0,17,-3,-41,22,57,10,-95,-29, 
  /* [8][0][][] */ -57,3,-50,48,127,-75,-4,20,-14,37,40,16,9,-61,-92,33,20,72,-17,23,-43,-51,35,-69,63,-30,-64,-17,-69,8,8,9,34,-43,-37,-122,-24,8,28,88,25,-17,77,14,62,-67,-55,51,24,-74,-92,67,-64,111,16,-28,-90,99,-27,21,30,67,49,23,45,18,-8,-61,72,118,-19,13,-16,-24,-30,-15,26,-54,14,14,3,-7,4,80,-23,21,24,89,6,-31,-24,54,24,46,52,14, 
  /* [9][0][][] */ 1,19,2,-26,78,-100,4,29,18,-73,-20,-58,-8,-17,44,-26,-51,-5,-4,-38,21,-9,23,-62,8,9,19,37,46,54,16,6,-2,-16,12,-87,8,13,-60,4,-91,24,-127,4,27,3,12,-26,-96,-3,63,33,17,20,-6,-22,-27,43,47,-8,-24,42,-101,-56,59,-54,24,2,-85,27,9,-23,6,13,10,35,16,-1,-36,0,-1,72,23,15,18,11,-55,-43,23,-64,-70,12,-117,-72,-26,-66, 
  /* [10][0][][] */ 80,-69,-9,48,19,16,25,53,-8,-78,78,29,34,24,-44,48,40,101,62,21,-3,-11,6,24,55,23,-30,-1,16,62,66,-15,-42,26,32,9,111,8,3,-57,-26,73,76,-65,23,-11,-63,51,3,-15,-59,-32,45,-24,11,20,56,-73,23,34,-1,117,51,84,7,86,-12,-10,-2,-45,-94,87,55,21,1,-50,-2,107,-45,9,31,67,45,12,31,14,58,2,127,-8,-29,-60,-19,-19,-27,-20, 
  /* [11][0][][] */ 12,2,50,-51,-48,58,34,-43,-28,13,-13,-31,20,43,-12,-18,17,-33,2,13,3,-35,27,-2,16,-7,6,-8,-33,-28,11,-5,-19,-2,11,17,12,66,-14,-10,17,-5,40,-24,-12,-7,11,17,11,-24,31,20,-17,-3,-1,20,8,-12,10,18,7,32,71,-41,-12,-4,-13,-16,127,16,26,-7,-11,-29,-6,39,66,-37,36,-1,13,-8,4,7,-18,28,-9,30,1,-7,39,-47,44,2,34,14, 
  /* [12][0][][] */ 8,9,-49,0,-98,-20,-31,92,53,-28,-14,-35,15,78,-67,-2,23,24,-34,10,-42,-65,26,-53,-27,33,-9,-11,1,18,14,-10,-6,27,38,-80,31,32,-39,47,-31,-17,45,31,41,14,98,-127,48,-13,82,-20,32,0,58,28,-59,19,94,26,39,-100,-100,-11,-4,-90,44,-3,14,-89,-4,-7,-44,-24,95,1,-36,-21,-67,19,22,-10,60,31,-14,68,-22,-77,23,54,-45,38,96,-119,-127,-78, 
  /* [13][0][][] */ 0,49,46,-18,-35,53,5,-13,0,-33,35,-50,3,-60,11,47,15,18,37,56,-10,9,8,9,-28,35,86,-4,4,-8,27,-83,-42,-38,27,37,59,22,-27,-5,-17,-9,83,-36,-11,27,-31,-58,-45,-19,2,-17,-13,-20,25,-25,5,67,19,20,-29,-4,25,-4,-5,-47,28,-68,127,-48,112,10,32,12,-13,44,12,-2,46,0,44,51,6,20,4,7,-40,-51,38,-11,61,26,-13,69,-26,28, 
  /* [14][0][][] */ 12,-42,22,41,-16,-72,-7,72,-17,-31,-24,-84,-9,17,6,-18,-16,1,-22,37,46,38,26,-75,-13,-17,6,17,27,-38,-4,-29,34,1,22,46,-84,-2,3,-25,2,-9,-94,22,0,-18,24,-77,22,-127,50,43,19,57,-33,31,44,38,-2,4,-6,49,-48,-53,14,69,-71,15,82,7,-17,6,20,11,38,35,-48,1,23,22,-1,34,36,15,42,-12,11,-65,-58,46,27,-10,-73,-61,6,0, 
  /* [15][0][][] */ 8,-90,63,12,-26,66,-35,50,-6,0,26,-62,-24,-24,46,-127,-8,-68,0,-22,35,9,58,121,80,41,37,-7,26,15,-13,19,-42,-102,18,-38,-59,52,-22,23,53,-6,30,-22,7,40,63,31,-45,41,-35,-49,31,-5,-74,-54,-7,38,-6,-36,2,-67,40,56,-89,24,-32,-26,-66,5,21,22,-26,-55,20,23,2,65,-8,-1,-16,8,-31,11,36,1,48,12,-37,2,52,4,99,18,28,-41, 
};
const TfArray<4, int> tensor_dimension72 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant72_scale = { 16, { 0.0022987232077866793, 0.0016694407677277923, 0.0016610462917014956, 0.001627508201636374, 0.002386059146374464, 0.0013146416749805212, 0.0017663845792412758, 0.0024939374998211861, 0.0014712443808093667, 0.0018181282794103026, 0.0026089912280440331, 0.0026707758661359549, 0.0014099326217547059, 0.0017460398375988007, 0.0020707196090370417, 0.001533417496830225, } };
const TfArray<16, int> quant72_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant72 = { (TfLiteFloatArray*)&quant72_scale, (TfLiteIntArray*)&quant72_zero, 0 };
const ALIGN(8) int8_t tensor_data73[96*1*1*16] = { 
  /* [0][0][][] */ 1,5,86,11,-4,-127,-98,-106,-13,108,56,63,63,-27,52,79, 
  /* [1][0][][] */ -17,-1,66,-40,82,73,11,-127,-13,22,1,71,114,-71,-50,69, 
  /* [2][0][][] */ 114,43,-84,104,-116,-57,26,109,54,105,62,-127,-89,-8,-45,-8, 
  /* [3][0][][] */ -19,-56,-12,15,127,92,-34,-22,52,2,14,34,-91,9,-11,111, 
  /* [4][0][][] */ -17,-44,46,-2,28,-48,-70,33,26,-65,23,127,14,22,3,104, 
  /* [5][0][][] */ 72,4,-81,20,50,-50,-127,27,-30,53,-37,-17,81,-1,109,-26, 
  /* [6][0][][] */ 100,45,31,41,99,-30,127,72,-41,-4,-63,57,25,100,-25,47, 
  /* [7][0][][] */ -84,-38,54,-41,-127,15,7,33,53,14,0,-57,81,44,7,-79, 
  /* [8][0][][] */ 127,-47,-101,55,21,-65,-58,105,34,-73,-28,3,-95,-17,52,117, 
  /* [9][0][][] */ 63,-79,44,5,-23,62,-67,15,19,-116,127,-23,-9,7,27,41, 
  /* [10][0][][] */ -6,63,24,2,-1,11,50,50,7,42,-98,-54,94,94,-127,-16, 
  /* [11][0][][] */ 31,-25,25,-13,-27,6,-50,-6,127,-57,-4,83,19,-109,35,58, 
  /* [12][0][][] */ 24,4,-15,-82,42,-18,39,-41,-17,43,-26,127,-50,-23,17,38, 
  /* [13][0][][] */ 93,-44,-94,89,-48,-80,-23,127,-56,88,-22,46,85,-5,3,-6, 
  /* [14][0][][] */ -50,-80,26,-16,71,25,127,-88,-43,97,-34,-68,94,64,21,-80, 
  /* [15][0][][] */ -41,-103,-13,-68,-72,122,-12,32,-127,6,24,42,65,48,-49,-46, 
  /* [16][0][][] */ 91,104,91,-33,-63,44,53,-127,-27,49,19,11,117,0,126,-46, 
  /* [17][0][][] */ -110,-42,127,-81,-61,-29,-29,-63,-82,75,-38,24,50,-49,-82,-63, 
  /* [18][0][][] */ 3,-20,-28,76,6,39,-37,-83,44,-80,43,127,-122,0,29,32, 
  /* [19][0][][] */ -41,127,-2,107,43,-51,-19,84,-64,-20,15,8,108,7,-87,-70, 
  /* [20][0][][] */ 2,18,52,49,70,30,-44,-19,-78,-15,-39,-48,127,52,13,-122, 
  /* [21][0][][] */ 122,-36,45,-46,-20,13,100,-106,-25,127,-43,-21,67,46,60,1, 
  /* [22][0][][] */ 56,-44,35,43,16,33,-27,-63,-4,19,22,39,48,61,-48,127, 
  /* [23][0][][] */ -16,-47,-19,68,-63,32,0,-58,66,87,-2,127,4,17,14,-1, 
  /* [24][0][][] */ -69,-54,3,-127,36,-31,32,-45,-13,-8,-25,68,41,16,34,41, 
  /* [25][0][][] */ -13,-127,-103,-9,-12,0,-32,73,-71,85,51,73,98,55,-10,-28, 
  /* [26][0][][] */ -78,-9,-8,47,-70,-127,15,-61,10,49,16,97,-84,26,31,11, 
  /* [27][0][][] */ 14,-48,-33,-2,-34,4,-8,-30,37,-50,-5,31,-127,21,-28,61, 
  /* [28][0][][] */ 39,30,-127,-33,75,-38,-5,81,88,4,11,67,67,34,108,3, 
  /* [29][0][][] */ -57,-32,58,58,57,-25,-17,-124,-72,76,13,4,-8,47,-127,23, 
  /* [30][0][][] */ -81,32,-39,23,-60,-90,14,-28,57,-45,28,50,-127,-10,-18,22, 
  /* [31][0][][] */ 109,35,-5,-127,-118,-113,113,-54,-7,-4,-100,-74,-19,-100,-3,-48, 
  /* [32][0][][] */ 41,51,-69,19,29,-127,62,91,57,42,-48,-72,20,21,-125,-95, 
  /* [33][0][][] */ 60,-52,-127,-10,82,-26,49,24,-1,66,59,-18,-4,-103,-8,25, 
  /* [34][0][][] */ 59,35,29,-49,-78,-3,-27,-114,-57,-25,-24,53,127,-66,82,-21, 
  /* [35][0][][] */ -55,41,92,-81,18,-32,34,5,48,43,-127,11,-11,-65,-125,-48, 
  /* [36][0][][] */ 77,-53,36,-39,-127,82,-5,55,-39,8,-11,-34,0,32,-47,36, 
  /* [37][0][][] */ 24,-7,-1,-19,-60,-44,-56,-1,53,-127,-9,3,8,-103,-26,17, 
  /* [38][0][][] */ -16,19,-50,-9,67,63,1,70,90,-42,96,94,-127,-1,-56,9, 
  /* [39][0][][] */ 6,79,11,20,127,10,-74,116,13,86,10,6,39,30,11,-45, 
  /* [40][0][][] */ 127,-63,54,-61,27,-45,80,29,-7,-62,5,72,18,52,43,-44, 
  /* [41][0][][] */ -61,24,-33,68,-26,86,-10,81,-60,46,-7,8,-127,-52,-94,-57, 
  /* [42][0][][] */ 33,-33,38,-20,8,-46,-117,-26,-1,7,-20,80,-35,20,-4,127, 
  /* [43][0][][] */ 127,32,62,-52,77,-41,76,-89,-95,69,33,56,-19,63,-15,26, 
  /* [44][0][][] */ 100,80,-93,13,-7,17,-15,66,127,-52,-49,-71,-1,45,-34,-22, 
  /* [45][0][][] */ -70,-37,127,-81,-62,-41,-125,-73,-1,-10,-19,40,-24,53,-87,89, 
  /* [46][0][][] */ 127,-19,-4,13,15,111,10,-17,56,-55,81,14,33,94,44,21, 
  /* [47][0][][] */ 26,-60,1,83,-127,-116,-45,-7,74,-77,51,105,-23,120,-12,84, 
  /* [48][0][][] */ -16,18,-13,32,24,-7,-127,-71,-115,41,75,-53,-69,-92,25,4, 
  /* [49][0][][] */ -65,29,-51,26,38,-30,31,39,14,3,3,17,22,127,43,-84, 
  /* [50][0][][] */ -127,63,-16,-22,20,-56,2,17,69,-27,-34,-31,-40,-29,-7,14, 
  /* [51][0][][] */ -20,-116,-71,29,123,39,-31,70,-9,-41,121,-83,-127,-2,-15,-30, 
  /* [52][0][][] */ 4,23,-55,-127,-18,15,80,39,46,-13,-9,-61,23,-95,53,-10, 
  /* [53][0][][] */ 63,7,2,-127,-2,-14,-51,-67,-53,53,47,26,11,7,69,47, 
  /* [54][0][][] */ -17,5,79,-40,57,39,-10,-114,-39,52,-31,-127,44,-15,15,-44, 
  /* [55][0][][] */ 31,0,-14,53,44,33,81,75,-121,42,84,-65,40,87,-8,-127, 
  /* [56][0][][] */ 3,-6,62,76,125,-12,-31,71,56,123,-3,-62,32,127,-16,-4, 
  /* [57][0][][] */ 72,64,22,15,-4,-33,93,-17,44,55,48,71,20,127,-60,70, 
  /* [58][0][][] */ -3,-65,48,57,-72,47,5,10,-5,44,-89,-100,67,127,-84,-36, 
  /* [59][0][][] */ -2,-54,0,61,22,-45,5,-96,85,-119,31,124,32,-127,29,-24, 
  /* [60][0][][] */ -71,127,6,-84,-27,24,18,-5,-60,109,10,59,52,-86,-80,-24, 
  /* [61][0][][] */ 96,-33,-76,-54,8,-89,7,-43,73,-64,99,-54,-2,-127,62,-89, 
  /* [62][0][][] */ -13,37,-127,-25,41,4,12,49,55,-61,-1,23,22,50,60,-63, 
  /* [63][0][][] */ -9,45,21,127,-46,30,56,-103,-8,-39,-68,45,0,-64,-33,10, 
  /* [64][0][][] */ 15,58,31,32,-55,26,-32,22,87,-19,-24,21,17,127,-76,-1, 
  /* [65][0][][] */ 127,81,73,-106,-120,-95,-111,95,50,86,-34,111,-3,33,104,66, 
  /* [66][0][][] */ 127,-44,-50,40,-62,-32,-3,11,21,28,6,-17,105,1,-91,34, 
  /* [67][0][][] */ 118,-127,27,-43,75,-11,-66,27,25,69,1,-30,-27,-12,-45,-55, 
  /* [68][0][][] */ -62,88,-85,-127,-9,122,26,50,38,-64,-87,-2,61,-116,-18,-117, 
  /* [69][0][][] */ -25,34,67,2,-41,-34,11,3,-34,-30,-89,56,-47,-127,-54,-2, 
  /* [70][0][][] */ -127,57,-98,-60,29,-37,23,25,-95,-127,-48,-44,-84,16,-115,17, 
  /* [71][0][][] */ 120,10,2,64,23,-127,-93,41,41,54,92,70,-39,-115,4,4, 
  /* [72][0][][] */ -127,74,-29,12,-68,-16,8,63,-70,-10,11,-67,6,28,61,-35, 
  /* [73][0][][] */ -127,29,-35,25,-45,-90,-42,-43,45,-76,16,9,-2,45,-72,-7, 
  /* [74][0][][] */ 119,-28,95,28,-127,52,-63,5,21,-104,-87,106,-50,107,-54,104, 
  /* [75][0][][] */ -32,-77,74,-38,4,11,-18,127,79,-57,-55,8,-44,62,63,-80, 
  /* [76][0][][] */ -71,-2,127,8,12,4,-81,18,0,-39,-7,-12,19,12,-11,-26, 
  /* [77][0][][] */ -21,-18,-102,41,44,95,-127,-53,-30,-34,-30,-44,-32,68,20,-113, 
  /* [78][0][][] */ -52,-59,96,-80,-15,127,33,-39,48,43,-80,81,-95,42,-53,-86, 
  /* [79][0][][] */ -38,-45,53,69,-118,-91,22,10,24,-110,-113,-117,-110,127,12,94, 
  /* [80][0][][] */ 2,1,-56,-5,13,21,-32,48,50,-127,43,73,-52,18,-10,109, 
  /* [81][0][][] */ -36,-15,-20,32,20,-69,-10,18,7,43,-50,-70,127,-29,-65,29, 
  /* [82][0][][] */ 117,83,28,24,37,-107,29,-22,61,95,5,-34,-8,127,10,60, 
  /* [83][0][][] */ -56,-1,-18,-62,-55,44,-9,-43,120,73,127,-86,42,-15,73,17, 
  /* [84][0][][] */ 3,-127,-13,-75,117,16,-2,-32,-81,-77,-84,60,-42,-36,-76,-68, 
  /* [85][0][][] */ -52,-34,-37,69,-69,20,-22,16,39,70,-54,-127,-12,-22,-45,-33, 
  /* [86][0][][] */ 6,7,5,-33,-45,44,-21,-43,-50,-34,-46,4,-30,48,-36,-127, 
  /* [87][0][][] */ 15,3,3,-11,11,21,36,-66,-65,104,-56,-29,127,-37,20,-48, 
  /* [88][0][][] */ -91,61,60,48,-28,30,-19,49,5,-65,-89,-127,-17,8,-32,-121, 
  /* [89][0][][] */ 1,-38,-82,39,-42,-61,127,57,-107,67,-44,17,13,21,-10,33, 
  /* [90][0][][] */ -57,65,94,-25,-75,46,-10,-107,-66,103,-76,-13,-67,-127,-5,-39, 
  /* [91][0][][] */ -69,-55,29,-3,40,110,98,22,34,69,-62,-43,127,-98,-16,-29, 
  /* [92][0][][] */ -127,73,54,-50,29,-9,-41,46,-29,89,15,-64,113,-38,-94,-38, 
  /* [93][0][][] */ 63,11,40,41,28,-74,119,-13,-41,-29,127,-18,-37,77,-70,-45, 
  /* [94][0][][] */ -49,-60,56,-127,12,-36,68,5,-29,-6,-121,-92,10,-75,100,12, 
  /* [95][0][][] */ 12,-22,-43,127,12,16,-92,-40,4,15,11,-22,-19,41,109,88, 
};
const TfArray<4, int> tensor_dimension73 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant73_scale = { 96, { 0.0020320788025856018, 0.0016371037345379591, 0.0011957089882344007, 0.0039184847846627235, 0.0027554593980312347, 0.0022719218395650387, 0.001805177191272378, 0.0019150436855852604, 0.0018386171432211995, 0.0013623487902805209, 0.0023447044659405947, 0.0032677899580448866, 0.0023621181026101112, 0.002172399777919054, 0.0014558350667357445, 0.0013091634027659893, 0.0029659571591764688, 0.0014917849330231547, 0.0020985992159694433, 0.0025289696641266346, 0.0022266637533903122, 0.0018533855909481645, 0.0025958425831049681, 0.003738773288205266, 0.0026430992875248194, 0.0020735419820994139, 0.0016463485080748796, 0.0040379413403570652, 0.0025835391134023666, 0.0026369001716375351, 0.0014397708000615239, 0.0025385709013789892, 0.0027766195125877857, 0.0023755959700793028, 0.0032579042017459869, 0.0017602399457246065, 0.0016730994684621692, 0.0040279040113091469, 0.0024828687310218811, 0.0028385058976709843, 0.0024613090790808201, 0.0022294465452432632, 0.0023711365647614002, 0.0017761343624442816, 0.0022426876239478588, 0.0021020569838583469, 0.0017131555359810591, 0.001119726337492466, 0.0025336684193462133, 0.00343090551905334, 0.0022581806406378746, 0.0026060098316520452, 0.0034739987459033728, 0.003678889712318778, 0.002111406996846199, 0.0020266205538064241, 0.0017052128678187728, 0.0018304446712136269, 0.0014069522731006145, 0.0018618667963892221, 0.0020457194186747074, 0.0027754632756114006, 0.0043695433996617794, 0.0019205802818760276, 0.0019985244143754244, 0.0010241072159260511, 0.0019949888810515404, 0.0017693075351417065, 0.0014299009926617146, 0.0017414758913218975, 0.0014385121176019311, 0.0016369459917768836, 0.0025858278386294842, 0.0026753600686788559, 0.0013177373912185431, 0.0023600785061717033, 0.0043937568552792072, 0.0031943279318511486, 0.0013241918059065938, 0.0015523047186434269, 0.0027738257776945829, 0.0048884991556406021, 0.0012900214642286301, 0.0015174461295828223, 0.00097240111790597439, 0.0042025563307106495, 0.0024528347421437502, 0.0019540339708328247, 0.0041180811822414398, 0.0034319942351430655, 0.0015433725202456117, 0.0017804431263357401, 0.0034121745266020298, 0.0026995826046913862, 0.0023718539159744978, 0.0017680071759968996, } };
const TfArray<96, int> quant73_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant73 = { (TfLiteFloatArray*)&quant73_scale, (TfLiteIntArray*)&quant73_zero, 0 };
const ALIGN(8) int8_t tensor_data74[16*1*1*96] = { 
  /* [0][0][][] */ 11,8,-35,-38,11,65,-24,29,21,-97,-14,3,4,46,-17,-7,-43,9,-51,28,-28,-4,-40,28,-28,-9,-8,-2,14,-43,-33,44,-3,55,17,-23,17,12,6,-22,-7,-50,-34,-21,-8,76,12,-36,-1,28,28,-3,-31,21,7,-27,27,-14,7,-12,17,-17,-9,97,-71,-53,-24,-70,-15,-20,45,-17,-19,-48,35,31,14,1,-37,-27,-31,-2,29,-4,30,-3,-127,7,-19,-21,-16,58,23,-11,-22,30, 
  /* [1][0][][] */ -17,-1,-4,-9,72,-5,-19,-28,20,103,-16,-9,-19,-107,-25,-81,1,-20,-3,6,-4,43,-2,10,-2,-43,-28,-7,11,13,71,21,28,-6,-14,-25,-4,26,-16,43,18,17,-7,-23,9,15,10,-11,7,-30,-8,3,-72,15,-27,23,27,-36,-27,-18,-58,-18,-2,-24,8,8,24,2,-28,-12,-127,8,27,-8,-41,19,33,39,64,37,3,3,-10,17,-13,-13,41,-91,-1,-16,-9,20,-10,-22,-63,-6, 
  /* [2][0][][] */ 8,-48,34,46,-38,31,-38,-80,-66,-57,42,-58,-42,-70,-81,9,14,5,-45,33,68,-109,-91,-12,33,-17,-34,-56,-2,67,3,39,-22,0,25,45,31,52,30,-30,31,-21,-83,2,19,-49,-70,0,-24,21,-8,5,-1,5,-23,60,-56,43,-23,22,26,-34,-34,-35,95,15,-32,-115,20,-126,-27,-54,-14,46,37,35,13,51,10,4,50,-15,37,82,-127,-45,100,7,-23,-65,1,-111,-1,53,-45,-17, 
  /* [3][0][][] */ 0,60,42,0,-16,126,-18,-2,0,56,12,-49,41,121,9,-44,3,-26,-10,33,-34,24,7,43,-5,-18,29,-24,-6,6,-26,31,-7,0,-19,-14,-23,33,19,40,-32,-4,-97,21,78,20,30,-40,-24,-75,-5,-27,5,-8,-84,57,44,13,13,26,18,-11,0,57,24,127,-20,46,-4,62,-18,24,-8,-4,28,-3,-10,-15,34,8,-66,10,-9,16,-19,36,-48,75,49,-67,-83,-33,57,-27,-32,-37, 
  /* [4][0][][] */ 8,-23,21,-4,-35,-74,-80,-70,-122,-21,12,2,-16,-33,48,-127,101,-14,-69,-42,5,-7,-5,64,62,35,-13,-64,-20,-8,5,-3,5,26,-26,1,34,-51,6,-52,-26,41,16,-49,-30,-25,41,40,15,-38,27,-35,25,29,4,-9,-103,-52,21,-34,24,27,-46,2,-36,110,-23,-29,17,-69,-4,-10,3,-26,23,75,43,-31,-62,46,-56,27,-45,91,-108,-24,52,21,-54,-27,-66,40,-48,116,-21,72, 
  /* [5][0][][] */ 29,26,-3,14,-42,104,5,12,-84,-70,25,-9,-43,-76,-93,52,-6,4,-28,16,-36,-28,-31,18,37,47,-74,-70,-16,-17,-10,-14,-28,27,-50,21,76,-17,1,86,14,16,14,20,32,-37,-15,59,-13,28,-29,34,-6,6,-19,-55,53,-37,34,-32,57,18,22,-3,24,56,127,-9,29,-2,0,35,-3,-46,-37,-19,-12,-25,-21,35,-7,-1,25,-64,-10,-4,-2,-32,-40,-42,28,78,40,11,-73,37, 
  /* [6][0][][] */ 32,-16,70,37,7,70,-23,-26,-43,85,43,-23,66,6,2,-72,26,6,-61,-1,7,-127,-93,20,81,50,-1,-58,-21,55,-13,49,-43,-80,44,-32,-10,-43,73,4,3,-20,21,-6,31,-31,11,-37,-23,-71,56,-13,-59,51,-12,47,4,-44,56,29,43,21,-8,36,-19,38,31,53,91,-22,-69,10,5,23,75,-44,59,11,-32,-57,-13,4,-79,39,-127,1,-31,12,23,48,-18,-98,-4,-57,53,-2, 
  /* [7][0][][] */ -33,13,-93,34,-12,11,-3,55,7,79,39,12,-55,57,38,91,27,48,65,-64,-41,18,40,-52,-58,14,-95,29,-42,-23,-1,-12,35,-89,-47,37,18,0,-40,-73,-10,100,-26,27,-15,38,102,-47,40,-49,-66,79,30,-18,67,-38,8,61,32,-6,34,75,-2,26,-34,-127,-115,-55,69,55,20,9,63,-22,52,16,12,29,14,102,-57,-8,20,5,-49,-1,-52,75,-26,61,5,-98,-16,-20,-38,-9, 
  /* [8][0][][] */ 11,-10,-35,-12,-51,-25,22,55,34,-67,-76,36,63,-127,-21,-96,28,13,15,11,-74,37,23,-13,-29,6,-78,-19,-32,7,20,-28,41,-114,-30,-4,17,-17,-70,-52,2,11,53,53,-23,-88,-45,32,10,-20,16,-49,6,-28,16,-4,-123,-47,-25,-68,85,18,34,-31,-97,-20,-103,36,-24,66,94,8,-80,-16,2,21,66,-28,-28,79,18,1,34,-59,84,6,69,57,8,-47,8,-69,3,34,-47,-30, 
  /* [9][0][][] */ -64,-14,1,12,0,88,-4,-14,66,127,12,2,-54,-27,44,-68,33,35,31,5,13,-8,-34,24,-42,25,62,-17,12,-9,4,8,5,11,-4,-25,-9,10,48,-8,20,-9,-14,-38,3,26,92,30,29,2,-57,27,14,32,-16,-8,-56,-39,28,-52,31,6,-19,-84,-24,-77,0,-52,-43,-2,13,-48,-15,2,0,-18,10,19,1,-37,23,3,-53,-18,-28,18,14,-97,-44,-7,73,38,-13,-2,-53,5, 
  /* [10][0][][] */ -58,-6,64,17,53,-10,103,102,-101,-4,1,-79,39,-5,-18,-40,-25,17,3,-12,7,-32,36,41,82,108,-37,-24,-17,19,-22,29,-27,33,5,-23,91,-13,36,13,16,6,-96,-45,85,-84,20,-74,78,12,111,42,-43,38,-85,27,-13,12,-10,20,-31,-9,-70,-71,-46,-10,-127,-103,53,-21,12,29,62,12,60,62,-15,68,-36,58,-80,12,-34,-94,-106,11,80,100,10,-9,43,47,-21,-31,42,51, 
  /* [11][0][][] */ 22,6,4,-35,-10,-36,-23,9,-5,78,-15,-13,-32,5,-68,-30,-14,-7,3,47,-22,46,-23,11,-21,38,8,21,22,15,43,6,8,50,9,-19,-7,11,-43,49,-36,7,-14,6,44,-7,14,-73,-4,-6,-23,-31,-56,-12,-13,13,22,-28,0,-33,-46,53,-16,127,-18,-34,51,60,-2,11,7,34,-2,-17,-12,-27,18,38,-64,8,-54,4,16,35,-70,-45,3,37,-8,35,-69,27,11,-39,-43,-2, 
  /* [12][0][][] */ -22,15,-3,18,-24,-11,-5,-74,8,28,51,-14,15,-30,-10,-24,0,-3,17,-7,42,-43,-26,-12,87,14,27,-30,26,63,38,13,8,30,5,0,0,12,54,40,-5,-25,14,-28,-1,19,24,47,-33,3,19,31,-20,49,-18,35,4,-29,47,77,1,5,-23,-20,7,43,-45,8,38,-40,-30,-8,19,-14,-8,8,-32,58,33,-42,14,19,-127,-21,5,-13,-12,-81,-21,22,-60,2,-16,-12,-9,12, 
  /* [13][0][][] */ 7,21,65,15,33,-39,-51,105,-12,21,-23,-18,-29,15,47,36,-25,-7,76,2,34,32,21,-32,24,-67,60,23,57,19,-1,-11,-17,48,46,-46,-29,-21,-50,-59,26,0,-31,-43,58,50,-47,-1,-25,-55,-73,53,70,-40,14,-50,-29,-45,5,52,-29,24,-36,-100,38,110,62,111,-74,55,0,71,38,47,-1,-127,-61,74,45,61,45,-16,-36,18,51,-14,45,97,11,8,8,17,14,-50,-25,-44, 
  /* [14][0][][] */ 63,11,62,63,-60,-6,24,-68,-69,40,89,-30,35,-23,24,7,-25,-111,-71,57,80,-83,104,3,-72,28,2,-36,81,-4,-90,22,-11,30,34,26,5,-23,58,11,-12,-46,-77,9,-1,18,-61,74,-9,-35,50,11,-85,26,73,12,2,122,26,-48,-90,-48,-7,-38,-36,-8,17,-121,21,-127,-44,-36,31,-31,-41,21,111,-19,32,-84,-54,-19,-43,-14,13,-61,96,-68,-26,13,-68,78,50,-14,27,36, 
  /* [15][0][][] */ 30,-7,-45,-55,-69,27,37,78,-11,-44,32,-48,-6,-34,12,-22,-13,4,36,13,22,17,-91,-72,-51,-66,17,43,-12,-56,-13,-37,-17,-13,-25,-50,-38,-20,-15,-41,3,17,6,61,-17,-5,55,-9,16,65,-47,-7,15,1,-8,25,3,75,-1,45,-62,82,-30,64,57,-10,-6,27,77,47,-73,13,9,-43,-46,39,7,-7,-46,32,-65,5,37,-97,127,-38,-15,6,-46,3,-16,8,19,-24,-6,84, 
};
const TfArray<4, int> tensor_dimension74 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant74_scale = { 16, { 0.0031127806287258863, 0.0022959820926189423, 0.0015938279684633017, 0.0012942883186042309, 0.0016961956862360239, 0.001482233521528542, 0.0016814529662951827, 0.0014015741180628538, 0.0017091532936319709, 0.0022123290691524744, 0.001746003981679678, 0.0021356835495680571, 0.0025469355750828981, 0.0011813265737146139, 0.0015286867273971438, 0.0015860183630138636, } };
const TfArray<16, int> quant74_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant74 = { (TfLiteFloatArray*)&quant74_scale, (TfLiteIntArray*)&quant74_zero, 0 };
const ALIGN(8) int8_t tensor_data75[96*1*1*16] = { 
  /* [0][0][][] */ -21,-79,-1,127,-13,6,-4,10,-27,-36,-20,-109,33,119,29,46, 
  /* [1][0][][] */ 106,-14,110,-17,42,-28,127,-118,-47,31,37,44,-109,23,-12,-73, 
  /* [2][0][][] */ -6,-11,-14,-69,39,-27,-24,25,-16,32,37,-69,104,127,40,15, 
  /* [3][0][][] */ 13,6,-65,28,-2,-25,-127,-23,-40,65,-10,45,40,114,21,37, 
  /* [4][0][][] */ 66,-127,-26,-50,7,-19,12,-67,-13,-14,-86,-51,19,-60,28,13, 
  /* [5][0][][] */ -22,71,79,-2,31,58,-59,92,-95,4,84,25,11,-26,-26,-127, 
  /* [6][0][][] */ 31,-56,33,-45,18,62,-72,123,90,59,-54,2,-17,127,-46,127, 
  /* [7][0][][] */ 84,37,6,58,24,-127,-46,-4,-80,-51,-2,47,32,-69,-63,-4, 
  /* [8][0][][] */ -19,21,-54,-53,43,3,54,34,127,39,124,-55,32,-58,-9,-29, 
  /* [9][0][][] */ -13,25,4,42,-23,-127,-12,21,77,78,-12,-25,34,-59,-66,42, 
  /* [10][0][][] */ -63,-10,-57,-76,-1,-21,52,70,-1,-66,127,-11,-4,-19,-56,38, 
  /* [11][0][][] */ 38,1,-3,87,18,-62,-17,-17,19,-43,13,84,-127,-37,-20,60, 
  /* [12][0][][] */ -17,-77,83,73,37,-70,-60,-127,-6,80,89,12,49,-46,-105,51, 
  /* [13][0][][] */ -26,1,-27,-13,-85,-78,62,-6,8,63,104,-53,76,6,72,-127, 
  /* [14][0][][] */ -11,-48,-56,-26,-33,-76,-85,-12,-8,-24,-34,-127,-76,-61,34,43, 
  /* [15][0][][] */ 83,127,-44,46,-3,-23,6,19,10,-29,-37,-117,11,35,-29,60, 
  /* [16][0][][] */ -79,-74,110,49,-27,-32,-3,127,-27,-87,73,-66,63,7,41,84, 
  /* [17][0][][] */ -30,-17,44,32,52,51,-43,-37,1,7,-9,127,-59,-38,-45,79, 
  /* [18][0][][] */ -42,29,-19,24,-17,-28,-16,46,24,-32,-127,-6,7,25,-74,13, 
  /* [19][0][][] */ 15,-76,-73,-82,-36,-118,-82,-2,22,-34,-55,-127,-77,-78,46,63, 
  /* [20][0][][] */ -26,-66,79,-41,44,39,41,15,50,35,-11,-108,95,-68,-26,-127, 
  /* [21][0][][] */ 92,36,-88,-36,36,-127,38,83,-68,-42,-41,98,43,15,86,-7, 
  /* [22][0][][] */ -42,-46,27,127,48,-55,-22,-83,59,67,82,-3,-15,-51,17,77, 
  /* [23][0][][] */ 3,58,-92,-97,105,-52,-63,-9,-127,69,95,44,104,-86,-64,19, 
  /* [24][0][][] */ -127,-26,59,79,38,20,99,93,-57,35,-7,69,16,-47,-17,51, 
  /* [25][0][][] */ 39,-19,-53,40,36,-57,-43,17,-127,47,13,7,-28,-33,-93,-39, 
  /* [26][0][][] */ 47,-54,52,72,-41,-27,-74,31,40,32,43,-52,4,-54,127,-41, 
  /* [27][0][][] */ 87,-1,16,51,58,80,41,36,82,127,39,-61,-9,22,-30,47, 
  /* [28][0][][] */ -64,89,-13,26,7,-16,46,32,-43,-70,26,72,-114,-127,-17,-43, 
  /* [29][0][][] */ 37,-60,74,37,-127,-48,-17,50,-2,-58,-92,35,-90,-18,62,116, 
  /* [30][0][][] */ -86,-48,74,-56,-93,19,5,-34,-59,40,-75,-2,10,48,-127,-119, 
  /* [31][0][][] */ 66,51,-52,127,112,-102,6,-39,17,-76,-40,-24,4,-25,35,30, 
  /* [32][0][][] */ 8,44,-75,-121,67,25,37,-18,-36,16,-10,0,90,-127,-99,32, 
  /* [33][0][][] */ 32,-30,12,33,-3,51,1,16,8,-27,2,1,-56,-127,-44,4, 
  /* [34][0][][] */ 1,12,-65,110,-127,-98,0,-77,116,-59,10,103,-104,56,-9,-63, 
  /* [35][0][][] */ 12,-61,7,-127,-120,-63,82,-30,88,53,71,-51,31,102,47,102, 
  /* [36][0][][] */ -47,-64,23,46,-56,-56,-100,-101,-127,37,70,94,-120,47,-32,114, 
  /* [37][0][][] */ -76,76,-124,-41,-127,120,-39,3,87,-17,-20,-55,10,-11,59,53, 
  /* [38][0][][] */ -55,127,-48,14,-52,-54,64,63,-9,80,-45,-16,-16,70,12,77, 
  /* [39][0][][] */ -46,41,-35,91,67,-17,102,127,-112,108,-92,26,-97,-46,-29,78, 
  /* [40][0][][] */ 18,-89,69,-68,-19,40,-77,-51,102,-45,117,-107,127,-35,33,-85, 
  /* [41][0][][] */ 26,-48,85,11,-110,-7,-125,26,-19,-127,-118,-19,59,92,92,62, 
  /* [42][0][][] */ -55,3,3,56,-11,-127,-42,18,9,-5,-29,-12,41,5,-28,-87, 
  /* [43][0][][] */ 75,-71,38,39,48,27,44,10,-36,-6,-54,47,127,-18,-91,-14, 
  /* [44][0][][] */ -61,-27,36,68,-12,-11,-56,-27,16,51,-53,-81,-23,-7,-127,31, 
  /* [45][0][][] */ -92,127,58,-21,61,-25,-40,-59,-4,20,-46,75,3,-81,21,27, 
  /* [46][0][][] */ -75,12,11,-40,-127,-13,-50,15,29,22,40,-36,-44,-40,-14,-16, 
  /* [47][0][][] */ 73,-127,-65,-50,-42,90,-96,-33,-7,16,98,90,35,27,36,-47, 
  /* [48][0][][] */ -26,-65,14,-127,97,29,32,21,-21,-96,-26,2,-116,41,-67,-28, 
  /* [49][0][][] */ 65,81,121,10,64,-34,-127,63,4,6,67,-34,-39,64,83,-14, 
  /* [50][0][][] */ 32,54,24,-49,75,9,127,-36,50,26,18,120,-25,54,-50,24, 
  /* [51][0][][] */ 17,-64,56,52,-59,-38,-57,45,88,-5,-40,99,108,-44,7,127, 
  /* [52][0][][] */ 119,-80,-37,74,105,127,-81,-15,-20,-6,51,-35,2,-43,-4,64, 
  /* [53][0][][] */ 35,-127,67,-47,-3,-62,34,95,73,37,-47,-15,26,45,72,34, 
  /* [54][0][][] */ 18,24,73,18,-123,-1,127,93,114,-79,-116,-83,-10,42,-111,-125, 
  /* [55][0][][] */ 46,-42,-39,-3,-64,42,24,127,-2,87,-37,6,-27,71,-23,-64, 
  /* [56][0][][] */ 90,37,82,-127,-94,-21,-78,65,-47,85,-88,50,-46,-50,-55,43, 
  /* [57][0][][] */ -45,67,-23,36,-59,104,120,-79,2,-127,-35,40,30,-40,14,-96, 
  /* [58][0][][] */ 51,43,110,-31,29,-7,-33,-45,-74,21,-127,-40,-53,-125,9,-79, 
  /* [59][0][][] */ 7,-46,13,44,43,44,-78,51,-127,-29,5,-52,60,-14,35,-31, 
  /* [60][0][][] */ -11,9,46,3,22,127,60,-1,-49,54,-48,7,33,9,13,62, 
  /* [61][0][][] */ 72,-68,11,61,-78,63,-9,-30,-61,27,36,-127,4,31,-112,47, 
  /* [62][0][][] */ -17,41,-9,6,-15,-65,-81,62,22,-127,69,52,-35,-25,5,103, 
  /* [63][0][][] */ 68,116,-124,17,57,62,99,124,-30,-84,-88,69,-14,115,127,-22, 
  /* [64][0][][] */ -86,13,-52,9,-26,-36,-78,111,46,-74,99,44,-94,-10,0,127, 
  /* [65][0][][] */ 66,44,-3,127,-66,68,-10,38,82,39,-4,54,40,-38,41,1, 
  /* [66][0][][] */ -30,-125,41,-127,-15,17,-48,-69,20,85,59,53,-17,-14,20,-38, 
  /* [67][0][][] */ -68,-70,-37,-18,-19,5,-15,-31,-58,-4,-33,127,-45,-115,89,-99, 
  /* [68][0][][] */ 68,44,-47,39,-71,-82,-78,-32,-30,-13,4,24,127,111,-11,21, 
  /* [69][0][][] */ -24,127,24,64,-31,-17,1,41,-50,-24,34,39,37,-84,-8,-57, 
  /* [70][0][][] */ 7,23,-16,70,4,-10,-6,80,-17,-55,-49,-127,-19,-71,59,37, 
  /* [71][0][][] */ 41,28,-80,-55,40,90,-90,-69,-21,41,-36,-42,58,40,-100,-127, 
  /* [72][0][][] */ 85,-37,1,-88,-100,15,-90,-5,127,-21,25,-113,122,124,-28,99, 
  /* [73][0][][] */ 127,-94,-67,-42,27,32,1,28,-61,-38,0,7,10,-41,55,-58, 
  /* [74][0][][] */ -68,63,-76,87,50,59,21,-106,-127,-103,-36,-14,-61,11,2,-58, 
  /* [75][0][][] */ 30,5,-52,53,18,-47,-20,6,88,-15,-5,-71,-68,127,-39,-83, 
  /* [76][0][][] */ 11,-127,16,15,-53,72,-97,-53,82,-70,-30,10,-17,-33,-122,87, 
  /* [77][0][][] */ -31,32,-55,-10,64,25,-56,42,127,-73,58,96,-91,6,-55,69, 
  /* [78][0][][] */ 127,13,-84,-1,21,20,38,57,-49,-48,14,20,82,19,40,2, 
  /* [79][0][][] */ -44,2,25,-21,-127,-36,-32,74,-25,-6,-55,-91,12,-19,-99,-87, 
  /* [80][0][][] */ -127,107,-6,127,-107,-37,33,-32,-20,-38,40,3,-15,-5,-10,-98, 
  /* [81][0][][] */ -74,-7,103,-4,-88,30,-70,-127,-18,83,-44,-103,45,24,-11,54, 
  /* [82][0][][] */ 80,-8,113,-29,6,53,-49,44,106,-127,-55,-63,96,1,34,-28, 
  /* [83][0][][] */ -57,-11,-127,-20,107,4,119,116,113,97,28,-24,-25,18,-86,-49, 
  /* [84][0][][] */ -20,81,15,-110,-84,-29,56,36,-51,-38,29,-18,29,-127,-9,-17, 
  /* [85][0][][] */ 101,43,51,9,-25,-127,16,14,8,-18,36,1,69,-5,-83,92, 
  /* [86][0][][] */ -40,-41,-114,-9,47,-110,86,-5,-127,84,-33,66,-52,104,19,-69, 
  /* [87][0][][] */ -89,-74,-31,55,48,-81,-38,63,28,-15,-125,24,22,127,-3,75, 
  /* [88][0][][] */ 34,61,31,-127,-6,41,25,-49,66,-13,-6,-16,64,111,-15,-16, 
  /* [89][0][][] */ -73,24,43,-21,-93,-71,-1,65,-63,-127,32,13,-31,-61,40,74, 
  /* [90][0][][] */ 39,76,-81,-30,-33,-45,-92,24,-45,12,77,-50,-127,-10,12,-8, 
  /* [91][0][][] */ 104,35,10,-27,-47,-127,-13,-97,-5,35,-109,-86,13,-4,59,-30, 
  /* [92][0][][] */ -56,-14,-22,23,68,22,55,42,35,-5,24,-34,41,-12,51,-127, 
  /* [93][0][][] */ 54,50,-23,62,-56,-35,72,-54,31,-27,62,94,-127,-87,-18,0, 
  /* [94][0][][] */ -59,-127,23,4,126,9,-16,-117,10,19,35,12,4,-87,-12,-38, 
  /* [95][0][][] */ -12,109,-23,85,63,-45,83,-60,127,67,53,-46,-75,-47,77,-12, 
};
const TfArray<4, int> tensor_dimension75 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant75_scale = { 96, { 0.0016783835599198937, 0.00031781129655428231, 0.0016122085507959127, 0.0016408809460699558, 0.0026591038331389427, 0.002268131822347641, 0.00095306220464408398, 0.0021779334638267756, 0.0021185122895985842, 0.0020062015391886234, 0.0030409866012632847, 0.0013773422688245773, 0.0045440881513059139, 0.0023348086979240179, 0.0019723607692867517, 0.001435466343536973, 0.0015029081841930747, 0.0021273409947752953, 0.0035871861036866903, 0.0017924731364473701, 0.0011936376104131341, 0.0025209872983396053, 0.0020829089917242527, 0.0011883395491167903, 0.0023103936109691858, 0.0028278250247240067, 0.001833083457313478, 0.0021917626727372408, 0.0010930108837783337, 0.0011558231199160218, 0.0012662113877013326, 0.0016242529964074492, 0.00029118973179720342, 0.0031812039669603109, 0.0010588129516690969, 0.0013008893001824617, 0.0013738740235567093, 0.0019873615819960833, 0.0020171036012470722, 0.0018009394407272339, 0.0016530182911083102, 0.00094129767967388034, 0.0030319755896925926, 0.0015367585001513362, 0.0037812504451721907, 0.001949286088347435, 0.0025151707231998444, 0.001995735801756382, 0.0016721395077183843, 0.0012730705784633756, 0.0019700070843100548, 0.0012121234321966767, 0.0011916331714019179, 0.0018790778703987598, 0.0033356102649122477, 0.0023871632292866707, 0.0016504032537341118, 0.0012319881934672594, 0.0013875160366296768, 0.003243584418669343, 0.0017684510676190257, 0.0021625007502734661, 0.0011377965565770864, 0.0039853043854236603, 0.00094501825515180826, 0.0021232878789305687, 0.0022791547235101461, 0.0012504432816058397, 0.0012413969961926341, 0.0024727294221520424, 0.0023271390236914158, 0.0013035164447501302, 0.00079399131936952472, 0.0025581656955182552, 0.0013113209279254079, 0.0024311186280101538, 0.0017916650976985693, 0.0016393341356888413, 0.0031344410963356495, 0.0035413019359111786, 0.0016841212054714561, 0.0020512416958808899, 0.0017302306368947029, 0.0017968437168747187, 0.0017084100982174277, 0.0018619479378685355, 0.0017437497153878212, 0.0017698792507871985, 0.0018483197782188654, 0.0015800112159922719, 0.0016616088105365634, 0.0038165028672665358, 0.0018601373303681612, 0.0014496382791548967, 0.0013519468484446406, 0.0014487400185316801, } };
const TfArray<96, int> quant75_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant75 = { (TfLiteFloatArray*)&quant75_scale, (TfLiteIntArray*)&quant75_zero, 0 };
const ALIGN(8) int8_t tensor_data76[32*1*1*96] = { 
  /* [0][0][][] */ -70,-14,82,-18,26,54,-23,98,35,-14,10,54,-4,16,-59,-6,12,-19,21,-8,-12,88,-10,-57,64,45,57,7,-57,-52,-13,50,3,24,48,61,-39,-16,-54,86,15,-49,12,-28,80,5,25,59,39,41,-1,-9,1,20,21,6,80,-3,2,65,66,84,26,5,55,-1,8,11,-59,56,33,-57,-62,127,-20,-76,31,59,40,14,1,-77,13,-25,-26,60,32,-10,87,41,35,-5,29,-39,-42,31, 
  /* [1][0][][] */ -12,8,12,32,-14,39,-14,-56,-15,-15,4,52,29,16,9,-53,14,20,-3,-17,-36,4,25,30,39,11,31,21,28,18,-20,-24,36,1,-53,-14,-1,16,12,61,-55,34,-20,25,-45,4,15,24,0,38,-4,38,5,33,25,-27,-1,4,5,9,-28,22,-17,27,7,51,21,57,39,3,28,24,65,15,7,50,68,27,-18,33,32,-6,-127,-49,-34,-56,39,13,28,61,40,-9,7,5,6,5, 
  /* [2][0][][] */ -5,-49,56,-43,-62,51,-5,50,40,15,-6,103,28,-8,-20,78,73,11,13,-8,53,11,54,-13,-29,2,12,-42,25,33,-2,60,2,46,-31,-2,37,-25,-70,-48,-57,17,85,13,34,123,-49,-69,127,-14,-38,34,-11,-26,81,-46,71,-12,-9,21,51,-5,-6,-3,44,-38,-101,-21,39,40,-51,25,30,-9,89,62,66,2,-23,19,22,-25,-117,0,12,30,17,-24,81,0,-14,-31,15,-33,38,-66, 
  /* [3][0][][] */ -54,66,26,-30,-59,-7,66,24,-96,65,-15,-33,-91,92,34,-54,47,-29,-6,37,93,-55,-118,-18,-73,21,48,-76,-44,-93,-27,38,-65,-31,28,-19,-18,31,-26,-60,30,-55,-81,2,-13,-40,37,-84,-54,4,-58,-13,21,-9,9,-100,85,78,-2,-15,-79,-34,-80,-40,28,107,-14,82,9,-29,-32,-76,56,-65,101,-53,11,127,-42,-64,37,35,-60,12,75,7,80,-18,82,-15,-71,-28,18,-40,-74,30, 
  /* [4][0][][] */ 5,30,24,51,20,-45,88,-30,-48,-13,-10,-64,1,5,-30,36,38,-50,-17,-27,42,-2,-15,-10,12,-58,30,-79,4,-68,78,0,-127,0,50,63,1,-65,69,24,-3,-92,-12,-56,-29,-19,75,-7,38,-3,-22,69,73,40,-10,17,8,19,65,-32,-15,98,-17,-8,-7,-42,19,11,1,-16,-9,28,-4,11,78,24,9,-9,17,39,54,-27,39,-17,21,3,28,19,-1,-19,12,-7,15,12,17,-15, 
  /* [5][0][][] */ -6,89,-37,11,-31,37,-11,-47,25,43,-26,-5,116,-31,-12,-43,-7,-7,-17,15,38,56,83,11,-5,-18,63,27,-32,27,-23,-48,-16,-127,75,69,38,-10,94,13,43,48,62,20,12,-10,-13,-10,0,21,1,-65,11,62,4,-50,6,13,64,50,5,-36,20,93,51,-42,37,-44,-7,32,53,-83,-5,-93,50,-11,54,20,-52,-18,25,-31,16,15,47,12,22,30,-9,-55,-78,-5,13,25,8,7, 
  /* [6][0][][] */ -6,4,-28,-41,-2,7,-8,13,-24,-13,-35,-21,-31,28,-21,-61,69,15,-18,39,-87,39,47,32,63,-33,-25,-39,24,-13,-46,70,2,51,-31,23,-2,-10,-104,-65,-42,-24,-14,-3,14,-52,86,-119,75,127,-21,-7,7,42,-3,-41,23,-6,15,10,1,-2,-45,18,36,-22,-44,-2,23,16,88,53,65,-27,-55,37,34,-1,25,-54,66,-28,11,-13,50,13,-63,-39,-34,-43,66,-20,-27,-22,-19,9, 
  /* [7][0][][] */ 14,-6,54,-9,15,-94,23,-22,-12,47,-16,43,75,-34,72,46,-13,15,-26,36,-1,-21,71,-18,29,-54,39,-76,18,4,39,-30,-40,78,13,-63,-9,-51,18,2,-28,-28,-25,62,98,-34,-42,7,-7,23,48,61,38,3,-55,15,-29,50,-19,-114,-127,94,34,67,3,111,-38,-10,3,-21,-22,-40,-7,34,-5,21,52,-46,50,-12,6,83,-13,-23,70,-11,3,-41,-36,-3,47,16,57,-46,0,20, 
  /* [8][0][][] */ 37,-91,10,-1,-51,71,36,-55,-10,-30,-4,23,-1,37,25,8,-22,-43,-53,17,-1,-42,-127,20,54,16,-6,-78,10,46,10,-8,77,-65,14,30,-22,-77,4,37,35,38,59,-41,-10,93,3,-61,-31,59,33,36,30,109,67,25,-32,16,-6,55,83,40,-21,11,43,-41,-82,85,-48,-32,2,3,-23,-22,-66,-15,-16,56,-2,-8,27,25,13,-8,32,8,20,28,-2,-83,28,8,-8,7,-48,-11, 
  /* [9][0][][] */ -6,28,-35,-7,-58,125,35,48,-68,2,28,2,-15,-30,61,70,12,55,-32,96,-89,17,-29,53,-30,25,12,-4,25,-1,8,-9,30,-37,-6,-63,5,52,18,1,-27,-31,-79,-70,-8,-9,40,31,-12,43,-18,5,23,19,-25,-18,22,58,6,37,32,-7,-12,-3,-7,14,-50,-38,-65,4,-33,127,39,-2,-4,0,24,-30,-5,14,102,26,27,-11,-54,-1,16,4,-35,45,4,-10,0,5,-3,-43, 
  /* [10][0][][] */ 47,-41,-36,112,-2,33,32,56,3,-29,1,26,93,79,-15,9,-11,-66,-24,-68,-24,46,31,6,-51,-3,-17,-3,6,-21,-13,-4,6,2,46,1,67,10,-78,-73,20,15,-46,-71,-11,15,17,-37,16,-18,2,-42,11,-61,-49,-14,-31,-15,-31,37,127,65,0,57,19,35,-28,27,23,6,2,58,41,-30,-66,-3,2,73,-36,-12,-46,-22,53,29,31,64,19,-3,-57,39,-31,-10,0,40,-26,-1, 
  /* [11][0][][] */ 72,30,-14,-62,6,-3,-46,-10,-70,4,65,-94,-25,-50,29,42,-1,-28,-38,12,-55,-31,-25,-5,-60,18,-102,29,-16,-62,-21,-64,28,-10,11,77,3,-106,16,-48,-25,-62,41,102,64,-52,1,43,-72,23,24,-82,-38,-39,13,-119,-19,-27,-3,21,60,80,-127,29,48,-44,-11,-34,-56,23,-11,-47,83,62,-34,-11,12,-15,42,-3,-13,-24,-30,-64,-41,32,-4,-31,13,87,-56,9,19,66,-4,-36, 
  /* [12][0][][] */ 8,-61,9,-2,-31,0,59,10,33,-21,27,-15,34,47,-10,-57,2,48,2,-37,-29,-11,-26,16,-48,27,-75,55,15,-25,-42,-23,-25,-40,-19,-53,-20,-39,-38,-28,15,-56,-127,82,81,-3,59,-39,96,5,-85,-1,-38,-36,-6,50,-9,-49,11,-32,-51,-6,0,69,10,-78,-13,24,-29,-80,36,62,-44,-80,82,78,72,-69,8,29,28,54,10,23,-60,-101,4,38,-24,69,-23,-16,-9,13,-85,8, 
  /* [13][0][][] */ 23,-2,-73,-30,-35,29,-53,-63,-58,-10,23,-40,-17,-12,-127,55,-80,41,-10,-102,-8,23,-25,16,57,-17,-20,0,-8,-72,-73,2,-66,10,-33,5,-64,64,31,21,33,-40,-49,-46,7,-16,62,-60,20,-16,6,29,-31,8,-58,-54,-29,-7,11,-14,-10,56,22,51,-69,39,-68,-27,-29,9,22,-41,31,-41,-35,2,-2,11,43,5,-63,6,-30,-15,-49,-64,-11,-6,34,63,75,16,-17,-74,29,12, 
  /* [14][0][][] */ -14,11,7,-57,-1,10,17,-41,78,62,-22,35,15,23,65,-32,-5,98,32,82,76,37,77,-18,-50,-49,-1,-21,-14,-49,-3,3,8,-24,73,-39,1,109,-11,-56,-24,-47,36,-87,106,54,48,-30,9,31,20,39,-6,-6,-21,82,0,-81,-7,6,16,-13,127,-33,-29,14,11,46,-94,1,18,-47,78,43,-15,-63,35,-45,70,18,28,52,-66,34,-13,-59,12,4,0,-34,-18,16,35,59,17,-22, 
  /* [15][0][][] */ 2,-21,20,-45,2,-7,-14,-19,15,-7,29,15,-4,31,-6,-6,16,-21,52,-20,48,32,24,16,-34,6,41,18,-47,64,-17,15,5,-91,-60,-20,0,50,54,-36,8,13,40,-44,30,21,1,-11,-29,12,-30,31,27,-13,54,-3,10,-50,9,38,-4,-10,-12,-36,67,55,-1,21,-44,-22,127,-38,-8,10,-23,65,9,-24,3,11,5,16,29,-6,7,37,-11,-26,-68,26,-20,0,11,28,-3,-22, 
  /* [16][0][][] */ -9,-70,-36,-6,64,-57,13,26,-42,7,-51,0,9,-17,34,28,43,-30,2,25,-17,-23,30,-23,39,42,13,49,13,10,-99,-37,49,-26,5,-12,8,32,116,127,-22,-16,-85,-32,6,-57,8,-2,71,-6,-8,23,-12,8,-61,2,30,30,-96,4,-25,-41,-22,-1,-49,-35,11,-124,-10,-64,-11,85,6,-42,-7,-50,-18,34,-24,-14,-1,17,-79,-30,7,67,-7,-28,-5,-2,44,-22,21,107,13,23, 
  /* [17][0][][] */ -78,-45,109,12,52,-25,-70,-107,-59,-40,9,15,65,-39,-2,5,-8,-97,-64,-15,37,-37,-25,-44,47,-89,22,22,1,69,-58,-28,-76,43,21,-64,118,-42,-64,-29,23,17,101,-10,36,-39,76,-6,-101,-82,53,-69,-62,34,-62,48,127,-115,-57,-4,22,-70,7,74,101,91,62,19,-64,-10,24,62,-6,-9,-84,-24,22,14,-43,-47,-27,4,50,-42,-12,-16,64,-17,-86,41,45,10,-1,57,-22,13, 
  /* [18][0][][] */ -93,17,44,7,-83,65,1,-19,-13,-83,-17,-33,71,55,117,52,50,-13,-46,59,26,-24,22,-25,13,20,41,20,-24,-12,-33,-10,84,10,4,114,-62,-43,-62,-85,41,-4,-72,-37,1,-51,42,-55,-16,-99,72,-12,-34,-41,20,127,86,32,9,-24,-60,-24,5,54,-26,-21,-17,28,94,14,45,-95,20,-24,72,75,-41,47,23,-11,5,3,19,32,-58,-32,-35,-59,115,-21,-29,-10,-2,-105,78,24, 
  /* [19][0][][] */ 7,127,53,10,18,-26,-4,-7,17,-31,12,8,27,-11,19,55,30,-14,34,-10,12,-16,31,-32,53,-21,-8,5,-35,18,-21,-7,46,-2,32,-17,35,-4,-14,-2,2,18,-80,-15,38,42,-24,27,33,24,10,-1,11,-7,-1,16,-38,-61,3,-30,60,-21,-25,-24,29,27,-17,-28,22,-5,5,-41,-50,3,-12,38,-12,3,-2,10,-30,9,-17,-11,12,5,4,-19,13,19,39,-4,-31,-42,-13,18, 
  /* [20][0][][] */ -37,-73,7,17,-52,24,6,37,48,0,19,-22,10,12,65,-12,-56,-9,39,47,-64,-17,33,9,37,-14,-127,-2,-25,48,41,-34,-120,-65,6,-18,38,10,8,22,-8,39,-84,35,-10,-18,-9,-34,-125,8,36,-65,7,42,33,19,26,-91,6,-63,-14,-32,-16,-16,31,0,-7,40,64,-20,-81,4,13,-75,-58,-34,-38,61,-3,19,33,61,14,5,-65,15,2,4,33,-10,33,18,0,0,54,3, 
  /* [21][0][][] */ 6,-58,25,46,17,-16,80,-75,0,-97,8,20,-16,0,-25,34,20,-45,13,-38,-127,-89,3,-4,-19,62,-72,-20,2,11,-18,-16,-33,-74,34,-24,-42,88,54,65,-1,-5,14,-6,-75,55,-65,57,70,6,-30,-60,-2,2,-14,1,37,-13,3,-27,75,-77,-6,-41,-16,-14,-13,33,4,-35,25,-109,-2,44,-2,-51,13,28,20,-85,38,62,-42,-3,14,-39,49,32,98,52,-43,0,30,-26,18,48, 
  /* [22][0][][] */ -46,-42,18,52,-40,-4,55,4,35,60,12,6,1,7,-38,52,50,-13,35,-36,56,-26,-30,-15,42,-73,-16,-14,-45,-52,46,40,102,-16,20,-5,24,24,-17,-9,5,-38,-7,2,-26,-43,-26,46,-31,-8,-33,-127,32,-17,-23,7,8,-25,56,-12,-14,-14,14,-17,-29,55,-11,-43,36,-28,1,19,50,-49,9,32,1,-3,-54,14,38,-13,33,53,-31,32,38,33,-6,30,95,8,-1,24,-3,-36, 
  /* [23][0][][] */ -36,2,11,-93,-11,-3,29,15,-11,-62,60,30,32,-22,-38,-21,-40,-16,-50,-58,49,-27,-26,73,11,44,91,-12,-1,64,53,32,-12,57,19,69,31,18,-53,-61,-6,81,-4,-64,-10,71,3,66,72,18,-53,-4,18,43,76,32,35,2,77,5,-30,-36,-35,35,97,45,42,-127,0,-44,-110,-19,41,53,-14,-32,19,85,37,13,56,60,56,13,-6,18,2,-20,-8,-16,5,-13,7,-75,-29,-29, 
  /* [24][0][][] */ 43,-19,-26,59,-31,56,16,63,-53,-24,-23,-45,41,32,-9,71,6,-33,4,-9,66,-26,-64,-44,-10,-28,67,-20,-16,-107,-3,9,-51,-62,38,-55,-47,-77,27,10,70,-60,15,-30,-32,-5,-42,25,-19,-6,-30,13,48,38,43,43,-19,22,41,80,-114,-73,6,40,24,-53,-127,28,52,30,76,43,1,72,-31,18,-63,-14,71,35,38,20,-58,34,70,122,21,29,-24,-45,36,13,-28,80,-4,-19, 
  /* [25][0][][] */ 83,-1,-78,51,109,12,82,-33,57,29,36,37,-24,-57,3,-62,-5,68,75,66,45,-103,7,53,9,-12,72,-28,-9,-17,-65,-65,-69,4,68,38,10,-24,-32,-27,22,13,34,-76,74,8,-60,-51,-55,-36,-23,39,-22,23,33,9,66,49,-87,28,-23,-50,-21,-45,110,20,58,9,100,103,-10,-127,-9,32,47,11,-43,-8,14,-29,108,-13,51,50,-49,68,6,96,18,44,104,-9,9,21,44,95, 
  /* [26][0][][] */ 3,-47,-36,55,16,-80,-17,1,-1,-42,0,-20,39,51,101,14,51,85,-79,111,101,73,-108,-13,62,-3,-3,27,-10,-64,48,34,-32,-44,9,58,-86,85,28,62,-6,-31,12,-127,75,6,-24,-33,8,52,-28,62,-32,6,-60,-61,8,-69,31,-9,-46,-54,-55,101,22,40,-29,10,36,-85,-10,32,-1,16,70,-29,29,78,34,-2,25,16,16,6,-72,-27,0,47,47,27,76,-47,-36,-19,-50,-66, 
  /* [27][0][][] */ 74,38,-17,15,7,-56,48,70,-17,4,-10,-2,18,10,-44,-17,-47,35,-11,-36,-29,31,-7,-9,-42,127,23,14,16,27,-4,-43,16,83,-1,54,-57,50,-36,15,43,-15,16,-68,51,-21,4,-42,-87,-2,13,13,-20,-35,20,78,-61,-10,47,-37,42,-26,3,23,33,42,31,-8,-50,3,15,85,31,22,-24,10,17,-22,24,-46,-28,9,-43,14,72,88,-26,59,102,22,-31,-7,21,19,8,23, 
  /* [28][0][][] */ -11,83,9,95,-47,11,-6,-11,-29,22,-22,-17,0,-44,34,-17,63,2,-51,-51,10,-108,-60,-20,-4,26,-29,11,17,11,-17,-64,-45,40,30,-68,-127,7,-9,-33,-37,32,52,88,-15,72,-1,9,27,-4,1,-48,14,-43,6,72,35,3,-2,15,-27,31,-39,-13,-1,-18,-8,-68,101,-55,66,2,37,-51,-73,-75,-30,39,6,56,-43,58,10,-18,-11,53,-40,-32,-34,30,-17,0,23,-25,23,-37, 
  /* [29][0][][] */ 8,76,76,-11,34,-84,1,61,51,-119,-12,-9,6,-20,-20,-19,-26,-18,-40,2,-64,44,-10,13,33,12,-9,13,-35,111,59,-29,8,-25,51,-45,-21,17,-20,13,-1,119,-44,-68,-41,-93,18,-80,-1,-127,-4,8,39,57,25,-42,41,-18,-35,17,-20,89,16,-32,22,-19,-45,-10,-45,-96,18,49,37,-23,-40,-42,34,-22,-22,20,60,-27,-26,28,-12,-21,39,22,-24,-8,34,-4,72,-18,-32,58, 
  /* [30][0][][] */ -14,16,-22,5,-6,-19,95,-95,-30,50,47,74,23,25,-23,8,20,44,-29,-53,34,73,27,29,5,21,8,-20,-6,-18,15,5,83,-9,62,-60,68,-6,3,92,21,25,45,119,33,-74,-8,-114,92,43,-85,-86,-43,-7,-21,107,70,47,-56,13,13,-31,-17,-21,12,111,-81,94,-18,-71,-123,28,-13,19,27,-62,-3,11,48,43,2,-12,-5,0,-76,-115,-47,67,-41,127,21,-24,-4,33,8,9, 
  /* [31][0][][] */ -26,76,-30,-8,-8,-17,-24,33,-71,73,11,-18,-19,-17,-15,-14,-15,-23,-33,-13,-41,16,-94,-14,-6,-53,-5,-21,43,15,52,-7,-27,-31,-15,63,24,-56,-19,-78,10,-39,-86,65,10,103,-13,55,17,-70,52,-62,-17,72,-24,-12,16,105,7,-45,94,-67,3,47,2,6,27,46,-49,-41,11,-23,23,-3,-127,59,14,-50,23,3,-1,21,-61,-32,-61,11,11,4,12,46,70,8,21,20,-11,-72, 
};
const TfArray<4, int> tensor_dimension76 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant76_scale = { 32, { 0.010539121925830841, 0.013771876692771912, 0.0083233416080474854, 0.0084237819537520409, 0.011417909525334835, 0.011344511061906815, 0.01130540668964386, 0.0086349043995141983, 0.010249074548482895, 0.010476621799170971, 0.010408087633550167, 0.009723183698952198, 0.010115323588252068, 0.011651773005723953, 0.010125250555574894, 0.015112672001123428, 0.010918381623923779, 0.0079540042206645012, 0.0087000196799635887, 0.012744958512485027, 0.010916405357420444, 0.0088763236999511719, 0.011578214354813099, 0.011319744400680065, 0.0096971262246370316, 0.0087270839139819145, 0.0079364068806171417, 0.011859620921313763, 0.01041119359433651, 0.010287858545780182, 0.0082656322047114372, 0.0094734895974397659, } };
const TfArray<32, int> quant76_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant76 = { (TfLiteFloatArray*)&quant76_scale, (TfLiteIntArray*)&quant76_zero, 0 };
const ALIGN(8) int8_t tensor_data77[1280*1*1*32] = { 
  /* [0][0][][] */ 0,-73,-6,-3,-8,46,-51,10,14,2,86,26,-20,22,61,27,56,-16,22,-58,42,24,127,-38,43,53,-3,37,40,-16,-54,11, 
  /* [1][0][][] */ -6,93,-27,23,77,27,-9,-5,18,37,38,-73,-72,23,15,1,38,7,-69,-4,-63,-127,-8,65,74,-55,40,-48,-35,21,31,15, 
  /* [2][0][][] */ 22,-8,36,-127,19,-33,3,81,3,-59,68,-83,57,-39,-46,105,-60,-1,53,67,-2,18,-1,-48,-27,34,-21,43,70,-18,-81,97, 
  /* [3][0][][] */ -11,-13,113,-51,9,8,51,33,-45,-34,17,-42,37,21,7,-37,25,-23,-62,76,127,71,23,2,25,22,41,-7,-26,-4,5,-101, 
  /* [4][0][][] */ -56,62,127,37,38,34,99,-7,-6,36,-52,16,-4,71,9,-48,103,-2,47,-4,16,4,13,7,11,-12,-5,76,-22,50,-13,-2, 
  /* [5][0][][] */ -1,-34,-50,-117,23,24,-1,61,35,110,-49,-6,-37,-83,-32,51,-29,-26,-20,20,51,63,-35,22,-10,18,125,2,24,-80,95,127, 
  /* [6][0][][] */ -44,-77,12,5,34,38,-90,37,-74,-20,-66,-24,-14,39,-79,-23,38,94,22,127,42,46,27,-69,-45,8,-25,-32,18,37,76,-2, 
  /* [7][0][][] */ 115,-43,87,-81,-91,-27,-96,20,-29,8,43,-69,85,-29,-127,-21,-33,-115,14,67,-50,-45,84,-12,44,43,-74,12,-22,66,15,-26, 
  /* [8][0][][] */ -78,42,-49,-33,-51,14,40,-12,48,-127,88,-60,25,-31,-55,35,-30,-94,-53,44,-13,-108,-54,17,10,42,-68,15,-29,-22,66,68, 
  /* [9][0][][] */ 3,127,-34,-17,24,-1,-39,14,16,-79,7,-71,16,-71,-38,76,39,-27,45,40,37,-25,-58,10,-74,-88,37,0,39,-60,77,-18, 
  /* [10][0][][] */ 14,-30,-9,39,-55,-13,10,21,51,-80,-9,7,69,5,-18,57,49,-63,-113,-16,-3,-127,-8,-47,-17,34,28,43,-22,-51,-11,88, 
  /* [11][0][][] */ -43,57,17,18,-23,3,13,-74,40,127,-21,26,25,8,-56,-27,-4,45,-86,59,-23,-77,-55,-11,55,52,-15,48,3,15,31,-10, 
  /* [12][0][][] */ 17,-84,21,-16,-71,32,55,-1,-23,26,-2,-1,-44,47,24,2,73,-90,-69,-10,127,12,7,13,-33,15,41,-72,73,10,5,-24, 
  /* [13][0][][] */ -10,9,11,-33,60,-34,-7,32,-13,-40,-24,-1,70,-2,-8,-24,2,-87,-76,28,70,-59,-22,-12,127,24,-119,55,-13,18,23,-46, 
  /* [14][0][][] */ -61,-25,62,-34,18,9,-41,-126,64,-7,-71,46,58,37,119,-80,-79,-12,-59,-45,-85,-84,127,-98,25,54,-22,22,49,56,60,36, 
  /* [15][0][][] */ 8,36,-50,-18,-25,-48,-17,-40,-127,49,-37,-13,-67,-36,-17,60,-3,62,99,26,51,13,-37,-60,8,-5,5,10,-13,-6,-10,1, 
  /* [16][0][][] */ -77,-17,-60,-64,-33,-105,-40,81,-57,7,5,9,16,-7,-6,-65,-74,-55,67,-33,-50,62,-76,-5,-32,0,-127,33,8,78,-59,-10, 
  /* [17][0][][] */ -23,44,20,10,34,-40,57,127,47,-23,18,17,-40,50,-19,-76,-23,-70,-4,-70,72,23,-14,23,15,34,38,31,-1,39,60,-10, 
  /* [18][0][][] */ 38,100,-10,63,3,10,24,13,-41,-4,30,44,27,-32,47,-12,17,33,-29,43,23,-85,27,-10,34,-4,36,33,24,-43,-25,127, 
  /* [19][0][][] */ -9,-29,9,-17,34,-19,-48,-3,-22,13,19,37,40,-9,-77,43,-20,-28,-42,25,-34,-127,9,-104,-19,-69,75,-3,10,-12,-7,-71, 
  /* [20][0][][] */ -127,72,-35,-126,35,55,-51,122,-15,34,-43,24,-17,-86,-76,90,7,-121,-38,-18,-40,-18,-71,-47,-26,-58,-14,-5,-46,66,42,35, 
  /* [21][0][][] */ 55,-5,7,-11,79,44,111,-125,55,-40,-36,-4,41,26,24,59,15,-70,13,24,32,-23,48,54,12,-29,-99,127,-2,-51,-19,-38, 
  /* [22][0][][] */ 28,-11,53,18,-14,29,2,17,-26,10,19,-39,-29,33,14,-21,-59,127,-99,-63,-12,40,11,5,31,23,25,60,-57,56,39,15, 
  /* [23][0][][] */ 73,63,63,19,121,16,-101,13,-37,-28,80,116,-14,-13,54,-48,37,-19,-24,54,53,-8,127,-6,-79,-40,-5,-13,39,-37,-43,32, 
  /* [24][0][][] */ 5,69,-127,-91,-54,-45,95,-60,-53,26,-59,27,-22,-38,-99,-60,-54,-60,-40,-29,65,65,-35,-23,69,-8,-42,-11,35,12,-9,-49, 
  /* [25][0][][] */ 14,-5,-22,116,61,-40,48,38,22,13,-127,19,72,-45,-4,24,-52,-13,100,41,-7,-45,-2,16,-37,13,67,23,-1,22,-69,-41, 
  /* [26][0][][] */ 43,-72,2,10,26,-5,-75,29,48,-126,87,-54,50,-4,10,105,57,-43,53,34,75,-120,-54,54,24,-14,-5,-80,-127,-25,41,42, 
  /* [27][0][][] */ -93,-53,15,-127,-34,-90,30,-3,-55,-24,32,-17,-24,-43,-26,-20,66,21,35,-53,-14,-110,-80,-26,15,54,-19,-13,-29,-112,-24,85, 
  /* [28][0][][] */ -41,71,6,-34,-20,-15,-60,28,-64,25,1,-22,-20,-38,-7,-1,-29,-38,-81,-37,79,127,108,24,-67,39,-44,50,8,-24,-7,-1, 
  /* [29][0][][] */ -99,7,77,-20,96,-1,-60,71,13,-54,-99,-60,10,20,55,-47,-46,-40,59,-60,-7,-127,39,-10,-99,24,7,-72,84,49,70,-32, 
  /* [30][0][][] */ 1,44,41,2,-88,13,34,-24,127,34,17,80,2,13,20,-44,-25,14,-41,-5,6,19,108,20,0,-5,-14,-18,21,-56,-17,-46, 
  /* [31][0][][] */ -9,4,55,-90,45,-12,9,-38,94,-41,-7,51,-11,63,76,67,-33,38,-12,18,-82,122,38,19,-127,-44,0,27,32,-17,-15,-34, 
  /* [32][0][][] */ 121,50,91,-30,-35,13,75,116,27,126,69,79,77,-93,17,-89,-23,-41,-59,-53,42,-109,-39,21,59,26,42,45,-127,0,-127,15, 
  /* [33][0][][] */ 41,-40,-31,13,-17,14,-33,15,-55,43,-15,45,8,23,-106,1,36,-32,15,4,-46,35,21,65,-96,35,5,16,24,127,42,-65, 
  /* [34][0][][] */ 26,127,13,7,-90,9,-28,-94,-28,67,64,70,28,20,46,-13,-103,62,104,8,-57,25,-30,27,68,-38,-103,-22,7,-70,33,-48, 
  /* [35][0][][] */ -60,70,-30,-40,-28,-93,-56,0,-13,-14,95,-127,-111,-53,61,124,0,-2,0,-15,45,42,53,32,49,-7,51,-10,10,-80,33,74, 
  /* [36][0][][] */ -75,30,27,60,-11,-74,1,25,25,-57,-23,44,-25,-12,-127,-8,97,50,-48,66,28,-21,30,20,-28,80,10,36,49,-22,15,30, 
  /* [37][0][][] */ 77,-41,-35,8,-47,75,-73,15,16,-32,-33,20,73,-29,-47,120,13,51,116,-77,-127,75,35,-6,30,20,67,-72,71,-22,103,-43, 
  /* [38][0][][] */ 35,47,-127,-27,-12,-12,18,15,18,1,-14,5,47,-80,-27,-54,16,10,5,11,-45,23,-32,-39,-16,-15,-16,-12,87,-5,42,-24, 
  /* [39][0][][] */ 38,-85,-58,-40,-54,6,-83,5,-22,8,73,44,8,80,25,126,52,-45,11,71,-7,13,-45,-23,-18,-77,-60,19,28,-120,123,127, 
  /* [40][0][][] */ -14,34,-60,-1,58,-6,127,55,-49,25,29,-10,4,-96,-15,2,43,32,-1,-24,-16,24,57,26,28,-20,37,-18,24,22,10,21, 
  /* [41][0][][] */ 29,22,116,56,-34,-45,-22,-6,-64,-95,-20,43,84,-73,-28,-13,-18,71,35,58,37,-53,-52,30,40,84,-81,-127,55,97,-51,-42, 
  /* [42][0][][] */ -23,127,43,44,8,-38,41,49,49,21,26,22,-96,-85,-9,17,-18,64,-17,39,-63,-17,39,70,-49,-17,38,36,76,-42,-10,20, 
  /* [43][0][][] */ 2,69,-37,-59,14,31,4,-65,3,16,-28,-51,-26,-74,-7,-13,59,3,-10,-65,89,-127,-15,-20,69,-24,-65,61,41,13,63,74, 
  /* [44][0][][] */ -76,-35,62,6,-102,-25,-11,44,118,-22,45,-59,65,72,-113,3,15,3,-9,-1,83,-7,-3,-11,-5,-57,-21,-26,10,99,37,-127, 
  /* [45][0][][] */ -41,76,-111,0,17,65,30,-13,-27,-39,-41,11,61,-57,13,-17,12,1,8,36,63,-59,60,127,3,-60,-30,74,21,-60,8,-38, 
  /* [46][0][][] */ -113,-25,-64,2,-12,-29,20,-14,-22,42,-42,41,-38,92,-29,-2,32,-84,-46,127,-34,53,24,-18,-38,-44,60,-7,-74,64,2,-76, 
  /* [47][0][][] */ -34,-40,-59,21,38,-50,9,37,31,123,-29,16,-82,-10,-53,-104,5,-89,-80,-90,-8,46,-20,71,29,-58,28,-17,-96,54,127,-64, 
  /* [48][0][][] */ 39,-57,-90,-127,36,-55,-10,58,6,97,20,-40,-94,-81,85,-90,43,-83,-57,-51,-11,21,79,-38,-21,-13,10,-1,16,30,-1,22, 
  /* [49][0][][] */ 89,21,26,127,27,21,-93,-54,-73,102,7,-61,-120,-3,115,88,-18,-37,-58,-19,39,73,-90,36,-50,-88,-65,2,32,-34,37,65, 
  /* [50][0][][] */ -5,-27,-12,5,-56,-40,52,5,98,44,28,34,40,49,41,24,16,1,66,13,-60,67,16,23,39,-21,-22,39,127,-57,-45,7, 
  /* [51][0][][] */ -19,16,26,-13,-18,32,104,-20,-17,19,30,0,-44,-4,-37,85,-4,-62,87,-25,1,87,-127,54,-3,93,22,-6,0,20,-60,86, 
  /* [52][0][][] */ -14,-25,109,76,-3,-24,3,12,22,12,-55,105,11,-8,59,-2,61,-98,46,68,45,25,60,-28,-8,-15,-32,89,36,-25,27,127, 
  /* [53][0][][] */ -38,71,47,-83,-67,-35,8,51,20,108,52,65,24,59,127,4,-58,-36,-68,-38,-16,-68,62,-6,-29,-67,9,91,-43,-26,-71,-31, 
  /* [54][0][][] */ -47,100,-29,-15,-69,24,61,67,-94,-58,-38,30,-111,19,-97,29,51,-8,75,-22,-22,11,-38,19,-21,-28,-81,-43,127,17,3,7, 
  /* [55][0][][] */ 85,-46,-14,-33,12,18,0,-12,-85,-8,-18,-51,5,-16,76,26,20,13,3,-44,-8,1,7,-63,-2,-22,-58,127,9,5,31,4, 
  /* [56][0][][] */ 20,-49,-11,62,-47,92,-5,84,24,-1,-127,-63,120,40,-4,-46,-38,7,-37,67,9,-18,-11,-9,-33,-3,98,-78,-23,-32,-77,107, 
  /* [57][0][][] */ 127,43,-39,72,46,-33,-32,44,68,75,76,27,17,33,-58,-84,71,-25,68,15,-28,95,-31,-8,-44,-7,-16,106,-18,-23,26,11, 
  /* [58][0][][] */ 36,127,18,-37,-41,-14,50,-28,-22,-23,-63,-5,4,41,-11,3,24,-35,6,70,-18,18,3,-23,40,19,2,7,60,21,-75,-42, 
  /* [59][0][][] */ -86,0,-11,46,-24,117,8,48,-105,-84,-12,39,-77,52,32,-6,-13,-127,-62,5,83,57,2,37,-19,60,8,-6,0,45,38,16, 
  /* [60][0][][] */ -44,-49,37,-3,41,43,0,-57,-80,-31,73,-127,2,-21,-88,-43,78,-27,64,-79,35,-16,-71,-6,63,-17,-125,-7,64,-58,95,-60, 
  /* [61][0][][] */ 46,-39,-55,-43,27,72,-13,-16,-127,-24,124,-47,65,92,18,-28,84,-79,84,-107,85,37,34,40,102,-47,42,-59,14,20,9,-113, 
  /* [62][0][][] */ -72,-32,-44,17,23,-59,34,77,-50,41,-39,33,23,-5,2,-122,-88,-68,37,-42,77,-22,-9,-23,-16,-70,-95,24,41,-127,3,-29, 
  /* [63][0][][] */ -21,-24,-84,-127,17,2,24,-67,-39,66,47,44,83,-32,-49,-96,84,-110,-67,22,-49,10,-45,-53,37,117,43,19,44,35,-45,83, 
  /* [64][0][][] */ -50,69,96,24,43,60,46,16,-25,-70,-54,54,-52,-39,-2,-97,27,16,-56,21,76,109,43,58,13,0,-11,37,-57,9,127,-1, 
  /* [65][0][][] */ -52,-43,127,38,-56,-12,-88,-1,-25,23,30,48,-5,-12,39,-16,-6,31,49,83,-60,-16,8,-31,-46,10,-12,-62,-67,26,15,47, 
  /* [66][0][][] */ -30,-110,-94,-46,-65,-79,71,5,31,127,117,-57,48,-21,40,35,-22,97,-51,-31,63,39,22,56,4,-10,-63,-62,-39,24,22,18, 
  /* [67][0][][] */ -26,98,84,-82,85,17,-127,-53,127,-21,-115,100,-29,-7,-50,-48,-105,-1,-38,-90,20,-18,12,48,32,-100,-32,-100,9,65,59,60, 
  /* [68][0][][] */ 18,-32,40,76,30,-14,5,-78,-6,30,5,-5,-53,-71,55,-32,16,31,-19,64,-16,16,37,-38,127,11,9,-41,-13,-22,-11,41, 
  /* [69][0][][] */ -39,-11,-31,0,14,-21,-34,-45,64,-3,-44,-21,-54,22,-2,27,-34,39,6,40,-17,-28,-40,41,-1,-34,14,25,-49,-14,21,-127, 
  /* [70][0][][] */ 26,92,-6,20,53,45,-27,-42,-18,-47,-76,2,11,-82,47,15,-109,9,31,-27,-7,7,-71,-127,51,82,-35,21,52,-43,-15,-81, 
  /* [71][0][][] */ 28,-73,37,62,-3,40,-21,56,-22,50,97,-9,80,-32,39,-38,13,-13,-127,-24,-33,-5,14,7,-10,50,100,14,-11,43,41,36, 
  /* [72][0][][] */ 49,-16,69,-34,38,17,-27,11,-21,-28,16,1,-38,-64,-47,-27,81,83,-42,-10,-49,-31,-52,-35,30,72,-55,-15,38,1,127,104, 
  /* [73][0][][] */ -26,47,-89,-127,24,33,76,-74,24,59,-22,63,38,-54,-79,-51,-44,59,-90,-26,59,-38,-37,10,-111,86,-61,85,6,41,74,104, 
  /* [74][0][][] */ 90,47,-10,48,42,71,-68,-60,12,-20,27,-18,39,2,6,29,74,-45,-17,127,-39,-28,-13,-30,63,-52,-61,1,-32,37,-40,28, 
  /* [75][0][][] */ -2,-70,19,-26,-12,-52,82,127,43,-62,50,7,8,14,-32,44,67,9,-25,-2,-16,53,-118,62,55,17,-24,93,5,-27,-37,-27, 
  /* [76][0][][] */ 31,85,73,-20,84,-41,-66,-96,123,110,107,-74,48,-102,-16,-15,-95,116,-41,124,28,29,25,43,24,-66,5,-3,-53,20,-127,93, 
  /* [77][0][][] */ -78,-14,35,-6,39,24,80,-20,13,-10,32,6,-73,-24,-61,31,36,9,-127,-23,16,-22,-61,-29,-8,27,-22,10,60,32,21,-23, 
  /* [78][0][][] */ -90,-31,12,54,18,71,-63,58,-67,15,16,-27,-10,-96,23,-8,-62,127,-14,19,58,-33,11,5,-36,-69,-52,19,-67,6,3,18, 
  /* [79][0][][] */ 47,-127,101,56,-24,22,32,26,-9,83,85,54,-19,-119,-49,-45,-53,-55,-24,-16,73,98,-40,-68,-4,-68,-121,96,-23,27,118,70, 
  /* [80][0][][] */ -59,-92,105,31,37,-122,-89,46,94,-67,54,75,88,-110,127,78,111,-114,11,100,55,-58,-71,29,-52,26,-59,-54,-53,-87,-8,36, 
  /* [81][0][][] */ -10,-8,-31,-5,-20,12,-27,20,25,-59,-76,-84,111,18,-127,56,-36,-25,-8,-45,-41,-10,-40,-75,-83,17,-22,23,26,29,-48,-4, 
  /* [82][0][][] */ -10,-77,-6,-51,87,59,4,79,-127,29,9,5,-7,20,56,-121,3,74,12,-54,48,74,17,-27,19,30,-85,19,-33,106,-26,-42, 
  /* [83][0][][] */ 32,69,0,-22,-1,39,-36,26,-36,-49,12,-74,30,84,-13,1,65,2,-13,42,-54,4,-26,-63,10,-51,-13,-59,-9,-47,-3,-127, 
  /* [84][0][][] */ -9,-25,25,22,-2,70,-64,-42,0,20,-20,19,18,-18,71,-38,52,-127,16,16,-29,58,-39,24,-9,-40,-13,44,90,-45,-36,57, 
  /* [85][0][][] */ -63,127,10,38,-46,-8,-117,0,1,25,12,-49,9,22,-1,53,38,-69,47,-88,21,27,44,-50,100,2,-103,-18,-23,17,-71,0, 
  /* [86][0][][] */ 127,31,126,-46,32,-3,-20,-51,49,74,-62,40,-62,1,1,51,56,-14,-30,-11,7,53,5,46,24,116,37,63,42,-30,-59,47, 
  /* [87][0][][] */ -40,-10,18,2,-9,-32,-6,-8,7,-6,-36,-13,-4,127,34,3,6,-29,-54,76,42,-85,-46,53,9,-48,-78,72,-28,-4,63,8, 
  /* [88][0][][] */ -14,5,-57,50,-4,-63,-52,-65,14,5,-14,-75,-27,-65,-11,-27,-101,61,2,76,10,35,-2,-32,70,-24,-33,-33,-3,-64,127,-44, 
  /* [89][0][][] */ 21,-23,-1,21,26,-37,53,-15,-107,-33,-81,3,-55,60,-60,1,-47,-13,-22,73,39,-49,-127,-41,53,-36,1,-7,6,-58,-92,73, 
  /* [90][0][][] */ -52,71,9,15,-33,-105,-90,108,-66,25,28,-5,62,-60,0,-108,-17,-32,-34,127,2,-60,-32,-50,-10,-42,78,13,28,-29,-18,-30, 
  /* [91][0][][] */ 9,114,76,30,-5,37,-47,40,45,0,-51,-122,-22,-58,-7,-30,-30,-127,51,20,16,-17,-36,-40,29,-93,15,-25,24,-27,-59,-49, 
  /* [92][0][][] */ -79,-1,-127,-39,13,-15,68,20,-30,-5,-32,-37,53,-122,13,-19,-8,-49,-100,110,-125,-16,-87,2,-57,-13,-27,-46,5,30,-86,82, 
  /* [93][0][][] */ -92,57,-54,-57,8,-12,-127,55,106,60,87,-31,-68,7,7,-70,-42,8,-5,2,-73,73,-22,13,36,14,125,-32,-53,29,-11,-38, 
  /* [94][0][][] */ -12,-86,-50,-2,30,-32,32,-51,-74,34,7,22,-8,-48,5,7,40,-5,31,10,127,-25,-29,51,-25,-72,58,-31,34,-1,-18,11, 
  /* [95][0][][] */ 49,91,39,22,-66,57,46,-44,-43,-48,-10,1,13,27,67,-127,81,-18,3,-67,8,26,-46,48,-73,-14,13,-94,59,7,-112,27, 
  /* [96][0][][] */ 94,-37,10,-42,-89,-27,40,122,127,-65,119,6,84,25,-33,-100,-10,2,-28,31,-46,-89,127,15,65,18,50,58,76,-2,-86,-69, 
  /* [97][0][][] */ 32,40,51,0,34,-76,-18,-127,73,74,22,-7,-74,22,83,12,-15,-56,-31,62,19,-31,-31,-19,11,-58,-45,17,-33,110,-69,-26, 
  /* [98][0][][] */ -55,-4,-1,11,-42,24,5,56,-17,14,17,-10,29,-41,6,26,-2,75,47,-29,-26,-60,5,-63,26,10,-127,20,-18,23,16,29, 
  /* [99][0][][] */ -14,26,75,-34,6,-8,-39,-34,-127,27,-3,-41,-29,-19,21,-21,-5,31,-82,-5,-94,36,8,56,-17,84,74,-36,10,50,-32,-7, 
  /* [100][0][][] */ -45,-76,25,-56,7,-24,54,-27,74,14,6,-12,-50,-61,-127,-58,62,-71,33,31,46,34,10,72,-80,10,-20,2,-81,-7,-42,71, 
  /* [101][0][][] */ 15,20,-25,-7,8,86,2,8,-11,-30,127,33,53,-24,-2,87,-14,-17,73,-7,-44,78,-15,52,-9,0,13,-1,57,26,73,64, 
  /* [102][0][][] */ 73,-83,43,-22,-26,54,10,18,49,3,48,-119,57,-51,-26,3,16,-18,14,112,50,24,-59,-9,33,16,-29,-127,26,-110,103,10, 
  /* [103][0][][] */ -52,28,-25,44,43,-79,-75,127,67,-76,-41,-104,43,10,-106,-55,27,76,38,-47,-19,-19,40,11,-79,-48,87,32,-12,-21,-13,-44, 
  /* [104][0][][] */ 15,40,-127,10,-16,-38,-28,114,-44,67,48,-11,-35,-22,66,-24,-57,40,34,-51,-5,-26,-43,-111,-4,-35,79,15,-38,20,-52,9, 
  /* [105][0][][] */ -18,42,-50,-119,-37,2,12,-40,20,11,-42,-28,126,31,-32,-91,2,-28,49,-31,-12,36,-66,-10,-37,-47,0,6,45,127,-44,-29, 
  /* [106][0][][] */ 66,-78,-35,-38,9,-57,40,-12,-27,30,-21,-3,5,4,-8,-37,4,51,127,66,18,115,-15,65,-8,29,19,46,-70,-95,-39,80, 
  /* [107][0][][] */ -18,67,-31,37,-31,-8,17,26,-11,0,-63,-25,52,-127,-77,-53,-25,39,8,61,8,30,-86,25,29,22,-32,-4,-88,91,-40,-33, 
  /* [108][0][][] */ 24,-40,109,-79,98,2,2,-58,2,-3,-19,47,8,111,-127,112,91,-16,52,-88,-83,67,64,98,102,-9,-40,-14,-24,-75,-73,-30, 
  /* [109][0][][] */ 4,-57,62,-127,77,-27,48,-13,11,19,36,28,54,-34,-53,34,42,-50,-41,-18,-8,-45,60,-31,12,-85,-18,-4,43,-55,-3,10, 
  /* [110][0][][] */ -62,106,-27,38,-32,74,-52,-73,100,70,62,79,-71,50,49,-10,24,64,29,58,-57,90,-33,-97,-21,78,38,-49,115,25,-12,127, 
  /* [111][0][][] */ 48,49,-90,82,7,-82,-61,-42,-88,127,100,-44,63,-76,20,26,-34,-39,75,-47,-90,-7,-35,-91,20,-36,63,-31,39,-24,52,24, 
  /* [112][0][][] */ -73,23,-25,109,102,-77,-51,-22,-90,25,65,-88,8,-80,-47,19,120,-127,-9,-76,-53,-88,-11,-98,9,64,6,-10,87,69,27,-76, 
  /* [113][0][][] */ 117,-3,75,-26,-37,68,-51,11,-127,5,-59,-56,-15,-41,-25,-79,1,-67,-1,27,-24,-18,11,-2,-28,-33,-58,-43,-10,19,-6,-11, 
  /* [114][0][][] */ -96,-49,7,88,-35,-87,-37,6,54,65,110,1,-127,11,-9,26,-16,-35,-71,102,64,16,-8,-104,15,-124,-73,34,-91,9,-48,-14, 
  /* [115][0][][] */ -8,-51,19,-38,8,26,-3,-11,-45,-6,-22,-21,-1,48,17,-92,18,-31,-55,-24,-14,43,-18,-114,11,35,1,-22,32,42,-14,-127, 
  /* [116][0][][] */ 44,6,-7,4,-126,-1,-59,41,73,69,-40,-25,69,9,-35,-11,-62,-12,-62,-70,16,-6,73,-37,-78,5,-27,-18,-11,-22,-64,-127, 
  /* [117][0][][] */ -26,-45,-27,27,-99,-26,-18,-8,10,-21,25,-23,25,-22,13,-95,20,127,56,-69,51,-2,-61,0,-32,-26,-19,-10,-34,-4,94,98, 
  /* [118][0][][] */ 39,-35,3,-46,87,-66,24,-49,28,-74,32,15,-14,48,30,37,127,-1,-46,-48,31,-25,-77,-3,-71,-16,34,-27,6,-41,21,44, 
  /* [119][0][][] */ -127,-48,-24,36,-83,8,-55,89,-11,35,-51,20,23,-114,-20,-29,-20,-48,32,20,17,36,-27,32,4,-54,-15,60,53,-99,73,54, 
  /* [120][0][][] */ -37,88,-52,28,-14,-53,-40,28,29,-53,32,-46,44,19,45,-36,62,38,-89,27,-20,-38,-79,-91,9,-60,54,-127,1,4,44,53, 
  /* [121][0][][] */ 40,44,107,-59,-81,22,-9,-67,24,14,-33,-127,-15,31,9,-23,49,103,6,45,16,-10,-33,-12,8,-9,-63,-41,40,40,65,30, 
  /* [122][0][][] */ -93,-14,83,-41,-23,70,13,33,29,-54,71,-4,27,3,63,34,11,1,-72,127,18,106,116,-22,-127,19,104,86,-7,35,-1,-2, 
  /* [123][0][][] */ 43,87,-127,25,2,12,-3,-42,-38,-73,18,-47,50,-31,43,-54,-43,-6,-12,-25,-53,-75,-9,46,-31,-30,-34,-7,31,-24,-46,24, 
  /* [124][0][][] */ 1,-33,-127,-68,-20,-46,-43,95,-76,73,102,-24,-3,-70,-10,-42,23,-34,-30,20,-13,-39,-88,-49,-49,-60,-6,14,24,-35,36,-19, 
  /* [125][0][][] */ 26,-59,-21,-52,12,42,64,52,13,37,-6,69,-17,15,37,19,-1,30,23,34,69,69,-17,-9,68,-2,45,13,-35,-40,127,-12, 
  /* [126][0][][] */ -30,-49,26,-10,26,-10,-64,117,12,-127,-46,-21,37,21,-86,-36,2,6,-73,29,-11,-30,-10,-16,3,14,-86,7,-83,28,13,-12, 
  /* [127][0][][] */ 3,46,-80,20,117,31,-41,43,127,-84,-53,-6,39,-16,73,-107,-69,-51,66,9,107,-6,12,-26,-63,-1,-14,-13,88,33,120,66, 
  /* [128][0][][] */ 79,73,42,-73,-35,2,3,88,10,127,-27,-84,23,26,-45,-42,-63,65,7,1,31,-9,-17,-19,-23,40,20,106,-12,-3,20,-19, 
  /* [129][0][][] */ 51,0,54,39,-44,27,11,16,29,-58,-2,42,76,49,91,3,-6,75,-61,-22,-17,56,-57,72,-34,6,-66,-53,127,58,-66,-4, 
  /* [130][0][][] */ 28,2,-4,-11,-30,-84,-3,16,25,80,93,26,-63,-50,-6,-46,54,-29,-20,-13,23,13,35,-44,-5,24,-1,61,127,-109,35,21, 
  /* [131][0][][] */ -99,-25,-41,37,58,8,32,-23,-12,6,19,30,-78,21,-18,-127,-4,72,36,16,-10,-77,25,3,44,26,5,19,11,40,-8,-20, 
  /* [132][0][][] */ 46,19,-39,-69,-24,98,55,-2,-54,38,57,-75,31,-39,31,-43,100,-74,-34,21,-14,-38,-26,-55,-60,-11,-33,23,-127,15,47,-49, 
  /* [133][0][][] */ -23,63,90,24,69,-93,-7,-11,-64,-127,78,-60,-48,-23,-39,118,-1,23,5,38,50,-33,-104,34,26,-21,40,17,2,-23,11,45, 
  /* [134][0][][] */ -72,83,-62,70,66,3,47,16,30,71,-17,-26,-52,-56,14,90,-72,-11,0,-78,-88,17,-64,-6,-90,-63,127,-9,-49,-57,34,-56, 
  /* [135][0][][] */ -45,-105,-21,-27,-5,-12,98,75,4,-37,-37,-81,-19,-52,58,-50,-52,-119,45,-13,-94,26,-32,-29,88,127,68,37,-41,-7,-14,-82, 
  /* [136][0][][] */ -34,50,-49,101,-27,42,-31,2,-103,8,-15,-38,32,-9,21,-56,-61,-79,5,66,10,-10,-42,58,-97,0,-67,56,-34,-36,33,-127, 
  /* [137][0][][] */ -42,27,-86,5,-39,-6,7,22,-42,-18,-13,-51,-51,71,0,3,-17,32,37,-127,-39,90,10,-60,-63,-27,59,-22,91,-25,-1,17, 
  /* [138][0][][] */ -20,51,-79,29,12,-8,-19,-21,4,14,-5,35,-30,18,65,-33,-89,27,1,41,-59,-19,20,46,-19,-33,34,31,-16,22,-127,-48, 
  /* [139][0][][] */ -127,-89,-72,67,12,-13,-34,-96,-75,18,35,29,2,-93,13,29,20,0,23,-68,17,47,36,76,-14,53,29,-58,-92,121,0,5, 
  /* [140][0][][] */ -43,-36,-32,-2,-19,-51,10,-13,108,-4,-12,-43,-29,21,28,46,-6,21,1,-14,33,-49,-21,20,30,-7,25,-4,91,-32,127,-41, 
  /* [141][0][][] */ -101,127,-2,-89,-11,-25,-60,-98,83,-47,84,51,-19,-98,-30,10,-28,-73,-69,62,-81,68,-19,4,-40,-102,-22,23,-42,70,-9,-6, 
  /* [142][0][][] */ -107,-11,57,-1,-82,-2,28,99,65,6,-3,-5,-28,-29,81,78,3,-118,-52,-5,9,-13,-127,-82,61,27,2,69,101,19,83,-50, 
  /* [143][0][][] */ 20,70,-56,-18,-41,73,-29,-8,-22,127,65,21,-41,-102,-99,74,-29,-91,-116,-123,-73,-95,-43,125,64,116,-86,-15,91,-55,-51,15, 
  /* [144][0][][] */ 18,-12,-44,103,-93,-17,28,127,-22,18,-58,-9,-94,-16,-38,31,58,-54,-2,31,110,-61,30,-69,-15,8,64,20,-83,-11,17,5, 
  /* [145][0][][] */ -95,78,-37,-13,-58,-27,-18,-2,-25,-6,-10,-28,127,27,-6,31,2,58,-17,-21,43,-76,68,-55,18,-22,3,-6,47,16,10,32, 
  /* [146][0][][] */ -1,-24,-82,-26,65,-127,19,43,-16,24,-2,32,-104,-6,-29,102,-60,-64,66,2,-15,-48,-69,-1,38,56,20,-58,9,-48,-15,-85, 
  /* [147][0][][] */ -4,11,7,-118,-44,60,-76,74,-32,51,-15,-43,-70,2,-2,67,20,-50,13,39,33,60,23,-127,-64,-52,61,-44,51,-3,75,-29, 
  /* [148][0][][] */ -57,-3,13,-41,-33,-91,68,69,-66,-16,-14,19,-27,-7,14,-98,45,-49,-36,-43,-27,56,54,-26,7,-11,21,-2,1,1,-127,12, 
  /* [149][0][][] */ 4,-63,-37,-42,-8,7,-8,-40,-64,12,12,82,54,-47,-5,-72,-24,29,29,-25,47,-1,7,50,-127,0,-11,49,4,-108,79,65, 
  /* [150][0][][] */ -24,23,74,127,-24,38,-82,-31,53,52,-4,3,-19,-19,-21,40,-66,21,-40,-69,-75,-14,57,-107,-114,-26,13,90,113,0,26,-97, 
  /* [151][0][][] */ 66,-67,-127,87,-65,-39,25,-2,-34,36,35,73,-32,-17,56,25,-12,-42,-33,37,14,-87,-56,2,-5,4,41,50,-30,48,54,29, 
  /* [152][0][][] */ 0,31,35,2,0,38,52,-41,22,-47,-26,3,-6,35,23,21,-16,-15,-41,-2,53,-4,19,127,-4,-22,-15,21,-31,-13,-1,-10, 
  /* [153][0][][] */ -22,-74,16,15,-11,-32,62,127,0,-25,-42,69,-56,-5,-14,127,43,19,20,79,76,30,8,49,-59,-49,-20,-8,-8,127,7,41, 
  /* [154][0][][] */ -66,48,-19,57,-49,-38,11,-76,-38,20,-10,23,-47,13,50,41,-30,25,-50,-61,-26,97,127,35,-29,-83,31,-106,86,55,-15,18, 
  /* [155][0][][] */ 49,127,-118,17,69,-33,17,-71,-20,72,-28,-49,11,-18,-18,-29,47,-12,-51,-6,76,-17,69,-72,14,-65,-3,-27,-88,-67,33,25, 
  /* [156][0][][] */ 92,71,-29,-7,77,49,10,72,66,-4,-12,-32,-18,-17,11,37,-26,50,-22,-68,8,23,-49,-39,26,-18,127,4,-39,-17,65,15, 
  /* [157][0][][] */ -40,-25,42,-37,-64,-16,-24,127,-80,-36,-12,-29,7,5,-22,62,-58,63,-39,33,-28,65,-26,-68,-36,41,17,-23,-63,111,15,63, 
  /* [158][0][][] */ -94,-18,52,-9,28,-6,25,82,10,-50,-11,-5,25,7,84,5,-82,-51,-52,42,-43,-10,-127,40,-71,-58,-22,11,-65,20,40,62, 
  /* [159][0][][] */ 32,9,45,-9,25,61,61,-5,-11,-79,57,-2,127,-52,42,-19,-7,-6,-58,-39,9,8,67,-78,-27,11,-99,-35,12,32,-13,54, 
  /* [160][0][][] */ -127,36,17,-26,-69,-22,-30,51,99,-14,40,33,47,-24,46,-54,17,-28,-52,12,8,36,47,-35,86,38,-72,54,-1,-41,46,7, 
  /* [161][0][][] */ 10,31,5,24,-14,66,45,-49,-60,7,-127,13,-32,69,29,23,25,53,-69,31,110,2,61,-55,39,4,-101,-52,26,14,10,-41, 
  /* [162][0][][] */ -4,34,11,-36,-3,41,18,-96,-100,7,9,50,69,20,55,-89,-39,-8,127,28,8,15,-11,7,112,62,-59,62,69,78,53,33, 
  /* [163][0][][] */ -37,-26,-15,19,-34,-53,67,-6,46,-27,25,-41,54,-32,32,11,-1,-43,-63,44,74,99,-42,67,0,32,-127,-19,-27,-59,-35,63, 
  /* [164][0][][] */ -66,-6,3,-23,72,-86,-10,-66,-13,-57,45,37,-34,-52,6,13,-4,-26,-66,106,-127,76,11,-7,44,77,21,-74,-29,0,80,46, 
  /* [165][0][][] */ 72,127,-31,39,113,-26,-25,67,10,20,12,25,22,-24,-39,-80,-30,-6,2,-12,24,73,60,-89,-68,32,-53,-77,-109,-10,-60,11, 
  /* [166][0][][] */ -68,8,-12,24,38,12,-55,-35,38,13,70,24,3,44,-33,-34,20,-15,-32,45,-33,-37,31,-51,-54,50,-127,27,34,-69,-5,37, 
  /* [167][0][][] */ 18,34,-14,62,-2,117,-19,52,-21,-11,-4,14,20,-11,-70,16,-65,-10,-27,-44,127,-4,4,52,36,96,95,19,44,0,-26,-55, 
  /* [168][0][][] */ -27,23,-28,87,81,-49,-45,-80,49,-52,88,127,44,60,94,-6,-17,-53,-6,-24,-6,-75,-69,33,40,-56,-47,15,-25,66,58,-117, 
  /* [169][0][][] */ -56,-57,24,-7,2,33,-127,34,-39,38,59,-26,-12,-9,51,-32,40,-62,10,72,20,-4,7,-43,-96,58,25,41,-56,79,20,0, 
  /* [170][0][][] */ -52,76,20,114,-79,3,-50,-6,116,-52,-71,-92,-30,15,-35,-13,-102,64,-22,-14,98,15,-127,-6,-56,57,34,-24,26,-52,-114,-23, 
  /* [171][0][][] */ 8,-1,-14,-60,7,-5,5,-32,-113,-47,70,44,5,7,-9,-47,8,-46,33,14,14,-12,3,39,-33,8,-127,-38,-34,-84,-7,-51, 
  /* [172][0][][] */ -10,-24,-53,80,-7,26,65,44,15,1,43,-36,-66,9,-3,-19,-78,-18,21,-61,-39,-27,-34,-2,-24,65,-127,-38,-41,-7,89,-23, 
  /* [173][0][][] */ -59,18,-16,-34,24,13,-58,-26,-5,-1,11,-7,14,40,16,127,-33,-11,-6,36,-60,35,40,-44,-29,-31,-5,28,-25,-35,79,10, 
  /* [174][0][][] */ 26,26,14,-18,-13,-34,7,-34,-117,-12,6,-3,-98,-16,-58,34,23,1,25,-66,71,127,15,12,38,-62,19,0,23,22,51,-20, 
  /* [175][0][][] */ -22,-127,-22,28,-99,15,21,10,-36,22,34,46,-27,-10,-52,-8,-33,57,-52,0,74,-34,22,75,-27,31,-21,91,-39,-15,-49,-15, 
  /* [176][0][][] */ -14,38,53,-13,-55,-1,44,-8,-32,-26,-22,-42,28,40,-4,17,8,-62,-34,40,-2,-87,-54,-8,-73,-19,22,-29,-7,2,-127,121, 
  /* [177][0][][] */ -15,-38,-11,-7,70,24,-19,40,74,42,15,32,-67,-90,-17,121,5,33,123,86,-6,-42,-16,96,-72,46,127,83,-38,1,22,-12, 
  /* [178][0][][] */ 32,20,-30,90,-89,-38,44,127,79,-35,38,45,78,52,12,-70,27,-12,-7,-7,51,-3,-18,51,-28,53,35,-69,21,-13,-75,-75, 
  /* [179][0][][] */ 42,-8,9,81,-78,-123,49,-2,-33,-24,-69,-23,-48,-15,-24,-77,-14,-38,-127,85,-24,73,45,58,98,-31,0,-60,-71,-14,-10,-42, 
  /* [180][0][][] */ 66,-22,113,29,0,4,-81,127,17,59,73,6,-67,63,38,60,-23,24,10,-22,-8,-85,25,59,-111,-45,24,67,104,-45,29,31, 
  /* [181][0][][] */ -86,50,41,40,1,-46,42,7,-42,-72,13,127,-50,-74,-57,86,5,-58,21,14,-99,-11,109,-10,-7,52,-59,33,30,118,122,20, 
  /* [182][0][][] */ 22,24,68,-14,51,56,-115,-1,-58,-44,-63,62,58,-30,-51,-70,29,-65,-8,25,-20,-7,99,79,11,43,80,76,39,1,12,127, 
  /* [183][0][][] */ -27,-83,20,-32,-36,6,-30,-101,-49,15,62,87,-12,-62,7,-5,70,-14,-127,-30,38,29,-28,75,-28,-53,8,68,43,38,-51,34, 
  /* [184][0][][] */ -7,-7,7,39,9,34,-26,-21,7,-20,40,-15,42,-41,-19,-21,-20,46,-41,127,17,-3,-5,32,22,31,12,9,26,41,21,-9, 
  /* [185][0][][] */ 48,32,-39,47,-11,-85,-10,-44,3,34,73,-109,1,-53,-13,44,-82,-21,4,-65,31,58,-127,28,-87,-5,13,-30,71,35,-76,-85, 
  /* [186][0][][] */ -26,-120,115,28,-31,22,-95,-11,-62,-45,25,127,2,-53,6,-84,-23,-110,9,-69,100,16,10,-47,3,11,-70,97,39,50,51,-59, 
  /* [187][0][][] */ 69,99,72,63,-91,5,26,-15,-36,-55,20,47,-34,64,38,67,57,-19,2,2,18,127,27,-17,-24,-37,-38,53,1,-59,-4,-41, 
  /* [188][0][][] */ -36,-48,-42,-5,-8,-126,-17,48,-16,45,82,28,51,27,-98,-84,-107,5,42,46,52,14,-5,13,-127,-59,-13,-55,-73,1,80,70, 
  /* [189][0][][] */ 11,26,-23,62,-32,-23,51,-34,-66,22,1,-2,15,3,-28,84,-3,-127,5,25,-3,-2,-23,-35,43,-9,-16,1,-39,60,50,54, 
  /* [190][0][][] */ -52,64,22,36,-58,46,-59,124,21,-4,-95,-8,-101,-73,-29,94,-79,114,127,-57,2,-13,34,-17,109,-37,60,-25,-49,-51,-80,-46, 
  /* [191][0][][] */ -6,2,-79,2,21,-24,-13,15,-36,-19,-45,63,9,37,28,67,-23,-57,-8,45,-23,-127,5,8,16,-18,-10,44,-1,-22,-52,-11, 
  /* [192][0][][] */ -20,2,-116,-18,24,50,-21,-50,-5,-29,-12,-81,4,-87,-83,-50,-5,14,68,-19,-53,-71,48,-57,-37,-60,-20,127,-27,-40,49,-40, 
  /* [193][0][][] */ -21,49,44,43,-36,59,29,41,-12,-19,12,-88,-90,-87,-11,-84,127,34,-62,19,32,11,34,-14,11,38,7,49,-42,12,60,-6, 
  /* [194][0][][] */ 9,-54,49,40,-46,-34,-15,-16,-86,-31,95,87,-4,18,39,127,-32,13,-27,16,112,-57,51,29,85,-18,4,16,-43,-10,-19,-119, 
  /* [195][0][][] */ -52,111,85,33,-37,-50,1,-85,-72,104,-62,-54,-74,-35,-102,-38,-112,8,12,-75,82,86,-29,-20,84,127,20,20,16,6,-49,-116, 
  /* [196][0][][] */ 21,-116,-66,41,14,-95,-62,61,-94,56,-28,-42,-44,19,-34,125,48,16,47,-3,-23,13,127,-34,-77,-47,-114,70,29,38,-8,-75, 
  /* [197][0][][] */ -19,-36,78,-82,66,-54,14,46,2,-50,-29,-12,-91,47,-28,66,49,-5,-60,97,29,127,8,-15,-61,-24,23,47,60,-8,83,-27, 
  /* [198][0][][] */ -25,-64,98,9,66,-14,31,-45,22,47,-47,-32,-28,28,9,24,13,41,-65,0,37,-61,127,27,46,-39,48,88,20,1,-61,67, 
  /* [199][0][][] */ 9,22,127,1,-59,15,-22,-56,-2,-89,-63,35,-38,35,-36,-22,40,-53,-71,99,-30,-53,-121,22,-31,-16,-24,22,83,105,63,-68, 
  /* [200][0][][] */ -61,-1,-120,78,33,-44,-33,119,-63,23,16,-81,60,8,-111,30,10,12,-72,5,-94,-30,68,-38,29,1,89,-70,-14,34,-127,3, 
  /* [201][0][][] */ -43,73,18,-4,-21,-40,-35,-16,56,30,21,72,-67,5,-3,-4,-66,7,-33,3,-127,-19,40,34,-14,61,21,71,-47,-2,11,126, 
  /* [202][0][][] */ 47,-26,43,70,8,7,-11,96,70,58,12,-10,-13,80,0,53,-127,39,-24,-36,27,-31,6,22,32,-13,-20,60,-29,83,-19,-98, 
  /* [203][0][][] */ 127,-19,-90,-89,-127,60,-2,-18,-39,-91,-65,-57,25,-73,3,32,24,-4,6,-9,95,100,53,6,-92,24,-22,-75,2,105,2,-63, 
  /* [204][0][][] */ 127,9,-112,103,21,-109,15,38,-82,-121,12,-76,-123,18,-98,32,15,-41,-18,-105,63,53,10,82,61,-80,-25,-11,40,62,-30,2, 
  /* [205][0][][] */ -8,-61,66,92,-8,99,20,71,-127,76,50,-48,-100,-49,16,-19,69,-79,28,-39,53,-53,39,25,68,6,-48,82,10,-12,-93,77, 
  /* [206][0][][] */ -58,-55,127,55,14,-56,9,117,-66,-97,35,65,-16,102,42,-42,6,107,7,81,1,-45,-63,-79,19,-56,12,49,68,-93,48,-83, 
  /* [207][0][][] */ -30,26,50,95,-11,5,-32,-33,30,-110,7,-70,21,80,-8,19,66,109,-91,95,107,-127,13,126,-1,-57,3,62,4,-20,55,-127, 
  /* [208][0][][] */ -24,-86,-29,-43,8,0,57,18,24,44,-43,58,-7,-38,57,26,-1,3,66,-30,16,32,7,-53,15,40,-41,15,100,127,-65,-61, 
  /* [209][0][][] */ 15,3,-24,-24,-34,-6,3,39,-11,-63,-20,-63,7,42,-59,8,-9,-127,43,-55,-79,38,75,22,-13,33,-43,26,15,8,-66,-2, 
  /* [210][0][][] */ 127,20,66,-91,114,-104,-13,-24,-24,44,-86,-77,-42,-48,-65,4,-122,-43,-35,-121,-65,90,-48,-74,-118,31,-39,99,29,103,51,15, 
  /* [211][0][][] */ -119,127,24,37,-52,39,-37,-26,-92,-38,41,110,25,-103,33,60,52,-29,33,-31,64,37,-20,-71,-62,-45,-5,-71,123,-23,-42,-75, 
  /* [212][0][][] */ -48,8,0,-23,22,86,38,-33,-127,34,15,22,28,-1,24,-15,-71,20,70,11,122,67,93,-28,14,-5,55,-19,-92,74,-4,-20, 
  /* [213][0][][] */ -72,3,-38,-61,30,-24,-15,14,-34,-85,-19,-38,-7,-86,-14,-31,109,-89,21,22,127,-37,12,13,25,-8,-86,62,34,-14,-127,26, 
  /* [214][0][][] */ -20,19,55,-18,-1,-53,0,44,-21,30,13,9,2,15,-10,-73,-34,-19,24,-56,18,28,28,-90,-100,15,-25,-52,-4,-15,127,19, 
  /* [215][0][][] */ 12,8,95,12,81,-40,-16,51,-47,-3,-14,49,54,59,41,-26,-70,-69,29,0,96,-15,-8,61,-26,-102,-72,78,-80,111,103,127, 
  /* [216][0][][] */ -71,-40,118,-85,34,35,0,-90,-114,125,83,11,-51,50,-26,127,-37,2,24,78,61,35,-86,-9,93,77,82,42,9,68,59,0, 
  /* [217][0][][] */ -77,27,-17,-25,-67,-31,-9,-31,-49,-54,-14,-1,7,-69,-79,-16,25,10,-8,55,-17,49,-34,83,43,-4,-47,58,2,-127,-50,-50, 
  /* [218][0][][] */ -27,18,-19,-25,-42,-3,-20,-11,40,-8,-125,-78,-37,39,-90,71,9,127,-12,19,-88,41,15,-19,-26,-99,-52,-11,2,-60,-7,12, 
  /* [219][0][][] */ 19,11,3,-34,0,-59,48,3,70,-119,-54,109,-87,-39,-8,-58,26,-88,-97,48,-67,46,-9,51,-67,-75,-126,37,69,127,-108,-103, 
  /* [220][0][][] */ -78,-41,-127,59,45,-26,7,89,-75,60,-36,-35,-5,49,31,-24,-21,-59,7,-48,-3,69,81,-91,-69,-4,-86,2,108,45,-9,125, 
  /* [221][0][][] */ -26,-3,7,-75,70,-127,70,-63,-30,47,-18,-53,-33,-57,17,-34,-50,-13,-73,0,-33,-13,-41,-33,-39,8,-43,26,-10,-19,-48,28, 
  /* [222][0][][] */ -25,23,-91,-83,-49,84,56,-66,5,120,-24,72,53,64,-37,18,34,-91,-51,115,0,-13,-66,19,13,-79,-98,55,90,-17,127,35, 
  /* [223][0][][] */ 53,-92,-30,16,40,-8,81,123,-97,-39,-44,42,-50,-75,-3,-25,10,27,122,63,-99,61,72,-127,-11,-98,-33,-45,-46,-81,-97,9, 
  /* [224][0][][] */ 62,73,9,-56,9,80,85,-8,-82,-31,-44,26,-67,78,-48,96,105,127,-33,23,-29,-74,28,-48,8,72,-48,3,-60,14,-23,-43, 
  /* [225][0][][] */ 71,8,-23,17,-29,33,-114,-25,57,3,-38,-104,62,-31,8,-17,-81,89,68,53,-110,3,-127,-35,8,31,-36,-7,-55,1,33,68, 
  /* [226][0][][] */ 69,80,-29,-82,-10,-79,-48,-23,17,21,-39,-64,-28,59,-127,-5,70,-21,40,-34,27,-100,-10,-42,-56,-45,10,-54,-1,47,28,-71, 
  /* [227][0][][] */ 53,-40,2,-110,39,-33,25,3,-30,91,-25,-48,5,24,19,-23,-15,127,-42,-67,16,-49,80,39,25,-88,57,-38,91,21,-87,32, 
  /* [228][0][][] */ -12,-60,51,-22,54,49,13,-31,87,12,49,94,-1,37,33,-11,-10,15,-125,76,-20,7,37,-30,127,-9,67,-42,-119,-41,-62,-85, 
  /* [229][0][][] */ -42,-45,-16,8,5,33,115,22,8,-67,-52,-56,-18,-72,-70,-33,40,28,-28,-60,62,27,-34,0,-46,-3,-127,-60,-12,-85,36,-40, 
  /* [230][0][][] */ -46,61,-3,19,-127,-14,-24,-30,0,52,-13,-27,-58,-10,33,-7,11,-80,38,72,46,-112,-2,11,34,36,-16,-25,-42,-56,9,-7, 
  /* [231][0][][] */ -9,-30,105,-58,49,-2,-15,36,-63,-45,-24,-32,127,-4,41,37,2,-51,-43,25,-24,-8,22,-24,-50,20,-121,-20,-22,12,3,-46, 
  /* [232][0][][] */ -17,-12,2,20,2,23,-37,-11,-13,-97,2,127,26,31,71,37,48,70,1,-34,9,-2,27,21,-52,37,-28,-27,-2,45,24,60, 
  /* [233][0][][] */ 71,8,56,52,-120,26,13,44,-67,23,-1,-15,96,91,-111,43,27,-55,18,73,-15,-5,11,-45,-118,-28,-15,-20,127,-71,-14,-27, 
  /* [234][0][][] */ -33,-127,43,-11,51,-1,49,53,-4,-44,2,5,14,-34,-2,-4,-9,4,-65,24,-43,19,62,-31,39,-41,-87,-9,3,72,6,-55, 
  /* [235][0][][] */ -25,-25,-88,-71,73,74,4,15,36,-91,20,36,-21,7,27,-4,-14,42,-74,127,40,15,25,15,-32,-79,-44,35,14,-47,7,6, 
  /* [236][0][][] */ 26,24,51,-3,34,95,-54,-49,-48,56,-32,-48,104,-127,62,106,22,9,32,45,57,-80,102,68,38,47,-13,-12,40,-3,-66,-18, 
  /* [237][0][][] */ 46,-28,14,-35,-10,2,-49,-3,-14,63,46,44,127,7,-20,-60,40,4,-69,-19,21,-21,46,-7,49,38,71,1,56,-27,-13,-70, 
  /* [238][0][][] */ -13,-8,-32,-87,-47,83,37,-51,23,21,-46,-34,19,24,127,-6,28,97,66,-2,96,-77,43,-9,-49,123,-115,126,-90,-11,39,63, 
  /* [239][0][][] */ -48,-30,-11,-115,69,-59,-125,-41,-42,-73,61,62,-113,113,-50,4,52,-15,32,127,108,6,-31,42,4,18,-50,54,-48,-43,38,-24, 
  /* [240][0][][] */ 72,67,-43,2,69,50,-127,15,-7,-11,-96,83,45,14,6,-58,103,-81,-45,30,0,57,14,-53,-67,15,-38,-35,-102,-19,19,-72, 
  /* [241][0][][] */ 18,91,-30,-19,67,-1,52,101,74,-33,-104,-11,-5,76,43,127,22,66,-85,-98,-76,65,-13,-119,116,-32,60,-80,108,35,-27,-36, 
  /* [242][0][][] */ 61,78,-16,4,-38,23,-24,-88,41,19,12,-82,29,2,2,60,49,-9,10,-127,-51,-21,31,-48,6,12,-66,3,103,-40,83,71, 
  /* [243][0][][] */ 4,-1,-45,-105,41,-127,19,91,-15,-9,-53,-56,3,54,60,-14,49,-67,25,53,17,88,-31,21,36,43,5,-75,74,-49,3,4, 
  /* [244][0][][] */ -79,-103,-60,25,-42,56,35,9,30,50,50,-41,43,-102,-37,58,20,82,-9,82,-50,58,-43,-15,127,-98,-107,99,5,44,-56,18, 
  /* [245][0][][] */ 9,127,-34,92,-47,-20,66,-26,2,0,40,44,-27,19,53,-33,5,-71,-59,-1,-11,-20,2,19,-85,-50,-25,56,33,35,1,-6, 
  /* [246][0][][] */ 75,-14,0,-35,-74,-27,-34,44,-75,53,26,77,-124,46,-38,72,-62,-127,-69,101,17,-20,-109,51,124,-38,-60,-11,57,117,96,-54, 
  /* [247][0][][] */ 86,-62,12,84,50,-77,72,-16,105,-14,3,-75,3,22,-61,-39,32,-114,-33,31,73,-54,-41,13,-127,41,81,49,62,43,-98,19, 
  /* [248][0][][] */ -108,-55,-52,-52,62,53,-77,-12,7,93,-61,88,-127,58,-80,36,81,52,21,-36,-71,42,5,-73,-65,-2,-26,101,83,68,10,-5, 
  /* [249][0][][] */ 28,9,17,-3,1,-35,47,111,-10,-53,-47,127,60,-29,-92,30,-113,19,58,-93,103,36,66,-32,-4,-44,-71,-57,-46,-13,-27,13, 
  /* [250][0][][] */ 22,-6,-71,17,4,19,-25,76,-54,23,3,17,127,-59,-30,5,5,-53,-88,107,38,-101,-31,-26,25,11,-7,6,-9,-91,-5,59, 
  /* [251][0][][] */ 7,-46,59,-54,-13,-29,58,102,4,28,59,-127,-72,-20,29,57,44,-56,9,5,-49,80,-21,-80,-68,42,-81,-44,55,-24,22,11, 
  /* [252][0][][] */ 57,13,-10,-57,10,-54,92,25,-38,37,-12,-40,-111,93,-21,-11,3,-56,60,-58,-15,-63,60,5,-52,127,-10,-93,32,11,67,-16, 
  /* [253][0][][] */ -11,127,-19,0,69,0,8,30,6,-6,-19,31,6,27,-51,-37,41,-34,-17,2,65,28,-10,-18,-82,-1,-39,-58,-47,-22,36,60, 
  /* [254][0][][] */ -27,-124,-74,28,-11,50,-23,88,-46,37,-40,36,67,121,-55,67,70,127,-18,20,-3,87,-11,-36,51,22,9,45,95,41,-69,30, 
  /* [255][0][][] */ -33,-2,61,35,65,1,-53,-88,72,-40,64,36,48,23,32,63,62,30,23,35,-15,42,-127,44,10,-92,-42,-75,-29,-80,83,-13, 
  /* [256][0][][] */ 58,68,32,-17,-53,-50,90,12,-92,50,-12,-69,-66,-53,127,37,58,17,-44,-17,50,-54,-52,54,-19,12,63,-43,57,17,16,-6, 
  /* [257][0][][] */ 48,-78,-37,3,-28,44,50,-16,-58,-6,12,42,-27,49,13,-73,101,-80,127,-11,19,-70,71,38,52,-1,-51,-78,-64,60,-49,-57, 
  /* [258][0][][] */ 17,29,-36,-15,77,-9,-127,-49,43,25,90,44,35,59,4,112,10,5,76,34,-27,32,-27,-58,-63,-79,-3,15,10,-99,39,-122, 
  /* [259][0][][] */ -66,8,-59,8,10,-22,-25,-30,95,-24,-12,-9,-15,1,127,119,60,-24,2,-25,-23,-55,-7,-45,24,-18,-65,-35,-43,-26,-23,6, 
  /* [260][0][][] */ -14,88,18,-68,7,-83,33,7,40,-5,-5,-41,-127,32,4,14,-23,-101,4,-52,-55,-7,-2,52,23,5,-32,54,40,46,-5,-56, 
  /* [261][0][][] */ -7,-34,-54,-49,-12,-57,-2,127,35,15,3,41,25,-6,-1,-72,89,-32,16,50,12,-63,-56,-3,32,-31,65,0,-44,26,7,-10, 
  /* [262][0][][] */ -35,-89,-64,51,18,-98,13,64,-11,49,41,-127,14,-58,-56,-23,33,71,-43,-57,12,16,25,-44,-56,-14,73,77,25,5,60,109, 
  /* [263][0][][] */ -13,21,28,-57,-20,91,-23,-40,19,4,-127,-33,28,-36,104,-1,-32,20,-70,-88,-24,17,-37,-2,-20,14,-17,-26,17,79,93,0, 
  /* [264][0][][] */ 42,-9,25,-71,-76,63,-2,-10,56,78,-33,-60,35,-86,-36,5,46,127,-58,2,-44,-64,-71,104,-82,-16,21,15,-43,3,-58,-11, 
  /* [265][0][][] */ 4,6,-11,-41,-49,52,9,3,57,117,-36,9,16,-82,-11,-41,-39,31,-29,62,34,-12,1,-127,-104,44,1,21,10,-51,-73,-58, 
  /* [266][0][][] */ 54,22,-31,-80,39,10,-65,-1,-71,5,-31,53,-30,-62,-1,25,35,10,-127,27,-41,-59,32,38,15,26,45,-8,-1,-29,-27,0, 
  /* [267][0][][] */ -42,23,61,-113,51,-32,-39,69,125,87,-9,59,-12,54,-64,-93,4,39,-67,52,-1,44,6,58,-51,-17,28,84,72,12,90,-127, 
  /* [268][0][][] */ -26,26,20,34,-104,-75,60,30,12,-31,-5,111,-33,-72,27,-43,7,-127,-53,-85,-92,-79,40,-25,14,10,-33,-67,-11,24,-10,54, 
  /* [269][0][][] */ 11,-49,-15,56,119,-30,-41,-65,-23,35,-15,-23,-25,13,-42,-8,-23,125,-95,-80,-41,-14,79,-45,-54,47,-21,-127,50,-71,66,-22, 
  /* [270][0][][] */ 17,-8,-77,-58,80,74,-57,3,2,-13,-70,0,-9,-127,-23,-20,24,-64,-20,-14,34,78,38,79,26,-31,20,28,60,-85,-24,-27, 
  /* [271][0][][] */ -28,23,-78,-50,-10,50,66,105,17,-8,92,-86,-22,-86,-23,65,36,-127,43,69,-75,-107,7,5,-7,55,69,28,-4,-124,30,-3, 
  /* [272][0][][] */ 78,-78,-30,-83,5,-75,86,-50,-5,-31,12,-46,59,22,-20,-25,-50,-127,-24,2,2,4,-12,-61,68,-45,28,-35,-45,75,70,48, 
  /* [273][0][][] */ 9,73,51,-127,-28,60,20,14,-27,0,-54,17,-67,0,-49,84,-8,-37,28,-3,14,-79,21,-22,7,-36,14,83,19,-10,-5,-1, 
  /* [274][0][][] */ 10,-3,45,84,-18,41,-96,-58,41,-44,-47,-44,-119,20,-62,-15,38,21,127,-19,-68,-12,-4,-35,28,-102,-19,-53,13,31,18,81, 
  /* [275][0][][] */ 39,107,113,-9,101,19,-31,13,-28,-45,-5,-86,3,-9,65,11,98,-19,-26,-39,-73,14,83,-127,7,16,-5,36,-95,46,-37,81, 
  /* [276][0][][] */ -76,48,-52,53,117,-59,-36,63,8,-59,41,-4,-55,-57,5,-110,76,1,127,38,36,16,-13,45,-18,-46,25,-99,-12,-104,16,-34, 
  /* [277][0][][] */ -30,-11,-55,-19,70,28,41,-51,5,14,79,-39,17,-15,116,-57,31,19,88,-7,-127,-20,69,26,94,-62,-50,-43,32,19,21,66, 
  /* [278][0][][] */ -8,14,-127,-19,22,-67,59,-6,-15,-35,-10,15,-23,-40,-47,-79,33,-17,-18,28,70,38,46,5,10,-38,-65,22,4,33,0,-19, 
  /* [279][0][][] */ 13,56,-127,-54,-23,39,-3,4,75,23,56,4,3,-36,40,-61,-86,-9,57,32,32,24,6,-27,18,51,-33,50,5,19,13,-65, 
  /* [280][0][][] */ 89,12,66,-100,-13,-19,-12,-99,43,65,-75,-25,55,22,-23,-25,-36,1,106,-34,-58,8,56,37,-121,21,32,-1,-127,113,-33,21, 
  /* [281][0][][] */ -21,44,-100,47,48,30,98,-29,-12,-6,-39,-38,-11,15,-59,-17,61,-32,-83,61,127,52,64,116,-56,33,3,-58,28,59,-22,-30, 
  /* [282][0][][] */ 5,-47,103,-40,-45,60,-22,26,-1,-5,26,57,51,-37,-88,31,-7,-54,-103,127,85,61,4,-106,-11,84,-26,-94,17,7,22,44, 
  /* [283][0][][] */ -50,-28,12,-60,-56,28,-28,99,-4,67,6,-32,-52,27,-7,61,127,-14,15,44,87,-13,-30,-48,-31,65,68,-13,-16,48,83,47, 
  /* [284][0][][] */ -21,-89,113,-18,-61,-16,5,80,-3,17,-25,72,-114,10,8,-12,66,-48,15,12,-73,32,77,4,51,57,17,-16,-86,127,90,-22, 
  /* [285][0][][] */ 10,-16,74,-9,-10,-73,7,-10,-59,-60,-30,7,37,10,5,26,3,47,86,-28,41,-59,-64,-90,-39,72,127,13,71,12,104,25, 
  /* [286][0][][] */ 33,10,9,41,24,-69,-20,127,25,18,16,-30,-67,41,-18,-75,-109,-10,16,-23,34,120,41,52,118,-42,-55,-56,74,-9,108,-6, 
  /* [287][0][][] */ 0,-62,-75,82,40,-32,127,-31,23,-18,88,-48,60,123,-36,-31,-7,54,14,-13,-12,72,25,-120,51,-38,106,13,46,40,36,18, 
  /* [288][0][][] */ -45,95,127,28,-55,18,-58,-66,23,-38,40,41,-5,27,-50,-80,115,70,48,63,-39,47,57,-23,14,25,5,-67,20,122,15,-52, 
  /* [289][0][][] */ -75,-9,90,-87,53,-30,-37,100,-21,-4,48,31,-26,127,-25,63,37,-87,26,-112,69,-29,-57,46,-108,23,-21,12,80,8,18,55, 
  /* [290][0][][] */ -19,-29,14,127,-26,46,56,-6,-29,-28,54,-18,73,36,-41,31,18,56,-77,44,-36,-50,-1,-76,-35,84,-6,-61,-62,-110,109,25, 
  /* [291][0][][] */ 30,-26,79,11,8,-1,-25,43,-90,39,-14,34,27,59,68,-1,3,-7,-73,16,7,-90,48,-78,-8,127,-98,55,-44,28,47,33, 
  /* [292][0][][] */ -52,10,-36,26,-51,-88,-80,-39,-47,-33,19,58,-81,50,-22,12,-23,-19,46,-127,26,-64,-5,-86,-31,-52,32,15,31,-23,75,-32, 
  /* [293][0][][] */ -12,-1,52,-17,1,-18,-10,21,8,1,-104,0,-15,17,2,-37,28,-127,47,-4,-37,-37,-21,5,0,-10,50,2,15,33,-22,34, 
  /* [294][0][][] */ -3,36,-28,34,58,-43,35,-16,-28,-34,79,-44,-7,72,-20,-10,-31,-6,38,-72,15,23,20,-12,-11,8,17,28,-127,-9,19,-18, 
  /* [295][0][][] */ 111,43,22,11,-5,-6,46,-8,-9,29,-90,-33,-24,63,64,52,-3,-22,-80,-44,-61,-92,65,20,109,-45,-127,101,-74,-97,41,78, 
  /* [296][0][][] */ 50,4,0,-17,4,-47,40,89,-70,-64,-49,-11,30,-47,-101,126,-66,-70,-17,-21,83,-19,55,-82,84,26,-127,-23,100,-39,92,69, 
  /* [297][0][][] */ 40,9,-77,-114,-32,87,-27,-69,-35,-16,34,-20,37,-17,-101,-40,-127,14,2,126,-114,47,75,-34,113,-27,70,-43,-17,-70,60,-34, 
  /* [298][0][][] */ -22,-46,-96,27,127,126,-44,-11,-48,-46,-73,64,26,73,48,110,-38,-26,-49,-8,-19,14,-33,-94,-20,19,44,22,-32,24,-13,124, 
  /* [299][0][][] */ -26,-29,71,5,38,127,-73,4,-27,-26,-21,22,-92,-96,26,-53,19,-116,-82,-5,-87,-17,35,27,108,-9,-52,92,30,-74,24,-111, 
  /* [300][0][][] */ -77,-28,19,0,122,-55,30,-61,-6,18,-72,26,-51,-25,-3,47,-53,48,7,78,24,-5,-127,13,-18,-36,-117,25,36,24,48,-4, 
  /* [301][0][][] */ -51,-18,-31,-20,-6,-15,-85,-34,5,-30,-83,-60,-8,-37,-9,16,-5,31,127,-29,-13,33,-38,-55,-122,39,-66,-35,-27,59,-121,-10, 
  /* [302][0][][] */ 37,-37,27,-10,-27,88,17,-67,-12,41,4,-32,16,-16,42,-50,74,33,71,-43,-8,62,51,-38,15,-96,-40,-46,59,29,2,-127, 
  /* [303][0][][] */ 2,-23,18,41,-32,-55,-15,12,-32,39,-7,44,-15,-40,64,-11,-85,-54,-127,49,-42,2,32,15,-59,123,-61,-6,79,16,1,67, 
  /* [304][0][][] */ -9,-15,75,62,56,-86,24,-38,55,-40,65,-20,85,-26,0,30,-10,-27,-46,-66,5,107,17,46,57,11,110,-127,-96,27,-35,4, 
  /* [305][0][][] */ 16,-1,10,-35,-8,-73,-72,38,108,-37,39,-9,53,-34,-28,-5,2,-39,-87,-13,50,18,29,7,-12,68,-29,112,-56,1,31,-127, 
  /* [306][0][][] */ 12,127,35,21,4,55,-16,-22,31,-57,22,-53,60,50,-12,-27,39,-32,12,-48,97,-9,-57,-65,-58,17,2,-37,-1,92,40,71, 
  /* [307][0][][] */ -80,20,-13,-28,-127,-17,-20,65,121,-20,-37,-45,33,10,-56,1,50,-47,2,23,-58,-14,-31,-40,-100,103,77,-31,-2,-24,-71,32, 
  /* [308][0][][] */ -34,-1,-30,-110,-42,19,44,29,-63,122,-91,64,14,-2,0,-79,14,-76,-29,38,27,9,31,-99,-60,-23,-51,-57,-25,127,-13,39, 
  /* [309][0][][] */ -27,-42,-94,-18,-95,-6,-69,127,-8,62,-4,-23,0,-119,-86,-58,41,26,-38,-59,10,-95,83,-39,72,14,-113,-61,3,4,37,14, 
  /* [310][0][][] */ -23,-9,45,1,31,-3,-36,-35,11,-70,20,93,-63,16,-23,-70,127,-87,-25,-12,54,-49,-88,-66,-9,-35,-41,7,-110,-14,-22,45, 
  /* [311][0][][] */ 35,-7,4,-13,61,-28,-21,-49,-46,-48,-9,-52,15,-109,81,-17,-127,-114,-17,9,-35,3,-77,-9,-11,-125,94,-90,122,-64,79,-66, 
  /* [312][0][][] */ 48,35,-38,-35,-54,49,31,97,11,127,0,101,48,13,-18,1,-17,-8,-95,-12,100,5,46,-66,45,-51,-57,-7,56,38,63,61, 
  /* [313][0][][] */ -63,1,51,-35,52,-45,39,107,-30,96,14,105,-70,-33,-3,35,-69,0,-1,122,51,62,-45,-107,-31,-20,127,49,11,18,45,-40, 
  /* [314][0][][] */ 7,18,40,-41,-10,41,3,8,-89,31,28,82,51,-57,-8,-23,44,-31,-14,88,5,-41,-29,-34,-41,41,-22,39,127,50,-10,-5, 
  /* [315][0][][] */ 23,2,-16,61,-22,-73,43,61,-45,-6,-5,-105,43,-40,2,34,-19,-59,104,104,2,-19,-39,39,32,-83,-49,-14,-20,3,-127,100, 
  /* [316][0][][] */ 42,6,-7,-10,12,-9,-5,78,-14,-30,-51,-60,19,-10,-8,-35,30,10,-27,127,53,16,-89,-13,-14,23,78,-109,-45,44,-4,-17, 
  /* [317][0][][] */ -67,-103,-6,104,-127,62,-77,-13,62,-90,13,-50,-45,-9,-3,-10,87,-63,-17,-98,-23,22,121,36,-41,74,-48,-52,-29,-8,53,-69, 
  /* [318][0][][] */ 66,-40,-4,-40,-42,13,-48,-18,-51,-23,-45,35,30,-127,-21,-10,-19,-120,-26,95,35,0,-30,71,-62,-98,4,67,-76,7,-106,65, 
  /* [319][0][][] */ -28,100,31,62,-47,-56,-47,63,114,-4,-38,36,78,24,-30,-52,-46,25,51,20,127,81,-86,-3,-12,-37,-44,21,-10,-88,26,-27, 
  /* [320][0][][] */ -23,29,-85,-6,9,-51,27,70,36,20,-56,15,4,-7,-2,11,-39,9,56,70,19,60,-2,80,-5,-12,-65,-17,-50,13,-127,35, 
  /* [321][0][][] */ -14,43,4,-14,16,-61,61,-50,-16,44,8,44,-75,-63,-15,-8,5,11,-23,64,9,-8,-57,-9,41,-16,-58,-58,3,13,127,65, 
  /* [322][0][][] */ -34,-9,-88,127,-23,22,-35,-11,-14,14,-18,-118,21,6,33,-89,-28,37,-121,-51,-32,119,54,1,-106,22,58,-13,20,57,-127,17, 
  /* [323][0][][] */ 20,-4,63,-78,-50,66,-98,13,-119,1,-43,-4,106,-27,31,-56,66,127,115,-48,30,-14,42,10,96,-56,-48,5,-5,19,1,-28, 
  /* [324][0][][] */ 38,-1,27,-35,81,35,10,30,-70,18,28,-59,95,59,99,28,-43,106,112,29,-14,-4,-103,-5,-65,-127,-18,-25,120,-14,-64,-70, 
  /* [325][0][][] */ -67,127,3,-15,-72,4,-32,45,-38,39,38,44,-5,49,-42,105,58,-12,-62,35,47,53,0,14,-57,-34,60,8,-45,10,-50,41, 
  /* [326][0][][] */ -115,-74,-21,9,-52,-27,90,-72,41,-22,75,-21,39,8,11,9,127,41,23,-44,29,-53,12,1,46,26,-7,64,9,115,-34,81, 
  /* [327][0][][] */ 8,27,22,65,-45,1,117,-46,17,31,58,5,3,-21,-16,-6,-19,39,31,38,83,49,11,25,-66,59,-40,88,-127,-55,55,35, 
  /* [328][0][][] */ -86,65,-127,-17,-114,-36,-90,63,-86,101,105,44,-35,-19,11,16,32,-12,17,54,-62,-39,-94,18,-11,52,51,-14,16,13,-89,-29, 
  /* [329][0][][] */ -27,30,54,106,35,102,42,52,-15,35,12,-20,-45,-17,3,2,-35,5,19,43,-39,-35,24,0,11,85,127,47,-82,-89,-89,87, 
  /* [330][0][][] */ 100,-91,14,-8,-94,-36,-17,49,-127,66,-47,-24,26,-63,-42,25,-13,37,-115,-54,17,-41,23,-15,-85,-35,-67,3,73,53,27,34, 
  /* [331][0][][] */ 61,53,-115,-21,-55,52,7,113,127,34,-82,-55,48,-26,-102,-88,-56,-14,-31,25,-17,-11,63,-40,6,45,1,34,50,20,-93,-96, 
  /* [332][0][][] */ 59,-40,-31,-38,-1,-75,33,49,20,-73,-44,-86,8,-34,-123,127,43,-91,23,-68,-3,4,-77,-52,-86,21,39,-39,33,-48,67,76, 
  /* [333][0][][] */ 10,45,-127,-4,1,-33,18,-47,15,4,-18,-27,-45,-43,6,0,-2,-29,39,69,-12,-40,-57,-37,-1,13,2,26,19,64,4,-32, 
  /* [334][0][][] */ 11,-11,50,-67,27,-45,52,57,-32,-127,7,-57,-38,-25,-116,-35,53,-6,19,30,-14,-65,103,-8,67,-76,49,36,-61,-17,-17,44, 
  /* [335][0][][] */ 62,-5,-16,-25,78,53,-19,-37,-16,47,6,15,24,54,32,-13,-127,50,2,48,-28,43,-72,37,107,0,-48,-7,-7,-5,67,-41, 
  /* [336][0][][] */ 5,21,-13,-49,33,-62,4,-27,21,-69,-54,-34,27,-85,-7,40,0,-24,12,56,-105,9,-2,58,-35,51,-59,36,83,127,-33,115, 
  /* [337][0][][] */ 24,14,43,2,20,48,-127,-65,13,-7,13,8,46,-101,-21,-14,59,-7,-104,-8,18,-49,22,2,22,-47,-35,84,11,82,7,6, 
  /* [338][0][][] */ 8,31,-1,-10,20,-41,43,37,-61,16,-24,-13,-39,26,-85,-127,16,-3,-9,-45,2,17,-15,81,0,-54,64,77,-57,-25,-51,-53, 
  /* [339][0][][] */ -89,83,-41,-35,27,-63,-127,86,26,29,-70,53,64,7,25,8,4,-6,27,10,21,-11,-17,18,28,-45,-9,-32,17,-10,-35,9, 
  /* [340][0][][] */ 90,76,-35,-17,-7,14,8,-60,35,-50,127,25,29,-46,-69,-19,-29,-66,-86,57,90,-2,-32,-13,-53,-30,110,6,-72,90,19,-68, 
  /* [341][0][][] */ -48,34,92,27,-4,-39,-30,69,-111,-18,22,-97,11,46,-3,-64,65,98,-93,-127,7,-14,2,62,58,-23,8,7,17,-47,21,13, 
  /* [342][0][][] */ 45,2,-49,47,93,-39,51,82,8,112,66,7,9,30,18,70,-19,-59,6,22,-99,13,-60,71,48,74,14,-127,23,64,-20,-10, 
  /* [343][0][][] */ 37,26,3,53,37,-13,-6,11,10,61,-43,-72,-39,59,-38,55,-127,-2,30,-20,-1,-11,-26,103,-23,22,4,4,41,10,-32,58, 
  /* [344][0][][] */ -16,-34,19,-5,101,-42,-79,-58,-19,74,34,89,0,-79,-27,11,-87,-127,-54,-38,39,-41,48,6,31,-63,-109,-35,-112,-36,62,96, 
  /* [345][0][][] */ -79,99,-28,25,28,-13,-44,25,-34,-27,-110,0,-1,7,-2,51,17,40,75,-13,-102,-107,-9,-51,-18,17,-33,127,-23,96,-22,67, 
  /* [346][0][][] */ -105,127,4,-40,-48,16,30,-34,-3,62,49,-20,-49,80,-22,-86,-3,-77,-28,-56,48,-48,63,30,38,-44,30,103,-42,37,-45,64, 
  /* [347][0][][] */ 14,-111,123,82,44,102,47,-42,64,-92,2,-124,49,16,39,92,11,0,-34,-48,-32,-37,-47,-30,54,4,-53,127,15,81,82,-119, 
  /* [348][0][][] */ 19,-87,-118,52,-12,1,14,-112,-45,-7,35,127,-109,86,71,-19,62,18,-51,28,-15,100,-7,25,-5,13,-31,-78,22,-18,81,-96, 
  /* [349][0][][] */ 63,36,-91,40,-70,76,79,7,-127,25,67,-23,40,-16,-20,-42,-22,5,-59,-6,66,-41,-18,67,33,-49,-9,32,93,-77,-1,-29, 
  /* [350][0][][] */ -15,16,-52,-14,56,-123,-51,-7,10,29,-49,-17,11,76,44,40,-65,20,-18,37,-44,68,0,-61,-126,15,10,-25,127,0,-26,-24, 
  /* [351][0][][] */ -3,-3,-54,-72,-71,33,38,-13,-52,115,15,0,37,31,70,40,7,-57,92,-102,64,-77,-75,-51,81,112,-94,-19,127,-37,53,14, 
  /* [352][0][][] */ 15,4,-11,-35,-45,-41,38,-28,58,6,30,21,19,75,42,-127,-24,4,9,50,22,19,-22,39,-9,0,-35,7,6,15,24,-29, 
  /* [353][0][][] */ -15,1,127,-31,42,21,63,72,-20,-26,-126,-18,-2,5,-42,45,57,10,-46,-13,-18,10,45,15,54,-13,42,-58,-54,13,-37,-12, 
  /* [354][0][][] */ -12,-21,7,2,-17,10,37,24,-44,-12,53,-19,-13,-9,-59,-34,50,-127,9,-65,18,6,-3,-36,-15,56,4,-34,27,-66,31,34, 
  /* [355][0][][] */ -10,6,57,44,18,-29,103,-12,56,-9,-16,-28,88,12,16,59,-51,-72,-127,-20,55,-7,78,56,88,25,22,84,80,17,2,90, 
  /* [356][0][][] */ 127,-30,36,-40,-20,-122,26,44,-28,-73,66,20,-73,64,-59,5,25,5,-14,-35,-41,-5,-12,66,102,90,81,28,1,-77,101,-45, 
  /* [357][0][][] */ 69,75,85,4,-71,-14,64,76,1,-50,-50,45,15,23,25,-85,-4,-35,28,-121,81,62,-127,-122,-7,-32,67,60,41,22,53,-61, 
  /* [358][0][][] */ -28,49,-43,-35,-52,13,31,71,-103,60,16,-32,22,103,55,-127,69,-32,97,22,24,64,-74,33,-57,59,-41,14,74,56,32,-25, 
  /* [359][0][][] */ 3,-12,5,13,41,62,-77,-6,-24,-12,-3,26,34,-24,-45,-34,-7,-87,59,48,127,80,26,22,-60,-1,-72,-68,-29,-44,49,15, 
  /* [360][0][][] */ -18,66,-64,16,40,-44,117,-13,-53,127,124,-50,-13,-32,-89,63,38,-45,-54,6,36,-57,48,-23,-84,-27,-14,95,31,117,-84,43, 
  /* [361][0][][] */ 63,20,73,-57,-13,32,-30,-127,-4,-72,14,11,22,7,-39,-6,-9,30,17,6,-92,29,-42,-35,-106,18,82,11,57,-31,13,-10, 
  /* [362][0][][] */ 38,26,-46,40,2,15,17,-43,-46,-127,17,-67,102,-32,90,-5,-19,63,-111,91,-20,41,30,29,-45,-47,-57,37,39,-25,-25,-48, 
  /* [363][0][][] */ 35,-38,-127,-56,-28,-62,5,-9,17,-24,-22,-8,-41,-6,-45,31,22,41,-19,45,-21,-58,-10,34,-5,-16,4,65,-40,-5,-33,11, 
  /* [364][0][][] */ -39,-54,8,6,-3,-9,-56,30,1,10,-3,53,35,30,18,10,16,4,12,25,-29,-66,-22,-15,21,-7,22,-6,5,-127,-26,6, 
  /* [365][0][][] */ 32,9,-127,-4,34,57,-9,-56,34,13,17,8,-30,-43,31,-57,-56,-91,1,6,64,-21,-77,17,14,73,-2,-54,-16,44,-17,11, 
  /* [366][0][][] */ -39,-115,23,74,100,-85,-3,127,-64,-58,-57,86,15,-8,32,45,83,-54,44,-90,-77,71,62,60,26,-93,-53,-6,-5,-3,54,-51, 
  /* [367][0][][] */ 74,3,30,61,-69,1,68,11,5,90,11,-79,-75,24,-44,-9,44,45,64,-29,24,59,125,44,-95,-127,-47,-21,-23,-2,-29,68, 
  /* [368][0][][] */ 31,28,14,-19,-47,76,13,33,5,127,12,32,112,-3,1,-55,-117,1,-23,33,-77,35,82,-101,-29,-16,-39,-25,50,-23,-46,-24, 
  /* [369][0][][] */ 26,6,127,-114,-30,59,-52,-60,11,-24,0,18,21,-31,69,2,34,44,-5,-5,-20,-16,49,-29,29,30,-10,71,10,-21,-72,26, 
  /* [370][0][][] */ 35,62,-32,-19,22,40,7,-44,-48,22,44,38,-36,-64,-19,21,19,-6,-108,-101,19,-98,46,15,-127,-25,-60,-39,10,13,-48,-5, 
  /* [371][0][][] */ -10,122,-32,-105,51,9,-24,49,35,-74,1,42,-15,113,-127,35,-25,14,-42,82,-16,44,70,-6,36,65,35,-64,-23,32,8,-1, 
  /* [372][0][][] */ -84,-47,-6,-127,39,21,-18,-29,84,-36,33,109,29,-45,11,44,105,-44,69,40,16,-10,-32,-72,-56,125,-33,10,8,122,4,53, 
  /* [373][0][][] */ -31,-79,6,10,33,-72,22,-1,-32,28,103,-65,-104,87,7,77,33,59,-17,-34,-58,-77,-22,-75,-32,10,94,-127,6,121,-52,-102, 
  /* [374][0][][] */ -22,80,11,81,-93,-106,-56,-5,-47,-76,82,-49,0,15,15,-52,-44,14,-5,-39,12,-15,64,-30,54,-44,-24,127,36,99,46,70, 
  /* [375][0][][] */ 25,119,41,35,45,-35,29,29,-107,70,-4,27,-92,17,38,-15,39,36,102,-54,-50,-127,8,-31,-29,-70,27,-70,9,-49,-53,86, 
  /* [376][0][][] */ -127,23,-12,66,-33,-22,-70,14,6,29,-28,31,-90,13,-76,-5,-2,-54,3,-43,115,-66,5,9,13,25,-54,51,-52,57,-64,-111, 
  /* [377][0][][] */ 14,-32,35,-95,-33,-9,11,24,-78,96,-6,-56,39,49,-40,34,21,-6,-46,-2,-56,127,-42,22,-24,-115,5,-49,31,90,-34,-22, 
  /* [378][0][][] */ -3,43,-94,11,34,28,-19,-9,-116,-19,125,54,30,-83,42,4,-33,-45,37,6,-36,85,-49,-3,127,28,53,-75,-22,-77,-45,41, 
  /* [379][0][][] */ 39,9,-127,-37,-48,1,3,-25,-10,32,0,-24,6,-82,-27,-39,1,68,14,9,43,-29,-10,92,94,10,113,-25,1,-34,1,-62, 
  /* [380][0][][] */ 37,30,-42,-127,52,-43,32,-49,24,-103,74,-56,-35,-63,64,36,89,-93,-1,-53,65,5,-40,-39,-2,43,82,-17,-89,-54,-26,55, 
  /* [381][0][][] */ -24,13,-11,46,-120,-127,11,110,-61,-7,9,92,-28,-57,127,-76,-1,61,8,-48,57,18,118,3,-81,84,-77,40,60,117,-60,10, 
  /* [382][0][][] */ -20,-56,-26,-45,-7,-24,-44,-6,26,25,-2,-73,45,62,39,21,-5,23,-3,42,-16,-22,-81,18,47,26,97,127,120,-33,-71,25, 
  /* [383][0][][] */ -9,52,70,-25,-3,13,-42,45,127,-46,-4,4,-8,90,-22,-48,39,-31,-78,-69,63,-60,-76,2,-114,-27,34,20,16,-125,6,-87, 
  /* [384][0][][] */ 21,28,53,25,24,-127,-14,76,-35,-83,76,-17,-16,-59,30,-63,-44,15,-41,-48,-16,13,25,-10,-31,59,17,-31,29,-20,-40,70, 
  /* [385][0][][] */ -1,39,-10,45,10,-25,9,11,-55,-19,-19,-10,10,-9,22,8,2,-33,-9,1,50,-127,-40,37,26,-13,-8,-25,14,10,-58,-5, 
  /* [386][0][][] */ 41,23,-47,-66,127,65,59,71,26,43,34,-35,-18,-121,66,21,-42,-24,15,15,26,-58,-5,14,-124,54,-44,12,32,2,49,64, 
  /* [387][0][][] */ -120,-16,10,-60,-70,-18,8,-18,-49,-52,10,1,-79,-36,-5,-38,-31,-76,-56,106,43,0,-127,8,-5,-89,-45,-20,99,-108,-5,17, 
  /* [388][0][][] */ 72,64,64,88,-64,-21,-72,-48,-14,32,-4,44,29,-102,-116,20,-86,-66,74,-19,19,-127,-91,-30,6,-62,26,31,48,41,76,60, 
  /* [389][0][][] */ 12,-18,20,-34,21,-14,-10,12,25,73,50,47,-29,-11,27,-27,-17,12,10,-31,9,-54,15,12,21,-5,127,-11,26,-39,8,30, 
  /* [390][0][][] */ -119,-13,127,-93,20,-30,-21,84,-11,68,32,-110,-90,-56,-11,32,53,95,63,32,-42,-20,-28,21,59,123,71,15,37,-23,-107,-31, 
  /* [391][0][][] */ -76,9,111,95,7,21,-20,-84,127,-31,42,-24,-1,-86,40,-53,-104,-60,70,-34,86,4,-23,7,-31,-5,-47,78,0,25,75,7, 
  /* [392][0][][] */ 58,6,-3,-36,82,-81,-77,-40,-47,-88,36,26,-87,76,11,127,45,56,-43,-90,1,-53,-11,90,3,-88,36,23,-18,-16,-5,-11, 
  /* [393][0][][] */ 33,1,50,-43,40,-24,-70,-42,83,51,46,-79,-46,-26,50,-6,-19,8,127,-51,-52,-7,44,-32,40,58,-40,26,29,-23,-22,26, 
  /* [394][0][][] */ -74,-26,-65,61,-35,64,-28,-30,-49,107,-13,44,-39,3,7,-4,69,-55,40,98,114,-22,-101,-126,-43,67,-32,-4,-46,-127,-31,74, 
  /* [395][0][][] */ 12,103,-21,9,-20,-42,-61,-49,1,-127,-18,8,-66,8,41,-10,34,14,87,92,-8,-42,26,-6,-54,-39,-55,-30,14,34,4,-53, 
  /* [396][0][][] */ -3,23,18,-34,-123,-82,-120,47,112,85,46,-47,63,89,-78,17,38,7,14,-38,-70,-62,-44,37,-49,10,-62,63,26,-69,57,-127, 
  /* [397][0][][] */ 73,6,29,14,27,52,48,62,10,34,22,27,23,-127,36,14,-29,119,-30,2,-6,-1,27,17,-66,21,-19,-61,-20,89,-39,49, 
  /* [398][0][][] */ -1,-88,16,-39,103,-32,65,-1,9,76,-83,12,-59,14,7,93,102,32,-9,-41,31,-86,3,-34,70,49,2,19,-127,49,-12,-22, 
  /* [399][0][][] */ -60,-28,17,20,-51,118,63,18,8,-46,114,-32,-22,-59,-29,101,-50,-27,-115,46,-36,64,-47,127,-96,46,-77,-124,-113,76,-51,-20, 
  /* [400][0][][] */ 100,21,61,105,2,25,-2,27,5,103,31,22,44,0,67,-42,-61,-1,-4,7,-72,-61,-27,15,-81,-10,-31,-22,127,-5,-111,-42, 
  /* [401][0][][] */ -17,51,86,-50,-22,-55,-21,88,16,-127,-64,-61,-38,-44,27,-51,4,37,-92,-102,-11,-8,-83,82,-10,-41,-26,-91,-37,-11,-31,-19, 
  /* [402][0][][] */ -79,-9,-67,-2,-25,-15,34,34,39,11,18,35,-32,2,127,-10,-6,-1,-12,-3,40,-43,-39,-26,-39,33,-53,70,-68,-22,-38,55, 
  /* [403][0][][] */ -98,40,-71,8,-12,-127,28,-46,-52,18,-32,12,-105,3,22,68,20,-47,40,-14,6,-40,42,-49,-65,-38,-3,77,34,-66,-120,-42, 
  /* [404][0][][] */ 56,11,37,-24,-5,7,-127,25,11,-4,-22,-116,43,-68,-9,10,-2,35,-40,43,1,67,68,-59,38,-5,-16,-31,22,-22,72,63, 
  /* [405][0][][] */ 12,-47,-10,-27,-87,-18,-114,91,95,127,-13,-41,20,56,31,-48,-24,-55,-28,111,5,2,30,7,77,-65,-41,43,13,-44,-14,-108, 
  /* [406][0][][] */ -69,-51,56,27,-11,-65,53,-9,51,-29,-63,1,82,44,56,61,14,-36,2,-95,35,-35,-10,-39,-17,61,-30,41,-127,22,-98,-68, 
  /* [407][0][][] */ 26,-2,40,-26,-15,-62,-23,90,54,109,126,-74,-57,-7,-46,-116,56,-94,-36,-46,13,-3,-113,-4,24,3,-102,1,0,13,-7,-127, 
  /* [408][0][][] */ -30,84,59,-116,-54,-23,-19,46,-82,33,105,-23,39,127,34,-77,-61,38,-66,77,33,83,38,-48,-61,-8,-87,24,88,43,-77,-88, 
  /* [409][0][][] */ 60,14,78,40,23,25,37,-25,-16,-3,-71,-16,110,-21,59,-17,-27,42,13,-46,-127,41,-27,21,96,-57,28,54,-46,47,-39,41, 
  /* [410][0][][] */ -12,73,-83,-63,-49,-98,-29,46,47,1,22,-39,-65,39,72,-57,-64,-41,67,42,30,-127,16,21,37,-33,73,-70,57,60,-76,-13, 
  /* [411][0][][] */ -20,47,37,-37,-72,-31,26,-34,58,9,6,1,-76,-44,-123,7,39,67,-20,10,-36,127,-49,38,-42,69,17,33,49,56,54,-11, 
  /* [412][0][][] */ 48,-85,21,81,-121,30,70,-18,-108,-25,-2,8,86,8,-35,-28,57,54,-3,37,75,-53,-12,-24,39,-49,49,-30,-34,127,16,-49, 
  /* [413][0][][] */ 58,-67,-20,-73,45,-16,-16,-10,81,57,-14,69,-47,32,92,-66,-95,-70,13,41,-44,-127,18,-18,10,43,-70,24,-35,-52,-101,-30, 
  /* [414][0][][] */ 50,-46,-67,-18,57,-31,73,2,-47,36,4,74,-15,24,-41,48,-6,-30,24,-24,18,37,-25,41,7,-92,38,-30,40,26,127,35, 
  /* [415][0][][] */ 38,38,1,-58,-32,-127,-67,-60,-14,-31,-9,19,93,4,83,-43,-11,-95,44,-29,5,-36,-33,36,-31,-45,77,89,45,-36,21,72, 
  /* [416][0][][] */ -49,-4,87,-1,-44,-30,-12,29,-65,-31,34,36,-26,127,-13,6,20,-54,14,-16,34,0,-12,-52,-5,-24,16,-46,1,5,14,9, 
  /* [417][0][][] */ 47,13,8,23,-38,27,9,44,5,-19,-20,3,3,3,-10,58,4,-13,-127,-2,27,-39,53,-9,-67,27,18,53,33,-108,15,6, 
  /* [418][0][][] */ 31,45,39,14,-6,-68,-45,-21,21,54,25,35,-34,12,33,-43,10,4,27,51,72,55,-119,-8,-54,82,16,50,26,-4,7,-127, 
  /* [419][0][][] */ 11,31,11,46,-106,55,-9,-12,48,112,-108,21,53,32,-42,-102,-5,27,13,82,-60,-52,74,-54,-40,61,-62,65,59,6,-127,-47, 
  /* [420][0][][] */ 27,-62,-1,-12,9,-82,12,13,-26,-42,4,40,-7,-42,-4,-31,98,-2,-32,52,21,-23,1,66,-35,13,-67,-19,-62,-14,127,20, 
  /* [421][0][][] */ -26,-17,-21,9,-1,-18,10,5,-35,19,-24,17,40,71,-7,-19,-63,-47,-75,-2,-60,14,43,20,-17,-43,69,127,19,-19,-58,-45, 
  /* [422][0][][] */ -23,24,-10,33,-16,10,63,-127,18,6,57,84,41,-53,54,-26,87,-35,-46,-5,32,-25,-35,42,63,4,-67,-16,-3,-29,-5,-5, 
  /* [423][0][][] */ 37,1,-38,32,37,-127,-11,-24,20,-96,15,-14,18,33,-34,74,-9,-26,-7,5,-57,35,-13,-58,-82,-81,-78,-44,70,-12,-49,5, 
  /* [424][0][][] */ -55,38,24,-43,-43,-4,22,-19,-34,35,43,-31,-34,-1,-127,22,21,-18,39,-81,40,-41,-75,-24,-117,15,-66,27,8,16,-13,1, 
  /* [425][0][][] */ -7,30,-6,-15,-78,8,-5,16,-127,37,-72,-60,46,-23,-116,-10,122,13,-19,-57,3,-37,-53,-48,28,-10,-53,-18,-74,-10,23,46, 
  /* [426][0][][] */ -40,77,-73,127,-76,11,-53,22,-10,20,-9,12,-60,53,-99,-39,-99,30,-27,109,-68,-74,107,-53,47,-50,-73,41,-26,-64,-9,60, 
  /* [427][0][][] */ 33,29,127,-25,-21,31,70,-51,32,-38,-55,-13,30,-32,-68,42,-52,-27,-76,5,47,25,-48,21,14,-95,-80,43,-24,-15,1,-22, 
  /* [428][0][][] */ 94,-39,21,-33,127,-1,-32,-24,-6,21,-22,-10,9,-41,11,-36,54,-79,-46,-4,63,19,-36,-20,-30,-22,-35,-37,-8,-4,-75,-100, 
  /* [429][0][][] */ -61,13,3,-56,-22,-25,-27,12,-20,22,-5,16,-127,-47,0,-19,81,2,5,6,3,2,14,-4,-6,57,11,23,-55,39,-21,-42, 
  /* [430][0][][] */ -33,-8,5,2,59,-29,61,-3,-9,6,59,-78,-13,-32,5,43,-59,74,-27,55,103,43,1,3,26,-40,-127,-11,19,23,48,65, 
  /* [431][0][][] */ -92,28,-20,-85,-20,43,23,2,-63,44,42,-104,-28,-20,-17,-25,30,10,31,-52,-60,127,51,-90,69,103,5,41,0,-5,81,120, 
  /* [432][0][][] */ 127,-67,-83,10,25,46,-25,-72,36,-1,-25,10,6,-20,42,-71,-25,47,-89,-71,12,120,-78,-37,56,-63,47,-36,99,-7,16,6, 
  /* [433][0][][] */ 22,-3,0,-117,18,12,-62,-46,52,-15,-8,8,-7,38,51,1,25,-68,-83,-37,-19,-11,49,62,26,26,-8,-127,62,19,6,-57, 
  /* [434][0][][] */ 76,-10,53,74,-33,54,64,32,-14,-30,36,-18,-46,21,-26,-42,-6,31,22,-88,25,28,16,-54,-10,-4,6,-62,-29,-13,30,-127, 
  /* [435][0][][] */ -47,-15,-127,22,59,-3,-62,9,67,-19,35,-39,40,14,39,-73,-29,-77,26,47,-47,-56,-22,83,-25,-44,16,-3,-14,-78,40,48, 
  /* [436][0][][] */ 36,33,-82,-27,-9,44,47,27,56,58,25,5,-127,-83,-17,-27,-51,5,43,51,70,17,-4,-27,9,-62,-91,35,70,2,-33,70, 
  /* [437][0][][] */ 71,-78,73,39,90,-127,-53,-34,-94,-12,-40,-75,65,-23,-14,-5,-21,-52,-41,61,34,13,-78,-29,20,-35,-76,-22,51,-4,78,68, 
  /* [438][0][][] */ -82,9,-15,19,-54,22,36,-48,72,-106,71,-76,41,-127,109,9,5,-24,-53,-19,93,35,-72,26,-1,-23,-8,-85,-106,-41,-51,12, 
  /* [439][0][][] */ 44,-20,122,-7,37,-42,105,-21,7,81,-11,55,-20,-27,127,-31,-4,59,-13,-87,-69,-22,-79,41,-87,-55,-81,-9,56,11,-118,-3, 
  /* [440][0][][] */ 25,127,73,2,-1,48,-4,-55,76,93,-108,13,-50,-98,-62,56,58,62,105,-106,78,50,106,-9,-2,48,-75,37,-64,-69,64,6, 
  /* [441][0][][] */ -40,59,39,-37,-24,20,-8,56,14,127,24,-28,-6,18,-4,-59,-8,-7,-78,73,-18,7,-13,66,-100,39,-28,36,-2,-78,12,94, 
  /* [442][0][][] */ -70,16,-59,-75,-26,109,34,-85,-11,58,-43,-58,-54,-2,65,-41,-10,-77,60,111,-127,-9,-38,-56,-91,17,19,-21,24,-20,8,98, 
  /* [443][0][][] */ -91,-71,-74,11,76,79,-7,23,-39,-1,74,-53,4,56,-16,17,83,-45,-62,41,-127,-10,-27,-26,94,95,-4,74,-104,-36,-46,-61, 
  /* [444][0][][] */ 21,24,-19,-27,0,-38,-127,12,17,-21,-42,-39,-13,-77,6,-51,-17,-4,-33,-18,9,-3,-10,1,6,-99,96,27,33,40,5,14, 
  /* [445][0][][] */ 49,-34,52,36,54,18,45,43,-29,111,-76,-81,-10,-63,111,-38,18,27,12,-99,127,47,-75,-34,-27,-9,27,-45,-19,-41,-57,-63, 
  /* [446][0][][] */ 22,-43,-23,-1,-63,36,-44,-11,12,-8,-2,20,-29,18,68,16,127,14,64,-79,62,23,18,81,-18,6,59,-27,-45,-77,14,-45, 
  /* [447][0][][] */ -8,10,54,-3,-29,-5,14,-6,-127,9,-3,24,-18,12,41,-63,35,-49,1,-56,51,-25,29,-44,-17,-16,-19,32,50,24,-44,11, 
  /* [448][0][][] */ -27,-100,-18,127,-12,-63,69,25,79,-77,-14,18,11,21,-7,35,-59,27,56,-34,-20,45,55,-35,-30,-7,1,114,-57,9,38,15, 
  /* [449][0][][] */ -38,-91,53,15,116,21,-15,119,-89,76,-54,-31,-101,-76,36,-51,86,-9,-112,33,5,70,-92,16,-84,127,-17,43,32,75,-47,66, 
  /* [450][0][][] */ -46,83,3,-52,75,-8,-125,10,38,61,-70,9,20,-28,-34,12,113,7,-83,-79,7,-5,41,57,127,-112,-62,4,14,-12,-86,-2, 
  /* [451][0][][] */ 70,-74,-14,28,9,4,-30,42,-18,-56,20,43,-4,8,61,-3,17,30,-18,-9,-81,-1,127,37,55,-42,-12,-44,-12,27,62,-21, 
  /* [452][0][][] */ 28,-7,-8,33,62,-127,-14,56,15,6,-35,-103,-38,-6,-25,27,-36,14,8,-43,-48,-40,-25,17,36,-23,-50,45,-23,18,-21,13, 
  /* [453][0][][] */ 60,63,53,10,40,9,-31,11,9,-48,-127,13,-45,-13,-13,-59,23,-56,35,-31,-45,-76,15,60,-17,60,-18,-51,-34,-21,-11,-36, 
  /* [454][0][][] */ 31,-23,-70,19,-39,76,7,84,-44,6,-73,39,-40,16,16,-43,-13,-53,75,44,-34,127,13,-60,89,-44,-7,-47,-40,22,48,-5, 
  /* [455][0][][] */ -78,107,-4,41,78,22,-43,-30,18,55,42,-40,33,0,-18,38,-79,80,-33,16,29,-25,-67,-42,-104,127,-9,60,9,41,-67,86, 
  /* [456][0][][] */ -30,63,-37,-10,32,-75,22,-44,50,53,-4,127,-37,-5,-29,41,53,-27,-90,-31,67,-32,12,-24,3,48,5,9,9,-66,21,39, 
  /* [457][0][][] */ -44,-62,73,1,34,-27,-37,23,17,-3,13,39,-65,44,-6,40,127,-20,36,-18,25,-103,35,-82,-27,19,-37,15,-23,-56,-29,-20, 
  /* [458][0][][] */ 11,11,28,-6,-10,13,-22,35,127,14,-21,78,-47,-22,-39,75,7,-31,0,54,-35,-93,56,-12,-6,33,-9,28,2,-42,26,31, 
  /* [459][0][][] */ -65,-30,-88,-100,-54,-82,46,-6,-53,108,-23,-55,105,-14,-34,39,19,29,-5,77,127,6,5,51,-35,90,30,51,-17,83,-41,41, 
  /* [460][0][][] */ -29,-81,78,5,90,-2,-102,112,127,107,-66,26,-30,-32,55,6,-12,-42,-4,54,-9,-83,-53,9,-64,11,4,55,-53,-41,26,25, 
  /* [461][0][][] */ -75,-70,100,-39,-20,96,-127,56,-36,60,13,-12,-81,-102,-51,-58,27,-12,6,-85,79,42,25,-23,86,33,-37,11,8,74,75,17, 
  /* [462][0][][] */ -63,67,-46,-33,82,-28,-46,-52,-51,17,25,-127,34,26,-38,-64,-10,21,68,-3,-24,93,25,-37,68,-24,-107,0,-24,-39,-81,-28, 
  /* [463][0][][] */ 60,-59,-71,9,-127,11,-91,87,100,-66,-17,-104,31,11,88,48,-15,-3,1,-39,-27,-10,30,12,-49,-20,-7,-41,-103,1,-41,-21, 
  /* [464][0][][] */ 84,-100,-8,-36,2,25,-59,127,7,30,-51,3,-14,-21,42,-4,9,-33,24,-46,18,9,88,15,-50,4,51,-1,-30,-39,30,-37, 
  /* [465][0][][] */ -16,-17,43,48,-115,-34,70,18,32,127,38,19,119,32,-22,-98,-21,113,8,44,37,19,-100,2,12,79,72,-45,79,-69,-33,20, 
  /* [466][0][][] */ -79,-87,-24,-55,32,-23,-17,-48,97,1,19,-46,-2,10,-2,9,34,-5,15,40,81,-43,-44,12,-21,36,36,1,-24,-44,-33,-127, 
  /* [467][0][][] */ 63,35,-36,-96,79,-73,-1,57,-127,-100,-77,14,44,38,3,-73,-50,-55,-36,6,-52,-6,115,-30,-35,-44,23,-66,33,74,-27,11, 
  /* [468][0][][] */ 56,4,29,-22,-19,-82,-19,6,6,-46,35,91,113,36,13,22,-62,-61,-127,3,5,19,-25,29,24,18,50,-19,-28,-57,30,35, 
  /* [469][0][][] */ -127,-39,99,-62,-50,2,-69,-14,33,-12,13,103,-18,59,41,-7,-17,-3,1,-58,-60,40,27,-6,-23,-11,0,-44,38,-26,-56,-58, 
  /* [470][0][][] */ 70,38,52,-67,-15,63,-119,-48,-20,13,-3,55,-38,22,-49,-27,16,-127,27,15,43,-10,-2,-23,-39,29,9,30,-61,35,53,1, 
  /* [471][0][][] */ -6,-127,26,26,1,2,96,-39,-51,23,110,-64,-2,-26,56,17,-100,-63,65,-1,-57,30,33,11,-24,19,-43,13,-63,-42,1,-28, 
  /* [472][0][][] */ -8,17,57,3,32,31,12,-18,28,-38,-55,-19,3,-71,-68,-9,83,-10,81,7,22,-20,-21,-16,70,127,26,-49,-15,-13,41,75, 
  /* [473][0][][] */ 71,31,56,17,37,-44,5,7,-44,-127,-22,-9,5,-32,-75,-33,-36,103,50,111,26,-9,16,16,23,-82,-78,-14,2,22,68,98, 
  /* [474][0][][] */ 5,-51,1,-13,-1,0,19,-36,-34,21,-30,69,-24,-25,91,-101,3,-40,-63,78,37,12,-10,-20,127,41,-67,-64,-42,25,39,16, 
  /* [475][0][][] */ -62,-31,-56,-57,-101,93,-62,-7,1,1,56,29,-73,16,-127,52,107,-31,-21,26,-59,-60,-29,-38,15,27,15,-39,29,12,17,39, 
  /* [476][0][][] */ -78,11,41,-5,26,-19,-49,70,-57,37,-19,65,8,-26,16,33,-5,-89,9,-31,-59,-127,-23,-61,11,57,111,-84,-84,89,-46,-3, 
  /* [477][0][][] */ -70,-15,28,-21,-22,-52,36,-32,-93,71,44,50,-20,107,-28,-42,-47,-97,-31,-34,57,45,-8,37,56,18,-62,17,-111,127,37,-69, 
  /* [478][0][][] */ -80,-1,23,-93,-18,52,49,33,18,3,-97,15,-40,-8,29,5,-50,-41,-72,127,56,13,33,75,-18,88,-31,13,1,77,-9,-74, 
  /* [479][0][][] */ 40,36,16,31,62,-2,36,15,-5,23,-25,38,28,-14,23,-16,127,18,33,-77,35,-52,-24,-8,5,31,-62,-15,19,-14,31,-23, 
  /* [480][0][][] */ 65,-9,-4,13,-60,-9,-59,-19,54,-28,13,-70,35,81,-127,30,1,23,-17,-7,-52,30,-53,26,-55,54,-80,16,81,38,1,-92, 
  /* [481][0][][] */ 9,13,-24,41,-41,8,-17,127,4,50,27,-14,34,-17,17,-66,-38,11,-62,-4,-12,23,-3,9,11,-109,-42,-23,-2,36,-17,-2, 
  /* [482][0][][] */ -29,-53,52,15,35,22,56,-33,-4,-56,-11,91,67,82,-16,-10,-41,-36,-71,36,101,21,58,0,-127,-25,14,73,-3,51,-2,-49, 
  /* [483][0][][] */ -127,-10,115,59,90,8,9,-67,72,-66,-77,26,32,121,-3,22,63,54,45,-120,57,-26,93,8,66,-56,-121,37,-30,-107,51,30, 
  /* [484][0][][] */ -33,-28,71,-3,-11,77,-52,-2,-78,-37,-31,38,-1,-7,-16,-127,-84,-31,66,-26,-73,-33,-26,2,-41,8,-51,54,-73,-61,52,-33, 
  /* [485][0][][] */ 13,-11,-13,-63,-71,73,21,52,7,21,66,51,-47,3,27,58,19,-62,59,36,-24,4,55,71,127,-11,94,-37,-63,53,79,59, 
  /* [486][0][][] */ 57,11,-102,30,73,-68,-127,-15,-12,9,-55,80,-7,31,-82,60,90,-12,3,-9,-55,32,93,-36,20,-88,-2,-13,-114,11,111,0, 
  /* [487][0][][] */ -34,-56,-7,33,50,34,-93,-46,-26,19,-36,29,17,-13,36,-17,11,-9,-83,-99,77,-56,-59,0,-127,69,8,-41,66,19,24,27, 
  /* [488][0][][] */ -37,2,32,37,-21,61,-3,121,90,65,66,100,-95,60,-10,127,-22,-82,92,-3,-66,16,50,14,12,36,73,-3,-42,-54,-5,-8, 
  /* [489][0][][] */ 40,127,63,13,-43,55,36,56,-10,8,-7,21,93,-43,-17,11,-17,9,-2,66,-8,86,53,18,78,-5,79,-76,-17,-37,-11,34, 
  /* [490][0][][] */ -9,-68,-24,14,110,6,6,-39,-47,-60,12,-35,39,-37,-19,-29,6,2,24,7,-37,-41,-27,-96,34,-46,-127,-76,-40,-45,-35,77, 
  /* [491][0][][] */ 14,11,-4,-85,-13,-77,-39,13,-55,5,-127,-3,67,-43,-25,-53,-12,-84,9,56,-41,19,-31,-13,-9,51,-18,31,59,-81,-66,26, 
  /* [492][0][][] */ 68,-48,1,-92,-3,83,-9,-44,-32,4,59,4,111,5,77,44,-127,84,-4,46,89,86,44,4,-78,8,101,-19,14,-112,-81,6, 
  /* [493][0][][] */ -40,20,21,127,12,60,-45,8,24,-76,-18,-32,14,-43,19,-37,-26,-43,-38,-19,-42,17,-30,-35,42,-108,-53,67,28,-29,65,-7, 
  /* [494][0][][] */ -69,-10,6,67,-3,59,36,51,7,59,-2,21,30,-50,-127,40,16,15,-77,-75,-14,-58,56,-51,-9,-82,-42,-21,-16,-61,-57,-56, 
  /* [495][0][][] */ -41,4,79,20,30,1,-96,31,-31,75,-51,127,49,-34,-36,43,2,68,-13,17,10,1,49,13,-90,2,64,14,-114,-22,94,-23, 
  /* [496][0][][] */ 34,6,-114,-104,105,49,3,-103,45,-50,53,-24,-32,-9,64,-52,-88,-54,-12,-53,17,-16,100,-14,103,31,121,120,127,73,34,7, 
  /* [497][0][][] */ 3,12,-69,32,41,-127,29,-40,-47,19,-67,36,-112,-102,10,61,13,-57,8,-12,33,29,-16,20,-96,-30,-20,-11,-3,37,29,-4, 
  /* [498][0][][] */ -44,31,-6,28,101,56,6,105,-16,0,-124,20,-97,127,-4,-6,66,32,-32,38,-17,16,55,79,61,104,-119,-32,14,-84,-20,-27, 
  /* [499][0][][] */ -74,-18,-95,-64,70,-3,-61,63,-51,52,-84,-127,-14,-57,115,-122,-10,40,9,-13,43,18,-113,-67,-41,-47,-69,9,-34,-78,87,-12, 
  /* [500][0][][] */ -66,127,12,-120,-57,-64,-78,51,-89,-102,17,60,75,76,-86,-17,-111,16,-105,-87,-28,-9,74,-17,21,-77,4,90,-79,-89,-11,45, 
  /* [501][0][][] */ -16,-50,-68,54,-31,-33,-43,12,-19,-118,-27,127,26,7,-34,73,41,12,61,-50,14,-42,74,35,65,71,-70,-51,-6,41,-15,-37, 
  /* [502][0][][] */ 61,57,-38,12,-53,-6,74,56,-92,-14,-9,95,-27,34,-12,-88,-15,-30,65,47,-8,43,-32,24,-18,118,-64,-24,-10,-127,-50,12, 
  /* [503][0][][] */ -21,-39,-17,-40,-35,40,127,-2,78,40,-14,-6,11,-60,-31,-9,-28,-60,-4,13,69,-6,3,22,23,42,-80,-18,22,4,13,5, 
  /* [504][0][][] */ 8,-35,13,-30,59,71,12,25,2,-16,-34,12,4,-31,6,72,-39,-73,-127,65,89,80,13,6,8,11,-37,3,1,47,10,-11, 
  /* [505][0][][] */ 35,-36,68,35,-57,41,-127,46,37,77,-33,-114,-13,-63,-110,-60,-47,4,77,-25,8,-50,-65,22,107,15,-9,-60,-121,48,1,93, 
  /* [506][0][][] */ -29,37,22,-72,-68,-71,-34,-111,35,68,-69,74,37,-3,-6,104,21,-66,-90,-70,57,-100,-127,-21,32,-120,38,-8,32,40,44,66, 
  /* [507][0][][] */ -57,-29,-1,-1,3,-3,-62,93,-68,23,127,21,-3,12,-23,-15,6,-40,48,-6,-35,-27,-59,-38,41,-10,97,54,-25,21,29,27, 
  /* [508][0][][] */ 13,-26,4,-45,-8,-36,28,-41,16,-2,-75,19,3,-37,14,-2,21,19,90,-127,-18,-39,-17,23,-1,-83,-12,30,8,-2,-22,-25, 
  /* [509][0][][] */ 31,27,57,-23,52,-38,-78,-25,-49,9,32,9,-4,-20,-127,-27,38,-20,44,-5,62,-40,55,-106,74,97,-48,-33,-38,23,-75,-10, 
  /* [510][0][][] */ -85,105,-53,-60,-3,-6,36,64,-3,-18,58,-6,-38,-14,-45,12,-24,-35,-24,98,-50,31,58,-24,-16,82,-11,127,20,28,39,120, 
  /* [511][0][][] */ -1,-127,42,-30,27,-16,39,16,31,-74,-27,50,47,-11,4,-36,8,-81,38,3,-26,48,-53,0,-50,-6,-25,34,33,-63,103,28, 
  /* [512][0][][] */ -127,-27,-3,-51,35,73,-88,39,-21,-79,117,-102,52,77,-22,28,66,6,14,-16,-34,10,-43,-17,-31,11,-59,-43,21,-14,29,17, 
  /* [513][0][][] */ -13,-10,25,92,14,54,53,-16,24,-76,-40,40,33,-83,54,26,66,-33,-103,75,127,-24,-10,74,16,124,32,-88,-58,47,108,18, 
  /* [514][0][][] */ 58,-27,77,-56,38,-25,5,55,38,-69,31,47,104,-38,-40,-6,41,-39,21,-63,-8,-127,-89,14,-16,56,-53,-2,46,103,-58,18, 
  /* [515][0][][] */ -6,11,-35,14,-70,5,-47,-18,61,66,51,119,86,-1,100,55,-11,-14,-59,127,-19,-32,-71,1,-16,-7,-7,-58,-20,49,-119,-65, 
  /* [516][0][][] */ 56,-61,13,97,36,45,-51,14,-74,51,59,-54,57,7,-34,-22,46,-108,-12,1,52,6,-126,-127,46,-53,15,-5,81,22,-105,-36, 
  /* [517][0][][] */ 77,-18,-92,2,-47,-21,18,85,5,-52,17,-68,66,-20,-127,69,-27,-64,-96,-92,10,14,23,-82,27,-17,96,48,-6,-68,76,-57, 
  /* [518][0][][] */ -107,25,-33,35,-11,3,31,44,-85,18,46,6,45,-20,34,-28,122,43,-19,72,-23,-35,-79,-55,16,127,-95,-80,-80,-64,-11,-19, 
  /* [519][0][][] */ -14,-18,-16,70,14,-69,91,23,-19,-16,55,26,-21,-85,18,13,18,-45,28,15,6,-119,-2,-59,-19,-59,-41,-5,-31,-61,-77,-127, 
  /* [520][0][][] */ -95,-127,35,-89,11,-4,-46,-18,-23,-44,3,-60,16,-99,45,34,19,-23,-88,-14,-32,-44,-4,65,-40,-6,-44,23,-38,21,-32,23, 
  /* [521][0][][] */ 8,42,51,29,47,15,-12,40,-17,18,-42,21,-32,-68,15,32,-44,-64,27,35,-33,-1,-16,-64,31,-127,3,39,27,-24,-65,-9, 
  /* [522][0][][] */ 48,17,97,-3,-66,71,42,-97,-2,-31,-94,127,56,55,-1,28,31,-10,-24,-43,12,-27,-6,-31,-32,-56,-32,35,84,-70,71,32, 
  /* [523][0][][] */ 11,53,-41,-49,35,45,-42,47,21,46,-4,-14,-36,16,-104,28,127,-20,-18,26,-9,28,-29,-54,-27,-27,3,38,0,25,-37,-11, 
  /* [524][0][][] */ 112,-90,21,15,38,-22,-31,-35,25,-32,-96,-11,84,68,-70,54,30,-56,-55,33,21,37,127,-44,11,-67,-15,-3,33,-112,4,27, 
  /* [525][0][][] */ 10,-17,66,-68,-29,18,12,54,30,-14,51,-20,18,44,-106,-95,39,-55,-127,94,17,-103,-23,31,-6,65,18,69,-10,-23,1,23, 
  /* [526][0][][] */ -71,-54,-66,-61,36,-82,76,-97,-28,-46,70,127,-66,16,26,47,71,-27,0,69,23,-52,-88,-7,103,-48,29,-18,-18,-13,59,64, 
  /* [527][0][][] */ 27,19,-64,-93,46,-39,-33,1,-18,38,-17,21,57,32,6,28,8,-48,-5,1,11,127,100,-10,-29,11,53,-31,-16,51,-47,46, 
  /* [528][0][][] */ -4,-21,56,-98,-58,54,-100,44,-83,-78,96,71,-88,-19,-113,-5,-11,41,-90,-127,-44,13,-97,93,48,-91,87,50,117,71,-25,-75, 
  /* [529][0][][] */ 60,-7,92,-61,-6,18,-16,-65,72,31,65,12,-1,40,14,3,47,0,-33,25,-100,-127,-28,-44,-73,15,17,-15,27,40,21,-74, 
  /* [530][0][][] */ 4,-18,-33,27,60,-59,-47,62,53,-127,-25,37,-23,55,38,29,-10,-20,-13,8,-20,-19,-70,5,28,-37,-46,-29,-73,-11,94,96, 
  /* [531][0][][] */ 89,-24,67,-127,-10,97,63,-10,-81,107,-45,88,54,106,60,-69,-25,-116,19,-31,49,68,-70,-20,53,-93,-7,7,55,81,-123,-33, 
  /* [532][0][][] */ -59,-50,-2,-65,19,0,67,-27,-36,-8,-65,30,61,-14,78,-72,-20,-127,0,-12,47,-15,-54,83,-34,117,-107,-31,-87,59,-39,30, 
  /* [533][0][][] */ 7,9,-89,-10,48,22,10,-4,-1,69,57,64,-49,-50,97,-46,-89,-26,-53,127,-34,4,-35,-70,39,14,-4,-17,23,-48,40,29, 
  /* [534][0][][] */ 119,-79,-121,-12,52,-26,39,63,-74,-27,39,-25,92,-81,74,2,-17,-110,78,-40,31,76,73,-127,-64,23,52,-60,55,69,16,49, 
  /* [535][0][][] */ 19,-6,14,25,26,-47,-15,21,22,85,-14,-11,115,-14,-49,68,-26,52,0,5,92,-18,-73,-127,-55,-64,-76,-53,67,5,72,-83, 
  /* [536][0][][] */ 19,30,-13,63,8,124,55,-34,-99,119,26,-28,19,62,-13,-127,-1,13,-40,44,113,34,-23,-16,98,-30,-2,-30,-26,-24,-75,-31, 
  /* [537][0][][] */ -18,-59,-4,-11,16,-35,34,-61,19,-78,55,-10,44,-90,-38,-105,-64,-127,34,85,101,-18,26,72,-67,-61,55,73,28,20,2,4, 
  /* [538][0][][] */ 6,35,30,31,63,-82,-46,15,-14,-127,101,-17,-37,3,44,51,51,18,35,-59,54,17,-6,80,-59,5,24,2,9,10,24,-1, 
  /* [539][0][][] */ -51,-11,-30,28,14,-32,-89,-6,-106,5,49,-37,-33,17,-67,-44,50,69,6,42,-17,-48,-21,96,43,-64,-58,42,-18,127,88,7, 
  /* [540][0][][] */ -6,15,24,120,-21,-33,-127,21,-54,27,62,-18,-30,-24,-11,-61,17,-52,53,14,-15,9,-22,29,-3,51,-119,40,-15,-114,4,37, 
  /* [541][0][][] */ 29,-54,98,14,-47,-31,4,-74,-58,-19,-87,-1,72,-8,-16,-52,-12,41,-25,-10,82,127,71,106,15,-7,-51,48,35,-31,68,3, 
  /* [542][0][][] */ -45,-18,114,-108,92,-24,-29,17,9,17,127,40,-80,-86,-31,37,-17,-63,15,-14,16,24,36,-29,1,80,-2,40,-53,-14,35,-14, 
  /* [543][0][][] */ 39,13,-91,2,-74,-24,-43,18,58,-34,73,1,57,-24,44,-1,90,-21,-19,34,72,39,-76,17,3,-107,34,23,127,35,59,-5, 
  /* [544][0][][] */ -15,18,0,-8,-127,76,19,35,-38,-45,-8,-26,-12,53,73,1,9,-58,91,40,-66,74,66,-20,-14,12,-5,-4,28,57,-28,-15, 
  /* [545][0][][] */ -56,-6,-63,-104,-39,-15,-24,75,77,-6,15,-48,-35,-3,59,-23,47,76,-110,-22,-18,76,-74,-41,-84,5,-127,-19,13,27,70,125, 
  /* [546][0][][] */ -12,-121,1,57,-31,85,70,18,44,-76,-127,77,-4,-70,-16,-44,100,-78,18,-46,-71,47,103,8,-57,-28,68,-123,-49,103,-64,0, 
  /* [547][0][][] */ -91,-10,-3,-104,-54,53,63,90,-16,-39,50,-33,29,-40,85,58,51,-49,-22,-127,16,64,50,-18,44,-71,-83,34,5,71,-11,-10, 
  /* [548][0][][] */ 96,-125,-32,-31,93,-69,-3,60,127,21,-47,18,72,-96,-49,-49,-8,30,-117,19,-34,-40,-21,-119,93,40,16,-21,31,52,26,-34, 
  /* [549][0][][] */ 6,-57,-12,-1,45,5,77,-67,-37,127,-80,70,29,20,69,35,27,-5,-45,21,-26,40,-47,-28,-37,14,39,-8,15,17,95,22, 
  /* [550][0][][] */ 101,-25,-8,-127,16,57,-72,-37,-5,3,26,-32,30,-28,-97,-13,22,-13,-5,41,-12,68,-55,-105,13,35,-110,-27,102,43,65,-50, 
  /* [551][0][][] */ -74,51,-43,29,30,-14,-30,-127,-1,-46,-45,47,55,84,-56,-107,35,77,-20,-16,-56,-42,-33,6,-98,67,-72,-3,122,57,-50,-54, 
  /* [552][0][][] */ -38,-83,45,18,55,-99,-14,11,-48,39,13,94,14,100,-77,23,48,-37,-127,93,-47,5,6,-43,8,27,-48,5,50,45,-8,25, 
  /* [553][0][][] */ 12,12,-45,8,-31,-112,6,36,-33,-127,29,-3,0,-81,-23,89,6,20,-25,41,45,75,80,-25,28,-15,12,73,-94,44,12,-49, 
  /* [554][0][][] */ 58,-7,8,-20,13,9,50,-16,-43,14,-36,-38,40,-25,-4,101,-127,-56,6,-47,-85,36,-22,-24,21,-65,79,-34,-16,17,-21,60, 
  /* [555][0][][] */ 27,11,-1,-36,-71,-24,56,7,61,-49,-3,-21,17,-98,-12,-23,48,-31,-40,-35,6,-20,38,45,-27,-61,9,16,-8,99,127,-24, 
  /* [556][0][][] */ -40,-32,-91,68,41,70,-87,15,-38,-73,45,127,2,21,-22,81,25,3,72,119,-19,-48,-66,35,-44,-54,-18,5,117,2,20,-36, 
  /* [557][0][][] */ -36,-21,-70,66,71,-39,-4,13,-30,12,-36,11,-11,-127,-49,41,-37,50,35,27,32,13,37,-49,-51,72,32,59,41,37,-111,47, 
  /* [558][0][][] */ 15,56,-81,18,-72,-35,32,127,-81,-21,21,-9,-65,34,9,-40,-54,34,116,-33,42,-75,-68,70,37,-55,63,29,17,-19,94,70, 
  /* [559][0][][] */ -109,127,99,-37,77,74,-25,111,3,76,54,16,-63,-34,2,69,27,-37,62,-122,4,-12,-72,44,22,45,12,79,13,119,-54,36, 
  /* [560][0][][] */ -46,33,1,0,-11,33,22,8,12,-81,117,94,-35,-25,95,-58,0,127,55,41,58,42,52,103,33,69,-15,-81,12,21,22,-108, 
  /* [561][0][][] */ -75,78,-64,-26,127,-29,-47,-54,116,37,-62,-1,-20,54,-89,19,12,-1,-61,93,-27,43,41,-47,2,-2,40,29,53,-97,-23,15, 
  /* [562][0][][] */ -127,-81,55,-35,27,78,47,-52,-55,5,22,36,-12,16,25,-93,37,-54,-90,-3,70,13,-31,88,-2,-59,-47,-26,-12,49,54,68, 
  /* [563][0][][] */ -54,24,-85,7,-8,22,-9,-31,43,-3,26,27,-30,-52,34,-26,-25,-49,-97,-127,40,64,15,35,-16,12,14,41,72,14,41,9, 
  /* [564][0][][] */ -103,14,-36,-45,-37,-48,89,-15,-64,-2,-17,20,16,-28,49,98,-46,-41,8,-13,1,1,2,-81,-35,-48,-2,18,14,-18,-127,91, 
  /* [565][0][][] */ 18,-50,14,-5,76,3,-31,2,37,44,34,-7,-10,-71,26,35,-31,-127,-11,-20,28,10,30,17,39,28,63,43,47,8,-9,42, 
  /* [566][0][][] */ -18,6,-62,-52,-30,-79,28,71,97,28,22,-27,49,90,31,108,-36,23,-28,87,34,-54,-73,32,127,1,-3,-42,120,93,-33,38, 
  /* [567][0][][] */ -96,-19,-92,44,-127,-49,-79,-110,-69,63,109,-98,-12,-30,-57,-25,-64,-107,-69,27,36,-83,6,17,-113,-42,91,-38,86,9,-68,67, 
  /* [568][0][][] */ 6,2,-6,-17,-38,-127,-8,88,77,64,-9,-9,-46,81,-7,29,27,-12,-49,-54,67,55,115,-76,-76,90,-58,73,18,67,-87,-28, 
  /* [569][0][][] */ -19,37,20,19,57,-43,-115,-54,66,-127,54,-72,14,6,-32,-42,62,1,-57,92,-41,-53,7,62,18,-13,-82,-101,14,-53,-15,-49, 
  /* [570][0][][] */ 75,-1,-4,-17,29,-16,27,49,-82,5,-120,-23,-80,52,-18,-21,0,16,-68,97,32,7,-68,26,-9,-27,-52,45,-127,25,95,18, 
  /* [571][0][][] */ 47,39,24,-47,113,-76,-91,127,-35,-3,-28,-74,-88,6,18,41,51,-85,-54,123,-17,-21,7,34,47,-43,20,-51,-75,-4,-114,40, 
  /* [572][0][][] */ -127,-93,30,-17,69,62,-33,5,18,-28,54,-68,23,85,-59,28,-24,-13,-34,47,64,-64,-107,-50,-105,-57,-2,28,-57,-40,-64,95, 
  /* [573][0][][] */ 47,-27,39,-87,-12,44,34,-7,-24,25,74,-85,56,52,21,-6,-43,-62,-54,-16,30,55,-27,6,-127,20,38,-105,106,-89,39,35, 
  /* [574][0][][] */ -71,-26,25,61,54,-107,66,-1,-85,-40,34,20,-75,-20,-12,-38,37,12,-101,-60,-95,-111,-70,-82,68,-127,-44,-9,107,-13,109,55, 
  /* [575][0][][] */ -62,56,3,12,-17,51,-38,86,-23,-50,47,24,-15,46,-18,13,39,64,-42,-100,-49,-33,127,-58,-24,0,-16,-66,-13,-15,-43,10, 
  /* [576][0][][] */ 40,-38,26,4,24,9,-6,-109,47,-3,13,-62,49,39,31,-11,-127,-18,7,51,-54,-61,19,38,67,108,-30,-37,20,-84,-6,113, 
  /* [577][0][][] */ -24,-30,-15,-70,-45,-51,91,-18,-127,-6,68,71,94,32,21,-29,33,68,21,122,-58,-16,24,40,-76,-51,-23,71,15,-19,-21,-11, 
  /* [578][0][][] */ -10,-33,60,83,14,31,-20,-20,127,18,6,15,57,8,-8,-54,8,-26,12,46,0,-14,34,-50,41,-65,-6,-85,-62,-36,68,-65, 
  /* [579][0][][] */ -28,-5,-20,13,54,6,49,81,-48,-59,-56,64,-97,19,2,-24,94,86,48,35,36,0,15,29,-8,0,99,30,-65,24,15,127, 
  /* [580][0][][] */ -14,45,-127,15,-38,15,-6,-9,-32,11,69,-38,-52,-47,15,-118,57,-2,70,24,26,-42,-56,-18,29,-2,30,-43,-43,88,24,78, 
  /* [581][0][][] */ 14,-52,-6,43,-30,-25,-54,-21,87,-9,-30,-13,21,64,-47,58,33,-40,-52,-33,-27,-50,3,0,-127,-41,15,9,38,-85,-30,-14, 
  /* [582][0][][] */ -30,23,16,-33,51,-29,-54,41,-77,-65,-33,-47,77,24,14,-76,-63,69,-7,62,39,127,87,-54,62,-67,-72,-12,-8,2,-8,-60, 
  /* [583][0][][] */ -121,-19,55,-18,105,5,87,44,50,-11,68,-15,-105,-64,2,26,65,41,39,-28,38,10,104,28,-7,-25,-83,70,-127,-27,-8,-36, 
  /* [584][0][][] */ 22,-55,1,4,5,-26,23,-6,-49,97,-2,3,-127,-14,-56,44,-14,-25,11,-55,-45,16,-48,-2,27,-7,-1,7,-15,30,23,17, 
  /* [585][0][][] */ 3,98,-43,9,-21,-26,20,35,8,54,5,-30,-101,-8,127,-18,104,-99,-89,49,-4,-33,6,25,72,65,-70,74,75,8,-3,99, 
  /* [586][0][][] */ -52,15,27,-44,87,14,-28,-47,92,-51,-21,-25,127,17,-1,100,-11,17,-90,-50,-87,-75,-121,-59,-4,-10,-19,14,4,38,-23,52, 
  /* [587][0][][] */ 45,-37,-31,4,-72,24,33,45,2,36,-123,24,39,-29,-2,16,-57,-37,-2,57,29,56,25,-19,11,27,23,-42,33,-32,54,-127, 
  /* [588][0][][] */ 1,72,-53,-127,55,91,-60,61,-79,63,-16,-7,35,51,-14,24,-28,80,-62,36,-6,1,24,-48,-81,-72,-23,1,-70,78,-66,38, 
  /* [589][0][][] */ -58,123,47,-40,99,-42,21,-127,55,39,27,34,29,-98,29,-5,47,31,-29,95,31,-66,-18,-10,-17,90,31,12,2,-21,-31,62, 
  /* [590][0][][] */ -17,-80,-22,-85,63,-85,31,49,14,14,13,63,9,20,73,21,-127,-30,-34,-107,-45,22,25,-79,109,-119,8,52,-47,-33,87,-56, 
  /* [591][0][][] */ 54,-55,-15,-86,66,-3,-77,-36,-10,24,77,9,-48,27,37,-42,-39,-24,29,-38,-123,43,69,-17,-127,-49,-80,49,39,93,-44,21, 
  /* [592][0][][] */ 106,-9,-23,-116,60,-103,-127,90,60,79,-6,-25,-6,70,-7,53,-28,-13,-26,-14,-19,-45,-61,-17,4,75,25,-23,-21,23,-47,-43, 
  /* [593][0][][] */ -45,-36,-124,16,16,53,51,-38,-37,-23,-63,-127,-57,-22,-74,15,17,-57,20,22,-43,23,-11,114,-17,9,19,16,31,-91,13,18, 
  /* [594][0][][] */ -38,-74,48,-27,104,-90,-13,-114,31,106,36,-65,41,6,-117,-29,25,-41,-19,10,-127,-24,90,19,-10,66,68,57,36,85,-31,59, 
  /* [595][0][][] */ 46,-14,8,-84,28,-43,-32,65,21,22,7,-4,-88,-78,-27,18,34,0,14,3,-127,-1,68,-7,9,-6,1,-14,-95,-21,-50,-122, 
  /* [596][0][][] */ -60,45,54,-36,20,-17,-37,112,75,28,24,-18,78,-84,-101,76,-30,-53,-20,-6,31,7,-64,-76,125,49,-89,-57,2,94,-30,127, 
  /* [597][0][][] */ 7,-26,24,102,3,-12,-56,-9,71,48,18,-9,-95,-98,24,44,-29,-82,-64,3,-70,45,8,79,15,-7,55,-127,42,124,12,-101, 
  /* [598][0][][] */ 106,77,-127,-40,-1,31,-37,-95,27,-42,-109,-53,-5,-30,58,7,-36,37,28,-25,41,-21,2,23,66,9,-83,15,9,3,42,77, 
  /* [599][0][][] */ 10,-31,-33,-37,-28,-70,-12,23,-54,-50,-13,-40,114,-1,0,13,114,-13,32,-127,-53,-10,67,-14,19,-126,35,-37,-55,90,-45,48, 
  /* [600][0][][] */ 4,-35,47,-10,-120,7,10,16,8,38,-59,-33,-60,5,64,-127,-110,19,-63,11,-106,-40,12,10,-28,-18,-71,101,20,37,40,13, 
  /* [601][0][][] */ -28,8,-84,0,-37,34,49,127,-47,-39,-18,-15,30,26,-21,3,-4,-61,-48,20,-53,-38,11,29,-44,-28,-56,41,21,-27,-14,59, 
  /* [602][0][][] */ -110,-13,-46,2,15,-79,40,-5,-47,-127,-27,-8,67,-21,-20,38,-12,60,-18,-126,90,3,-117,0,-20,-46,5,28,-44,49,2,3, 
  /* [603][0][][] */ -47,73,-35,-59,-55,-43,16,84,-18,27,29,112,-32,-26,-127,-47,61,-6,72,-41,8,-52,43,-9,15,-92,82,4,17,47,42,-3, 
  /* [604][0][][] */ -24,-9,17,46,48,-9,-62,14,16,127,-53,-102,-17,47,8,-20,-46,69,-42,87,-30,-38,-35,-30,-25,-3,-107,49,9,-48,-7,3, 
  /* [605][0][][] */ -2,120,37,-29,-44,79,95,27,-125,-79,-61,7,-9,126,127,-55,17,20,-68,79,56,-18,-4,-5,95,24,46,-34,63,116,29,63, 
  /* [606][0][][] */ -25,-21,-27,46,-53,-65,12,62,-12,2,-5,61,24,-36,-8,30,-16,77,86,102,-127,-22,-25,-38,-14,-28,12,-97,-5,28,45,-20, 
  /* [607][0][][] */ -71,50,75,64,66,-60,8,-9,38,33,-61,-102,-44,-63,-11,-50,21,59,-34,79,127,-29,-9,31,-42,-31,103,63,-82,-109,38,4, 
  /* [608][0][][] */ 40,50,-127,5,-2,49,16,16,-59,2,-24,55,38,68,75,-42,80,19,17,-58,111,-69,27,-25,11,-50,-40,17,-9,72,-56,32, 
  /* [609][0][][] */ 8,27,30,-127,-22,-9,-99,-8,-6,-14,-102,18,-43,-29,23,43,-60,-22,-13,1,10,-49,31,0,8,41,88,-22,114,-2,-48,21, 
  /* [610][0][][] */ 26,7,-51,-99,20,31,-50,3,85,-127,40,75,108,-2,54,-4,46,-2,21,-95,38,10,-35,-2,40,6,28,-53,-54,-31,-60,-46, 
  /* [611][0][][] */ -5,14,12,-99,41,38,2,-17,-8,7,-22,-54,-3,-19,11,110,-1,-63,-104,-49,66,-127,-9,-35,19,2,-50,-28,-29,85,-17,0, 
  /* [612][0][][] */ -5,53,127,35,-19,-3,13,55,15,-56,-52,27,-5,-93,40,-16,31,-40,35,-19,-60,67,-9,54,6,-1,-19,59,-14,-43,45,26, 
  /* [613][0][][] */ 106,55,51,102,50,36,127,38,-10,-43,7,-63,-33,25,-13,17,72,-1,-16,7,-76,100,-77,61,-50,93,-18,53,-58,31,75,-44, 
  /* [614][0][][] */ -8,-17,-55,61,51,-5,-14,-4,54,2,23,-18,17,7,-63,-26,-53,5,7,17,12,32,4,15,-10,15,53,14,-51,-127,-25,-61, 
  /* [615][0][][] */ 1,110,-88,52,39,-42,14,18,35,-24,-89,1,-22,37,2,-25,-52,99,24,10,101,54,57,39,13,-63,68,127,11,100,100,6, 
  /* [616][0][][] */ -39,27,-39,-126,107,-118,127,78,9,-25,-33,-39,-16,-86,-60,48,77,-47,-4,63,29,34,-72,-44,-62,-26,-10,103,12,26,73,66, 
  /* [617][0][][] */ -89,-111,26,-18,89,16,53,-38,83,-12,103,-104,-107,36,-31,78,-127,-105,91,86,-9,-106,62,-99,89,-37,15,60,83,119,-93,-25, 
  /* [618][0][][] */ -37,-22,127,14,9,33,-47,39,13,-1,93,32,25,85,25,16,18,-19,-15,-13,-44,-49,12,31,32,15,42,-5,-29,-7,-26,45, 
  /* [619][0][][] */ 127,-81,-49,5,29,5,61,32,-1,9,9,55,2,34,53,-45,-19,-109,-55,-64,-34,-4,-56,20,103,-41,-68,-18,18,51,49,54, 
  /* [620][0][][] */ -4,77,4,-4,-104,73,41,-34,-16,45,41,-29,-31,-3,-76,4,127,-80,-110,-26,110,25,-15,1,95,-54,42,-97,22,-44,-56,36, 
  /* [621][0][][] */ 4,1,12,-63,64,45,25,-28,-60,-52,26,-15,-42,0,-4,-49,23,15,31,-12,44,54,-17,19,-29,1,-48,-10,127,19,25,66, 
  /* [622][0][][] */ -8,19,-107,19,-44,-44,-80,-11,-119,58,49,-24,2,15,90,-55,-26,-40,-22,21,52,54,-79,-77,-38,10,-25,-127,12,36,-28,6, 
  /* [623][0][][] */ -48,21,5,69,44,-62,-81,-127,3,2,-48,-64,4,24,10,71,100,46,-16,81,66,-77,-123,4,-80,-50,-52,-46,40,-41,10,13, 
  /* [624][0][][] */ -5,-40,105,-99,-17,-90,-86,11,-80,-24,95,-13,47,-37,0,-56,-85,86,-12,54,-107,38,8,-49,111,55,22,-127,7,-41,-61,-11, 
  /* [625][0][][] */ -127,-16,16,-50,61,-25,20,-15,47,81,25,90,-102,21,-3,-53,-16,-7,-20,-47,-11,69,-34,25,-23,-44,48,51,-30,-27,-93,80, 
  /* [626][0][][] */ 62,22,58,47,-70,89,3,23,-43,70,-39,29,81,-44,-50,-78,-15,100,-26,-58,54,-127,111,-60,63,22,62,39,1,-72,14,18, 
  /* [627][0][][] */ 8,8,14,32,59,74,14,55,-4,-49,27,5,43,-70,32,-44,82,17,-57,-127,4,72,33,58,44,1,7,-32,45,58,-19,-40, 
  /* [628][0][][] */ -19,11,-6,73,-58,-36,-95,26,-38,-59,-32,-6,-50,55,-95,-48,-14,-16,-35,-7,67,21,37,-14,-48,-42,12,-61,44,-47,-44,-127, 
  /* [629][0][][] */ 66,95,-118,65,-17,114,-12,74,127,-36,19,37,-72,60,67,18,91,31,18,54,-14,-26,-38,-24,65,-50,-63,50,64,12,36,-77, 
  /* [630][0][][] */ 100,-28,-93,-61,-65,14,-70,71,-34,123,59,-7,-98,-14,-60,116,-70,-63,16,-119,-26,16,-11,-87,-18,113,21,127,-100,-44,-77,43, 
  /* [631][0][][] */ -35,-65,-14,33,27,37,5,-2,34,39,44,48,-24,-49,28,7,127,74,-11,1,-59,44,-3,-7,7,22,-61,31,-12,-18,25,-43, 
  /* [632][0][][] */ -68,-120,-50,26,43,43,80,23,-4,88,65,68,83,-84,-86,-86,65,27,-93,-14,81,-86,3,-35,-58,24,-59,-82,-88,-28,50,127, 
  /* [633][0][][] */ -47,-47,32,1,51,31,-10,63,-73,38,-13,-55,89,61,-48,-127,-12,-3,11,-60,-14,-35,41,-30,-81,-41,-76,86,6,91,19,50, 
  /* [634][0][][] */ -113,-22,-119,-9,-1,28,-127,95,-42,11,-51,-87,-101,-76,-46,3,-55,-87,-13,-57,-61,-43,35,-91,-1,94,98,76,10,23,-37,98, 
  /* [635][0][][] */ 94,-3,23,-34,2,82,-22,-45,12,51,26,-122,23,-25,-99,71,13,-96,13,-54,13,108,35,23,35,-67,-22,115,-10,127,-77,-5, 
  /* [636][0][][] */ 127,18,46,-67,78,114,16,-116,2,44,-25,-23,-45,8,10,45,12,-15,-87,-8,-11,-28,117,104,63,-26,-42,25,48,104,37,14, 
  /* [637][0][][] */ 0,13,-54,32,-65,37,71,55,26,-39,78,53,79,47,14,-75,-36,-45,-35,19,-38,-41,115,25,-22,107,-29,39,19,127,-100,104, 
  /* [638][0][][] */ 22,-38,25,-80,-2,43,44,-29,35,-123,-54,-41,33,-72,-13,36,104,-60,57,17,-78,44,-40,25,76,-34,-49,-102,29,59,127,92, 
  /* [639][0][][] */ 64,-20,22,62,-20,36,-63,-15,74,3,47,-30,-37,38,27,-78,22,-6,-80,31,3,0,-64,46,53,20,-16,-8,-10,-67,34,127, 
  /* [640][0][][] */ -127,72,62,-92,2,5,1,32,30,-9,94,-37,3,71,9,-84,-47,4,29,79,-85,-77,-20,15,63,-86,-87,40,-19,-50,16,51, 
  /* [641][0][][] */ 21,-45,60,-43,32,-6,12,39,90,118,16,-50,18,-105,4,47,-89,-2,43,31,29,127,37,61,91,48,-17,-13,-61,123,-93,-12, 
  /* [642][0][][] */ -71,3,41,36,20,-44,9,-70,26,-81,91,-63,-113,57,-3,-46,-27,-47,-49,-7,-23,57,125,12,67,117,-117,9,127,27,-69,15, 
  /* [643][0][][] */ -119,22,34,95,100,124,71,54,-10,-1,-37,-82,-4,82,-16,98,62,6,48,8,0,-22,-19,-13,-28,-39,-78,57,-19,-127,-91,-7, 
  /* [644][0][][] */ -72,-52,5,-105,-38,76,46,40,-99,36,-74,2,3,-40,45,68,11,34,-8,5,-22,-59,-11,91,47,73,-74,-48,5,-127,-32,-13, 
  /* [645][0][][] */ -21,-10,-33,9,76,98,-13,73,-31,-43,55,95,31,39,-125,-9,-31,-48,-80,0,-57,-10,56,-65,-75,66,74,22,101,21,50,127, 
  /* [646][0][][] */ -44,-71,-66,24,-46,121,-39,-32,100,77,-50,41,-67,21,-13,-97,-39,-61,-127,62,32,47,-56,-68,31,104,-68,-8,-19,90,16,52, 
  /* [647][0][][] */ -127,107,-62,-56,120,-73,6,-29,-32,88,88,31,35,-17,20,-42,-75,26,15,-20,-29,31,-4,25,36,-13,74,65,-1,34,15,-15, 
  /* [648][0][][] */ -20,-127,68,-68,-21,-19,-1,-59,67,46,5,-50,-52,-34,22,15,2,46,31,-19,25,-28,51,-13,32,91,11,73,-66,-6,89,46, 
  /* [649][0][][] */ 39,82,29,56,-56,33,55,-2,-119,-102,-47,-2,50,-30,-28,-25,40,36,-32,-95,8,13,67,-18,-63,79,15,-27,5,-105,2,127, 
  /* [650][0][][] */ -8,-35,-17,-92,76,46,8,-44,-10,36,-65,-56,94,-50,3,46,-80,40,78,46,-11,127,-9,-44,-42,-23,-75,-22,-12,64,49,-44, 
  /* [651][0][][] */ 0,-41,-1,41,18,-1,28,-65,-127,-73,52,-30,53,44,12,-39,-32,-10,9,-9,0,13,19,-21,80,16,-56,-82,70,45,21,-44, 
  /* [652][0][][] */ -33,35,51,32,5,39,6,27,8,35,95,22,46,-61,5,-46,6,53,-43,7,-61,67,-102,-10,-15,-6,-26,29,127,-4,30,32, 
  /* [653][0][][] */ 69,-63,-82,7,31,99,-6,11,-47,-16,9,-30,-19,4,31,-127,121,-9,-33,-17,84,11,60,-37,17,-44,32,-57,82,-27,78,106, 
  /* [654][0][][] */ 9,-41,49,9,-7,43,46,32,0,11,27,-59,-29,32,-47,31,22,29,38,77,-53,2,26,7,-18,5,-127,-24,14,35,20,63, 
  /* [655][0][][] */ 4,-53,17,89,-4,61,-29,12,-105,-84,-39,-51,-31,29,40,94,-10,5,-28,-27,-30,32,-127,-17,2,-41,-111,-57,21,-39,-116,-71, 
  /* [656][0][][] */ -22,44,-89,58,-110,17,1,15,79,58,-28,-27,-4,15,20,-44,59,27,21,-5,14,33,26,-33,-16,71,-22,33,20,-51,-50,-127, 
  /* [657][0][][] */ -19,-2,86,54,-15,34,-28,-12,93,-55,-20,-66,5,-74,20,46,-1,1,20,127,-15,-67,-45,22,60,79,-9,5,-67,15,-12,84, 
  /* [658][0][][] */ 49,14,46,118,-27,-113,-50,-70,4,8,-1,-67,-30,-11,-73,31,78,43,-19,101,-41,-79,-33,-18,37,-48,97,-68,-127,84,-115,32, 
  /* [659][0][][] */ -14,9,-67,127,70,25,29,70,-17,19,3,52,-27,2,-2,-56,79,18,-23,53,-35,-38,-34,2,0,35,49,25,-29,-16,-26,14, 
  /* [660][0][][] */ 36,37,-35,-106,13,-61,-25,-87,-19,6,59,-29,70,-10,-56,124,14,-6,-58,106,-8,45,5,-127,36,-17,47,38,19,5,-47,-56, 
  /* [661][0][][] */ -8,46,30,-94,38,61,1,-82,34,-13,61,-5,-13,36,40,-36,-89,-104,73,27,56,-32,15,-53,-74,-69,-127,-19,33,-18,-100,71, 
  /* [662][0][][] */ -29,-93,-21,-45,1,-94,45,50,-53,84,-41,37,-12,86,-62,-32,38,75,127,-37,94,-41,85,-77,95,-61,4,25,-20,-15,-16,33, 
  /* [663][0][][] */ -15,127,3,-7,-38,13,-56,23,5,-26,-63,13,-32,-33,-29,21,5,38,47,30,26,-36,-52,-124,14,-44,4,-51,-85,-32,66,-58, 
  /* [664][0][][] */ 63,-16,11,-55,58,79,-70,28,-18,88,-13,-46,123,-33,-43,21,-37,14,42,127,-85,-25,54,15,4,-79,22,21,-31,-1,53,19, 
  /* [665][0][][] */ 13,34,48,-61,-66,-21,27,92,30,-52,1,-127,-24,-5,-9,15,36,11,-53,23,90,47,28,-34,-39,-12,25,1,19,-45,-88,12, 
  /* [666][0][][] */ 99,-5,-24,10,-118,12,-53,-84,-56,-38,64,4,-22,-47,125,40,-33,-28,2,-87,-30,51,18,55,127,-122,-13,-115,-87,-38,69,51, 
  /* [667][0][][] */ 11,82,-3,26,77,24,-17,-14,-26,45,75,-68,-60,60,34,77,121,-31,40,8,-16,12,24,-16,-34,127,-42,-23,-7,-19,46,-120, 
  /* [668][0][][] */ -21,36,4,40,-15,-5,-56,55,-55,-2,47,-38,-29,-43,48,-61,21,18,-45,39,5,88,-23,20,-127,-68,1,-28,20,51,23,-3, 
  /* [669][0][][] */ 8,3,2,8,-17,-17,0,0,-54,3,-127,1,-49,30,24,-4,6,36,14,-22,15,10,27,-7,53,-12,-62,17,-9,28,21,-71, 
  /* [670][0][][] */ 35,-35,101,-19,29,10,-2,51,-57,29,13,15,-77,-127,-92,-22,99,-82,-30,38,95,-48,-51,34,-53,-22,73,7,0,20,46,-18, 
  /* [671][0][][] */ -1,11,82,15,71,-43,30,14,27,-109,39,-87,-5,54,37,84,36,-127,-26,43,86,2,-48,89,-14,-41,-22,-34,24,25,-32,-84, 
  /* [672][0][][] */ -121,30,31,81,5,81,127,80,38,-37,27,-7,-69,-86,9,62,-15,-11,-39,16,-126,15,-72,-102,85,-19,-121,28,-22,-117,12,-33, 
  /* [673][0][][] */ -82,8,27,-22,60,41,-4,-51,-87,-24,52,-42,94,-74,-70,-29,2,-2,-88,-13,-19,27,127,-14,60,18,-42,31,-51,18,-53,56, 
  /* [674][0][][] */ 111,6,82,7,74,-37,107,-44,68,38,-12,5,1,127,10,14,31,6,47,-15,56,19,23,-73,50,11,-18,46,-41,57,76,64, 
  /* [675][0][][] */ -46,-80,49,-36,5,-3,-42,5,8,52,51,-22,-71,-24,-4,0,1,-24,6,-42,23,55,4,127,-30,-64,-94,-75,110,12,-83,-38, 
  /* [676][0][][] */ 76,-42,18,33,57,43,-8,-18,-31,127,18,-43,-62,-2,0,40,-100,50,-29,54,-33,7,21,19,-3,-82,24,13,104,-111,77,-70, 
  /* [677][0][][] */ 41,-18,-125,-52,10,-29,74,-29,-44,-49,100,-34,15,-46,-12,-53,16,-77,-125,-50,4,-19,40,127,-67,-34,-18,8,-32,-30,3,44, 
  /* [678][0][][] */ -9,-44,38,-11,36,39,103,63,7,28,-38,-4,-95,45,17,-34,48,-21,-72,-107,-96,-41,-47,12,-68,29,-10,127,46,-53,50,87, 
  /* [679][0][][] */ 31,-17,91,-1,-34,-37,-23,-55,1,33,-5,3,2,-15,-21,48,-89,-127,22,-43,8,61,-57,29,9,34,-34,20,41,-19,8,-4, 
  /* [680][0][][] */ 3,-58,-21,-46,16,-72,56,-26,1,-24,43,35,27,9,-30,-23,-67,3,-46,8,6,-51,127,48,-11,29,23,-47,-33,72,51,90, 
  /* [681][0][][] */ 59,-15,-18,18,63,32,66,18,-88,16,-37,-2,-55,-38,-34,-61,56,-33,36,-30,19,56,-7,-6,-36,-60,-65,-127,92,-29,-44,-24, 
  /* [682][0][][] */ -45,-41,44,-21,38,14,-25,48,8,53,39,-2,10,15,-127,-12,6,-48,-1,9,7,22,-12,-28,-20,43,-40,27,-32,-21,17,-84, 
  /* [683][0][][] */ -11,27,62,-30,42,-21,-28,23,4,61,-55,72,45,-127,-43,-12,26,-16,-3,-33,33,3,4,-25,-24,-21,-40,-54,51,60,-20,-26, 
  /* [684][0][][] */ 85,-4,-74,-18,-57,-52,-20,52,15,-43,-34,-30,82,-45,-63,49,-78,-86,12,-35,-40,0,-108,47,127,20,-36,-55,-118,4,-99,-4, 
  /* [685][0][][] */ -52,-19,34,54,-88,32,-48,67,-83,18,90,-24,-11,32,19,-57,-33,-73,-7,84,45,-127,-105,9,27,-14,-84,-44,-75,72,-66,39, 
  /* [686][0][][] */ 37,35,-43,-73,-19,-70,-80,-63,-44,14,-69,49,-56,-6,-10,-51,-73,-127,-18,118,111,-68,101,117,13,4,49,-59,86,-16,-10,62, 
  /* [687][0][][] */ 127,108,-1,42,16,60,112,2,30,-92,-116,-52,-30,-76,-49,-68,-6,21,22,68,-24,43,-64,-24,66,-89,-12,25,40,31,-9,45, 
  /* [688][0][][] */ -3,68,19,106,-74,-6,47,72,-107,-59,-53,-8,46,-20,-74,-73,38,-41,-93,35,46,-127,-12,-3,3,-7,-118,34,69,87,75,6, 
  /* [689][0][][] */ -43,19,71,-45,-23,-59,-11,72,-22,-80,28,127,-15,95,38,-4,-38,-4,-10,-18,-83,51,-68,1,-6,-68,124,22,-50,70,-77,-24, 
  /* [690][0][][] */ -43,-14,-127,32,103,-122,10,49,-44,-108,31,47,78,43,16,-11,73,-14,9,-39,80,-104,10,-113,77,-12,5,41,78,-3,-9,7, 
  /* [691][0][][] */ -5,-82,19,-105,63,-45,-85,94,17,21,68,62,47,1,-44,17,-21,-127,-41,88,-8,54,-73,36,-23,-25,70,-77,-40,6,13,10, 
  /* [692][0][][] */ -22,49,73,-13,-57,-28,-64,-89,-39,-47,19,3,127,-31,65,-30,-47,-15,52,115,19,22,19,-63,10,6,-124,-35,-11,11,-8,81, 
  /* [693][0][][] */ -100,69,36,-14,25,51,62,2,35,-3,127,-8,66,9,-50,88,-70,-88,34,7,76,-8,12,83,46,-75,66,-21,41,49,68,-31, 
  /* [694][0][][] */ 81,-53,55,-12,59,-17,48,-41,23,-45,57,11,2,-8,66,17,61,-34,-70,88,-31,-7,-8,30,49,-68,127,83,-9,55,6,-19, 
  /* [695][0][][] */ -28,63,-86,18,-71,24,-6,-127,-66,34,-47,22,0,7,22,-36,-37,23,-85,39,55,67,7,26,-3,30,-59,-71,-53,-33,-77,50, 
  /* [696][0][][] */ 12,9,-127,1,20,-39,7,62,-40,-21,-36,37,62,27,-43,-8,60,-58,-77,20,-54,9,-109,-12,12,56,-60,22,30,38,43,115, 
  /* [697][0][][] */ -27,17,-2,-12,-22,51,-26,65,55,92,-22,-44,-33,-62,-127,11,-33,-21,68,-14,-75,25,-31,-57,-9,-59,17,-50,42,56,34,-53, 
  /* [698][0][][] */ 5,15,32,-55,-39,39,1,-18,95,37,-16,29,32,18,-49,3,16,54,24,13,41,77,-21,-23,12,-84,69,12,-34,-127,127,8, 
  /* [699][0][][] */ 53,110,60,-56,-33,-73,57,-10,0,37,-7,7,3,-11,118,-47,11,27,1,-77,13,53,56,-4,-6,14,-104,-82,0,12,-127,42, 
  /* [700][0][][] */ -41,11,-61,-10,-98,54,127,-26,15,26,-103,85,76,39,45,-1,66,-66,-63,-88,-20,52,19,-43,56,36,-14,-1,31,38,12,-39, 
  /* [701][0][][] */ -11,-43,1,-29,-121,15,-15,7,-63,-69,-22,-48,-9,-46,17,43,-98,-94,-27,-24,-29,56,7,-31,-4,-35,-45,-50,62,127,-123,4, 
  /* [702][0][][] */ 98,-46,24,-52,-43,-57,61,91,96,66,-24,27,73,4,-127,-67,81,-67,-103,-29,-79,-47,8,-25,-19,-44,-82,-11,68,-10,37,-51, 
  /* [703][0][][] */ -11,0,-21,-30,-45,5,11,-11,39,-28,-33,24,127,5,-102,-14,48,-35,-21,-9,9,-60,-44,-4,5,-16,-48,-29,19,9,-12,-18, 
  /* [704][0][][] */ -31,-16,-19,4,-11,127,29,68,2,71,-71,-67,70,23,-111,92,-20,79,12,-4,-34,-19,57,-33,43,122,-4,-72,-20,48,32,-58, 
  /* [705][0][][] */ -58,40,-43,79,-5,-49,42,-104,-1,-34,105,36,-51,86,-49,48,-37,-47,-75,-3,7,-81,-127,65,-39,-20,-29,-94,78,-68,-46,80, 
  /* [706][0][][] */ 19,58,127,104,39,66,57,22,-9,36,41,-95,-8,-92,21,-19,-27,68,93,-14,-54,42,4,91,-4,-46,56,-79,-36,14,65,17, 
  /* [707][0][][] */ 36,40,-60,-21,92,-50,98,-23,-13,-33,-14,-127,-80,-59,-24,-36,60,53,-15,58,21,-19,-38,-44,46,48,39,37,-4,-16,-98,-47, 
  /* [708][0][][] */ -41,-31,-70,-4,-49,23,-39,-37,63,-108,-127,90,-103,-15,15,-43,13,-26,-49,31,96,-43,-76,39,-24,-55,-6,78,36,32,8,21, 
  /* [709][0][][] */ -127,-54,12,12,52,-7,6,1,-67,-42,-62,41,1,3,92,-43,40,104,-48,73,-56,13,-11,-49,-4,-81,15,23,-38,-72,50,85, 
  /* [710][0][][] */ -38,-25,49,-24,44,65,44,-60,30,43,2,-8,9,60,12,75,32,40,-44,30,51,31,127,12,-3,37,-49,-25,-31,17,-10,2, 
  /* [711][0][][] */ 36,13,-39,-20,-3,-51,18,-19,32,64,73,17,20,21,-10,-50,-18,-21,48,5,-58,-1,-27,22,-79,67,-47,-43,-127,-30,49,36, 
  /* [712][0][][] */ 46,-29,16,125,-49,94,-25,118,66,-32,27,-46,-81,7,-80,-55,90,-13,-36,27,33,-81,59,-17,-46,-127,-79,-56,63,9,-15,8, 
  /* [713][0][][] */ -2,-41,43,33,-29,32,-19,-21,-20,-41,81,13,-19,-127,-67,36,-2,0,-7,-3,-18,34,4,7,-70,-78,-84,32,-53,-47,19,14, 
  /* [714][0][][] */ 112,56,-50,-127,110,65,63,-60,51,-45,4,-29,-7,-6,33,-49,4,-45,-9,-5,63,-38,37,87,60,17,-27,27,-106,-77,8,-16, 
  /* [715][0][][] */ -64,2,21,-93,-101,-56,4,38,47,42,34,-69,-54,-24,18,-17,17,-127,22,-30,-13,14,106,-44,-56,-126,-47,31,69,16,-34,122, 
  /* [716][0][][] */ 7,-6,31,-19,65,-3,63,20,10,34,93,-13,-31,-18,-29,-68,35,24,2,-113,-66,127,38,71,-59,33,15,-1,8,-50,43,11, 
  /* [717][0][][] */ 72,47,54,17,40,3,-5,-60,-25,69,37,21,-40,-3,-24,-85,-67,46,-54,-9,127,-61,-62,65,-33,-67,-28,-35,67,95,83,-118, 
  /* [718][0][][] */ -74,127,13,-18,-63,58,-39,-16,-18,-12,-53,-48,33,8,70,58,45,16,44,122,-58,32,-93,84,123,-39,59,-91,44,63,9,39, 
  /* [719][0][][] */ -19,-5,-20,53,25,-53,42,41,-83,75,-9,-107,-38,35,59,-93,-37,-40,24,40,36,13,62,39,89,-11,94,30,-98,38,-127,19, 
  /* [720][0][][] */ -67,127,62,11,69,-4,-13,1,-33,14,-8,99,66,60,-6,-7,-25,-43,96,63,109,-94,-6,-29,22,-9,-26,-18,-54,-18,-95,-30, 
  /* [721][0][][] */ 127,-22,-14,20,-83,-7,-9,-1,-16,-63,-12,-44,90,-29,12,14,92,-12,24,71,-29,-79,-35,-53,52,-27,98,103,24,-108,-17,-18, 
  /* [722][0][][] */ 67,-75,12,-35,-12,21,-64,7,-68,39,25,-7,-98,25,-61,48,127,-99,-95,87,71,-10,-72,37,35,20,-99,47,69,1,-22,24, 
  /* [723][0][][] */ -87,19,-28,127,84,-54,-41,35,-48,-120,-41,-63,-58,71,-100,107,29,-17,-45,20,61,71,-5,-15,22,54,34,47,31,46,-100,-49, 
  /* [724][0][][] */ -83,-10,-34,34,-6,-24,5,89,-6,127,-19,-11,-3,12,2,28,-15,15,16,-22,25,-40,-34,-42,-21,54,32,-16,24,-14,-22,14, 
  /* [725][0][][] */ -39,-73,50,2,44,-109,14,65,-50,22,-127,97,-59,-62,-59,90,-37,67,-84,98,21,-2,-58,29,21,-44,45,84,37,-8,31,5, 
  /* [726][0][][] */ 53,116,-5,16,-8,8,-23,9,-127,-34,21,30,48,97,-60,-106,9,-96,-70,84,3,-13,77,-37,17,61,2,22,-45,57,40,-39, 
  /* [727][0][][] */ 30,-48,-4,-103,72,-20,9,73,127,-14,18,43,-35,-7,90,26,55,-57,-33,12,43,-57,-37,69,-14,-69,-26,76,-3,-81,39,-67, 
  /* [728][0][][] */ -53,10,-38,85,14,127,62,-12,-24,-28,123,-17,48,-18,108,-38,17,1,101,-26,-33,40,-64,-62,-17,-38,27,2,14,-13,-28,-74, 
  /* [729][0][][] */ -40,-44,-11,-119,9,51,58,41,37,-6,-60,-72,48,-48,-107,-107,-38,-26,18,-127,-45,114,-59,-30,-30,-13,53,-112,23,44,0,11, 
  /* [730][0][][] */ 1,15,-81,66,74,71,-108,57,-24,94,123,47,10,40,-10,2,20,-11,68,-56,63,-100,83,-21,-105,-34,-38,-127,-46,-8,-103,-54, 
  /* [731][0][][] */ -127,-26,-9,51,93,-4,-75,49,0,-5,-64,-19,-37,88,97,-42,-36,12,-40,12,-2,29,-6,46,-65,81,23,75,-5,88,-1,-4, 
  /* [732][0][][] */ 35,-39,48,-65,-75,113,13,127,52,-4,-2,-45,53,-14,-40,22,-11,4,20,-20,20,28,-90,-14,-61,-37,59,-1,-14,-55,7,6, 
  /* [733][0][][] */ -63,59,-50,-90,54,97,40,5,17,16,-5,-3,-22,-41,54,-47,3,-23,-14,-57,-25,66,-45,21,-18,12,-70,127,9,109,-42,-32, 
  /* [734][0][][] */ 3,-30,68,-9,40,42,-37,38,127,47,-39,-10,13,48,-74,-17,112,40,28,-13,-14,-11,61,56,-65,10,-1,37,36,-27,10,-75, 
  /* [735][0][][] */ 31,127,-27,-82,7,-46,60,66,-3,-50,84,-4,-12,-20,33,-41,25,42,8,-18,10,-14,-62,-31,-39,-44,-5,24,57,89,-17,14, 
  /* [736][0][][] */ -32,-47,-75,1,98,-30,43,78,-8,-3,39,47,26,20,16,-3,-28,26,111,67,47,-127,33,34,-56,51,-32,-9,11,11,-20,65, 
  /* [737][0][][] */ 13,60,18,-77,-46,-6,48,127,-63,-7,7,75,78,5,19,-17,8,-5,-52,-10,65,-53,-33,8,46,-48,40,-36,9,9,-17,-19, 
  /* [738][0][][] */ 1,-58,-42,52,16,-57,-21,-60,-46,-39,36,52,-12,14,70,-52,2,18,-17,-24,-29,-94,-5,-47,58,76,69,-18,-1,-13,-127,49, 
  /* [739][0][][] */ 35,-62,25,-81,-10,102,5,127,-2,119,31,36,-89,40,-32,-12,-67,-45,104,73,-21,60,118,-24,31,-32,-36,78,74,12,82,-40, 
  /* [740][0][][] */ 47,-37,30,12,-45,-3,-17,-28,7,-11,-31,41,21,20,-52,-43,97,89,68,40,-86,-29,-11,-46,127,47,-53,34,25,-60,107,6, 
  /* [741][0][][] */ -28,-36,75,36,-35,-53,-3,-74,-74,-40,56,106,-25,23,-40,-16,25,-10,-41,73,58,-14,-16,-111,-70,58,-97,62,109,28,127,10, 
  /* [742][0][][] */ 77,-61,-1,49,-63,79,-70,18,-114,-40,78,-125,-106,-9,-34,-4,101,-13,-22,50,12,47,-88,-125,66,33,75,-67,-13,-47,127,-15, 
  /* [743][0][][] */ -2,11,-41,-44,40,-76,23,-25,-27,-26,-17,62,-20,-127,-20,-55,-41,22,20,-36,-59,37,75,-17,38,-34,-20,-39,-34,65,-44,-55, 
  /* [744][0][][] */ -26,-9,-54,-13,71,80,66,63,-34,-4,12,-8,2,-42,-16,67,-3,2,-2,-15,19,14,-32,-54,11,26,54,-29,127,-22,71,-34, 
  /* [745][0][][] */ -14,13,-44,52,-2,-1,53,72,-42,-25,20,97,-29,-49,-22,-20,49,12,-30,55,15,-74,-37,-127,-84,81,-1,-2,79,-15,-30,11, 
  /* [746][0][][] */ 94,-100,-46,-32,31,-104,12,-13,36,56,28,-7,15,43,-12,-19,109,-73,21,127,16,96,-27,45,-23,44,-54,30,84,-36,-107,37, 
  /* [747][0][][] */ -48,-29,86,-127,-42,10,46,109,-70,100,115,7,33,-16,34,-110,4,-39,11,80,-90,20,-45,84,18,-52,20,-42,14,31,61,61, 
  /* [748][0][][] */ -104,88,-46,-20,71,38,5,39,-47,38,-23,-54,81,11,29,-25,-127,65,18,88,11,-34,-125,3,38,-11,-45,22,-1,0,46,116, 
  /* [749][0][][] */ 14,35,-16,1,-18,-15,-26,-111,-8,40,44,-37,26,-56,20,23,7,61,24,60,-17,31,58,19,44,-2,33,127,0,11,-6,38, 
  /* [750][0][][] */ 11,-43,9,-38,-1,-21,52,69,-108,-115,96,-3,34,-36,-54,22,100,-81,-34,89,-3,70,7,-22,-12,-44,-28,-58,36,21,38,127, 
  /* [751][0][][] */ -36,29,-46,-6,-3,-27,-3,29,-7,61,-13,-22,-45,8,-68,-20,-72,25,-127,31,37,14,-19,67,3,-61,-47,-16,103,53,-4,-40, 
  /* [752][0][][] */ -19,119,39,7,104,38,70,47,49,-55,-16,-7,-31,112,-44,51,-74,46,21,-127,-21,-55,91,-86,-106,-18,-47,-83,-53,52,106,21, 
  /* [753][0][][] */ -28,-81,104,35,-32,-3,83,47,-26,-51,-49,-39,-27,-37,103,-127,-7,-58,100,42,-79,42,-101,72,32,3,-78,37,101,-89,-117,-81, 
  /* [754][0][][] */ 30,-67,-46,-90,-70,-36,21,28,42,114,-48,13,-34,-21,-127,-40,33,-101,-68,49,-16,23,-11,-40,-34,-48,-16,-38,53,-50,100,-96, 
  /* [755][0][][] */ -21,-103,-24,-8,-11,14,-4,-9,-16,-43,45,-9,27,31,-5,-49,27,56,-127,-49,100,-30,12,0,-45,-43,-68,25,-36,-58,-42,-73, 
  /* [756][0][][] */ -89,-30,-54,-119,12,-62,-11,78,-47,127,23,41,-43,-37,24,89,-1,-2,-6,-85,-82,-78,87,0,-119,-71,79,82,-79,28,48,127, 
  /* [757][0][][] */ 21,-82,-88,-47,43,-1,-2,-127,-31,103,1,-3,18,-17,97,-45,-3,44,-55,58,43,35,-81,57,-33,-22,38,10,16,54,-18,31, 
  /* [758][0][][] */ 54,50,-36,11,-9,-21,-5,106,-17,22,-87,-14,14,-82,17,31,-88,-127,33,-67,-85,-36,108,-39,18,-63,-82,48,-31,29,24,47, 
  /* [759][0][][] */ 58,-33,-15,-32,-96,-99,-12,-24,-32,-72,-32,-5,39,-44,-1,8,-88,87,-9,46,51,-52,-43,7,-53,-48,3,-20,127,14,16,-62, 
  /* [760][0][][] */ 3,22,11,90,67,35,-7,48,-15,5,-80,5,-29,-9,19,0,32,98,-15,-7,-69,73,5,52,-80,40,-9,-4,30,79,45,127, 
  /* [761][0][][] */ 36,73,-66,-57,-70,58,-14,-101,-39,40,41,33,2,-119,-8,-30,28,-63,-29,19,-71,12,20,-23,9,-15,-45,-19,-20,-57,-127,90, 
  /* [762][0][][] */ 60,-71,-31,54,-14,-21,40,-57,35,-44,59,71,8,-85,-21,-5,-16,-16,28,75,-57,-14,49,27,62,12,56,-127,62,18,36,107, 
  /* [763][0][][] */ 99,-83,-52,50,51,8,19,123,-19,-122,-72,9,127,107,37,1,-10,53,-89,-54,97,-31,64,-15,-99,-22,33,12,-52,-3,-89,-90, 
  /* [764][0][][] */ 92,74,55,-21,-22,-127,-74,41,-11,9,-11,-12,39,11,4,4,126,-70,25,3,125,-55,-20,-38,-4,-103,48,-55,66,8,-8,15, 
  /* [765][0][][] */ 73,64,-127,63,65,14,39,-21,11,-64,51,-46,89,-80,-3,-43,33,26,-40,-35,-26,-86,8,79,-45,-23,-9,6,88,-42,-22,-32, 
  /* [766][0][][] */ 19,9,10,4,-16,62,-28,3,-47,-29,21,16,-34,-2,45,17,-93,-19,51,-127,86,-7,26,71,-8,66,-10,11,-53,6,-63,54, 
  /* [767][0][][] */ -33,-44,-48,-69,5,-49,-33,-66,30,31,70,-52,100,79,102,-60,-48,90,19,127,-40,-78,-42,23,64,-84,30,-19,-107,-45,-26,32, 
  /* [768][0][][] */ -69,-54,-32,-87,-35,46,60,-41,45,99,-49,46,35,-11,41,-46,49,-37,109,-17,-1,127,10,-30,-42,9,17,-36,-33,-13,-21,1, 
  /* [769][0][][] */ -10,-18,57,-127,58,-71,66,88,-67,59,-46,5,43,-99,-19,6,-9,4,47,34,120,123,26,66,-49,-33,5,-103,61,-55,28,59, 
  /* [770][0][][] */ -44,-34,19,47,19,-12,-1,25,-44,-116,55,-83,77,-24,16,18,72,-46,72,79,29,7,27,-11,-127,111,-42,-65,87,25,87,82, 
  /* [771][0][][] */ -45,-2,48,-33,-17,-55,-21,-24,50,-63,-12,21,-22,34,-20,91,27,-65,-102,127,39,-4,22,-10,5,71,-20,41,-63,-97,92,26, 
  /* [772][0][][] */ -20,-24,27,-9,-55,-70,68,-71,-70,-1,-4,-101,-10,12,-34,-1,54,11,80,-24,57,86,-38,53,-22,-68,59,-6,127,9,2,-15, 
  /* [773][0][][] */ 69,40,-127,-32,64,59,25,27,6,-4,-39,-55,71,66,12,-2,23,-38,7,49,-25,-18,-21,-43,2,52,26,39,87,-29,-41,28, 
  /* [774][0][][] */ -6,26,-98,59,33,51,127,-32,21,68,-94,56,105,-96,87,-125,49,-113,-96,100,54,-126,3,-54,-61,45,-14,-34,-63,3,-100,-100, 
  /* [775][0][][] */ -101,-9,-17,-21,40,-14,-5,127,66,13,-22,-6,-26,-10,12,-5,-62,20,-34,-33,30,-87,-17,-7,7,-6,-20,-27,14,-21,29,-30, 
  /* [776][0][][] */ -33,23,-35,53,0,4,11,-69,35,-4,-90,92,19,22,-67,90,-52,-54,22,54,-46,-24,-67,15,-15,-21,-127,-64,-2,27,15,29, 
  /* [777][0][][] */ 39,18,24,-33,-40,-29,-106,0,-125,-16,43,42,-14,-72,39,97,127,-72,38,42,-120,-22,-61,-52,90,-94,-59,92,65,-53,-63,-12, 
  /* [778][0][][] */ 66,9,-127,-59,22,-26,60,35,-3,-16,40,12,-8,8,-37,-41,-17,-26,61,-53,43,5,26,-5,-3,66,9,55,20,-55,56,41, 
  /* [779][0][][] */ -82,24,-69,68,69,48,48,-74,-5,44,-30,89,-15,56,81,111,-27,30,47,-107,-30,46,115,-19,-127,26,127,60,49,30,-112,-78, 
  /* [780][0][][] */ 7,-15,-19,0,-19,9,21,-44,25,127,-58,50,11,11,-50,-51,-28,13,5,41,-57,20,39,-65,7,-11,-46,2,19,25,-11,-34, 
  /* [781][0][][] */ -75,-81,110,-99,23,-42,21,19,-58,84,43,-14,-69,6,-61,-43,83,59,121,-28,9,-73,-65,31,-46,-67,-22,44,36,127,-65,-32, 
  /* [782][0][][] */ -60,-8,122,-74,-24,-4,-9,23,28,13,-85,51,72,62,-30,111,55,96,-7,53,91,55,-6,-7,0,29,-127,7,38,-88,-13,-18, 
  /* [783][0][][] */ -127,52,-42,-29,70,12,-51,-2,-63,-95,40,-23,5,38,23,21,25,-32,-90,-27,103,-83,-25,57,-50,-99,9,-37,28,-25,56,104, 
  /* [784][0][][] */ -39,-52,-49,-1,50,49,22,56,-81,-39,-34,55,6,-103,-108,2,76,-46,69,92,34,-13,-1,-32,6,53,-38,15,-78,127,15,-16, 
  /* [785][0][][] */ 20,17,-27,2,-14,27,-127,-2,66,100,18,10,9,-61,54,-1,47,31,-84,7,72,-117,-4,-15,-39,-9,21,-49,98,55,-62,78, 
  /* [786][0][][] */ 15,24,29,-48,25,-15,-46,12,-7,60,15,43,-14,44,98,1,-66,-19,60,7,-54,-1,55,-22,127,2,-94,-31,-123,37,-3,-7, 
  /* [787][0][][] */ -127,87,90,-94,-72,22,121,-88,16,5,-13,20,-14,23,14,-27,20,-70,80,-93,-18,48,-122,-86,-78,55,-43,-85,23,21,7,-16, 
  /* [788][0][][] */ -4,27,113,1,17,8,60,46,10,-59,66,16,4,7,1,24,127,26,32,-15,5,-45,-28,35,40,-74,-6,-36,56,-62,16,77, 
  /* [789][0][][] */ 85,-31,-110,14,-46,-42,83,-76,-53,-127,57,102,101,-22,-44,-29,-25,-73,-30,72,76,101,-11,-21,32,-23,-24,-51,102,-16,18,48, 
  /* [790][0][][] */ -28,52,1,17,-57,49,24,77,83,-49,14,6,-12,-72,-97,107,-28,-62,-60,11,-127,29,45,-13,-28,13,11,98,18,43,37,122, 
  /* [791][0][][] */ -68,-15,10,40,-35,59,-62,-30,45,-20,-18,-21,49,-11,-39,-51,127,20,71,-17,-5,-15,15,-63,26,-13,113,23,67,-51,26,8, 
  /* [792][0][][] */ -53,-6,14,5,23,36,59,-13,63,-64,12,21,31,34,43,-26,8,26,-88,127,27,88,5,47,-49,-9,80,-15,22,-11,-92,-99, 
  /* [793][0][][] */ -6,-44,-31,-52,127,-30,114,93,56,45,13,-7,14,8,17,60,8,-34,82,-11,-27,1,36,-40,-19,-14,34,42,-36,-4,-50,92, 
  /* [794][0][][] */ -116,28,28,-54,67,-72,-84,-34,4,-86,72,48,-13,127,59,-31,93,32,-70,8,-90,-80,13,6,-66,15,12,64,29,-37,-5,-71, 
  /* [795][0][][] */ 7,-47,-121,1,-18,47,-68,71,3,-82,-5,-76,-67,-44,32,-11,18,-61,-12,2,24,-127,-119,-22,24,-9,29,-18,54,-1,20,-57, 
  /* [796][0][][] */ 51,-79,-5,22,124,-25,-54,122,16,127,-34,-21,-70,-88,5,9,-93,-3,27,85,-89,77,-17,-56,-5,-30,110,-16,-88,-40,45,46, 
  /* [797][0][][] */ -26,36,69,56,-3,-14,-1,32,-72,34,-62,22,-15,35,-17,67,-127,1,-11,110,26,62,34,-9,-12,-40,-29,1,14,23,-75,14, 
  /* [798][0][][] */ 6,-18,-6,-127,39,-27,-38,-7,34,-35,-26,-106,33,-78,21,14,19,-51,31,58,-53,-3,-10,41,74,0,-99,4,40,40,16,-29, 
  /* [799][0][][] */ -48,-3,-60,-21,127,21,10,-38,-17,-9,-29,56,22,-24,76,31,17,83,70,80,-41,-59,-12,-42,37,-5,12,30,-20,35,33,31, 
  /* [800][0][][] */ 73,57,-118,-10,40,7,-67,-111,-29,-14,-3,-53,-25,-29,-119,48,11,-113,12,127,38,-50,-79,-1,22,-104,-25,39,48,37,-13,100, 
  /* [801][0][][] */ -54,-56,70,0,71,-36,-31,-45,-34,-24,7,127,22,-24,-14,82,-32,15,-5,-21,21,-60,-69,-41,-19,52,-18,43,-9,49,-69,-20, 
  /* [802][0][][] */ 44,71,72,25,29,-5,65,-86,-28,60,6,62,-124,-6,95,-127,-22,73,-74,-58,54,-50,50,-38,6,2,-9,6,-127,-101,59,3, 
  /* [803][0][][] */ -55,-3,74,-25,26,110,-86,4,21,123,6,-76,-119,8,21,-21,23,-41,-5,45,53,-14,-40,10,2,22,-62,-127,-119,-51,58,-7, 
  /* [804][0][][] */ -33,25,-85,14,95,-53,7,-14,-102,3,1,-49,-63,32,42,-1,72,-61,-15,-36,55,36,1,-127,-67,-50,57,19,55,-69,-8,-30, 
  /* [805][0][][] */ -58,22,-61,-27,74,36,65,-20,48,75,-39,105,-98,-16,127,58,-44,-10,6,8,11,44,24,38,66,-54,6,36,-69,-13,96,30, 
  /* [806][0][][] */ 29,2,11,-90,8,1,-13,12,127,5,-119,70,74,-33,24,0,-51,-25,34,41,-95,15,-27,-20,61,-10,-13,44,-79,14,-28,-42, 
  /* [807][0][][] */ -7,12,29,42,21,49,-13,-17,-27,81,66,64,23,7,-48,-32,-41,63,-33,15,-2,-58,30,10,127,-43,-84,13,41,17,12,-48, 
  /* [808][0][][] */ -68,-38,53,-26,46,93,30,-4,-51,6,-59,-72,-127,64,52,37,114,-4,72,27,10,17,70,103,-22,-114,97,17,37,57,-61,28, 
  /* [809][0][][] */ -63,-6,93,13,6,5,-111,118,42,63,33,36,-60,-85,3,-6,13,57,65,-6,8,70,54,-38,-28,30,127,-27,-40,53,-73,-10, 
  /* [810][0][][] */ 72,-78,46,27,98,19,12,-60,-2,52,-61,37,64,96,-7,25,-53,21,34,64,127,-11,8,10,16,5,-34,-36,79,48,-89,-82, 
  /* [811][0][][] */ -23,-59,26,20,61,-88,61,38,-85,-20,127,36,18,-39,35,-109,122,54,-41,-14,-31,-9,-30,11,2,-57,47,-53,17,57,2,-21, 
  /* [812][0][][] */ 11,7,-127,32,7,62,35,-86,-31,-19,63,-3,5,-25,40,21,14,59,-32,27,61,-9,-23,-64,-48,26,-43,76,69,-2,50,52, 
  /* [813][0][][] */ -72,-51,-112,18,-14,-62,-21,-10,10,-28,7,-107,113,111,-124,-8,25,-32,-61,127,97,-58,-112,-65,71,-48,-101,-33,11,-35,35,-48, 
  /* [814][0][][] */ -65,21,39,-25,-20,-28,-23,-127,-22,-23,44,8,91,-30,-29,-44,18,11,-39,-27,73,-14,61,-7,-37,-18,-14,-22,-11,-41,65,34, 
  /* [815][0][][] */ 3,-47,-42,-17,32,-43,18,58,-83,58,3,11,-56,-57,-104,55,-48,-29,-9,38,-17,107,-22,-43,72,-33,127,-32,-28,-19,125,-9, 
  /* [816][0][][] */ -44,-40,81,29,-68,-71,-72,-48,60,72,-93,12,-76,85,-43,57,111,-27,16,29,-75,-2,0,-1,-55,35,-127,-53,48,6,-28,-30, 
  /* [817][0][][] */ 31,-37,27,-94,-17,18,-46,-8,-28,-41,31,7,17,14,50,79,22,9,26,46,55,18,-72,3,-23,-38,-91,-31,-41,-58,127,-10, 
  /* [818][0][][] */ -52,-7,43,13,18,-39,41,-17,-16,-11,-91,-72,-32,-30,-90,75,-25,-19,-106,-19,45,34,-41,2,-80,48,13,30,13,43,-31,127, 
  /* [819][0][][] */ 45,-75,48,22,-26,-40,-39,-56,11,-67,12,-80,-17,19,-16,-35,25,52,51,75,-30,127,-55,13,-50,-77,-47,115,-109,22,-120,2, 
  /* [820][0][][] */ -86,-4,-47,37,-36,95,-56,-47,-57,-49,-79,0,-17,104,19,24,6,-27,-127,34,-41,-83,21,7,-95,-20,-56,73,46,11,-46,30, 
  /* [821][0][][] */ -11,-8,-32,14,-17,72,-62,-21,66,20,16,40,26,-127,109,36,-5,28,45,-3,-56,-28,8,-6,-20,71,22,-18,-30,-4,22,11, 
  /* [822][0][][] */ -3,-50,-9,23,24,34,47,-100,-13,-59,64,-33,3,34,29,19,-23,6,8,-15,-34,40,-67,-41,-122,-70,-14,-66,13,127,81,48, 
  /* [823][0][][] */ 28,-8,127,-57,16,14,75,15,-28,64,19,21,-5,-10,-18,-41,58,18,-31,76,78,-71,-24,22,34,6,-84,53,23,-94,-22,-3, 
  /* [824][0][][] */ 31,-43,40,-24,-54,-107,-99,-117,-127,-121,30,-75,23,3,-40,27,19,-123,6,-6,-12,-9,-63,53,13,75,-15,15,-82,-9,31,57, 
  /* [825][0][][] */ -21,-37,-46,28,-71,-127,26,-62,62,17,-8,-12,-9,28,65,36,4,6,-8,82,7,61,-7,77,39,28,57,80,-6,28,-10,-13, 
  /* [826][0][][] */ -116,89,-108,-74,-15,0,2,24,-55,-49,89,125,78,94,127,-43,-43,-65,-60,22,-39,-9,3,29,-76,7,25,12,-11,7,-9,4, 
  /* [827][0][][] */ 20,-65,3,-27,88,29,-22,5,21,56,-42,-13,-76,-62,-48,14,101,35,14,-51,-12,50,-31,4,-34,-127,53,5,11,40,122,-2, 
  /* [828][0][][] */ 29,56,125,2,-18,110,-28,74,73,7,-27,-31,7,-108,-43,73,41,35,-46,19,3,-127,-67,4,116,-2,-67,-103,32,71,53,-90, 
  /* [829][0][][] */ -60,-50,76,67,19,-64,-20,3,-127,62,26,47,6,-10,20,23,-38,-54,-29,-45,-70,20,7,-19,-41,-69,50,-8,-49,-28,-5,-13, 
  /* [830][0][][] */ 8,37,-61,-20,20,43,-46,-15,127,34,12,-36,-28,20,-7,3,-2,-26,-7,52,-52,-31,-42,29,-77,-83,10,56,84,-3,-33,-42, 
  /* [831][0][][] */ -58,65,127,-21,-3,-22,-11,-42,-56,79,-47,-11,-36,-23,37,40,-112,-29,-35,118,22,67,16,14,108,-42,-4,21,-75,16,55,-16, 
  /* [832][0][][] */ 15,20,13,-122,-7,-46,-59,19,-29,38,-104,2,-29,-38,93,-60,9,5,73,-57,59,-124,-67,-79,127,74,-26,-52,15,68,0,15, 
  /* [833][0][][] */ -41,17,-123,-11,68,60,-53,4,40,81,20,-58,46,-28,31,-7,5,-91,-6,-75,49,-11,34,-127,78,-43,63,38,-72,40,-16,-45, 
  /* [834][0][][] */ 0,127,-20,75,-37,61,-57,80,35,39,-6,81,-66,7,28,-42,-91,-75,-91,-29,-53,-41,4,-61,-31,9,46,-17,27,-47,87,-5, 
  /* [835][0][][] */ 31,-18,35,-89,11,-50,7,66,17,-26,-43,-50,47,38,-34,-102,83,14,8,-57,-60,74,4,17,-11,-43,-127,46,2,25,14,-24, 
  /* [836][0][][] */ -36,-3,-26,60,-102,50,-39,79,15,66,24,-35,20,117,43,-66,-21,-60,127,-55,-34,91,13,-47,-92,-83,45,95,-8,13,119,-10, 
  /* [837][0][][] */ 52,-94,6,-56,-100,-15,122,-38,-81,-2,-2,-74,-25,86,-4,-48,-73,32,72,-54,-88,-127,-27,6,33,50,55,104,93,40,56,-107, 
  /* [838][0][][] */ 11,-25,86,-52,-52,2,16,45,8,25,-23,-43,-25,-92,-127,38,54,-59,-26,67,22,16,-84,-58,30,27,-40,-20,-6,12,70,0, 
  /* [839][0][][] */ 57,-43,48,-106,-17,10,75,-93,-49,20,11,-27,-91,-24,-27,83,-79,-26,-53,89,87,-127,64,60,-80,-25,-59,-9,-92,28,66,6, 
  /* [840][0][][] */ 25,39,20,-49,-27,-57,51,-70,-101,43,14,58,-127,77,25,-80,-78,7,-60,15,-16,114,28,11,118,-86,-61,16,24,-1,76,-22, 
  /* [841][0][][] */ 12,-7,-47,66,7,-28,127,-21,-77,7,-73,113,10,-6,93,-110,-77,11,-56,96,1,23,13,31,25,-36,-90,-108,-10,-45,73,86, 
  /* [842][0][][] */ 14,-15,-16,64,59,15,-74,30,-74,-16,16,43,-79,26,90,42,-26,43,115,16,14,21,29,40,127,49,-23,-2,16,10,41,-19, 
  /* [843][0][][] */ -121,113,-61,8,-93,-25,85,53,-109,-59,-46,-103,-48,-8,65,22,127,-46,11,-14,8,-17,-31,34,74,-117,2,-16,-62,-9,-35,-57, 
  /* [844][0][][] */ -69,14,-14,56,-2,49,-16,-33,-50,-14,57,11,-107,-127,45,98,57,82,-11,-39,23,-28,42,-49,0,-59,20,-2,103,48,75,23, 
  /* [845][0][][] */ -31,23,-28,105,1,-24,66,-10,11,12,-68,105,127,1,31,123,7,93,-88,-36,2,55,63,-70,-31,79,36,-28,17,-67,-96,21, 
  /* [846][0][][] */ 78,-93,70,127,-66,28,18,44,2,16,-11,-59,45,-28,-47,19,-30,-57,-119,-2,5,-65,-64,59,-23,42,-102,12,23,-6,-29,-68, 
  /* [847][0][][] */ 23,32,-7,70,21,-100,0,-55,-43,103,3,3,-24,-43,-48,46,15,-1,-39,82,-50,29,10,50,-39,-82,-127,-77,35,-33,97,-119, 
  /* [848][0][][] */ 31,57,41,116,14,-8,18,15,-34,-92,127,21,57,51,36,100,28,-48,54,-8,36,-86,-46,28,19,-13,10,74,93,36,-66,-29, 
  /* [849][0][][] */ 72,4,-33,-14,-73,2,64,28,0,15,46,5,13,14,22,-77,43,-58,30,-10,127,-94,11,70,99,-27,-65,37,-81,-62,18,23, 
  /* [850][0][][] */ 17,-40,-77,-19,-51,-69,86,32,91,-59,-11,-44,-13,60,125,21,60,7,79,-38,-69,-49,-32,-127,-77,51,-19,8,59,68,24,-63, 
  /* [851][0][][] */ -4,16,-54,-8,3,-52,-19,-57,31,27,80,-32,-20,-82,41,-26,-35,60,-64,102,-20,-45,-127,46,-19,-22,-19,18,-10,-41,27,-15, 
  /* [852][0][][] */ -34,67,-79,-65,78,16,-39,46,-55,22,-75,5,13,-11,7,18,-26,18,-55,-45,36,-80,35,59,-4,33,-50,-127,-24,-61,19,-5, 
  /* [853][0][][] */ 82,2,-53,14,-8,-55,23,5,-48,23,65,50,-47,65,48,-42,75,-17,-43,-25,37,0,-39,-15,22,-71,48,47,127,109,-71,-79, 
  /* [854][0][][] */ -25,-30,-81,19,-97,7,-48,-22,61,-82,38,99,13,78,54,-1,88,-107,23,-16,-75,-24,127,61,33,-35,-40,-8,-55,35,39,-18, 
  /* [855][0][][] */ -10,-62,-58,2,19,16,-18,89,-24,14,62,-33,37,-31,97,-62,15,-48,-108,12,34,19,-32,-65,-59,41,-60,0,21,127,-15,-74, 
  /* [856][0][][] */ -42,71,27,-127,47,101,-66,29,-4,37,113,-38,93,-69,-28,-26,37,65,-25,-90,9,103,65,-57,-58,-70,-7,-77,-116,-32,79,0, 
  /* [857][0][][] */ -22,92,62,-52,50,0,-8,56,24,-20,-112,-31,-64,-3,1,8,33,-6,12,-3,-120,10,-71,-55,12,69,41,34,-2,-127,-6,-16, 
  /* [858][0][][] */ 0,-16,-25,-84,5,2,62,-8,56,77,-14,-38,-1,-51,-28,51,-55,47,26,41,3,37,0,-6,68,-35,34,-21,-81,-5,127,-1, 
  /* [859][0][][] */ -22,-115,-29,-15,-33,4,121,-22,-6,46,87,8,-26,-52,37,-41,-19,-69,25,31,-22,-32,-44,20,-37,-62,-20,-65,63,127,-4,67, 
  /* [860][0][][] */ -107,26,0,104,70,30,18,14,-8,8,-19,71,-24,15,79,16,15,23,-82,-83,-17,10,-4,-32,50,-16,-127,-58,-71,4,81,74, 
  /* [861][0][][] */ 37,-53,-36,-18,28,-49,-22,105,-59,-23,-10,57,-69,-12,79,-7,-17,-27,-127,-29,46,82,-9,28,-21,17,-20,34,-30,23,21,7, 
  /* [862][0][][] */ -4,7,-57,63,-77,36,-36,52,-11,-19,63,17,-48,46,15,-2,95,-105,-40,109,-27,127,-103,72,-45,-27,-60,123,-59,-53,-76,-50, 
  /* [863][0][][] */ 5,0,33,-13,-62,-37,-95,13,86,124,-14,10,-84,38,-31,-101,22,112,16,83,-47,-127,74,109,-47,-23,-99,47,16,-15,42,-98, 
  /* [864][0][][] */ 31,23,-20,-52,73,26,12,111,-9,19,11,-109,-68,0,6,40,-12,52,68,0,-17,5,127,52,28,108,48,2,-8,103,-23,98, 
  /* [865][0][][] */ -65,15,65,-20,79,82,12,-127,-16,-109,-105,5,-36,22,55,-9,-60,-58,33,-45,64,-35,38,-43,-46,-23,47,7,67,7,-15,-82, 
  /* [866][0][][] */ -45,40,-50,-43,41,40,53,-41,-34,5,3,67,-7,-40,-37,127,-86,-61,33,57,10,116,-69,-55,-16,-25,26,-59,-59,-46,1,-34, 
  /* [867][0][][] */ -18,-58,4,30,-71,-23,-27,-15,-39,39,127,27,80,-20,62,19,65,-15,16,-1,-6,69,2,-10,25,-58,-14,28,11,68,-33,-1, 
  /* [868][0][][] */ 34,33,-124,-49,-65,31,-53,3,-44,-115,45,47,-21,34,127,-34,-39,-112,-39,-1,84,-30,-23,10,59,14,-115,-14,59,-30,81,23, 
  /* [869][0][][] */ 24,-35,37,-10,3,13,-20,-43,-63,-61,2,-83,-48,-16,-52,115,-73,71,69,31,-15,120,5,-48,83,-3,-1,-77,15,-38,127,4, 
  /* [870][0][][] */ 0,-70,-36,-36,31,23,26,54,-1,16,-67,21,-28,-26,-5,29,34,-19,71,-17,45,-12,-108,8,15,-127,-95,-46,-18,91,2,-35, 
  /* [871][0][][] */ -49,54,81,-14,37,-45,-40,127,22,13,-15,55,78,-12,-54,-92,52,-10,-24,-84,-4,-41,-42,-98,53,-79,38,51,-45,-53,38,97, 
  /* [872][0][][] */ -22,29,13,-47,36,79,-17,-9,6,-31,29,-14,31,-32,-50,-31,-70,41,-24,-45,22,-52,91,-37,20,67,-125,7,-32,3,45,-127, 
  /* [873][0][][] */ -7,-43,50,-48,27,-47,-17,-13,-29,58,21,-24,-11,-2,-57,45,-64,35,-55,-43,31,36,-127,-38,-17,28,3,17,-16,-41,46,-30, 
  /* [874][0][][] */ -32,27,-6,-73,31,-32,-52,127,-21,-21,-29,30,-29,-10,26,42,52,76,13,-89,-7,-32,91,-99,25,42,-78,100,-2,-41,60,72, 
  /* [875][0][][] */ -3,-26,16,21,52,77,9,16,-8,-6,-19,27,-22,-28,23,50,-26,25,-37,-33,29,127,16,-33,-7,34,49,-38,43,-33,37,-30, 
  /* [876][0][][] */ 9,8,-83,-52,-5,3,-27,56,-58,46,13,-4,-14,19,97,68,106,-9,-88,63,-13,-3,-39,73,-11,31,-64,30,-9,44,-127,-67, 
  /* [877][0][][] */ -16,-93,21,100,23,57,68,-6,81,109,127,88,-69,-39,2,63,44,16,-32,-103,59,12,-39,-80,-35,56,60,-57,85,65,22,0, 
  /* [878][0][][] */ -101,90,-54,-67,-83,-27,3,-34,-84,106,-5,-65,-119,126,110,-42,17,-50,29,-78,22,22,8,10,-127,-59,-18,-32,35,-78,-44,-53, 
  /* [879][0][][] */ 13,38,11,-2,13,127,43,-4,48,14,46,-1,76,17,14,-33,-18,36,-51,40,15,-75,-43,56,15,-15,-50,-30,32,35,-28,-36, 
  /* [880][0][][] */ -4,43,-17,59,-20,-49,16,-33,-18,79,30,-45,-23,127,-8,-14,15,63,-5,-38,-5,-94,-58,-26,3,10,-65,27,24,-26,-54,-19, 
  /* [881][0][][] */ -56,-16,66,-125,-44,-26,-9,-10,127,-48,77,25,-46,40,-110,51,28,-53,-46,17,19,61,-21,-20,-77,-27,8,61,33,4,66,-12, 
  /* [882][0][][] */ -63,-26,5,-38,-7,-26,-44,38,-29,79,64,29,-78,-127,7,-25,15,-24,-18,-16,41,-81,-76,-71,19,-27,19,-33,-29,41,48,-6, 
  /* [883][0][][] */ -54,5,109,-124,37,-42,54,53,-39,-30,8,-44,15,63,12,-8,64,-36,-53,34,44,-77,-44,-37,36,-127,-32,-12,13,34,7,24, 
  /* [884][0][][] */ 84,-21,-56,43,-85,-52,-11,5,-49,120,-1,22,-26,46,-9,39,34,0,106,-31,-77,-31,-30,-25,88,57,-37,91,-7,40,6,127, 
  /* [885][0][][] */ -57,-6,-72,39,-19,-13,11,32,-61,-47,28,69,46,-50,-13,-22,-11,78,-58,34,13,18,25,-74,-15,30,127,-14,-9,65,-16,-56, 
  /* [886][0][][] */ 19,-14,-28,4,-15,39,3,10,55,0,22,27,-32,47,2,-5,21,-127,-56,68,49,-77,-67,-25,-6,16,-49,-3,50,-65,19,-9, 
  /* [887][0][][] */ -55,127,13,12,52,-73,-48,-37,16,-19,8,-38,-66,81,68,58,-16,47,-6,64,-43,-64,-115,7,-15,61,-53,91,-7,-119,15,95, 
  /* [888][0][][] */ -23,12,37,127,-22,24,45,28,-80,-51,-114,-10,-5,-30,73,-10,22,13,-6,-45,64,-4,-27,-53,-31,4,56,49,18,89,35,43, 
  /* [889][0][][] */ 127,21,-12,51,-40,-19,31,-98,-14,-79,-7,-56,17,1,23,-42,-18,17,-12,37,78,-43,26,-80,40,42,-24,-96,-61,12,58,44, 
  /* [890][0][][] */ -127,73,7,54,101,28,1,-47,-66,50,43,-46,-65,30,121,-107,-12,6,-48,36,-31,-21,-74,-54,-9,-34,-93,-22,25,-109,-20,55, 
  /* [891][0][][] */ -17,-38,90,32,-3,4,-39,-127,-36,86,-79,11,-124,-89,-5,80,24,-46,-7,73,1,-102,-16,-46,-58,83,-1,6,57,-21,2,39, 
  /* [892][0][][] */ -28,64,60,-18,-41,60,32,60,-85,-59,-13,-34,73,-19,-127,-53,-52,19,-64,24,32,35,8,-31,3,74,-51,30,58,10,71,30, 
  /* [893][0][][] */ 73,-30,-29,30,-5,-29,38,-11,-92,-35,67,-35,-13,-36,-31,-43,1,-125,46,78,-22,26,-93,-96,-127,-41,-15,28,-53,-49,-26,-23, 
  /* [894][0][][] */ 35,28,-62,3,-61,-21,-17,-60,-37,22,51,-70,-127,-60,-60,-65,69,16,42,3,-7,-11,1,56,8,-99,-84,-36,-33,-3,27,-21, 
  /* [895][0][][] */ -23,-63,-44,101,-127,-41,-15,-21,-65,-33,37,37,1,-69,-4,-93,-32,-4,92,43,64,23,-28,-6,-24,-52,59,35,34,-8,-33,18, 
  /* [896][0][][] */ -9,-2,3,28,14,25,-23,-55,38,-33,14,-49,17,-52,-51,-1,22,-40,18,-54,-44,-15,82,-30,-127,14,-4,-1,-39,-35,-65,17, 
  /* [897][0][][] */ -74,-65,76,-89,117,45,-87,-33,-62,36,30,63,51,51,22,38,112,53,-33,-32,-22,33,113,-127,31,9,59,-45,-64,-36,8,17, 
  /* [898][0][][] */ -86,113,39,-79,9,-95,24,0,-28,-61,16,-6,-16,-30,-127,21,69,-55,-63,-42,3,0,-19,20,-110,19,-7,-30,67,-33,-115,-10, 
  /* [899][0][][] */ -17,-127,-1,-62,-16,1,72,48,-6,21,24,21,32,37,5,95,-14,61,-21,-66,46,-117,-18,-60,-61,-39,3,-36,49,-72,102,-11, 
  /* [900][0][][] */ -20,70,-84,127,-21,12,-8,-20,-57,-91,85,-4,-60,72,36,71,2,-16,102,-37,-56,-6,88,37,30,-79,44,-41,1,-36,-77,40, 
  /* [901][0][][] */ -19,79,127,-57,74,18,0,-28,-48,-19,-80,-17,51,-4,12,30,81,80,-79,101,-57,-53,65,-26,75,-17,-20,10,64,-74,8,66, 
  /* [902][0][][] */ -61,100,18,-41,-39,13,-11,-42,-22,-31,127,64,-9,39,29,47,69,-5,89,9,41,-115,10,94,32,67,49,13,28,-11,-22,89, 
  /* [903][0][][] */ -127,89,-40,14,-65,22,61,39,-30,-47,-89,-44,29,-93,-12,-81,1,0,86,-60,117,-2,-2,20,-11,-85,5,22,-94,25,-121,110, 
  /* [904][0][][] */ 39,-50,-67,-24,6,29,127,-6,-3,-7,17,-102,17,60,58,40,-36,73,-47,-13,-63,-8,37,29,51,67,20,-44,-20,15,-17,-22, 
  /* [905][0][][] */ -21,-5,-69,11,44,84,27,8,-11,50,41,-102,-66,-26,-42,24,-66,2,-43,-40,68,-127,-10,-22,14,-60,-13,-44,8,-30,11,52, 
  /* [906][0][][] */ 2,-122,66,-72,-27,-114,0,-112,-8,-50,-76,103,-21,-67,-105,28,127,8,0,-17,3,7,13,2,-10,-8,26,-41,37,75,27,-40, 
  /* [907][0][][] */ -49,-27,10,56,10,34,70,7,-48,18,8,51,127,79,56,-2,-4,-99,-87,92,4,-37,-11,-21,-6,29,-19,41,-36,9,-109,31, 
  /* [908][0][][] */ 101,53,-80,3,11,65,84,15,-74,36,38,-39,-93,14,0,-35,52,-31,-114,-12,61,31,16,-99,13,-21,37,-44,127,70,119,-16, 
  /* [909][0][][] */ 52,19,25,-97,-44,56,5,61,5,116,-20,28,-3,39,60,-19,106,87,55,-127,20,42,-23,48,-31,-40,-38,25,-3,46,8,70, 
  /* [910][0][][] */ 31,-127,-89,-18,19,-15,-81,-25,-45,50,-24,34,-47,46,100,75,-90,9,67,36,118,19,-50,30,55,-46,24,-12,-47,-59,88,-81, 
  /* [911][0][][] */ 34,-38,5,22,65,20,43,46,-41,19,-4,127,-4,-12,35,-30,3,-6,-20,1,11,5,-21,-41,50,-33,40,-24,-11,-1,65,93, 
  /* [912][0][][] */ 8,32,-73,-69,-72,-19,-71,-74,-84,-21,-43,-7,-47,-25,93,-11,121,-8,-63,52,97,127,49,-7,-3,-89,8,85,60,-4,63,57, 
  /* [913][0][][] */ -25,-72,-8,3,18,-90,12,-84,-41,-38,-41,87,-42,-10,127,-21,52,-38,-25,76,-13,0,65,-33,13,48,1,14,-70,46,-4,19, 
  /* [914][0][][] */ -14,3,87,-107,37,-88,-31,-110,80,-33,15,-72,41,65,-127,-91,44,-6,4,-62,-116,-100,-69,28,19,-53,-26,-24,-69,-34,-52,-44, 
  /* [915][0][][] */ -60,-52,51,12,-26,50,42,7,17,-3,43,5,-78,-37,127,-58,58,4,-77,-20,23,-73,98,25,-28,49,-50,-44,-28,-23,-3,52, 
  /* [916][0][][] */ -43,127,-49,-4,-5,39,83,100,-53,55,13,-6,30,39,43,-32,7,60,5,-55,-34,77,23,29,-26,-36,-11,56,81,-107,64,-63, 
  /* [917][0][][] */ 21,-24,11,32,-18,-94,4,72,31,34,-39,-8,-45,24,-51,0,0,127,-22,82,8,8,18,35,-82,97,-95,-43,-64,-35,-45,-37, 
  /* [918][0][][] */ 18,2,17,-9,-7,-108,-12,-89,127,42,-3,-87,-93,-29,-43,-6,91,4,-37,-23,-23,-29,-26,-1,-3,-90,-14,2,-14,-88,105,-14, 
  /* [919][0][][] */ 48,46,-54,127,59,1,-7,16,-55,-64,25,-30,4,-32,27,30,-21,10,-89,-31,-85,-32,52,2,-30,34,58,-43,10,21,-92,13, 
  /* [920][0][][] */ 46,-26,10,15,52,9,-62,47,-29,-124,84,1,39,56,39,-13,38,89,16,6,31,-83,-127,77,19,0,-37,-9,5,-32,3,39, 
  /* [921][0][][] */ -56,-62,71,-91,39,-38,-68,7,-98,-56,37,79,-11,65,-35,56,-29,6,86,68,-16,127,50,-33,-14,-10,-85,-12,-16,105,-24,-14, 
  /* [922][0][][] */ -55,16,-5,-55,21,30,42,-65,-44,-127,40,64,45,21,125,-67,94,-17,62,2,-47,4,-51,3,6,-10,-30,-103,13,16,-39,53, 
  /* [923][0][][] */ 63,-53,29,102,-2,62,5,22,32,51,-32,9,26,-6,-34,-3,21,85,-7,-9,-58,-127,22,-96,-52,47,-17,25,19,43,18,65, 
  /* [924][0][][] */ -15,44,-79,23,54,-16,49,-85,-44,-14,99,60,-24,-17,16,-7,7,-6,22,30,29,-35,-32,16,-24,-108,31,58,-83,28,127,-61, 
  /* [925][0][][] */ -13,12,-75,46,30,-37,-58,-127,31,-64,78,88,-17,-25,8,27,88,71,35,-71,-54,-61,44,20,84,-3,21,42,-59,-15,35,-47, 
  /* [926][0][][] */ 127,29,-4,-26,-105,36,-45,12,-59,50,28,-53,-1,70,-60,-120,-6,-57,-70,-60,46,-92,-45,-23,-17,33,-80,46,50,-15,29,19, 
  /* [927][0][][] */ 55,-20,-127,49,-42,-24,63,-75,20,-10,-88,-77,81,38,-46,-89,26,-31,9,10,-9,27,16,-15,-22,22,-92,-34,-25,24,27,-94, 
  /* [928][0][][] */ 90,-19,24,91,24,-30,88,62,44,-8,-22,11,-34,-127,-6,-13,-3,25,-31,-45,-23,5,-4,24,-23,-8,90,-9,84,-45,-13,31, 
  /* [929][0][][] */ 27,24,-57,-69,-95,28,27,45,-39,-19,0,-49,14,-127,83,-61,22,15,7,-44,-97,115,6,2,-46,12,16,58,11,-12,-102,-70, 
  /* [930][0][][] */ -90,-2,23,-54,-41,-25,74,-32,101,23,30,-52,-45,127,-40,95,-107,-28,26,11,80,1,28,-53,30,121,123,-28,68,41,15,-48, 
  /* [931][0][][] */ 14,61,-4,117,67,63,-3,-6,20,-47,70,-31,-22,-87,-27,109,65,-1,-116,-26,2,70,-13,-122,-35,-113,-118,-36,-67,127,0,-30, 
  /* [932][0][][] */ 43,31,-7,93,-14,-18,-5,68,-27,27,44,-62,127,43,-36,-69,-61,-2,-74,70,-9,-106,-54,-34,83,7,3,56,-92,51,-65,42, 
  /* [933][0][][] */ -22,26,51,38,35,-29,-78,-77,14,73,24,41,-24,32,-15,-2,-56,-26,-33,81,37,-71,-127,39,28,-32,-38,9,22,-49,31,-2, 
  /* [934][0][][] */ 38,-23,32,49,-23,56,-127,7,-51,-8,-53,13,52,-123,-16,25,29,-14,5,21,119,-23,-22,-63,41,41,-72,-40,58,-20,53,42, 
  /* [935][0][][] */ 45,58,4,-59,-99,64,-122,80,-18,55,-12,-56,12,72,-101,-56,21,-5,38,-37,-30,28,127,70,-49,23,0,-16,85,46,-33,-96, 
  /* [936][0][][] */ 29,65,-42,50,41,-71,83,95,90,73,27,-19,0,102,19,39,76,63,19,20,27,127,-29,-103,46,87,-59,-30,-81,59,6,9, 
  /* [937][0][][] */ -35,-29,-46,-110,-38,-29,-4,-66,20,54,-28,11,73,-32,12,97,-30,88,-15,-8,110,-11,43,82,46,-36,35,-38,-15,127,-49,89, 
  /* [938][0][][] */ 48,-4,-49,-2,-109,-2,-65,-33,73,26,-93,-26,-19,41,-21,-21,121,-67,-56,-50,41,-9,84,80,56,104,57,83,-2,110,-127,-19, 
  /* [939][0][][] */ -61,5,-72,93,-44,-127,-17,-54,16,-52,16,25,-5,-15,85,6,-14,-17,-16,46,27,-27,15,66,-21,-67,-14,-46,-82,-59,-29,-38, 
  /* [940][0][][] */ -9,-35,47,55,-51,-25,-5,30,64,22,-6,-76,31,31,-67,23,21,-49,34,-41,-21,-73,-98,64,-44,-127,29,37,-19,-25,-72,-22, 
  /* [941][0][][] */ -26,43,25,57,-6,-37,21,44,63,-27,-26,-6,-6,-31,68,1,31,-39,-1,-41,-12,-7,-49,-8,-31,-16,-3,31,127,5,-99,30, 
  /* [942][0][][] */ -35,-53,36,1,41,-89,-119,122,-11,87,20,47,-14,-11,34,9,70,8,127,-28,-12,-11,-53,-107,-34,-2,-38,-23,-27,-26,28,63, 
  /* [943][0][][] */ -36,36,-105,-5,56,79,80,-127,74,-33,-71,-46,56,-3,52,-17,20,-9,-49,31,-20,-82,71,-90,-36,-1,111,-16,-15,-30,-23,84, 
  /* [944][0][][] */ -45,10,5,-50,26,113,46,9,15,-121,50,-90,2,39,-105,5,69,-127,-16,-29,-108,-32,-52,-27,-52,41,-60,87,48,117,63,-7, 
  /* [945][0][][] */ -89,31,34,-51,20,27,32,24,52,51,-74,-40,-127,15,30,84,-47,39,-43,-43,-88,-93,18,-46,102,59,-27,-39,34,16,29,-7, 
  /* [946][0][][] */ 92,23,-84,-7,76,-55,42,-5,65,73,127,-64,-45,-1,31,26,15,3,-52,91,21,102,49,15,-44,30,-17,-20,-84,92,-61,7, 
  /* [947][0][][] */ -17,-27,-14,-15,-68,51,-44,-27,-36,-17,-19,42,70,14,10,-11,51,52,-11,1,47,-127,-15,-41,-22,33,25,-53,-10,4,35,-17, 
  /* [948][0][][] */ -44,24,-14,-37,53,92,29,23,20,-36,17,59,29,-127,-58,-23,-52,25,85,-25,-39,16,-13,38,-13,2,-22,3,51,103,-28,44, 
  /* [949][0][][] */ -85,8,-36,-42,-34,-14,-79,-119,90,-10,26,-66,-127,3,118,-35,68,-31,-68,-37,6,-57,-126,-14,-96,51,23,-15,-95,-38,7,33, 
  /* [950][0][][] */ 26,59,-17,6,-74,-106,44,-41,28,43,80,0,74,-69,-117,51,-66,-38,45,-24,-38,-9,127,26,-7,70,63,14,57,-22,-36,-22, 
  /* [951][0][][] */ 20,54,-58,-80,-42,23,116,-34,-7,32,-75,72,3,-127,78,-47,18,-11,-77,51,76,12,-14,-58,-1,-10,-14,25,65,-23,31,-5, 
  /* [952][0][][] */ 8,-12,-14,27,127,55,-31,-47,36,-1,34,15,-26,-6,-2,-9,-14,4,-11,-10,-3,-34,23,44,-23,10,-45,-13,-67,-1,-55,1, 
  /* [953][0][][] */ -27,-5,127,-17,8,5,-118,25,26,23,2,-63,10,122,-126,-29,-29,8,-4,27,-6,-12,39,-2,6,18,-28,52,-17,5,-67,-28, 
  /* [954][0][][] */ -28,-56,114,33,58,-26,-43,10,0,65,-86,61,-77,103,-42,127,-11,-77,-27,34,54,58,-23,3,-9,-76,-6,43,-67,-59,7,1, 
  /* [955][0][][] */ -25,37,41,-46,68,18,26,65,-50,28,4,-88,-35,-6,-41,-61,-36,-45,-99,-41,20,127,17,-6,3,31,-4,-41,61,21,-72,-48, 
  /* [956][0][][] */ 27,127,72,-44,19,-58,-6,-52,-3,-95,-21,32,35,60,-21,-39,-20,-58,35,-56,25,52,35,23,18,-52,-25,36,18,22,-34,-22, 
  /* [957][0][][] */ -15,-2,36,34,-62,14,-9,36,-24,1,-38,29,63,-69,99,-127,11,26,-53,-4,42,-40,-27,-19,11,72,-74,-52,7,22,-93,32, 
  /* [958][0][][] */ -127,102,-11,-81,21,5,29,-52,39,-81,49,-1,2,-45,5,61,80,-19,93,-83,50,-7,-2,21,35,-22,5,-33,-59,45,37,22, 
  /* [959][0][][] */ -103,-44,20,6,-3,69,82,-26,105,52,61,-28,84,21,25,64,-82,91,-29,-25,-4,-38,65,-79,6,-64,-121,-48,-127,8,46,25, 
  /* [960][0][][] */ 0,-11,60,26,47,43,-36,20,31,38,39,-43,-49,-27,-80,58,75,-41,5,36,-34,96,27,46,-40,45,-7,-54,50,-58,127,34, 
  /* [961][0][][] */ -79,28,-14,95,30,22,5,65,35,-47,71,5,50,-12,-43,-2,-70,-84,-58,-69,46,3,-4,-34,-111,-127,-78,12,-35,39,36,53, 
  /* [962][0][][] */ 52,74,-127,-4,1,14,51,-87,8,-1,-18,-1,62,-86,57,-8,-28,40,18,74,8,-15,-62,-3,-30,-56,-13,-11,4,-36,-1,7, 
  /* [963][0][][] */ -7,10,-47,-26,-30,24,3,33,-44,47,24,37,-68,-24,-4,25,63,-90,-45,-78,127,19,11,-80,-19,-62,29,45,-35,41,-19,100, 
  /* [964][0][][] */ 88,-94,83,0,44,62,27,-59,-62,94,50,-64,43,-58,-17,26,22,31,35,-20,65,-4,53,-3,-69,74,-10,-41,-68,62,33,127, 
  /* [965][0][][] */ 44,109,-48,8,-3,-62,-19,16,58,-1,-26,-31,-40,10,-13,-46,-40,-127,78,-33,-44,92,-101,-100,32,-49,-28,120,-19,-21,7,21, 
  /* [966][0][][] */ -32,-76,-21,-24,-16,8,74,-33,7,22,-127,-4,49,-51,24,-37,9,-60,8,-11,37,-100,23,-56,1,2,-11,48,-4,-32,-19,10, 
  /* [967][0][][] */ -11,-18,127,-86,55,-28,2,8,-18,10,-3,-8,-71,-20,-80,45,35,-25,3,41,44,21,59,-5,52,28,-55,-31,-55,-2,69,29, 
  /* [968][0][][] */ -49,123,34,-4,122,-52,89,12,8,-55,3,77,-37,-33,-127,30,-103,-37,-24,82,4,-83,7,1,21,-21,42,119,-6,-53,12,10, 
  /* [969][0][][] */ -35,96,43,-6,-56,37,-31,7,-127,-14,82,-21,7,21,16,-23,-15,5,0,45,-3,-54,-45,-63,-5,-6,20,87,0,-54,-16,7, 
  /* [970][0][][] */ -88,36,5,17,114,-38,105,-87,106,94,-39,-2,-33,-112,20,-54,79,-108,77,1,-63,-84,-99,54,121,-69,-30,-25,-127,-35,-56,104, 
  /* [971][0][][] */ -38,-30,-53,-6,33,41,11,-17,-111,-33,35,19,-48,-9,-59,-15,-14,2,11,-43,-22,-59,65,-8,-127,99,-52,-53,-53,-82,38,-25, 
  /* [972][0][][] */ -127,-1,-10,-32,93,-48,34,-53,65,1,-14,63,-10,2,-45,12,63,9,-7,19,-31,16,30,27,-52,-38,-3,-27,38,3,7,-120, 
  /* [973][0][][] */ 62,-16,-30,-127,30,-15,-22,56,-97,78,36,-74,-16,-39,-6,-58,31,23,12,-106,-61,9,-82,-10,28,-15,-107,39,95,19,-17,-41, 
  /* [974][0][][] */ 25,28,-27,4,69,-56,-8,-54,-1,-127,17,94,-26,57,28,91,38,-8,3,24,69,-22,46,52,59,-42,-33,-40,19,-49,48,-87, 
  /* [975][0][][] */ -98,-9,30,-6,-39,-22,-12,127,-5,39,-8,-12,-5,-40,42,-11,-76,-44,-14,-76,66,23,-67,-12,-37,-76,53,-111,18,30,37,49, 
  /* [976][0][][] */ 59,-28,-122,9,-65,30,-58,75,-30,14,-9,-19,-18,-95,46,-22,91,77,-29,47,48,-19,-61,63,-99,36,39,-72,100,35,127,-30, 
  /* [977][0][][] */ 85,11,56,-49,-9,-18,-19,-37,-51,-48,-47,12,-26,-53,127,-116,-46,8,-12,93,52,2,106,29,-38,106,35,66,-53,71,-108,-65, 
  /* [978][0][][] */ 16,-46,57,-51,-18,-25,31,-4,10,-4,-37,-18,-8,35,-127,-41,45,23,-2,11,26,37,-10,-2,-21,-30,3,-17,63,47,-19,42, 
  /* [979][0][][] */ 94,-2,0,76,26,-37,-54,15,42,-59,127,3,-90,-28,79,51,-7,-44,-25,-19,84,-40,-11,53,-6,56,-25,-54,27,-10,-9,5, 
  /* [980][0][][] */ 28,0,26,-1,1,16,18,-2,-19,56,-32,-10,-105,46,-17,11,8,-29,-15,-34,98,-41,-108,54,29,-5,11,17,26,-78,127,1, 
  /* [981][0][][] */ -85,69,11,18,-66,10,-15,15,78,-43,-55,23,55,-83,53,-17,-73,-55,82,0,-27,43,-48,-1,113,-47,127,6,108,3,-90,42, 
  /* [982][0][][] */ 39,-25,98,9,-30,-13,-17,79,41,54,7,43,-127,-71,-37,-72,49,60,8,48,112,-94,2,44,72,57,13,21,-6,122,-13,31, 
  /* [983][0][][] */ -50,-79,-59,28,-31,-13,-82,89,-33,43,2,69,-90,-68,32,-82,1,22,-54,81,-42,-23,-127,13,-55,-10,22,-92,-12,-19,-68,56, 
  /* [984][0][][] */ 60,-19,77,74,-13,93,-14,-10,-62,9,-60,9,-34,-32,-85,59,12,-5,7,127,103,-21,49,-44,36,6,14,10,-30,-17,53,3, 
  /* [985][0][][] */ -74,-23,93,41,-68,22,59,-37,68,56,73,-35,15,-111,-34,127,99,-52,23,-11,95,4,16,-34,-5,-58,-1,36,-7,-30,3,10, 
  /* [986][0][][] */ 27,58,100,-31,21,29,-42,46,-40,-72,-115,-99,-68,76,-89,-43,-123,-31,71,-43,8,-47,-48,9,18,85,-41,44,127,-52,-27,-83, 
  /* [987][0][][] */ -40,126,9,-12,30,105,-91,-69,-52,-31,-16,58,25,-60,9,-15,94,-62,-127,-56,-6,13,-20,-96,-26,-104,-11,49,-9,15,-16,27, 
  /* [988][0][][] */ -8,59,31,-24,0,-10,-66,-45,-6,21,-34,-11,-11,0,13,-78,43,-19,-9,-10,-8,36,-10,-16,115,33,25,28,127,47,34,-54, 
  /* [989][0][][] */ 53,29,10,-15,80,32,-28,3,-20,-108,-26,86,-20,37,-8,12,61,-127,96,-33,-70,-17,7,58,-21,23,9,-113,-14,-42,-2,57, 
  /* [990][0][][] */ 47,11,16,-76,4,16,-2,127,-50,46,61,59,10,24,-87,-51,16,17,-49,18,27,-53,-42,92,-68,-24,-58,-58,-53,72,60,-24, 
  /* [991][0][][] */ -28,8,28,-13,-29,37,62,-65,-45,6,-15,-45,44,-76,23,83,42,2,-59,34,-26,65,-76,-95,12,-8,92,-20,127,18,-63,31, 
  /* [992][0][][] */ 37,18,-21,-2,9,-48,18,34,-62,42,68,-32,62,-7,38,73,127,74,-23,37,2,9,74,-43,37,5,-32,-29,-41,3,-33,25, 
  /* [993][0][][] */ -53,-47,103,45,-9,-16,-38,-26,-10,11,69,33,-4,25,-32,-32,-21,-54,-58,66,30,127,-57,-26,37,47,-60,-3,-29,0,16,10, 
  /* [994][0][][] */ -53,-52,-11,8,-76,-2,-4,31,-7,-56,43,-27,46,25,36,-39,0,8,-35,-5,-96,23,-69,0,25,-20,127,-22,8,-14,59,-55, 
  /* [995][0][][] */ -44,9,-68,-32,-48,-19,24,81,10,-89,0,-18,-55,42,-6,66,-127,42,-35,-35,-17,-11,42,14,-21,49,-100,-26,52,17,2,-82, 
  /* [996][0][][] */ 72,33,-46,-10,-11,57,65,17,11,25,20,-73,33,-30,79,-90,-4,6,-5,-53,-21,10,-40,127,-38,-13,17,42,120,19,47,-21, 
  /* [997][0][][] */ -41,-127,62,-70,37,-52,58,67,-107,26,-23,-45,41,52,-42,12,103,6,-79,21,-37,-8,124,92,-79,29,-1,7,98,-71,-123,-41, 
  /* [998][0][][] */ -95,-64,62,18,-6,-57,-62,58,-48,71,-26,-9,26,55,-62,-16,59,19,-127,-87,-3,-39,54,-2,28,6,11,-10,-65,24,-15,-62, 
  /* [999][0][][] */ -13,95,52,48,15,-57,15,23,-28,-104,-80,61,97,-127,91,-29,-35,86,-126,72,32,-125,90,-42,15,-50,-13,43,-41,104,-78,21, 
  /* [1000][0][][] */ -1,-63,113,-70,-100,-14,10,58,-60,119,31,110,-79,-74,-70,-42,37,-98,37,53,72,-61,-127,3,61,18,14,-15,-76,12,-30,10, 
  /* [1001][0][][] */ -35,34,-43,-16,62,41,-47,9,-41,96,31,-40,16,104,48,26,-53,28,97,-38,91,33,-76,47,56,-33,28,-127,76,71,6,-80, 
  /* [1002][0][][] */ -35,63,35,25,-15,-35,10,-117,27,7,-58,-77,0,60,-79,-18,9,-39,24,24,1,33,127,35,10,26,-117,95,-94,-52,40,-14, 
  /* [1003][0][][] */ -30,-5,-35,-6,-55,-127,71,31,58,-30,-36,6,50,-18,-17,-22,-23,30,3,47,-29,18,112,7,13,18,-51,-8,-13,22,53,76, 
  /* [1004][0][][] */ 27,-127,-39,-32,36,-39,-62,16,3,-22,-53,-27,48,-50,53,-15,36,70,8,-20,-8,-1,57,-8,-2,-47,8,-73,-61,51,32,-81, 
  /* [1005][0][][] */ -62,4,57,-6,-83,-102,-60,-3,-54,-91,-49,-88,-127,-19,-60,-6,29,-20,61,-30,84,-57,-54,53,71,18,-117,-127,6,43,70,33, 
  /* [1006][0][][] */ -12,43,16,-14,64,-20,-14,25,-67,93,77,-19,-13,-38,-3,-6,3,49,100,-127,-26,61,83,-90,-19,10,49,46,78,-13,-2,58, 
  /* [1007][0][][] */ 71,-3,50,-22,13,-51,46,2,-95,-41,43,-11,70,-127,-8,4,-13,16,-22,-18,72,59,-52,5,14,2,4,7,43,70,-74,-26, 
  /* [1008][0][][] */ -127,-65,-38,-47,-19,-45,-6,54,-11,15,44,-2,-5,-4,-22,33,-10,-14,14,44,18,42,-16,11,29,26,-7,-12,-9,-77,8,-10, 
  /* [1009][0][][] */ -23,1,9,48,101,66,5,7,-84,118,-68,35,-82,77,-127,-27,40,57,9,107,-47,-60,15,41,8,-35,-25,42,73,-43,46,24, 
  /* [1010][0][][] */ 33,69,49,97,-57,2,-49,20,-48,-62,-42,44,100,-87,-38,-104,31,127,-62,-3,-56,23,77,-17,-9,-76,-1,-46,33,-25,-20,-22, 
  /* [1011][0][][] */ -96,-32,23,-18,-106,-15,-127,39,8,49,-37,-9,18,89,7,-53,83,57,-31,58,8,-75,-72,41,-114,-60,-14,-13,-30,17,-31,-100, 
  /* [1012][0][][] */ -127,-15,-40,38,-41,-57,74,29,22,47,-77,1,-14,-49,78,-49,-2,27,0,11,-27,12,-9,-68,-78,28,117,-33,-15,0,36,-44, 
  /* [1013][0][][] */ 9,91,74,-50,-51,-30,-6,-17,-21,-107,5,-55,-52,-10,-19,-36,33,84,41,-42,52,-49,36,-50,127,45,-97,41,-57,-15,-19,31, 
  /* [1014][0][][] */ 23,42,-41,17,24,47,41,-6,4,19,-4,19,8,-24,-5,-2,-63,-18,30,-43,-43,11,47,48,-50,-32,-127,-32,57,-18,46,21, 
  /* [1015][0][][] */ -7,95,26,42,70,7,13,4,-62,-34,20,-70,-3,7,31,6,-109,-66,-110,4,52,14,-127,24,30,23,-54,-25,-22,-72,-34,42, 
  /* [1016][0][][] */ 48,-72,-36,34,118,-27,15,-18,-21,11,13,57,79,3,85,12,-20,24,-23,-98,-41,6,56,-122,-86,-36,-27,32,127,9,-65,34, 
  /* [1017][0][][] */ -127,80,23,6,-31,-65,53,82,-88,-62,-82,43,-30,-32,27,17,-5,-54,-36,3,50,-8,-11,24,-81,-15,-63,21,34,-80,35,38, 
  /* [1018][0][][] */ 1,10,26,-127,38,19,45,124,32,33,66,8,90,34,-15,41,56,-29,53,8,-6,-38,-29,5,-2,-61,29,34,-12,-12,-51,-98, 
  /* [1019][0][][] */ 16,-32,127,41,73,-26,11,26,18,-5,52,-54,-54,0,1,-16,-16,13,-24,-73,-22,-18,38,4,17,-30,-55,-60,4,-18,-34,7, 
  /* [1020][0][][] */ 30,-2,-92,75,105,-23,-19,38,88,61,59,-88,-40,-93,12,13,51,-23,-52,-82,121,54,-4,46,99,99,-65,97,-127,31,-13,44, 
  /* [1021][0][][] */ 11,-31,99,-14,-10,37,13,-20,31,-22,21,33,3,1,11,22,-22,-12,-26,12,16,99,2,-16,-26,-30,-7,10,127,12,95,33, 
  /* [1022][0][][] */ 37,19,103,-102,26,39,76,-103,55,-25,-127,-24,15,98,10,74,106,-67,-76,-39,111,78,-38,41,74,83,-108,99,-92,-52,-31,-39, 
  /* [1023][0][][] */ 44,-60,77,18,127,-36,-65,79,76,23,-80,-50,-21,-34,67,-24,19,-81,66,74,49,61,14,66,44,44,13,67,-107,20,-81,-49, 
  /* [1024][0][][] */ -25,-73,14,-56,-26,-39,-73,-4,71,-27,-11,3,89,41,0,14,-15,57,-38,-5,-90,44,-6,-25,-32,-14,1,-17,15,35,33,127, 
  /* [1025][0][][] */ 52,51,-3,60,94,-47,91,75,55,8,59,-51,-81,71,-49,-6,-18,-20,55,30,2,-14,-14,-127,-14,32,22,-3,-56,99,24,-23, 
  /* [1026][0][][] */ -34,-14,-12,-77,-28,54,18,35,-70,9,54,4,19,33,-19,78,17,-127,-29,56,12,36,-49,-27,-63,-13,60,30,17,-26,-20,-48, 
  /* [1027][0][][] */ -13,-11,-127,-70,64,15,16,17,14,44,11,-10,-56,-27,14,10,16,-22,-62,18,-2,-96,19,-14,22,56,-27,49,63,29,-16,-97, 
  /* [1028][0][][] */ -79,-41,-67,-27,66,63,54,21,23,-81,15,56,-9,-27,-4,-46,-16,11,-54,-21,-85,-21,-9,-25,28,49,-4,-84,-1,-127,43,20, 
  /* [1029][0][][] */ -29,47,-109,54,23,-88,13,-93,-127,-23,-1,125,-12,90,46,17,-91,-74,43,-1,28,3,-6,-120,-39,84,-118,94,52,46,-109,61, 
  /* [1030][0][][] */ -51,67,-31,42,1,12,73,32,-31,36,127,54,45,-52,71,-48,75,-75,-3,73,66,14,92,-77,15,37,-35,-56,3,-11,-48,8, 
  /* [1031][0][][] */ 26,-63,-95,-1,16,-3,72,-88,51,-35,-72,14,-27,-92,-60,107,109,-41,12,42,-91,40,-3,-108,-115,-31,64,-86,15,-74,127,-5, 
  /* [1032][0][][] */ -119,1,-39,-47,61,38,33,110,-64,29,127,88,15,-42,7,-20,13,11,-94,-12,49,-8,-20,-67,23,-36,-47,17,-81,3,-39,38, 
  /* [1033][0][][] */ -80,-33,9,18,54,37,32,28,8,-110,-12,12,-65,-24,-108,7,53,-60,61,-11,60,15,61,-51,-40,65,-46,24,0,-17,-93,127, 
  /* [1034][0][][] */ 79,77,41,-7,8,67,-33,67,-40,-14,-47,47,-53,-55,9,-25,49,-87,-81,39,-127,50,-18,-8,78,5,-50,13,53,-22,-58,-6, 
  /* [1035][0][][] */ 57,-68,79,-12,33,-66,-36,39,127,67,-48,-50,10,-2,58,62,-43,-1,-16,75,-6,79,10,38,-61,-25,-14,-27,-20,-34,57,-4, 
  /* [1036][0][][] */ -6,-43,77,-65,48,4,40,78,-127,13,21,74,-118,-10,0,29,-46,-51,9,24,-15,-28,-18,-29,21,68,-33,-15,71,-70,9,-20, 
  /* [1037][0][][] */ -5,25,87,33,127,-17,34,24,-45,6,63,11,12,-19,-37,0,-3,32,-53,78,-71,-42,14,81,-7,17,-10,39,20,13,60,43, 
  /* [1038][0][][] */ -36,-1,43,-86,17,23,-76,120,32,-1,19,28,-62,56,127,-13,-21,-101,2,-42,75,92,13,27,64,26,55,33,-27,21,-7,-38, 
  /* [1039][0][][] */ -21,-58,-53,-62,-22,-53,-25,80,-103,-11,-11,24,-17,-21,-33,-3,-55,-12,56,61,-11,60,-26,35,68,-17,127,11,35,73,-8,-15, 
  /* [1040][0][][] */ -64,38,-8,-17,-40,42,-67,68,9,6,-60,19,29,-47,-10,-99,41,-53,-17,-1,127,-13,42,-33,53,-41,68,-20,-43,82,10,-19, 
  /* [1041][0][][] */ -127,79,65,-18,60,-115,19,-30,62,8,-62,-83,3,41,-106,1,-43,78,-72,31,19,8,-95,-50,-52,17,-17,59,-62,-49,24,34, 
  /* [1042][0][][] */ 6,33,-96,-127,-82,-118,62,36,21,-3,-39,-1,25,12,-7,62,-55,-57,-39,-16,-90,54,68,-23,-19,-37,14,75,-59,2,30,50, 
  /* [1043][0][][] */ -15,8,-80,-53,-68,18,-97,92,26,-17,68,-107,103,-60,26,-22,-45,-78,-33,110,-127,-54,34,-71,49,8,-39,-41,-59,100,70,70, 
  /* [1044][0][][] */ -31,-127,45,11,45,23,-13,59,-86,23,58,6,-72,2,47,-10,-14,-57,-39,110,38,66,44,14,11,-67,85,-100,-3,4,48,-31, 
  /* [1045][0][][] */ 35,16,25,96,95,48,85,20,127,19,12,-103,3,-24,36,-36,-25,-80,69,-68,29,106,16,-36,36,-38,8,48,16,10,4,-62, 
  /* [1046][0][][] */ 34,-17,3,-1,-51,68,-75,18,105,32,-29,20,-36,-1,-22,29,-19,-38,14,-127,-10,-63,45,13,-32,-65,-12,-23,-9,-10,65,-40, 
  /* [1047][0][][] */ 97,-7,26,-29,-15,-48,26,22,-69,23,-76,22,66,87,-103,0,-41,9,-11,44,13,-22,112,-16,-98,66,127,30,-15,-40,4,21, 
  /* [1048][0][][] */ 20,-12,20,-2,36,65,-45,127,-25,-45,-105,-3,21,27,-78,29,-63,62,44,15,-7,11,-8,-18,-46,-29,20,98,47,55,15,-7, 
  /* [1049][0][][] */ -25,6,-38,-40,10,-58,54,-20,29,-65,-64,80,-20,-44,-4,-64,40,66,-16,40,-1,-74,-47,26,127,-61,-3,101,-12,-33,112,-30, 
  /* [1050][0][][] */ 22,-16,0,6,46,-25,-9,-66,-15,-40,14,-16,-127,64,-5,-26,-14,-1,-40,-8,-77,82,-52,27,-11,-6,32,13,71,-49,91,65, 
  /* [1051][0][][] */ 10,-11,10,-19,94,31,28,127,-40,40,-52,51,-7,-14,-40,-1,-127,-55,15,-94,22,-6,-81,91,106,-16,43,12,-34,41,55,11, 
  /* [1052][0][][] */ 23,-26,65,-59,15,-75,63,-14,17,-17,30,-29,-41,-31,-106,-27,69,-42,68,12,-55,-98,-40,37,-19,4,-31,4,46,78,-9,127, 
  /* [1053][0][][] */ 57,83,10,2,-18,-25,-27,9,-82,-2,7,75,117,12,26,-14,-18,26,-50,-100,-5,-93,-19,-36,-127,-86,35,-21,-20,16,-86,-31, 
  /* [1054][0][][] */ -74,-51,-13,-23,-127,-5,7,17,-25,-38,13,-32,-44,-18,-22,20,-44,-3,-14,39,34,-120,8,-77,41,42,-28,3,84,56,-32,76, 
  /* [1055][0][][] */ -19,92,-22,-71,24,-34,40,21,112,-127,58,48,41,13,-67,17,125,-33,62,-27,-73,67,24,-17,-15,32,14,40,3,-15,41,32, 
  /* [1056][0][][] */ 17,-3,-29,13,85,72,60,-46,-19,-55,-127,83,46,57,107,-86,42,-80,7,-16,75,62,-4,-3,-87,-29,-109,-6,60,-16,-30,26, 
  /* [1057][0][][] */ -53,-81,-93,-107,47,-127,-13,-123,-90,-41,-35,-38,66,54,40,40,32,50,-42,0,-1,-73,5,45,87,45,15,-48,123,-43,25,8, 
  /* [1058][0][][] */ 71,-79,44,5,-16,37,-66,127,17,8,-33,15,-3,30,-60,-36,-28,-11,3,35,29,-45,-22,-12,66,3,8,-28,-1,28,90,18, 
  /* [1059][0][][] */ -118,-113,-35,47,67,8,66,127,116,-72,-65,-58,-44,-84,-43,-43,76,-51,71,-8,-29,33,11,27,24,-58,-9,82,-52,37,-32,-29, 
  /* [1060][0][][] */ -30,-37,-69,1,-71,-127,3,-6,-59,32,76,-78,-98,20,-30,-111,17,62,9,18,-38,-37,-22,-122,-92,-5,58,47,-24,37,30,-21, 
  /* [1061][0][][] */ -19,-65,13,-9,-16,127,87,52,18,21,-62,-6,-43,-18,-110,100,13,-49,42,54,95,9,-103,46,27,4,58,42,17,81,91,62, 
  /* [1062][0][][] */ 4,31,-4,25,67,15,-67,74,-44,-127,99,13,13,-20,-8,64,41,-43,15,-39,19,-81,5,46,-1,67,2,19,21,-8,72,23, 
  /* [1063][0][][] */ -105,-48,108,17,41,-47,-46,-16,-60,22,30,25,-100,3,-55,41,10,-26,108,49,23,3,-127,-14,66,-32,33,-51,-106,16,22,-9, 
  /* [1064][0][][] */ -16,18,-68,-127,85,-71,70,-83,-36,-67,-12,-44,-37,15,-23,-8,-15,4,-46,-22,30,24,-69,59,35,-104,28,-5,-10,-10,16,-85, 
  /* [1065][0][][] */ -22,27,5,27,-54,-17,27,-72,-53,-47,-72,-109,-70,-67,4,-23,-23,-98,-20,56,127,87,-30,-6,14,16,45,-40,-3,70,0,-41, 
  /* [1066][0][][] */ -53,55,46,-75,-27,-124,42,-15,20,40,6,-79,29,-54,45,33,16,-40,45,-14,2,-49,13,-77,31,-127,-9,6,65,15,-13,-110, 
  /* [1067][0][][] */ -76,8,-13,-40,10,-40,-29,36,-60,15,-67,126,50,-71,-37,21,-25,109,-17,-127,-48,54,-51,-16,-56,-3,-57,10,-28,22,90,-5, 
  /* [1068][0][][] */ 30,-6,-11,-8,-24,-21,-7,-25,-67,28,72,-8,-20,-12,-63,34,67,-76,23,-49,81,-25,50,-34,-7,8,1,65,4,20,127,44, 
  /* [1069][0][][] */ -49,-43,16,-54,-4,62,2,69,-13,30,-23,14,-21,-30,34,24,60,28,65,-49,99,39,13,-6,-127,42,31,84,13,49,25,-40, 
  /* [1070][0][][] */ 47,10,-127,-1,-5,113,71,20,-57,-32,-4,41,115,-33,92,-20,-14,25,8,-62,18,83,58,33,-31,-62,31,47,-26,8,64,13, 
  /* [1071][0][][] */ 19,32,-44,127,-32,37,-68,44,-1,23,10,65,39,14,-63,66,27,-69,-3,50,45,-60,21,-68,-5,68,42,-39,-8,18,20,-19, 
  /* [1072][0][][] */ 123,18,9,23,29,19,51,127,-87,-46,17,-6,41,-77,-57,-62,76,28,10,-54,-7,-18,-52,-42,4,3,104,-2,-58,1,112,54, 
  /* [1073][0][][] */ -66,28,34,92,40,-16,15,-30,-15,39,59,-14,-85,-15,50,-31,127,-77,-110,69,-5,59,51,27,-36,77,96,-59,114,-102,93,86, 
  /* [1074][0][][] */ -22,-26,-84,-71,34,1,54,103,24,-110,7,45,-19,-44,39,-59,7,-9,-126,97,41,84,-21,36,-74,42,127,-50,93,70,-36,-38, 
  /* [1075][0][][] */ 26,86,26,-5,14,-13,-7,38,32,20,-127,-12,52,-24,-53,40,12,-27,-50,-18,-8,68,29,-6,-58,-40,28,-54,44,74,-8,-11, 
  /* [1076][0][][] */ 6,38,84,8,28,-127,-86,-70,-47,20,-74,4,-57,41,42,-33,-10,107,-14,-14,-33,-96,-41,18,118,-4,26,70,-45,-12,77,84, 
  /* [1077][0][][] */ 17,-5,-15,2,-2,-25,-66,127,58,0,82,2,-21,-29,-48,49,42,-49,-63,-26,-27,69,-102,-68,8,76,99,-66,83,37,-16,19, 
  /* [1078][0][][] */ 33,0,22,70,82,6,15,23,18,73,-78,-9,-6,-50,-33,-93,-101,-15,-110,-127,-44,60,47,33,-4,8,-56,38,-5,-31,-19,35, 
  /* [1079][0][][] */ 72,-36,4,-34,112,48,-30,79,-16,-8,-32,-57,92,-64,-127,21,-98,38,-23,44,31,42,-39,52,-89,27,-59,-9,3,-22,-86,20, 
  /* [1080][0][][] */ -65,30,-33,1,81,-19,-76,-8,60,110,9,70,-113,-18,18,127,16,-90,21,-89,30,83,0,-16,-69,23,-41,57,125,62,28,-44, 
  /* [1081][0][][] */ 28,1,30,92,19,-34,21,-106,-39,43,-29,-48,-3,-10,29,-54,-38,35,14,-8,62,-11,51,-2,-127,-41,-37,8,-9,14,-14,101, 
  /* [1082][0][][] */ 44,4,-13,-72,1,41,5,71,2,121,20,-77,75,21,110,29,127,18,-32,56,-55,43,-30,-49,56,0,60,68,14,99,-80,80, 
  /* [1083][0][][] */ 65,-77,63,54,-11,7,-103,13,22,-112,37,-127,3,34,4,-35,7,-31,-12,-45,48,60,-20,39,-18,-48,17,-76,54,26,38,44, 
  /* [1084][0][][] */ -9,46,31,-16,8,36,-22,69,-19,19,47,31,-125,46,11,9,-39,5,31,127,-80,-17,-72,-99,8,74,-53,59,-35,60,-52,10, 
  /* [1085][0][][] */ -35,31,9,21,8,34,40,11,-13,-17,4,3,-26,54,29,-28,-78,-33,-49,23,-33,-79,-127,11,33,-46,-4,-9,-24,-48,-6,-78, 
  /* [1086][0][][] */ -29,-106,-38,-13,-16,49,-13,74,42,21,-18,-24,26,-7,-44,-10,0,26,-65,2,1,19,65,-78,-127,-21,-4,47,14,-28,40,-14, 
  /* [1087][0][][] */ -33,-26,12,23,3,-21,-47,56,5,-34,21,-3,32,-46,-18,-47,-53,49,-24,127,-50,53,-54,11,-6,22,99,-42,-55,123,-17,-65, 
  /* [1088][0][][] */ -13,32,24,-25,-31,-25,2,-47,-10,0,9,14,-16,11,127,-17,31,-27,-15,3,111,36,27,35,-5,-92,75,-13,-49,-22,-51,-36, 
  /* [1089][0][][] */ 51,-5,29,23,119,0,27,15,-15,37,-19,19,26,-127,-47,57,13,101,68,45,13,-80,1,33,126,4,-24,-32,-103,-61,65,-18, 
  /* [1090][0][][] */ -19,-16,127,40,-5,56,-24,2,-1,6,20,62,20,-7,31,1,-27,-27,-42,35,26,16,-12,21,25,0,23,-3,-30,101,38,-70, 
  /* [1091][0][][] */ 102,96,-15,5,38,85,-127,79,-104,102,57,64,31,-1,-64,23,29,-88,-7,-21,16,43,-9,-103,-26,-60,-19,91,-60,2,49,73, 
  /* [1092][0][][] */ -42,-61,-10,82,-69,32,110,2,-32,29,4,11,-79,5,127,19,-32,12,-97,-35,-7,-12,-5,-74,-14,-110,-66,20,0,-13,-56,32, 
  /* [1093][0][][] */ -2,-81,75,17,99,-16,3,58,23,-16,-52,-39,14,26,66,-89,107,127,-3,85,-8,-43,45,-34,-17,-20,21,33,27,13,-89,13, 
  /* [1094][0][][] */ -61,16,41,-38,0,37,-24,25,75,-26,-6,-35,7,-5,-18,-6,-19,6,17,-127,-12,38,-16,50,-28,55,43,57,-4,49,2,-29, 
  /* [1095][0][][] */ -9,22,22,-127,1,-46,53,-12,-94,-8,30,4,-38,15,73,49,69,-20,1,44,-65,63,-11,62,-62,-108,-38,6,82,24,28,5, 
  /* [1096][0][][] */ 15,83,-127,24,14,-42,126,-55,53,-67,-1,-52,12,-15,57,-75,-23,-3,41,-19,7,-30,-10,-70,-7,-23,-26,-53,0,14,11,-22, 
  /* [1097][0][][] */ -54,59,-20,-51,-2,8,-72,-60,-2,-56,127,-87,5,1,17,22,16,14,24,-89,61,3,-73,44,4,-39,8,-76,30,7,-89,-22, 
  /* [1098][0][][] */ -46,26,36,-48,97,-60,16,-3,111,-38,2,29,6,-20,-3,27,105,-14,-1,-119,-50,118,-39,2,-15,11,-37,-57,93,127,10,32, 
  /* [1099][0][][] */ 4,22,46,-22,39,-5,3,22,59,-9,-1,-15,62,4,-86,52,41,49,8,17,-7,-14,1,19,27,-16,-73,127,13,71,64,20, 
  /* [1100][0][][] */ -24,65,14,-108,-74,-39,31,67,74,-19,127,92,-48,-60,20,-41,44,-30,-14,53,-7,-6,44,41,-44,16,-49,17,76,2,16,48, 
  /* [1101][0][][] */ -107,-65,-71,0,-64,4,-49,9,-24,39,-28,-12,-6,-8,22,40,-57,-35,-110,-66,-10,-39,-44,55,127,-57,35,55,3,-10,-14,30, 
  /* [1102][0][][] */ 30,-43,39,-36,37,60,-22,36,66,85,53,-76,-2,36,-50,5,-65,-57,-86,-8,-127,6,-8,6,-4,-43,-41,41,50,20,-57,72, 
  /* [1103][0][][] */ 57,25,9,36,53,38,-34,1,-56,0,-44,4,84,-18,127,-63,-59,-33,-28,55,-79,-5,82,-13,45,9,-93,-124,-30,52,-107,72, 
  /* [1104][0][][] */ -7,-8,-68,-127,-20,43,10,0,-2,24,6,-54,17,5,-69,35,49,65,-9,18,35,-32,42,16,5,-44,-5,25,54,-92,5,-37, 
  /* [1105][0][][] */ -75,-55,-3,-63,-9,54,-55,-9,-21,-47,-38,-81,75,88,-21,39,5,-82,101,31,27,18,51,6,-52,-69,-54,56,-31,2,30,127, 
  /* [1106][0][][] */ -14,-20,22,-127,4,-16,4,23,-68,-14,65,14,40,-23,18,-31,35,-36,-96,-72,35,89,-111,40,12,71,9,34,-79,82,79,81, 
  /* [1107][0][][] */ 71,-4,35,-18,-37,-19,1,14,9,12,-69,-26,-87,-61,54,-95,-8,10,51,63,12,-62,-117,0,-36,-78,-114,12,-86,66,119,-127, 
  /* [1108][0][][] */ -10,43,43,-111,22,-101,3,127,-56,68,-35,-89,-12,-86,15,-54,-83,80,-56,42,21,-32,3,-5,49,-4,-32,93,-96,-35,-14,50, 
  /* [1109][0][][] */ 21,-66,127,71,36,25,52,58,12,-51,-46,17,22,-38,-23,-50,-32,-70,36,73,57,2,69,41,-50,14,39,58,-54,-112,-16,18, 
  /* [1110][0][][] */ -12,-27,21,-14,-41,-15,-127,31,-28,64,48,14,-34,-29,-18,-45,-17,-29,14,14,-29,22,-18,-18,-8,-2,27,-7,-17,-24,26,-24, 
  /* [1111][0][][] */ -1,62,120,91,61,-20,40,-5,-23,3,-4,82,-23,40,-27,-24,-11,-33,-67,-3,21,5,7,-77,-46,-13,28,-127,116,97,-40,6, 
  /* [1112][0][][] */ 21,6,-15,-58,9,3,-57,-36,-30,127,-36,44,4,11,-15,-22,-62,6,-5,20,14,43,0,-76,-36,-36,-77,44,-22,1,73,14, 
  /* [1113][0][][] */ -30,49,48,21,-127,-51,-11,-25,53,46,0,64,-43,-24,32,-10,38,35,-35,-82,-13,-11,-58,7,27,-49,-32,-8,6,3,-31,55, 
  /* [1114][0][][] */ 8,-93,-21,-53,127,-54,-38,57,-33,-26,90,-13,43,-10,-43,-30,-14,46,-75,-58,-86,17,-13,-30,13,16,94,42,-21,3,-13,-42, 
  /* [1115][0][][] */ 69,-9,6,-31,25,48,-36,-20,29,26,-51,-44,46,-57,15,-17,-27,-61,-117,72,-37,-10,-40,-76,8,-8,-3,-13,-98,21,38,127, 
  /* [1116][0][][] */ -27,-30,-35,2,62,-19,46,-19,-65,-127,-58,76,66,36,-82,-44,41,12,45,24,-56,27,-5,-24,-42,42,4,14,-19,-7,-62,46, 
  /* [1117][0][][] */ -3,18,77,-58,63,103,-25,-16,-53,-33,-40,-12,127,16,1,30,-42,28,24,9,113,16,-103,-69,41,-59,16,16,10,-107,27,50, 
  /* [1118][0][][] */ 26,28,37,-45,19,-8,37,-27,4,42,68,81,-22,5,14,-34,-42,66,-49,-33,127,43,-91,-25,34,-15,-26,-19,40,-48,-2,-21, 
  /* [1119][0][][] */ -35,-90,-8,-73,23,49,18,101,-127,78,-14,62,-3,20,44,63,-15,-1,-25,34,67,-38,17,50,2,-19,48,90,-52,82,-13,39, 
  /* [1120][0][][] */ -8,97,-127,-34,22,5,32,26,-11,-28,-22,-32,-6,-114,-65,4,-45,21,-30,2,-18,-3,-31,3,67,45,14,68,12,-12,53,14, 
  /* [1121][0][][] */ -63,15,-8,39,56,-27,-23,-30,-60,92,-13,-39,-26,127,61,28,-67,80,1,60,-38,18,-73,77,-74,-66,-109,25,-26,-32,60,24, 
  /* [1122][0][][] */ 19,-15,16,96,-46,32,-68,-127,-27,62,-1,-30,-1,108,52,84,-26,11,66,50,-15,11,39,45,20,-8,58,-44,39,-20,31,-69, 
  /* [1123][0][][] */ -45,29,-28,-10,25,-8,-92,-72,6,0,54,32,56,-3,11,-40,80,-64,100,-68,-36,-127,-72,-40,-35,-4,-48,-3,-22,19,54,60, 
  /* [1124][0][][] */ 21,-27,38,-94,-2,-35,-61,-22,-79,-37,-32,87,-2,-20,40,-27,37,-45,90,76,20,-48,-51,65,-34,127,58,28,-57,-45,-23,-21, 
  /* [1125][0][][] */ 45,-18,76,41,19,41,72,-38,58,-10,38,55,68,-19,36,-48,28,76,102,-55,116,-63,9,46,-8,-89,70,-127,-17,-16,-15,29, 
  /* [1126][0][][] */ 22,-24,45,-46,17,2,-25,62,41,-49,11,-29,51,8,-127,41,14,-34,-10,22,12,12,-64,8,-66,-36,24,9,60,-8,48,-24, 
  /* [1127][0][][] */ -2,-24,-7,-30,-24,-117,63,44,79,35,-68,16,-127,-55,-43,116,-4,-59,-9,-103,118,61,0,17,1,-34,-10,-32,-40,-81,-25,-108, 
  /* [1128][0][][] */ -1,-61,36,2,-33,11,63,-55,-1,-84,127,-15,12,1,60,-123,-59,3,-30,54,-43,-12,-58,-6,7,67,-76,5,-50,5,-31,-25, 
  /* [1129][0][][] */ 30,31,20,-2,30,10,6,-56,-39,42,4,-73,-92,105,-31,-12,-14,-112,-44,67,-59,61,-32,45,19,-2,-104,-99,-43,83,-71,127, 
  /* [1130][0][][] */ 127,-37,-24,93,-13,0,31,-35,47,80,-20,-94,-29,-38,-45,5,-81,-78,28,-31,84,-84,34,24,-83,65,73,17,-52,21,92,-39, 
  /* [1131][0][][] */ 19,-53,-29,-11,37,87,43,69,-21,-68,3,62,9,12,-46,12,112,-24,-7,94,115,84,120,38,40,-51,74,127,41,-78,-10,8, 
  /* [1132][0][][] */ -45,-127,-8,39,12,52,-59,67,-58,-34,-36,13,-14,15,-55,7,-57,-97,100,107,65,-86,-72,-78,27,53,-95,-94,21,62,45,-69, 
  /* [1133][0][][] */ 103,-123,-34,-18,-48,72,-11,-15,16,-27,-71,62,22,15,58,-61,57,-78,56,47,-127,64,55,-27,5,6,-116,-17,-13,84,54,70, 
  /* [1134][0][][] */ -13,-61,3,50,-17,3,64,-4,-46,-39,-23,-27,20,-29,-27,-102,44,-36,-73,-16,58,28,-49,-34,31,122,17,127,14,-48,15,18, 
  /* [1135][0][][] */ -47,-29,-2,13,0,-49,120,-12,30,-83,1,-16,16,63,-19,-57,-65,-57,73,-21,42,-20,-14,-55,-2,39,-32,48,21,-127,120,-85, 
  /* [1136][0][][] */ -19,46,21,127,-17,-44,78,4,-46,-13,-31,-58,-84,2,-91,-68,53,-41,28,-63,14,45,-104,-22,5,-6,-93,-18,43,98,-43,87, 
  /* [1137][0][][] */ 25,107,104,-66,16,-68,48,110,114,45,-74,13,-21,-29,127,118,66,16,64,88,44,-19,-20,55,85,58,17,-74,-44,97,20,-7, 
  /* [1138][0][][] */ 44,25,28,-41,12,15,-36,38,-22,5,2,-37,0,12,92,37,-60,7,6,-61,3,127,59,-78,-7,0,14,0,-6,-37,44,94, 
  /* [1139][0][][] */ 19,-4,15,-8,28,12,-11,58,4,28,60,-93,-62,-40,-41,-5,-23,-49,23,0,-52,-2,11,116,-67,33,-46,4,-51,-78,-127,20, 
  /* [1140][0][][] */ -111,9,31,-53,2,95,36,-8,127,46,-18,-10,63,-50,-118,-21,121,-18,-1,2,30,-51,-36,-105,-48,3,-24,-13,15,7,41,49, 
  /* [1141][0][][] */ 55,-62,-60,3,-47,33,70,-44,10,-4,-6,-48,-61,-12,62,27,24,-45,-12,33,29,-46,-2,44,-15,-1,-127,41,43,-18,-77,-52, 
  /* [1142][0][][] */ -70,59,-19,43,14,98,-38,69,50,-89,9,-51,15,23,-51,-12,41,32,52,-98,-55,-52,-25,127,-95,-59,-66,6,40,71,-12,-120, 
  /* [1143][0][][] */ -80,-43,-74,-54,11,15,60,44,-23,36,11,24,-76,-25,-63,17,-45,-9,30,-40,3,108,65,-16,18,-2,127,33,3,-17,-27,-63, 
  /* [1144][0][][] */ -26,-43,-9,24,-22,-42,-103,83,-83,61,-34,87,33,-93,-82,-73,126,11,-37,-74,93,127,-15,-1,-20,-32,22,-18,122,-76,15,59, 
  /* [1145][0][][] */ 16,30,-33,127,88,-53,-22,-71,-9,30,8,-71,-74,-35,-3,-10,-15,27,-108,39,38,-25,-88,10,40,-19,-9,69,126,-57,-101,-122, 
  /* [1146][0][][] */ -73,-10,43,-22,110,70,31,53,96,-58,-2,-88,-51,25,53,59,-103,-66,-36,39,-34,4,71,-19,11,-87,64,-127,75,-40,-49,45, 
  /* [1147][0][][] */ 25,-59,1,13,9,53,-34,65,-22,92,-31,125,87,-30,84,21,-27,27,127,2,-44,-3,97,-81,-52,-5,74,-7,-14,46,-61,40, 
  /* [1148][0][][] */ -49,91,4,-20,14,-41,-33,-40,51,-127,-42,87,-103,-60,-63,3,-42,-48,-54,7,-7,-4,-41,-51,54,85,-49,38,54,-8,0,62, 
  /* [1149][0][][] */ 15,-55,101,-89,-33,3,-35,-7,115,-13,2,-81,-25,-36,24,-44,-46,-84,-5,85,46,-13,-76,63,53,64,72,-89,127,69,16,25, 
  /* [1150][0][][] */ 3,-78,48,14,79,-12,127,-15,11,-21,90,8,-35,34,-6,-51,-37,-87,24,-20,53,93,53,60,0,104,12,34,29,81,11,-1, 
  /* [1151][0][][] */ -16,-69,-11,61,69,40,-33,-16,76,-22,60,-3,-3,27,28,47,16,17,19,-20,-127,-3,7,43,-95,31,56,40,25,27,2,30, 
  /* [1152][0][][] */ -21,-46,44,26,-32,63,48,94,-4,127,-88,33,-101,75,-57,-74,-5,-29,-73,22,42,8,-34,21,-15,-58,-1,80,14,38,23,-61, 
  /* [1153][0][][] */ -27,26,-31,-1,53,-20,-89,-28,32,57,-23,4,-43,-21,-127,-25,29,-15,104,-3,66,78,82,34,-55,-125,26,35,34,-10,-41,-18, 
  /* [1154][0][][] */ 56,5,-52,-127,-17,85,4,-50,-70,-61,0,74,65,-108,2,-80,-4,48,-8,33,-37,-84,-38,71,89,16,-63,9,-50,66,-15,57, 
  /* [1155][0][][] */ -8,36,-30,-64,-6,59,-35,-42,-10,-127,27,-7,-105,10,-10,58,-17,-16,88,88,63,102,-4,109,-58,-18,83,11,38,-9,71,-83, 
  /* [1156][0][][] */ 12,-62,-24,73,81,-36,47,-3,5,-51,-79,-87,35,-28,-10,103,-127,-32,-33,112,25,36,14,1,70,-92,42,-44,-45,-68,33,-62, 
  /* [1157][0][][] */ -87,-72,3,-31,34,20,23,67,-45,91,15,-119,18,-32,-104,43,-106,-22,60,13,127,50,36,-97,57,36,-29,-23,21,-52,38,-2, 
  /* [1158][0][][] */ 86,42,-38,-27,49,105,70,-33,5,-16,82,-26,-72,65,29,-29,127,-40,-95,-17,-64,65,-38,0,-12,-123,-58,-18,-7,-33,-66,30, 
  /* [1159][0][][] */ -16,-16,17,30,-57,64,-48,-89,-41,-127,-7,7,67,20,-35,-64,-31,-21,-54,3,127,105,86,-66,118,-19,26,15,-67,-39,26,73, 
  /* [1160][0][][] */ 1,14,69,35,15,-45,-5,112,127,10,-15,-5,-17,66,5,-100,-60,42,79,-1,-55,110,-85,-9,-59,-46,-49,-5,-36,109,25,-1, 
  /* [1161][0][][] */ 37,-38,-64,-9,-38,-6,107,53,-69,28,-108,-127,34,-57,-33,-31,-18,-35,-91,-29,1,35,4,20,30,-67,-14,42,-20,-63,78,2, 
  /* [1162][0][][] */ 46,7,-127,1,43,-27,92,-16,12,-26,38,-60,102,-97,16,-114,-21,-27,37,31,38,-9,-61,-23,56,77,-41,74,-30,51,-14,-13, 
  /* [1163][0][][] */ -14,94,-66,78,-95,46,50,11,-50,-39,-42,38,-10,-76,7,26,-17,15,30,31,-23,-71,33,127,26,26,35,0,-69,46,-3,7, 
  /* [1164][0][][] */ -46,-16,-14,46,40,8,7,-127,0,43,4,27,-22,39,-23,-28,50,6,-30,61,-66,-67,-79,11,-37,-37,-1,31,-20,-28,28,43, 
  /* [1165][0][][] */ 27,37,-32,41,8,-41,88,-2,-45,38,-9,-9,-47,60,48,-62,25,36,-127,-10,44,15,-34,-40,-31,50,4,19,73,-21,-61,84, 
  /* [1166][0][][] */ -63,-19,-122,54,-46,18,-33,-10,15,73,49,-46,28,-43,22,17,9,-119,65,18,-46,115,42,-110,-33,-90,27,-77,-98,-9,-14,127, 
  /* [1167][0][][] */ 75,63,-72,53,-41,103,-19,34,-1,-10,94,80,1,6,-62,52,-47,11,-91,80,-59,-95,127,2,-66,-15,-96,-58,107,-43,-46,-33, 
  /* [1168][0][][] */ 7,-8,-40,57,-16,52,-5,-23,-11,17,19,30,60,32,64,50,-27,40,43,6,-2,-35,24,-11,29,26,11,4,8,-127,-41,-77, 
  /* [1169][0][][] */ -29,49,-13,44,22,-22,19,38,49,-4,45,-1,-46,-5,-24,-72,-13,10,-40,127,36,-59,-41,69,53,32,0,-61,-91,11,-7,-63, 
  /* [1170][0][][] */ -26,-7,-4,-25,-39,-12,-37,47,-26,45,-2,50,-28,21,127,-14,26,-19,15,40,0,-41,3,-37,-16,-38,-73,-35,41,-12,-9,-36, 
  /* [1171][0][][] */ -63,-41,123,-86,49,-38,-57,57,15,110,-41,-17,-50,75,64,-38,44,-11,-66,-78,110,-18,16,-22,-111,7,-21,127,74,-13,60,-21, 
  /* [1172][0][][] */ 38,26,-55,29,-127,56,39,44,36,-11,-63,21,-2,74,1,78,-5,-67,-14,15,78,-104,-29,21,-66,-34,16,11,19,13,-12,-77, 
  /* [1173][0][][] */ -63,-19,13,12,-4,-19,-31,54,34,21,-4,-8,-39,-8,-127,-27,11,-7,51,14,-63,-68,-15,3,-59,-8,-9,30,18,26,-49,16, 
  /* [1174][0][][] */ -119,3,-37,-70,122,13,-72,-48,-67,65,-13,4,39,4,74,-19,11,-34,11,-39,-83,34,-35,-74,-79,-101,-127,8,-98,11,-11,-104, 
  /* [1175][0][][] */ 66,-70,-61,-72,127,3,-48,38,26,-38,43,-75,76,37,-31,-18,35,59,34,-5,-18,47,-58,-45,8,-45,19,-2,72,-49,105,15, 
  /* [1176][0][][] */ -44,51,-21,-40,70,-93,-43,-56,100,-75,28,29,34,20,-12,57,49,-44,64,34,67,-99,45,4,-13,-57,78,127,-59,64,-51,-7, 
  /* [1177][0][][] */ -59,-12,-38,22,45,97,-88,-94,-33,15,33,-51,78,121,19,-92,-85,98,-1,74,-114,110,127,-2,12,-13,-42,-7,56,-22,93,1, 
  /* [1178][0][][] */ -78,84,11,-21,-87,-17,-46,-57,-38,37,-34,-15,31,-47,80,46,-97,-3,28,-99,-127,-9,-7,74,-21,-16,-82,-67,104,-70,28,96, 
  /* [1179][0][][] */ -11,-64,4,-19,127,56,13,64,56,59,17,113,-32,16,84,-47,10,-11,42,20,-89,-92,17,-92,82,58,68,82,90,-41,5,-6, 
  /* [1180][0][][] */ -15,-42,57,-26,24,-74,-65,-89,-26,-70,-1,-10,-62,18,74,-38,33,36,7,-69,13,48,7,10,9,7,-127,-26,-20,24,24,-64, 
  /* [1181][0][][] */ 21,-23,-32,9,-79,-60,-14,121,-125,25,122,65,-72,-45,-67,29,-52,-114,-3,39,-31,-16,-127,-60,20,10,72,-116,48,65,49,-12, 
  /* [1182][0][][] */ -60,-36,-121,62,-28,32,77,28,-99,-80,-87,44,-8,15,3,127,4,-3,56,-2,4,-40,9,-1,25,-80,79,-8,-19,-53,85,33, 
  /* [1183][0][][] */ -15,-2,3,-64,-43,4,-40,-4,-11,121,29,37,1,-16,41,42,33,-22,88,12,46,16,-14,-14,23,-23,-25,-26,-23,27,127,-33, 
  /* [1184][0][][] */ -55,12,1,-127,17,-16,35,18,68,-65,105,-79,52,-8,-32,-73,-62,33,71,-8,-50,100,22,110,-54,-13,-20,34,-49,-37,49,23, 
  /* [1185][0][][] */ 78,-17,58,127,15,30,-12,57,-116,19,92,-30,22,63,15,73,-37,17,-18,-40,76,-47,-29,95,41,-57,97,-16,3,-46,3,64, 
  /* [1186][0][][] */ -19,-5,127,0,-9,1,-26,46,-45,67,32,36,-50,29,-16,16,-1,-34,12,15,39,-34,-10,2,17,23,-25,-41,70,76,17,-1, 
  /* [1187][0][][] */ -45,69,-63,38,-37,-36,-2,58,74,-93,19,-9,-22,33,-17,50,76,-102,-41,-5,24,1,106,-5,-25,17,127,-28,80,-42,37,85, 
  /* [1188][0][][] */ -31,56,-13,-109,16,-59,-41,17,13,-24,-25,-5,-45,20,-19,-9,-17,49,7,-69,-72,30,6,-29,-3,-91,-57,36,127,-43,107,9, 
  /* [1189][0][][] */ 80,-20,1,-14,18,-58,-35,-29,-29,-72,-127,17,-73,-13,55,57,7,-59,-13,13,-104,-52,-48,-37,68,-68,-15,35,14,-71,1,-51, 
  /* [1190][0][][] */ -29,-90,-16,33,37,19,-12,-26,-66,33,-13,-31,-9,74,-34,-2,47,-127,-51,7,38,-60,39,-22,-53,23,-46,43,35,11,58,8, 
  /* [1191][0][][] */ -2,-22,-36,34,6,53,1,-36,47,29,-49,5,27,-40,-14,-34,37,-56,18,-9,-43,-69,48,-84,-24,37,-127,-16,14,57,-62,-3, 
  /* [1192][0][][] */ 5,-4,13,-70,20,-19,8,63,-16,-37,48,12,65,2,-26,3,24,-25,-30,-23,-127,51,70,-21,-73,-17,46,17,111,-13,60,-35, 
  /* [1193][0][][] */ 15,32,-59,8,14,71,-82,15,-127,-37,7,-31,9,8,-34,-7,32,76,21,23,-61,38,6,34,-31,-38,68,-10,-12,-33,-48,-12, 
  /* [1194][0][][] */ 123,24,-5,-10,-127,-34,-112,-72,38,57,35,46,100,-24,-84,-111,94,-115,66,46,39,102,31,54,-36,41,92,78,2,-21,36,-36, 
  /* [1195][0][][] */ 44,-18,38,62,58,56,-50,15,-18,-2,18,-10,-53,21,-127,36,16,73,95,-16,51,59,-43,-30,-68,72,58,52,88,-32,67,33, 
  /* [1196][0][][] */ 91,111,-21,-24,-106,-115,19,-120,-41,68,-29,-84,59,-10,-76,-18,-45,-72,-49,-127,-36,-69,-58,-62,32,-29,-115,91,48,31,-97,91, 
  /* [1197][0][][] */ -31,-37,-67,29,-44,-16,-61,15,41,-9,127,-33,-28,-66,2,-66,-35,-37,-75,93,-39,-4,-20,-61,-28,-23,73,-75,28,3,-61,-83, 
  /* [1198][0][][] */ 3,-58,-5,-34,88,-23,48,-49,22,1,-97,-47,-14,-27,61,-35,-49,27,-8,-15,6,76,-35,-17,26,45,-1,10,-78,127,-57,115, 
  /* [1199][0][][] */ 66,15,-103,-31,-56,-89,50,8,21,23,-21,-112,18,94,-21,112,87,-22,119,-7,24,42,-9,-12,106,66,-7,127,7,37,-4,-51, 
  /* [1200][0][][] */ -60,-127,18,-48,94,-37,48,83,-28,38,-107,-20,-95,-18,-44,80,-67,-64,120,-42,45,79,-10,-14,-64,28,-2,12,-69,-43,84,72, 
  /* [1201][0][][] */ 64,33,72,33,25,-44,-20,-53,-74,-60,-50,-45,-17,-64,-60,-41,9,-12,53,-44,2,-42,-2,-12,-2,31,-9,127,-32,-25,-7,34, 
  /* [1202][0][][] */ -75,-27,59,-44,-127,20,14,-85,-51,100,-15,100,-97,-73,-23,-86,-86,-60,125,-81,-14,-36,10,65,-28,-105,3,2,-21,-35,73,48, 
  /* [1203][0][][] */ -25,-18,127,-36,-19,-74,-7,58,-31,97,-10,0,-33,38,-30,68,11,9,16,-26,-41,29,17,-42,72,-7,22,-6,-59,-13,11,33, 
  /* [1204][0][][] */ -77,-62,-55,-34,-61,-72,56,3,-29,15,-67,49,64,-26,43,-25,62,39,-17,14,25,61,-66,-127,60,-4,-54,-108,77,0,-106,-46, 
  /* [1205][0][][] */ -5,-19,0,36,0,43,7,16,4,72,-66,21,-37,-19,64,-7,-61,40,-3,18,-49,45,127,-39,-36,33,23,9,-10,-11,-47,3, 
  /* [1206][0][][] */ 13,-16,-10,-36,19,-17,-37,11,-39,3,-38,50,-77,60,-47,-59,-88,-65,34,36,-40,0,41,37,-127,40,-19,-10,10,-41,-6,6, 
  /* [1207][0][][] */ 90,79,-127,38,38,-80,1,-37,15,46,20,1,37,81,68,-40,56,-64,70,82,51,23,-39,62,52,-56,-55,-50,-36,-4,-44,-28, 
  /* [1208][0][][] */ 10,62,-23,5,-56,-3,111,39,-29,28,91,-23,18,9,-51,43,-38,-80,-101,-53,-71,41,0,-127,-37,71,-9,-12,-32,33,-77,-88, 
  /* [1209][0][][] */ 44,21,4,-2,16,-59,8,-26,25,108,-5,20,47,-35,42,-29,0,91,-42,127,25,-53,-15,-56,18,-41,10,65,62,59,50,104, 
  /* [1210][0][][] */ 110,4,-107,127,-85,9,33,33,-40,7,-58,-2,-62,18,44,113,-85,-86,-73,14,7,79,23,-70,-114,-21,24,-26,104,-70,-10,22, 
  /* [1211][0][][] */ 5,-37,-110,64,56,-8,-127,-25,-16,95,-21,-30,-103,34,38,-113,64,124,7,-49,-20,16,-5,-89,-5,45,3,32,-59,-32,-15,38, 
  /* [1212][0][][] */ 39,-21,-29,26,-81,26,-20,28,48,4,21,48,5,69,-12,-68,-13,-89,7,-127,-38,16,13,36,62,-21,-34,-85,19,36,-26,-35, 
  /* [1213][0][][] */ -15,-61,101,-33,20,11,-74,-22,58,77,43,35,-86,127,3,-10,21,35,-10,51,-38,12,-29,78,44,-73,-65,23,42,14,117,-50, 
  /* [1214][0][][] */ -35,46,19,-75,-59,-86,36,18,-19,75,19,-63,14,-20,81,53,10,-72,-118,43,127,-83,-27,-62,-79,-42,-14,-98,85,-73,-48,-11, 
  /* [1215][0][][] */ -19,-27,-4,39,27,-36,-10,6,127,19,41,-24,6,-4,46,-29,-83,26,48,-26,26,-10,-2,-67,38,-37,35,11,-14,56,31,34, 
  /* [1216][0][][] */ 105,43,-122,-47,-3,-44,60,88,2,24,-12,-6,2,20,51,-74,46,66,-127,-21,-25,-50,50,-24,-4,-47,28,71,-48,45,109,-85, 
  /* [1217][0][][] */ 53,59,8,97,-52,-69,0,-62,-11,-4,-101,-39,5,50,-68,31,-58,-12,-47,15,67,-95,14,2,-55,49,-127,34,-9,-43,-24,33, 
  /* [1218][0][][] */ 87,-22,22,-47,-103,-127,-25,-9,24,27,7,-95,-41,2,56,25,33,83,31,16,-23,110,-92,-63,-40,-40,80,-47,-25,-52,16,-49, 
  /* [1219][0][][] */ -7,86,-127,24,-35,-41,-38,-4,-15,-8,6,1,-15,-52,59,-27,37,-58,-22,-7,45,-43,-35,-3,-40,21,-50,11,11,6,-10,-18, 
  /* [1220][0][][] */ 61,40,-43,10,-24,-57,58,68,-62,-62,-81,-93,-21,-6,-95,45,-70,39,-71,-54,29,-83,-44,32,119,78,24,-84,28,30,127,41, 
  /* [1221][0][][] */ -25,-5,-35,-43,31,-37,36,-5,-56,-127,52,5,-53,-20,-2,61,27,6,-34,-1,-33,101,2,0,-95,-17,72,-9,45,-61,-13,50, 
  /* [1222][0][][] */ -4,-50,114,-40,-1,50,-19,-5,-100,88,12,64,-41,-57,-44,-61,91,-29,-52,25,32,57,48,104,-78,-12,-127,67,-84,-5,1,-24, 
  /* [1223][0][][] */ -18,8,57,-74,-74,-30,1,77,75,127,22,47,21,7,-61,-58,5,-108,-88,-14,-41,-68,-22,-28,-29,25,-83,65,78,96,-95,-66, 
  /* [1224][0][][] */ 35,121,-9,84,-29,107,-19,-29,-70,35,28,-50,-54,-127,45,-42,-6,85,31,-13,13,62,-7,38,46,56,-15,-122,115,-13,-53,85, 
  /* [1225][0][][] */ 4,25,6,9,15,-46,44,-25,-36,19,-48,60,16,-1,-9,46,37,46,-1,5,18,-10,1,7,48,-60,30,-34,-14,-42,-40,-127, 
  /* [1226][0][][] */ 1,-40,-76,-44,97,-50,-64,10,0,-70,-8,-36,-39,-64,22,71,-4,72,103,-4,-17,106,-127,5,-31,117,-18,-8,40,78,115,-18, 
  /* [1227][0][][] */ 67,-120,44,-62,29,-127,-29,65,-61,73,13,-10,21,-70,-40,-19,50,-107,25,35,108,-52,25,-76,1,71,11,107,26,-5,-60,74, 
  /* [1228][0][][] */ -36,5,-58,-27,-44,-2,24,13,39,61,-21,-27,-39,51,52,80,69,62,-56,0,-38,49,-63,4,127,48,-28,23,7,28,-57,-13, 
  /* [1229][0][][] */ 19,115,103,30,-17,19,-7,20,-48,-96,127,68,-63,20,-94,-38,-66,-6,2,-26,22,-39,2,54,91,26,67,-6,63,-71,-67,-20, 
  /* [1230][0][][] */ 13,5,36,-127,-30,-59,27,-12,13,-43,-78,44,-5,68,8,-43,53,70,46,14,39,-34,-25,39,-60,54,33,35,22,-3,0,40, 
  /* [1231][0][][] */ 14,82,79,53,8,18,15,80,-43,-4,32,-41,-63,-27,-52,-4,-76,-92,-35,32,-1,80,-32,70,-66,-46,86,-1,45,-1,21,127, 
  /* [1232][0][][] */ -20,-18,15,8,-3,127,-19,28,29,125,-75,14,7,29,-97,12,-9,13,2,99,-45,-35,36,10,3,-39,73,36,-80,41,63,40, 
  /* [1233][0][][] */ -5,59,46,59,-59,21,-82,-25,-5,35,-44,-27,-4,46,-127,-6,-44,-6,-19,23,-22,13,-107,25,-78,-38,4,27,39,8,7,16, 
  /* [1234][0][][] */ 4,-127,69,12,19,76,-49,1,59,-47,-49,58,-77,-2,66,92,75,-39,19,3,89,-126,8,80,-33,45,-110,6,74,29,35,62, 
  /* [1235][0][][] */ 39,71,-127,-87,48,10,-25,25,-35,-12,58,72,-30,-51,-23,61,-52,-12,67,-18,40,5,-4,54,36,-27,-8,37,36,31,-35,-112, 
  /* [1236][0][][] */ 15,12,-54,48,-56,6,118,29,26,7,8,7,-47,-7,59,0,-127,-14,12,37,66,-24,27,-29,66,-20,7,9,19,47,-4,-19, 
  /* [1237][0][][] */ -15,-69,-56,22,34,-24,-4,-97,-28,127,-74,-89,92,-3,-91,63,-48,85,67,30,79,-60,-27,-57,-118,-51,27,-8,-27,-23,-124,-113, 
  /* [1238][0][][] */ -87,-2,-101,31,113,11,25,47,-21,-69,1,31,-80,-119,11,42,3,-127,36,96,-126,64,13,67,27,53,-114,-8,-22,-57,1,83, 
  /* [1239][0][][] */ 4,16,11,-11,-116,59,38,82,35,-25,-19,8,-39,73,-36,25,-65,13,-46,-50,12,-30,-35,80,39,-30,-40,-72,-42,-34,127,98, 
  /* [1240][0][][] */ -26,-58,97,5,-33,-32,-108,-45,21,0,-81,-2,82,-18,-28,-87,-33,63,91,54,39,8,12,1,28,-37,27,127,52,37,-32,27, 
  /* [1241][0][][] */ 17,-66,-48,-3,-57,58,115,23,-78,30,-4,127,0,16,-29,-43,-96,-119,-59,73,95,-6,-17,77,116,-8,76,-54,-45,73,44,-76, 
  /* [1242][0][][] */ -60,39,32,2,-65,-33,-19,35,78,-86,40,-8,58,14,-4,-15,46,35,-58,-23,20,-76,-71,-33,-127,-61,-34,17,34,1,-35,3, 
  /* [1243][0][][] */ 3,36,33,-11,-14,75,-71,-112,68,25,8,-82,-38,-16,-4,127,-11,-77,-32,-87,-20,16,102,-31,67,-50,97,14,-15,-12,0,-52, 
  /* [1244][0][][] */ 118,-5,43,11,-55,52,-79,56,100,-18,116,85,91,-40,104,1,-70,-13,39,110,-56,-79,108,-10,-5,-89,-127,11,10,-67,32,-52, 
  /* [1245][0][][] */ 54,-66,24,30,21,15,-29,-16,21,-61,-41,-15,60,-4,-35,67,-37,-3,-58,127,-57,-10,13,21,-1,18,26,0,1,65,-33,-3, 
  /* [1246][0][][] */ -66,-26,120,3,-29,-21,15,14,-13,-39,3,-23,6,-43,-12,-38,41,46,30,-12,89,52,0,28,-127,47,-74,8,10,45,-63,-36, 
  /* [1247][0][][] */ 73,0,-17,116,75,10,61,25,6,-84,4,-40,37,-63,-58,13,26,-127,-63,51,72,30,22,80,99,-50,3,-87,-50,-49,32,-5, 
  /* [1248][0][][] */ 0,36,27,-23,18,27,8,-20,45,-10,34,-37,33,-1,52,-42,43,127,6,71,-62,-57,1,7,-43,-14,-64,34,2,-73,81,-29, 
  /* [1249][0][][] */ 45,27,-127,53,-6,65,26,-9,-26,25,-18,-14,16,-55,-14,-30,23,-20,-29,-15,11,-29,14,15,-26,-5,-1,20,24,-11,7,24, 
  /* [1250][0][][] */ -3,56,-79,-11,35,86,110,49,-24,3,-57,-15,-27,-3,30,-101,-106,-6,57,59,-24,-48,14,7,-93,-127,20,-27,-70,83,-9,-26, 
  /* [1251][0][][] */ 8,28,30,-34,-41,-42,-79,3,57,-1,34,46,-61,-19,29,70,-92,13,-20,70,3,-8,-44,21,-13,15,-13,5,-15,-43,127,-10, 
  /* [1252][0][][] */ -94,6,-20,-8,89,8,-59,48,-102,23,57,-1,8,16,-67,-22,-19,-40,80,-127,-45,-92,22,15,123,92,5,-89,20,-7,16,107, 
  /* [1253][0][][] */ 24,-25,-49,-77,-69,-105,-127,-8,118,0,-38,-44,45,-60,-44,-93,79,-86,58,6,-1,-58,-59,-123,-47,80,-84,46,-91,63,61,28, 
  /* [1254][0][][] */ -2,1,37,-47,80,27,-23,-25,-119,-56,-43,27,50,-37,64,6,21,59,124,-33,-46,60,-62,62,-27,-4,-73,-46,-5,127,-11,-41, 
  /* [1255][0][][] */ 5,-37,31,-44,-23,-18,22,83,-41,3,68,-102,38,5,-27,-58,54,-10,14,-23,41,-127,-25,-63,42,41,0,-28,-77,11,32,25, 
  /* [1256][0][][] */ 56,29,-82,43,39,-32,10,-19,-102,-49,40,88,-12,18,101,-67,-51,10,-86,17,51,-14,69,-10,127,34,-63,12,-15,-9,79,-14, 
  /* [1257][0][][] */ 79,38,36,-3,61,17,19,21,-14,-13,-9,-22,29,31,14,-30,11,27,77,40,0,91,14,-17,16,57,127,-15,73,74,-37,26, 
  /* [1258][0][][] */ 85,15,20,37,-92,-52,74,49,86,-80,-68,-32,102,-34,39,67,1,9,-2,55,23,-127,-64,14,36,-120,-53,-105,-56,-106,39,73, 
  /* [1259][0][][] */ -29,4,3,19,26,56,-10,-50,-64,-62,-73,48,-16,-29,-61,22,56,-36,-119,-127,-52,-87,-1,-42,85,7,-25,-48,104,-101,26,-54, 
  /* [1260][0][][] */ 74,-6,70,-90,24,-78,80,-9,28,-120,40,-12,59,-29,5,-51,39,15,-127,-30,5,30,-28,-23,41,15,-26,-35,13,-48,35,49, 
  /* [1261][0][][] */ -43,10,43,-17,-12,24,15,-14,-36,32,-35,89,43,-114,-2,-31,-62,-97,-46,-12,26,83,-32,101,-68,23,18,-55,-58,-127,-20,-92, 
  /* [1262][0][][] */ -41,42,-5,-17,22,-72,24,66,-9,63,-31,23,-50,27,44,45,-16,31,83,-36,48,13,22,31,47,-53,-29,127,-5,3,26,-53, 
  /* [1263][0][][] */ -38,-95,-50,7,-41,127,-67,11,2,78,-4,-20,5,17,15,-6,-32,58,41,1,-4,13,-15,-8,-31,7,22,-29,-1,20,11,-1, 
  /* [1264][0][][] */ 79,8,45,-86,27,-52,-3,8,-6,58,64,49,30,26,-20,5,-52,-95,0,42,24,7,-127,-24,-34,-24,-70,-7,-39,53,-70,117, 
  /* [1265][0][][] */ -67,15,4,-45,-4,6,-15,28,53,-23,121,58,-76,-49,64,-27,107,-127,59,-14,58,-25,-56,16,-72,-21,-19,-92,65,9,1,-5, 
  /* [1266][0][][] */ -1,-76,127,-13,-5,13,2,33,-29,-4,-39,-2,-5,13,-28,19,4,-20,28,28,30,42,-17,2,72,22,-20,-1,-67,38,35,13, 
  /* [1267][0][][] */ -49,16,-23,-63,1,-28,71,45,41,17,17,-65,-41,34,-12,17,127,70,-4,3,-32,-100,-13,25,-18,25,-74,-97,-20,10,-42,-20, 
  /* [1268][0][][] */ -35,34,60,39,17,-54,18,23,94,29,81,-89,-19,66,127,-37,24,-6,1,-11,-14,2,-46,-28,12,8,-2,-4,-27,32,77,12, 
  /* [1269][0][][] */ -54,40,-12,-38,-107,-62,-62,-61,37,-46,-86,-98,-46,49,-42,-37,28,18,-67,-127,13,-31,98,-57,-100,7,20,13,22,65,35,-93, 
  /* [1270][0][][] */ 3,-7,-24,-95,37,-20,-60,92,79,25,-16,-124,98,67,-9,-14,15,-30,-53,-12,59,-29,71,19,-67,-83,-127,-113,-37,54,-85,58, 
  /* [1271][0][][] */ -70,3,-13,69,33,-29,-16,60,-58,92,-20,-64,45,-41,-13,-44,48,69,34,78,-57,-13,-39,-120,26,8,127,-81,0,13,-75,-61, 
  /* [1272][0][][] */ -31,9,16,-93,82,9,34,57,-84,13,34,-26,-88,26,-67,4,-79,-105,-127,-9,72,11,84,-42,-15,-52,124,49,-65,80,55,-33, 
  /* [1273][0][][] */ -4,-33,5,-56,16,3,-45,-29,62,53,23,33,29,-120,-20,67,58,-120,39,-41,-5,-11,-127,-89,61,37,-2,-52,-30,-43,39,-12, 
  /* [1274][0][][] */ -98,17,34,-26,74,-98,3,7,-40,-7,-15,-18,20,-113,-28,-9,51,67,38,83,-1,40,38,-127,-25,21,-21,-11,-38,68,7,67, 
  /* [1275][0][][] */ 20,63,-127,-27,100,96,-56,89,-64,-48,10,-36,-63,-41,22,-74,-36,-92,37,9,8,95,-77,10,-28,-58,-8,-5,19,115,65,-41, 
  /* [1276][0][][] */ -11,26,-58,-33,-38,-31,48,-11,-16,-96,47,32,92,-6,90,-53,59,-61,5,-71,19,-12,-68,57,-64,127,67,6,-32,32,-37,78, 
  /* [1277][0][][] */ 37,-31,-42,-70,-30,-119,11,-5,55,3,-42,18,-2,-13,-80,-18,71,-94,9,127,68,-20,47,-65,36,-19,-106,-22,-112,-14,-35,-122, 
  /* [1278][0][][] */ -47,-3,15,-61,127,-14,67,80,-11,-82,55,11,-1,8,74,-65,-3,3,-2,-55,-41,0,-1,35,43,-63,-2,118,111,-88,-55,17, 
  /* [1279][0][][] */ 28,-11,-10,-84,99,-29,-124,17,24,109,-12,-26,-22,40,12,-13,43,39,81,40,-4,-42,45,-65,40,12,-66,-105,7,23,-21,127, 
};
const TfArray<4, int> tensor_dimension77 = { 4, { 1280,1,1,32 } };
const TfArray<1280, float> quant77_scale = { 1280, { 0.0066131995990872383, 0.0056771007366478443, 0.0053561744280159473, 0.006119296420365572, 0.0058025061152875423, 0.0047815665602684021, 0.0052526923827826977, 0.0045115677639842033, 0.0054308725520968437, 0.005774808581918478, 0.0054455110803246498, 0.0058200829662382603, 0.0061455094255506992, 0.0054770829156041145, 0.0045700902119278908, 0.0064409254118800163, 0.0051623391918838024, 0.0065582464449107647, 0.0065145702101290226, 0.0062194643542170525, 0.0045013749040663242, 0.0050249556079506874, 0.0062546445988118649, 0.0049893916584551334, 0.0052161458879709244, 0.0053939223289489746, 0.0050622643902897835, 0.0059107765555381775, 0.006078183650970459, 0.0047530331648886204, 0.0064921854063868523, 0.0063388030976057053, 0.0041466071270406246, 0.0064003756269812584, 0.0046449801884591579, 0.004730589222162962, 0.0055761625990271568, 0.0049064666964113712, 0.007517488207668066, 0.0043940041214227676, 0.0071265888400375843, 0.0047334837727248669, 0.0059757446870207787, 0.0056068808771669865, 0.0047063753008842468, 0.0052754641510546207, 0.0049627209082245827, 0.0047647063620388508, 0.0054164687171578407, 0.0044709611684083939, 0.0062152636237442493, 0.0056865676306188107, 0.0050801639445126057, 0.0055597522296011448, 0.0055217212066054344, 0.0073255384340882301, 0.0051312255673110485, 0.0056461305357515812, 0.0069469986483454704, 0.005316135473549366, 0.0047669699415564537, 0.0040856613777577877, 0.0049367309547960758, 0.0049890768714249134, 0.004717161413282156, 0.005532256793230772, 0.0057875127531588078, 0.0047039692290127277, 0.0071167913265526295, 0.0073790834285318851, 0.0058275964111089706, 0.0059532281011343002, 0.0058156992308795452, 0.0046570533886551857, 0.0062852450646460056, 0.0058546829968690872, 0.0039954157546162605, 0.0067911664955317974, 0.0059586944989860058, 0.0041763451881706715, 0.0035759431775659323, 0.0058216829784214497, 0.0053953793831169605, 0.0062403492629528046, 0.0067023006267845631, 0.0057902699336409569, 0.0051744254305958748, 0.0058348341844975948, 0.0054280068725347519, 0.0056162918917834759, 0.0047344928607344627, 0.0058154291473329067, 0.0044534816406667233, 0.0051595359109342098, 0.0065169469453394413, 0.0050593209452927113, 0.003946647047996521, 0.005587378516793251, 0.0082259839400649071, 0.0055602141655981541, 0.0057103871367871761, 0.0061719738878309727, 0.0053538912907242775, 0.0049866447225213051, 0.0055742631666362286, 0.0062670116312801838, 0.0058921086601912975, 0.0062047336250543594, 0.0045058620162308216, 0.0064418758265674114, 0.0044280765578150749, 0.0041813799180090427, 0.0036001873668283224, 0.0063325143419206142, 0.0046019917353987694, 0.0066392207518219948, 0.0055356076918542385, 0.0060540684498846531, 0.0058290068991482258, 0.0053145801648497581, 0.0054291686974465847, 0.0061476700939238071, 0.0045916563831269741, 0.0059431134723126888, 0.0054701995104551315, 0.0064564021304249763, 0.0062685506418347359, 0.0046501122415065765, 0.0058141830377280712, 0.0047999788075685501, 0.0058915028348565102, 0.0073797605000436306, 0.0051335026510059834, 0.0060517070814967155, 0.0045428010635077953, 0.0048142164014279842, 0.0049987360835075378, 0.0059079974889755249, 0.0075284424237906933, 0.0048399423249065876, 0.0069894012995064259, 0.0044879908673465252, 0.0043503171764314175, 0.0041266377083957195, 0.0049021686427295208, 0.0064492621459066868, 0.005216529592871666, 0.0049399840645492077, 0.0065266801975667477, 0.0064461501315236092, 0.0044996566139161587, 0.0061581176705658436, 0.0080876005813479424, 0.0054078786633908749, 0.0054977396503090858, 0.0052615804597735405, 0.0060687386430799961, 0.0048717060126364231, 0.0057752719148993492, 0.0053310506045818329, 0.0057244850322604179, 0.0052049504593014717, 0.0050640096887946129, 0.0056451158598065376, 0.0048175030387938023, 0.0054292110726237297, 0.0062268460169434547, 0.0064336382783949375, 0.0041590584442019463, 0.0055969231761991978, 0.0045746723189949989, 0.0059980293735861778, 0.0063273990526795387, 0.0069218487478792667, 0.0059919250197708607, 0.0061632832512259483, 0.0070743579417467117, 0.0053365849889814854, 0.0046367128379642963, 0.0050694341771304607, 0.0050172572955489159, 0.0043627410195767879, 0.0050734798423945904, 0.0054309563711285591, 0.0099750738590955734, 0.0049224384129047394, 0.0048587503843009472, 0.0053746416233479977, 0.0052421600557863712, 0.0067365635186433792, 0.0040626600384712219, 0.0075851520523428917, 0.005153212696313858, 0.0056362957693636417, 0.0050575118511915207, 0.004452303983271122, 0.0044370465911924839, 0.0049317223019897938, 0.0051468759775161743, 0.0052253073081374168, 0.0043015014380216599, 0.0061511397361755371, 0.0059048682451248169, 0.0048491968773305416, 0.0039826394058763981, 0.0046310587786138058, 0.0043019796721637249, 0.0042487476021051407, 0.0062628188170492649, 0.0070425048470497131, 0.0041930149309337139, 0.0047980356030166149, 0.0051061990670859814, 0.0049430606886744499, 0.0070604793727397919, 0.0045343381352722645, 0.0035838494077324867, 0.006125645712018013, 0.0057261637412011623, 0.0039150700904428959, 0.0052113463170826435, 0.0071605038829147816, 0.0039784875698387623, 0.0048731551505625248, 0.0052034198306500912, 0.0056341188028454781, 0.0053520151413977146, 0.00539360661059618, 0.0051192431710660458, 0.0055867703631520271, 0.0055477777495980263, 0.0055944924242794514, 0.0066007864661514759, 0.0042682974599301815, 0.0068395687267184258, 0.0057972520589828491, 0.0046744034625589848, 0.0066533163189888, 0.0046410886570811272, 0.0044905217364430428, 0.0054250708781182766, 0.0041950875893235207, 0.0058362935669720173, 0.0053358306176960468, 0.0052363015711307526, 0.0060815722681581974, 0.003859800286591053, 0.0040750405751168728, 0.0048443288542330265, 0.0045744753442704678, 0.005053399596363306, 0.0055059310980141163, 0.0054290588013827801, 0.0071091814897954464, 0.0046148756518959999, 0.0051506790332496166, 0.0048968694172799587, 0.0052601252682507038, 0.0051271114498376846, 0.0063041932880878448, 0.006074903067201376, 0.0064747137948870659, 0.0048507219180464745, 0.0062671247869729996, 0.0049717952497303486, 0.0056103002279996872, 0.0073245614767074585, 0.0049407556653022766, 0.0047831214033067226, 0.0049719777889549732, 0.0054254191927611828, 0.0045247217640280724, 0.0051397965289652348, 0.006159135140478611, 0.0054768715053796768, 0.0052283424884080887, 0.0050422735512256622, 0.0055500664748251438, 0.0071751605719327927, 0.0067811231128871441, 0.0049346974119544029, 0.0052174413576722145, 0.0049127759411931038, 0.0052817091345787048, 0.0039331489242613316, 0.0055033420212566853, 0.0055110612884163857, 0.0052131018601357937, 0.0048219133168458939, 0.0048306304961442947, 0.0053562810644507408, 0.0053361984901130199, 0.005974277388304472, 0.0075203683227300644, 0.0071810949593782425, 0.0050120367668569088, 0.0043001966550946236, 0.0039432300254702568, 0.0045323995873332024, 0.0050742775201797485, 0.005654127337038517, 0.005903284065425396, 0.0060972953215241432, 0.0057446137070655823, 0.0057771289721131325, 0.0060163871385157108, 0.0059309117496013641, 0.0048164753243327141, 0.0055258655920624733, 0.0044974847696721554, 0.005271510686725378, 0.0036789074074476957, 0.0050968118011951447, 0.004673113115131855, 0.0064300773665308952, 0.0052082808688282967, 0.006376651581376791, 0.0046804072335362434, 0.0052313976921141148, 0.0054100691340863705, 0.0071234977804124355, 0.0058135362342000008, 0.0042845262214541435, 0.0048224111087620258, 0.0044998526573181152, 0.006129599642008543, 0.0054334672167897224, 0.0057737561874091625, 0.0045968294143676758, 0.0058267773129045963, 0.0051223672926425934, 0.0043055862188339233, 0.005203422624617815, 0.0081918640062212944, 0.0057911709882318974, 0.0058654635213315487, 0.0053264135494828224, 0.006504216231405735, 0.0062693161889910698, 0.0062930043786764145, 0.0053299302235245705, 0.0054610036313533783, 0.0047901920042932034, 0.0067009101621806622, 0.0045292805880308151, 0.0052729942835867405, 0.0055849184282124043, 0.0045084003359079361, 0.004773041233420372, 0.0053650503978133202, 0.0054503567516803741, 0.0044979061931371689, 0.0082064513117074966, 0.0065230792388319969, 0.007063236553221941, 0.0052479594014585018, 0.0049768616445362568, 0.0043762172572314739, 0.0051340041682124138, 0.0054426328279078007, 0.0049065030179917812, 0.00572196114808321, 0.004768772516399622, 0.0073214820586144924, 0.0082296393811702728, 0.0071761133149266243, 0.0041469414718449116, 0.0051108002662658691, 0.0052004791796207428, 0.0059307478368282318, 0.0056735305115580559, 0.0053483853116631508, 0.0048034167848527431, 0.0045489375479519367, 0.0051788697019219398, 0.0050649270415306091, 0.0053110364824533463, 0.0060241161845624447, 0.0046545350924134254, 0.0055698100477457047, 0.0050799553282558918, 0.004083697684109211, 0.0058333412744104862, 0.0046562640927731991, 0.0058260168880224228, 0.0076560336165130138, 0.0051497137174010277, 0.0048781353980302811, 0.0049559748731553555, 0.008107868954539299, 0.0044096093624830246, 0.0049769976176321507, 0.0052267094142735004, 0.006685017142444849, 0.0040886476635932922, 0.005666492972522974, 0.0046318955719470978, 0.005593558307737112, 0.0052942074835300446, 0.0041836635209619999, 0.0044233561493456364, 0.0048754899762570858, 0.0073289382271468639, 0.0055500417947769165, 0.0063049597665667534, 0.0047011207789182663, 0.0057818866334855556, 0.0041943355463445187, 0.004798979964107275, 0.0059838490560650826, 0.0051940204575657845, 0.005919966846704483, 0.0049575869925320148, 0.0052678026258945465, 0.0060391435399651527, 0.0052055194973945618, 0.0078818295150995255, 0.0067775854840874672, 0.0056243347935378551, 0.0044693299569189548, 0.0060348366387188435, 0.0069942828267812729, 0.0064854980446398258, 0.0058953994885087013, 0.0062394933775067329, 0.0054522161372005939, 0.0046451468952000141, 0.006037070881575346, 0.0060449321754276752, 0.0071285935118794441, 0.0057300957851111889, 0.0047463169321417809, 0.0041864081285893917, 0.0060623777098953724, 0.0064243525266647339, 0.0057772425934672356, 0.0057623451575636864, 0.0048978966660797596, 0.0052983262576162815, 0.0042425831779837608, 0.0044064745306968689, 0.0060862358659505844, 0.0048264898359775543, 0.0045960871502757072, 0.0072264326736330986, 0.0052227783016860485, 0.006335776299238205, 0.007567079272121191, 0.0052242940291762352, 0.004011825192719698, 0.0053838817402720451, 0.0071145468391478062, 0.0073067331686615944, 0.0066514872014522552, 0.0051064044237136841, 0.0055292733013629913, 0.0074420524761080742, 0.0058866962790489197, 0.006858444306999445, 0.004923979751765728, 0.0047256588004529476, 0.0044927662238478661, 0.005629358347505331, 0.0056699337437748909, 0.0067983986809849739, 0.0046222624368965626, 0.0061473855748772621, 0.0052713854238390923, 0.0060340850614011288, 0.0058344630524516106, 0.0059219277463853359, 0.005976690910756588, 0.00703409593552351, 0.0056613739579916, 0.0056404056958854198, 0.0048850891180336475, 0.0045496230013668537, 0.0042422446422278881, 0.0050701978616416454, 0.0066473926417529583, 0.0059800213202834129, 0.0073152785189449787, 0.0056020701304078102, 0.0049293572083115578, 0.0061445962637662888, 0.0047488315030932426, 0.0047035696916282177, 0.0053456085734069347, 0.0049040978774428368, 0.0061949235387146473, 0.0058995578438043594, 0.0065189660526812077, 0.0042823837138712406, 0.0066360896453261375, 0.005396564956754446, 0.0052500106394290924, 0.0041644521988928318, 0.0063341837376356125, 0.0044182236306369305, 0.0042871315963566303, 0.0041684047318994999, 0.0054920758120715618, 0.0052233003079891205, 0.0066325468942523003, 0.0069873104803264141, 0.0045709097757935524, 0.0046759727410972118, 0.0060350475832819939, 0.0070943343453109264, 0.0055521936155855656, 0.0052666114643216133, 0.0063828169368207455, 0.0058700074441730976, 0.0049529410898685455, 0.0050513288006186485, 0.0049390732310712337, 0.0043578254990279675, 0.00472236517816782, 0.0049030324444174767, 0.0052312766201794147, 0.0058629815466701984, 0.0069819167256355286, 0.0052336286753416061, 0.0070692170411348343, 0.0045098434202373028, 0.0050433892756700516, 0.0044348528608679771, 0.0069733541458845139, 0.0038157333619892597, 0.0057236719876527786, 0.0060431854799389839, 0.0040142652578651905, 0.005090255755931139, 0.006009378470480442, 0.0044739167205989361, 0.0049246624112129211, 0.0050703142769634724, 0.0056592770852148533, 0.0065120733343064785, 0.0050198305398225784, 0.0053480239585042, 0.0056326864287257195, 0.0058298022486269474, 0.0055613699369132519, 0.0061712479218840599, 0.0048180227167904377, 0.0047016064636409283, 0.0053105098195374012, 0.0046461694873869419, 0.0060513266362249851, 0.0049552381969988346, 0.0047899223864078522, 0.004902321845293045, 0.0056326868943870068, 0.0060829930007457733, 0.0059208902530372143, 0.0049993842840194702, 0.0060719749890267849, 0.0051170173101127148, 0.004529688972979784, 0.004523569718003273, 0.0047830916009843349, 0.0049779745750129223, 0.0065334336832165718, 0.0064265145920217037, 0.00757585559040308, 0.0049095293506979942, 0.0040496671572327614, 0.0045827277936041355, 0.0053309304639697075, 0.0048978254199028015, 0.0049418387934565544, 0.0045945183373987675, 0.0051305755041539669, 0.004222541581839323, 0.0057136961258947849, 0.0059074494056403637, 0.0055433125235140324, 0.0059296009130775928, 0.0053726816549897194, 0.005948950070887804, 0.0057137166149914265, 0.0056978003121912479, 0.0046999705955386162, 0.0070620770566165447, 0.0046241972595453262, 0.0051405918784439564, 0.0064457561820745468, 0.0049421088770031929, 0.0052718375809490681, 0.004750498104840517, 0.0054671498946845531, 0.0051201255992054939, 0.0056418073363602161, 0.0045168092474341393, 0.0060145477764308453, 0.0044937897473573685, 0.0047656702809035778, 0.0049010803923010826, 0.0052946321666240692, 0.0053517199121415615, 0.0067918389104306698, 0.0056324293836951256, 0.0054433485493063927, 0.0055475728586316109, 0.0041342121548950672, 0.0057095182128250599, 0.0047231037169694901, 0.005521401297301054, 0.0062817046418786049, 0.0053940941579639912, 0.0059645851142704487, 0.0063987257890403271, 0.0048314053565263748, 0.0064364951103925705, 0.0044710286892950535, 0.0046412255614995956, 0.0036628316156566143, 0.0079601146280765533, 0.005564521998167038, 0.0051988260820508003, 0.0065643931739032269, 0.0053179273381829262, 0.0043440707959234715, 0.0046352483332157135, 0.0055570998229086399, 0.0047774100676178932, 0.0058098682202398777, 0.0059762587770819664, 0.0047567975707352161, 0.003869535168632865, 0.0076089859940111637, 0.0039545390754938126, 0.005398913286626339, 0.0037200918886810541, 0.0048898765817284584, 0.0053136921487748623, 0.004856375977396965, 0.0047915708273649216, 0.0065425415523350239, 0.0052612046711146832, 0.0048580593429505825, 0.0048421025276184082, 0.0042643691413104534, 0.006161706056445837, 0.0047320462763309479, 0.0044565270654857159, 0.0051002958789467812, 0.0057358797639608383, 0.0044558141380548477, 0.0049714944325387478, 0.0066353199072182178, 0.0059654884971678257, 0.0049568051472306252, 0.0068345475010573864, 0.0046362262219190598, 0.0059917843900620937, 0.006571637000888586, 0.0044736443087458611, 0.0066579747945070267, 0.0052786543965339661, 0.0045109563507139683, 0.0047017186880111694, 0.005669507198035717, 0.005040828138589859, 0.0067569175735116005, 0.0044221896678209305, 0.0047246469184756279, 0.0063743419013917446, 0.0077467584051191807, 0.0055524930357933044, 0.0048285732045769691, 0.0052628698758780956, 0.0063992119394242764, 0.0058764354325830936, 0.0055200234055519104, 0.0060025784187018871, 0.005017442163079977, 0.0051704747602343559, 0.0076919193379580975, 0.0068328059278428555, 0.0065030781552195549, 0.0061486312188208103, 0.0071311877109110355, 0.0049609742127358913, 0.0046455394476652145, 0.0048317378386855125, 0.004574894905090332, 0.0042547434568405151, 0.0049138902686536312, 0.0044306768104434013, 0.0051959785632789135, 0.0052925855852663517, 0.004905112087726593, 0.0061968555673956871, 0.0060114618390798569, 0.0049875625409185886, 0.0057632788084447384, 0.0056336326524615288, 0.0054245153442025185, 0.0055395881645381451, 0.0055065490305423737, 0.0045860656537115574, 0.0065779485739767551, 0.0048595364205539227, 0.0044639566913247108, 0.0054308683611452579, 0.0056227133609354496, 0.0049812975339591503, 0.0056318622082471848, 0.0063586053438484669, 0.0065765799954533577, 0.0040072845295071602, 0.0067102480679750443, 0.0047821979969739914, 0.005013665184378624, 0.0058646379038691521, 0.0048706620000302792, 0.0045528612099587917, 0.0050158603116869926, 0.0048268884420394897, 0.005083184689283371, 0.0044520236551761627, 0.0047230338677763939, 0.0070892395451664925, 0.0050528091378509998, 0.005105234682559967, 0.0052145612426102161, 0.0053786281496286392, 0.0041025946848094463, 0.0039205863140523434, 0.0053583001717925072, 0.0062564206309616566, 0.0054251775145530701, 0.0058419522829353809, 0.0057513853535056114, 0.0052685621194541454, 0.0064813783392310143, 0.0053213406354188919, 0.004228843841701746, 0.0057648620568215847, 0.0046632494777441025, 0.0041387574747204781, 0.0063506024889647961, 0.0064872861839830875, 0.0056483177468180656, 0.00463468162342906, 0.004493403248488903, 0.005115891806781292, 0.0065851137042045593, 0.004893783014267683, 0.0064812423661351204, 0.0048607089556753635, 0.004393851850181818, 0.0047268252819776535, 0.0052805976010859013, 0.004194953478872776, 0.0053349947556853294, 0.0051353364251554012, 0.0055794701911509037, 0.0056341276504099369, 0.004937837366014719, 0.0059155100025236607, 0.003806304419413209, 0.0047467602416872978, 0.0047506224364042282, 0.0059018740430474281, 0.0046806931495666504, 0.0061741848476231098, 0.0044374475255608559, 0.0043646553531289101, 0.0052431491203606129, 0.0060440320521593094, 0.0055611957795917988, 0.0036415162030607462, 0.0072815520688891411, 0.0063245482742786407, 0.0043399264104664326, 0.0061177792958915234, 0.0052156215533614159, 0.010953887365758419, 0.0046396190300583839, 0.0045170178636908531, 0.0049490807577967644, 0.0054222941398620605, 0.0050900634378194809, 0.0055699995718896389, 0.0045368289574980736, 0.0063372584991157055, 0.0042183129116892815, 0.0049798381514847279, 0.0057504456490278244, 0.0069032935425639153, 0.0061178929172456264, 0.0047481497749686241, 0.0055848890915513039, 0.0043062199838459492, 0.0059652109630405903, 0.0056815911084413528, 0.0059922998771071434, 0.0043383832089602947, 0.005903931800276041, 0.0047307386994361877, 0.0047307382337749004, 0.0054589384235441685, 0.00466574402526021, 0.0062257219105958939, 0.0068357042036950588, 0.0042505897581577301, 0.0051026227883994579, 0.0047194911167025566, 0.004942573606967926, 0.0058712167665362358, 0.0039650611579418182, 0.0066392747685313225, 0.0048788655549287796, 0.0047713210806250572, 0.005808594636619091, 0.0056623746640980244, 0.0051438501104712486, 0.0047782808542251587, 0.0068940478377044201, 0.0055985799990594387, 0.0055734086781740189, 0.0049271136522293091, 0.0064660659991204739, 0.0047009503468871117, 0.0053100613877177238, 0.0044345906935632229, 0.005783942062407732, 0.0062646982260048389, 0.0039655258879065514, 0.0047987536527216434, 0.0050437538884580135, 0.0054289214313030243, 0.0062337657436728477, 0.0044356225989758968, 0.0048637301661074162, 0.0056552793830633163, 0.004240068607032299, 0.0042190719395875931, 0.0047509977594017982, 0.0054265391081571579, 0.0042356452904641628, 0.0049929656088352203, 0.0043844543397426605, 0.004632195457816124, 0.0046473778784275055, 0.0045871175825595856, 0.0056150471791625023, 0.0043430319055914879, 0.0054738796316087246, 0.0060749403201043606, 0.0052273310720920563, 0.0056309206411242485, 0.0055440720170736313, 0.0044815163128077984, 0.0058098090812563896, 0.0052588996477425098, 0.005589847918599844, 0.0061146020889282227, 0.0060516679659485817, 0.0046494714915752411, 0.0042565446346998215, 0.0046221143566071987, 0.0044941906817257404, 0.0050045754760503769, 0.0062950477004051208, 0.0046030054800212383, 0.0050598853267729282, 0.0059019681066274643, 0.005624768789857626, 0.0063268900848925114, 0.0067685344256460667, 0.0055425139144062996, 0.0072264289483428001, 0.0055473633110523224, 0.0042103664018213749, 0.0047826576046645641, 0.0065133478492498398, 0.0061697983182966709, 0.0052443756721913815, 0.0056346748024225235, 0.0051541631110012531, 0.0053646271117031574, 0.0072104125283658504, 0.0065793688409030437, 0.0049830954521894455, 0.0060300356708467007, 0.006184212863445282, 0.0050523974932730198, 0.0050538438372313976, 0.005910597275942564, 0.0057315248996019363, 0.0057409191504120827, 0.0055629787966609001, 0.0063824816606938839, 0.0048509892076253891, 0.0054011521860957146, 0.0055306958965957165, 0.0051353988237679005, 0.0050177001394331455, 0.0052454848773777485, 0.004580311942845583, 0.0066362284123897552, 0.0057647698558866978, 0.0053360727615654469, 0.0053469832055270672, 0.0050338925793766975, 0.0054138344712555408, 0.0044851740822196007, 0.0072571416385471821, 0.0044311406090855598, 0.0062182145193219185, 0.0049186563119292259, 0.0060697277076542377, 0.0051032579503953457, 0.0056966571137309074, 0.0057254754938185215, 0.0049444176256656647, 0.0059784478507936001, 0.004652682226151228, 0.005436804611235857, 0.0051058386452496052, 0.0044148741289973259, 0.0055682742968201637, 0.004933586809784174, 0.0049130683764815331, 0.00567214610055089, 0.004736180417239666, 0.0046189012937247753, 0.0051527000032365322, 0.005040390882641077, 0.0058184992522001266, 0.0057142693549394608, 0.0050621815025806427, 0.0054431473836302757, 0.0057862671092152596, 0.0043518696911633015, 0.0055394168011844158, 0.0065309437923133373, 0.0059588188305497169, 0.004862841684371233, 0.0042633744888007641, 0.0044021024368703365, 0.0054563344456255436, 0.0057631735689938068, 0.007109867874532938, 0.0063930447213351727, 0.0046805604360997677, 0.0049702748656272888, 0.0056523135863244534, 0.0086859185248613358, 0.0056030997075140476, 0.0049440399743616581, 0.0063985045999288559, 0.00616423599421978, 0.0061707170680165291, 0.0051157404668629169, 0.0050656450912356377, 0.0059877713210880756, 0.0055230055004358292, 0.005614828784018755, 0.005506529938429594, 0.0050781047903001308, 0.0050625954754650593, 0.0065498147159814835, 0.005615385714918375, 0.0052983076311647892, 0.0070490888319909573, 0.0041801179759204388, 0.0069352872669696808, 0.006377016194164753, 0.0048511582426726818, 0.0053802859038114548, 0.0057673170231282711, 0.0045960866846144199, 0.005072473082691431, 0.0080139152705669403, 0.0056231571361422539, 0.0060271443799138069, 0.0052916016429662704, 0.0046903332695364952, 0.0055724070407450199, 0.0051069282926619053, 0.0053570386953651905, 0.0050035519525408745, 0.0051231281831860542, 0.0068487599492073059, 0.0057196412235498428, 0.0056510386057198048, 0.0054352930746972561, 0.006856023333966732, 0.0055685415863990784, 0.0059817968867719173, 0.0055746445432305336, 0.0058015282265841961, 0.0041947346180677414, 0.0053744516335427761, 0.0041389064863324165, 0.0040756282396614552, 0.0048574144020676613, 0.0045629828236997128, 0.0060741836205124855, 0.0071998285129666328, 0.0046420334838330746, 0.0059473034925758839, 0.0057758176699280739, 0.0076958457939326763, 0.00503926957026124, 0.0048798792995512486, 0.0046350285410881042, 0.0051318490877747536, 0.0052598407492041588, 0.0067892675288021564, 0.0057081161066889763, 0.0045659616589546204, 0.0050919502973556519, 0.0059380689635872841, 0.0067656929604709148, 0.0045798863284289837, 0.006983649916946888, 0.0040408754721283913, 0.0049811331555247307, 0.0065075610764324665, 0.0062243393622338772, 0.0063514048233628273, 0.0064113452099263668, 0.0064779557287693024, 0.0042360355146229267, 0.0058608651161193848, 0.0044162236154079437, 0.005296497605741024, 0.0050432635471224785, 0.0058305300772190094, 0.0061108442023396492, 0.0059392931871116161, 0.0067162690684199333, 0.0053664254955947399, 0.0055779977701604366, 0.0059255794622004032, 0.0049341791309416294, 0.0049822875298559666, 0.0042592990212142467, 0.0049212970770895481, 0.0056728441268205643, 0.0062959622591733932, 0.0053623700514435768, 0.0061100609600543976, 0.0049109016545116901, 0.006052807904779911, 0.0056692129001021385, 0.0058105709031224251, 0.0047977706417441368, 0.0054724733345210552, 0.0055817905813455582, 0.0045135235413908958, 0.0044033159501850605, 0.00623718136921525, 0.004807762335985899, 0.0054185441695153713, 0.0050928252749145031, 0.0064943418838083744, 0.0044344402849674225, 0.0044422894716262817, 0.005511424969881773, 0.0050157452933490276, 0.0054464028216898441, 0.0061854957602918148, 0.0063551170751452446, 0.0053228777833282948, 0.0056613837368786335, 0.0050227325409650803, 0.0044456152245402336, 0.0053309039212763309, 0.0071613281033933163, 0.004604133777320385, 0.0044874739833176136, 0.0052106236107647419, 0.0046699754893779755, 0.0048038717359304428, 0.0061543374322354794, 0.0052173635922372341, 0.005771697498857975, 0.005467947106808424, 0.0065946890972554684, 0.0060554728843271732, 0.006042317021638155, 0.0064238873310387135, 0.0050844638608396053, 0.0068900068290531635, 0.0046521173790097237, 0.0059657692909240723, 0.0051075108349323273, 0.0076098688878118992, 0.0051305852830410004, 0.0058314595371484756, 0.0055356211960315704, 0.0050320280715823174, 0.0065983999520540237, 0.0055188094265758991, 0.0059596090577542782, 0.0057548349723219872, 0.0051305759698152542, 0.0061426670290529728, 0.0047019640915095806, 0.0047805733047425747, 0.0041951029561460018, 0.0048069707117974758, 0.0054767564870417118, 0.0077768545597791672, 0.0054746526293456554, 0.0063096275553107262, 0.0064217187464237213, 0.0057666637003421783, 0.0056452094577252865, 0.006280126515775919, 0.0047632483765482903, 0.0055978773161768913, 0.0056779026053845882, 0.0063663157634437084, 0.0049810991622507572, 0.0055221403017640114, 0.005745049100369215, 0.0056034782901406288, 0.0051575768738985062, 0.007487680297344923, 0.0053031370043754578, 0.005683461669832468, 0.0048571997322142124, 0.0050571565516293049, 0.0045640687458217144, 0.0046043857000768185, 0.0053162761032581329, 0.0058398698456585407, 0.0050687501206994057, 0.0054022986441850662, 0.0039985785260796547, 0.0066309664398431778, 0.0060043525882065296, 0.0051496676169335842, 0.0064931968227028847, 0.0048299306072294712, 0.0057047833688557148, 0.0041184616275131702, 0.0044112089090049267, 0.004674048162996769, 0.005720892921090126, 0.0049724532291293144, 0.0051076165400445461, 0.0058250091969966888, 0.006209950428456068, 0.0055935541167855263, 0.0051464773714542389, 0.0045963786542415619, 0.0049357647076249123, 0.0050923945382237434, 0.0043995408341288567, 0.0048422897234559059, 0.0041165337897837162, 0.0053790956735610962, 0.0056017381139099598, 0.0051857302896678448, 0.0054514640942215919, 0.0073205730877816677, 0.0058130482211709023, 0.0046354238875210285, 0.003989937249571085, 0.0070748128928244114, 0.0059615597128868103, 0.0075015467591583729, 0.0042953961528837681, 0.0057366960681974888, 0.0072841010987758636, 0.0044103418476879597, 0.0053614983335137367, 0.0050369794480502605, 0.0044470112770795822, 0.0047517223283648491, 0.0053480006754398346, 0.0062799546867609024, 0.0040661008097231388, 0.0049789417535066605, 0.0054040038958191872, 0.0050175604410469532, 0.0055532297119498253, 0.0061323689296841621, 0.0047060074284672737, 0.0057603516615927219, 0.0060705780051648617, 0.0054994700476527214, 0.0059434832073748112, 0.0066304611973464489, 0.0065345722250640392, 0.004346934612840414, 0.0053210947662591934, 0.0044256765395402908, 0.005740913562476635, 0.0051854574121534824, 0.0044805863872170448, 0.0047289850190281868, 0.0068226479925215244, 0.003924923948943615, 0.0063586314208805561, 0.004889397881925106, 0.0080454861745238304, 0.0078083514235913754, 0.0043253647163510323, 0.0051203942857682705, 0.0058288057334721088, 0.0049200234934687614, 0.0048123188316822052, 0.0062141828238964081, 0.0052642426453530788, 0.0047526047565042973, 0.0072027049027383327, 0.0047109583392739296, 0.0054542156867682934, 0.0051214182749390602, 0.0062166987918317318, 0.0045731109566986561, 0.0058312392793595791, 0.0050430111587047577, 0.0046797981485724449, 0.0049018077552318573, 0.0075126895681023598, 0.0044539058580994606, 0.0043718023225665092, 0.0067114066332578659, 0.0048137335106730461, 0.0066766398958861828, 0.0057718479074537754, 0.0046215150505304337, 0.0067667965777218342, 0.0043294383212924004, 0.0053856018930673599, 0.0063917199149727821, 0.0041147000156342983, 0.0042897365055978298, 0.0054984302259981632, 0.0052379155531525612, 0.0039271633140742779, 0.0058382810093462467, 0.0050447713583707809, 0.0040454361587762833, 0.007235958706587553, 0.0054636169224977493, 0.0055363704450428486, 0.00647784024477005, 0.0078111342154443264, 0.0044727446511387825, 0.0060438783839344978, 0.005057069007307291, 0.0042500398121774197, 0.0049401936121284962, 0.0062538310885429382, 0.0056455167941749096, 0.0063595408573746681, 0.0045294691808521748, 0.0049225217662751675, 0.0052579608745872974, 0.0053617926314473152, 0.0060084834694862366, 0.0073295747861266136, 0.0053091049194335938, 0.0051025967113673687, 0.0069311792030930519, 0.0059719560667872429, 0.0063702305778861046, 0.0048886146396398544, 0.0046458826400339603, 0.0046971188858151436, 0.0042790668085217476, 0.0051712016575038433, 0.0058345412835478783, 0.0046192482113838196, 0.004754992201924324, 0.0044415974989533424, 0.0047827600501477718, 0.005610103253275156, } };
const TfArray<1280, int> quant77_zero = { 1280, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant77 = { (TfLiteFloatArray*)&quant77_scale, (TfLiteIntArray*)&quant77_zero, 0 };
const ALIGN(8) int8_t tensor_data78[1*3*3*8] = { 
  /* [0][0][][] */ 0,1,14,18,10,0,9,31, 7,1,-38,127,-22,1,-4,30, -4,-1,-9,18,-2,1,-6,21, 
  /* [0][1][][] */ -4,-1,127,-23,127,-1,-111,41, 127,-127,-104,6,-92,127,-14,-127, -27,3,16,-21,-1,0,127,39, 
  /* [0][2][][] */ 2,1,10,4,10,-1,16,33, 4,3,-44,-2,-14,3,-10,-104, -4,0,-9,0,0,-1,-6,37, 
};
const TfArray<4, int> tensor_dimension78 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant78_scale = { 8, { 0.012906666845083237, 0.016336094588041306, 0.010950446128845215, 0.012950703501701355, 0.0085497843101620674, 0.013436073437333107, 0.054102234542369843, 0.075973592698574066, } };
const TfArray<8, int> quant78_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant78 = { (TfLiteFloatArray*)&quant78_scale, (TfLiteIntArray*)&quant78_zero, 3 };
const ALIGN(8) int32_t tensor_data79[8] = { 4663, -4966, -326, 3505, 2659, 895, -3875, 3578, };
const TfArray<1, int> tensor_dimension79 = { 1, { 8 } };
const TfArray<8, float> quant79_scale = { 8, { 6.5644286223687232e-05, 0.0001055872708093375, 7.7321616117842495e-05, 4.603895649779588e-05, 0.00011955488298553973, 0.00019698064716067165, 8.6505642684642226e-05, 0.0001618625974515453, } };
const TfArray<8, int> quant79_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant79 = { (TfLiteFloatArray*)&quant79_scale, (TfLiteIntArray*)&quant79_zero, 0 };
const ALIGN(8) int8_t tensor_data80[1*3*3*48] = { 
  /* [0][0][][] */ -24,-85,-101,75,-86,4,-89,-77,58,72,116,-41,3,10,-82,-62,96,-83,32,-44,-20,-106,-35,-77,86,90,3,-124,4,-45,58,79,49,70,67,22,92,89,30,11,-124,-13,26,42,-41,50,-33,-95, 88,-9,36,78,-127,42,-60,10,101,109,118,63,-9,-71,-127,-105,119,-36,102,-80,-107,127,127,33,127,92,48,-119,-79,-51,-103,114,97,127,99,102,-17,88,62,-71,-88,-81,13,-54,-57,105,-47,102, 110,-1,57,66,-78,13,-29,-8,25,77,1,-31,-74,3,-43,-48,37,85,55,-14,-65,-26,-83,73,38,22,25,-45,-1,-40,24,42,46,95,10,63,-5,23,47,-8,-54,-3,3,10,-20,63,-13,-4, 
  /* [0][1][][] */ 39,-127,117,91,90,-72,-127,-127,112,81,106,-50,6,-1,-107,-91,94,127,44,-104,-41,110,32,-127,101,117,110,-126,-3,-121,-73,94,109,0,102,55,33,118,56,0,-12,-25,99,96,-110,90,-110,111, 127,-10,5,127,122,-127,-100,6,127,127,127,58,-29,-127,-118,-127,127,62,127,-127,-127,-122,-105,49,110,127,127,-127,-127,-127,127,127,127,5,127,127,-3,127,127,-127,10,-127,124,-83,-127,127,-122,-127, 103,-5,-127,73,88,-59,-41,-7,21,82,11,-20,-127,1,-30,-35,40,-96,71,-37,-76,7,74,74,52,44,1,-54,-12,-83,-37,31,43,-3,27,72,-1,16,73,-3,-22,-6,45,-12,-71,52,-47,12, 
  /* [0][2][][] */ 59,-77,5,21,-1,65,-77,-79,37,10,22,53,11,9,-46,-33,17,-38,17,-60,-18,-1,13,-80,25,35,72,-18,8,-114,12,18,66,-80,68,20,-127,27,7,-2,25,-7,95,-127,-72,40,-78,-11, 50,5,4,54,8,92,-34,0,29,49,19,-127,-12,-84,-39,-43,37,-10,46,-88,-37,-13,-25,29,28,50,75,-47,-82,-119,-27,20,64,-87,63,28,20,39,60,-50,127,-63,127,103,-106,51,-127,16, -29,-7,-7,38,-19,39,-20,-2,11,21,-51,40,-64,1,-11,-5,2,27,29,-5,-38,20,14,34,24,27,22,-3,-3,-54,12,-14,3,-45,14,19,6,-20,40,10,63,3,30,-11,-26,33,-28,-5, 
};
const TfArray<4, int> tensor_dimension80 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant80_scale = { 48, { 0.0044432985596358776, 0.0058457185514271259, 0.024984585121273994, 0.0029738596640527248, 0.021416578441858292, 0.027862966060638428, 0.0066482084803283215, 0.0081772617995738983, 0.0029834306333214045, 0.0082379402592778206, 0.018692517653107643, 0.010782831348478794, 0.01029637549072504, 0.0078269205987453461, 0.002508268691599369, 0.0023734841961413622, 0.0047614988870918751, 0.018703872337937355, 0.0027666606474667788, 0.0039158221334218979, 0.0024905831087380648, 0.021734414622187614, 0.037787493318319321, 0.0098664453253149986, 0.0023923476692289114, 0.00639730179682374, 0.0039795567281544209, 0.0042716781608760357, 0.0067330445162951946, 0.0052333055064082146, 0.014610413461923599, 0.0092403404414653778, 0.0040015392005443573, 0.010076198726892471, 0.003577470313757658, 0.0033355101477354765, 0.011494375765323639, 0.015817506238818169, 0.0050819665193557739, 0.0091813076287508011, 0.0037673350889235735, 0.0099637294188141823, 0.0045945500023663044, 0.013727614656090736, 0.003761692438274622, 0.012749376706779003, 0.0045406147837638855, 0.021940393373370171, } };
const TfArray<48, int> quant80_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant80 = { (TfLiteFloatArray*)&quant80_scale, (TfLiteIntArray*)&quant80_zero, 3 };
const ALIGN(8) int32_t tensor_data81[8] = { -11538, 1531, -16057, 1072, 2418, -3352, 10206, 1307, };
const TfArray<1, int> tensor_dimension81 = { 1, { 8 } };
const TfArray<8, float> quant81_scale = { 8, { 0.0001486857800045982, 0.0001326992642134428, 0.00010248301987303421, 6.5027837990783155e-05, 0.00016134999168571085, 0.00013136248162481934, 0.00012232360313646495, 0.00014414808538276702, } };
const TfArray<8, int> quant81_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant81 = { (TfLiteFloatArray*)&quant81_scale, (TfLiteIntArray*)&quant81_zero, 0 };
const ALIGN(8) int8_t tensor_data82[1*3*3*48] = { 
  /* [0][0][][] */ -7,-43,40,-30,127,-2,-9,-13,-33,42,-11,8,65,15,127,-39,12,-19,-29,-15,-33,-19,-65,26,-121,44,25,-45,-12,17,-18,-3,-34,30,17,2,84,50,30,-7,65,15,-12,-5,-102,-9,-40,-39, 3,-99,-71,-31,-53,-2,36,22,16,-3,62,127,-10,52,-70,127,-1,-68,39,-50,-76,-127,-82,79,-127,-89,19,120,14,33,127,9,-127,-112,-49,38,127,-88,117,10,56,-10,-22,-13,-55,-16,70,0, 12,-16,-13,127,47,9,-79,-2,-26,-43,-23,-19,52,-3,-62,-46,23,21,-5,-10,0,0,-30,15,-49,-66,-28,39,-2,28,-89,-8,13,72,17,21,3,73,-127,-1,26,-4,-8,26,-127,-1,-56,45, 
  /* [0][1][][] */ -111,-65,127,-7,-43,-35,79,18,18,94,9,15,46,27,106,30,30,-127,97,41,81,-9,53,-38,-10,-22,35,-51,23,51,36,55,36,-101,3,127,10,42,-43,-116,24,90,-18,-85,31,-84,-61,19, 127,-67,-72,-74,1,-127,127,127,127,17,127,-42,-127,22,-40,-44,127,-112,127,127,127,82,127,-127,0,-27,106,-21,127,127,-125,127,31,-127,127,-101,-66,127,-99,123,-127,-127,127,-127,103,-127,127,-126, -11,-108,13,76,-28,-9,-46,10,-14,-127,-33,49,78,10,-58,44,22,-4,-4,16,-2,-23,43,-23,0,7,-127,84,-68,8,82,18,-12,-105,-17,-42,63,16,120,9,26,53,-43,6,60,-27,-56,127, 
  /* [0][2][][] */ -6,122,26,-32,78,16,-40,-16,-29,17,-8,0,51,20,91,8,-15,2,-5,-45,-17,10,-2,13,-24,-18,27,0,-52,-112,-12,-3,-4,54,-18,34,-57,39,12,104,11,19,-1,6,21,-2,-19,-41, 1,95,-47,17,30,-31,0,32,30,13,23,-35,34,127,-76,-77,2,-31,106,-77,-50,77,-3,53,68,127,2,127,-68,-113,-18,-2,94,-115,-84,0,-68,-44,-30,-127,46,-22,-55,75,51,19,16,8, 13,127,-15,33,26,11,-59,-4,-22,-19,-6,-7,53,-1,-66,-2,-7,3,-35,-25,-9,4,-5,1,-48,29,-43,17,38,-80,17,1,8,58,2,-18,-43,57,9,0,-27,-5,2,-16,15,3,-4,32, 
};
const TfArray<4, int> tensor_dimension82 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant82_scale = { 48, { 0.013052841648459435, 0.0060601606965065002, 0.026306312531232834, 0.0074452529661357403, 0.0079903500154614449, 0.012639131397008896, 0.011134175583720207, 0.0078453654423356056, 0.015595292672514915, 0.0085236113518476486, 0.0185069739818573, 0.0078288475051522255, 0.0059225661680102348, 0.0059716221876442432, 0.0061435871757566929, 0.021782180294394493, 0.010767791420221329, 0.0038000091444700956, 0.0057005854323506355, 0.024227278307080269, 0.010715345852077007, 0.013982704840600491, 0.0080022066831588745, 0.033028319478034973, 0.010739332064986229, 0.013019200414419174, 0.0085605960339307785, 0.0075371004641056061, 0.01117912121117115, 0.0089770546182990074, 0.015437732450664043, 0.02189246192574501, 0.018899641931056976, 0.004657745361328125, 0.021105524152517319, 0.0079359216615557671, 0.0076883812434971333, 0.0041632740758359432, 0.022928422316908836, 0.037955965846776962, 0.0084769763052463531, 0.037048608064651489, 0.027611775323748589, 0.0081799896433949471, 0.010544838383793831, 0.0051339832134544849, 0.0083071161061525345, 0.012991557829082012, } };
const TfArray<48, int> quant82_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant82 = { (TfLiteFloatArray*)&quant82_scale, (TfLiteIntArray*)&quant82_zero, 3 };
const ALIGN(8) int32_t tensor_data83[8] = { 10693, 15185, 4621, 4368, 1851, -13395, 6289, -6589, };
const TfArray<1, int> tensor_dimension83 = { 1, { 8 } };
const TfArray<8, float> quant83_scale = { 8, { 0.00013316322292666882, 0.00013856698933523148, 0.0001453459553886205, 0.00021611964621115476, 0.000129679698147811, 0.00013548560673370957, 7.596921204822138e-05, 0.00012192961730761454, } };
const TfArray<8, int> quant83_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant83 = { (TfLiteFloatArray*)&quant83_scale, (TfLiteIntArray*)&quant83_zero, 0 };
const ALIGN(8) int8_t tensor_data84[1*3*3*48] = { 
  /* [0][0][][] */ 56,-66,-31,42,89,41,-66,-92,14,56,100,-66,-45,69,96,46,65,-77,66,81,-92,-91,45,80,-52,-21,78,74,94,90,-50,63,51,-71,-102,-76,64,-58,75,7,-85,61,43,-90,65,109,73,-64, 84,-85,-64,72,111,50,-73,-106,28,73,110,-96,-76,89,104,73,66,-97,63,102,-85,-118,68,96,-70,-59,110,98,114,127,-66,84,66,-100,-127,-81,83,-78,76,30,-111,76,45,-99,92,124,80,-83, 42,-37,-44,27,39,2,-24,-52,24,21,21,-36,-65,38,37,20,10,-20,29,23,-14,-80,31,37,-28,-10,46,35,44,48,-19,12,29,-64,-66,-50,23,-32,15,19,-33,31,11,-29,33,26,24,-49, 
  /* [0][1][][] */ 54,-88,-66,81,111,84,-115,-112,90,100,108,-88,-90,97,127,77,111,-96,51,119,-110,-127,80,110,-111,-78,112,92,101,93,-85,98,95,-120,-95,-127,87,-96,118,77,-101,96,96,-121,90,117,53,-89, 55,-127,-127,127,127,127,-127,-127,127,127,127,-127,-127,127,120,127,127,-127,58,127,-127,-127,127,127,-127,-127,127,127,127,113,-127,127,127,-127,-94,-120,127,-127,127,127,-127,127,127,-127,127,127,60,-127, -4,-61,-82,60,46,35,-60,-51,61,42,27,-62,-82,42,53,54,28,-31,25,35,-29,-92,60,63,-70,-18,21,54,57,21,-39,26,52,-108,-70,-59,42,-42,30,55,-22,55,42,-50,44,3,26,-74, 
  /* [0][2][][] */ -37,-44,-47,45,34,46,-51,-23,-89,51,31,-60,-66,36,62,47,60,-25,-79,55,-35,-58,46,49,-72,-60,61,46,31,6,-47,34,48,-66,-26,-47,29,-44,52,81,-33,56,69,-64,33,9,-102,-27, -127,-69,-85,73,44,72,-64,-17,-67,62,52,-68,-100,48,50,73,69,-33,-127,67,-51,-93,70,48,-88,-43,48,53,38,9,-70,40,66,-109,-23,-51,44,-56,51,110,-27,64,104,-79,46,-17,-127,-65, -65,-17,-56,41,12,24,2,1,-81,27,24,-27,-49,24,29,37,15,-10,-66,31,-21,-11,25,32,-41,3,9,26,13,-1,-22,9,26,-43,-8,-17,10,-16,2,47,-1,19,41,-13,8,-20,-51,-32, 
};
const TfArray<4, int> tensor_dimension84 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant84_scale = { 48, { 0.010667427442967892, 0.0046907193027436733, 0.0038308296352624893, 0.0041644005104899406, 0.0025659317616373301, 0.0056499931961297989, 0.0047388901002705097, 0.0042338753119111061, 0.013413799926638603, 0.0027246822137385607, 0.0062339873984456062, 0.0039085289463400841, 0.0035891192965209484, 0.0095113050192594528, 0.0033823465928435326, 0.0031644676346331835, 0.003634564345702529, 0.0065652988851070404, 0.016743060201406479, 0.0028994018211960793, 0.002369387773796916, 0.0030756243504583836, 0.0035897286143153906, 0.0062759649008512497, 0.0037000069860368967, 0.004133658017963171, 0.0072914422489702702, 0.0074193854816257954, 0.0067662037909030914, 0.0098498621955513954, 0.0062265042215585709, 0.0035782926715910435, 0.0025393606629222631, 0.0038368108216673136, 0.0034020284656435251, 0.0033337217755615711, 0.0042847315780818462, 0.0043705599382519722, 0.0037228451110422611, 0.0038074380718171597, 0.0057415897026658058, 0.0090673454105854034, 0.003031653817743063, 0.0037713479250669479, 0.0084497835487127304, 0.0065660132095217705, 0.010039209388196468, 0.0049196477048099041, } };
const TfArray<48, int> quant84_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant84 = { (TfLiteFloatArray*)&quant84_scale, (TfLiteIntArray*)&quant84_zero, 3 };
const ALIGN(8) int32_t tensor_data85[8] = { 3304, -2324, 15588, -8999, -14326, -15546, -8677, -2238, };
const TfArray<1, int> tensor_dimension85 = { 1, { 8 } };
const TfArray<8, float> quant85_scale = { 8, { 9.054787369677797e-05, 0.00012338448141235858, 9.659505303716287e-05, 0.00010886012023547664, 0.00011285863729426637, 9.6977091743610799e-05, 0.00017717093578539789, 0.0001873702130978927, } };
const TfArray<8, int> quant85_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant85 = { (TfLiteFloatArray*)&quant85_scale, (TfLiteIntArray*)&quant85_zero, 0 };
const ALIGN(8) int8_t tensor_data86[1*3*3*48] = { 
  /* [0][0][][] */ -55,1,36,11,127,-50,23,9,8,28,71,-14,6,16,-66,11,81,-43,-20,71,-37,10,-52,-11,-19,0,31,-44,-28,127,25,-85,-46,94,100,-73,6,-51,-127,-30,8,-19,-13,-70,-2,-46,-127,25, -66,98,-5,35,-13,-84,113,-16,82,12,84,127,60,127,-18,30,104,-89,4,95,-40,-23,103,-107,3,44,-107,22,-28,-85,113,-127,-127,-87,-2,-26,-64,-34,-112,19,-61,-28,18,-127,24,-91,31,50, -22,-8,7,-1,48,-50,23,-2,23,22,10,-48,-11,2,-60,25,61,-34,-16,72,-24,0,-63,-3,22,0,28,-103,-37,50,-51,-79,9,-7,88,-51,10,-35,-93,8,14,-3,1,-54,-13,-71,-126,-22, 
  /* [0][1][][] */ -127,127,-9,-67,7,-82,14,-7,28,16,64,39,75,91,-63,36,127,-127,14,87,-23,-56,-100,-35,-127,-8,-33,13,-11,4,77,-67,-64,127,-115,-79,33,-64,38,62,-105,30,-80,53,-12,-127,8,-43, 8,125,127,127,-44,105,-127,127,127,-127,-88,73,127,98,127,-113,-51,-103,127,-5,-127,127,127,3,96,111,72,127,127,-73,127,12,-60,-93,-41,-127,127,127,94,63,-54,127,-27,70,127,46,-7,-127, -74,70,-30,-53,-60,-120,17,-23,-6,3,116,38,33,84,-50,127,104,-113,-8,106,43,-81,-102,-35,25,-15,-27,19,-5,18,77,-48,-7,-26,-127,-62,20,-76,43,-127,-76,34,127,63,-28,-104,-11,112, 
  /* [0][2][][] */ -21,-11,3,-10,30,-39,24,4,33,25,127,35,13,-6,-38,105,75,-52,-47,7,-24,2,-54,42,-17,-12,-34,-25,13,64,-2,-4,-20,37,-68,24,-40,-48,53,-39,80,-8,-6,1,-21,-3,4,-31, -66,127,7,18,-88,-127,72,-71,65,19,47,-51,-38,26,-49,117,71,3,-6,127,-63,9,81,127,13,-127,127,5,23,-42,-42,-97,4,-48,-67,-100,-67,-65,35,35,127,56,-39,36,-24,-73,-97,-5, 35,-16,19,-5,-13,-42,19,12,33,21,95,18,31,-3,-36,72,53,-42,-55,17,-24,-6,-53,38,9,-16,-28,-61,8,0,-12,5,-8,4,-26,41,-33,-37,55,3,47,1,35,-1,-22,-60,21,31, 
};
const TfArray<4, int> tensor_dimension86 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant86_scale = { 48, { 0.0039575784467160702, 0.0035969030577689409, 0.046367142349481583, 0.012448844499886036, 0.010440334677696228, 0.0052206008695065975, 0.0057815057225525379, 0.020713752135634422, 0.0046202065423130989, 0.016720792278647423, 0.0082504535093903542, 0.0064085386693477631, 0.0074008875526487827, 0.0048070098273456097, 0.0061145504005253315, 0.0037994259037077427, 0.0036865570582449436, 0.0023885846603661776, 0.021580519154667854, 0.002590634161606431, 0.0044156024232506752, 0.019396036863327026, 0.0092039089649915695, 0.0089643700048327446, 0.01431176345795393, 0.01308088656514883, 0.012674142606556416, 0.015961945056915283, 0.012182233855128288, 0.010117661207914352, 0.0074144257232546806, 0.0045465053990483284, 0.004438410047441721, 0.011390417814254761, 0.006532532162964344, 0.0053090788424015045, 0.029583979398012161, 0.0071361670270562172, 0.0065034260042011738, 0.02319272980093956, 0.0080052195116877556, 0.0072427308186888695, 0.012317604385316372, 0.0078748352825641632, 0.011237920261919498, 0.0030112469103187323, 0.0054724332876503468, 0.0095485113561153412, } };
const TfArray<48, int> quant86_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant86 = { (TfLiteFloatArray*)&quant86_scale, (TfLiteIntArray*)&quant86_zero, 3 };
const ALIGN(8) int32_t tensor_data87[8] = { -12000, -34919, 717, 6745, -17441, 511, -25589, -1176, };
const TfArray<1, int> tensor_dimension87 = { 1, { 8 } };
const TfArray<8, float> quant87_scale = { 8, { 0.00015366746811196208, 6.8380089942365885e-05, 5.9246191085549071e-05, 6.8342371378093958e-05, 7.1741160354577005e-05, 8.0281781265512109e-05, 6.2371516833081841e-05, 9.1861445980612189e-05, } };
const TfArray<8, int> quant87_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant87 = { (TfLiteFloatArray*)&quant87_scale, (TfLiteIntArray*)&quant87_zero, 0 };
const ALIGN(8) int8_t tensor_data88[1*3*3*48] = { 
  /* [0][0][][] */ 66,74,-25,58,-2,-4,-52,11,34,-72,32,12,13,-117,-32,36,106,36,-67,3,82,17,-23,-16,74,33,20,-3,-68,24,-10,-58,127,11,115,26,-37,31,127,32,-64,73,-96,-56,31,-93,-39,0, 92,127,-79,99,18,62,-69,-127,48,50,127,41,-15,-22,-22,-7,-68,127,-85,26,59,127,36,-25,28,17,7,127,-127,91,-25,-127,1,-31,32,86,-78,127,123,43,-115,-75,71,-8,13,28,-127,95, 45,43,-12,33,3,-7,-36,19,26,-90,30,10,9,-87,-26,-23,96,-18,-32,-10,75,19,-27,43,53,66,16,-5,-14,15,-17,-37,117,17,87,17,-18,28,98,-1,-37,72,52,65,34,97,13,-16, 
  /* [0][1][][] */ -26,-47,-127,100,18,53,67,-30,34,50,-50,127,127,-10,-31,-72,-35,81,75,-12,-110,18,27,-106,29,53,21,13,-10,94,25,47,68,127,31,39,-81,-1,-57,83,89,-3,83,-120,10,-103,-1,127, 44,-90,-38,-127,121,15,127,-80,-127,127,-1,79,-104,127,127,-16,-127,77,14,127,37,-1,127,-7,-127,127,34,-80,-98,42,-127,97,106,-101,35,127,127,61,-13,127,127,-76,-21,-1,115,-70,7,42, -13,-46,-120,51,-17,127,50,-23,31,30,-44,71,-13,8,-36,-19,-74,79,127,-39,-127,21,-63,127,8,23,23,32,47,82,43,34,10,-7,-41,-119,-43,-18,-13,25,51,63,-15,127,-12,127,-20,84, 
  /* [0][2][][] */ -39,-24,-4,19,-14,9,-11,-2,28,-31,0,9,33,-103,-45,36,95,6,14,9,-68,23,-2,-1,23,-2,-5,1,7,15,43,5,18,14,127,0,-8,59,85,45,9,75,127,-23,-55,-124,-2,-18, -127,-9,-86,39,-127,3,-61,-15,21,109,-85,59,-19,-45,-23,127,-94,44,-94,-29,-80,27,5,-27,-16,62,-127,-24,-68,127,63,20,36,-24,22,28,-22,50,-47,60,-64,-127,-107,-31,-127,73,-94,92, -32,-26,-5,10,6,-5,-10,-3,19,-62,-14,-16,-6,-92,-28,5,98,-35,93,18,-74,-4,5,38,19,-11,-7,-7,17,9,39,6,38,11,71,29,0,53,102,7,12,76,-49,53,-36,110,-2,-49, 
};
const TfArray<4, int> tensor_dimension88 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant88_scale = { 48, { 0.014737506397068501, 0.0086631402373313904, 0.004411991685628891, 0.0051252790726721287, 0.012783725745975971, 0.0059282369911670685, 0.013844314031302929, 0.0064301835373044014, 0.0079369135200977325, 0.022333649918437004, 0.015992425382137299, 0.0035477541387081146, 0.015000620856881142, 0.0035090839955955744, 0.0059886784292757511, 0.0099711911752820015, 0.0070287231355905533, 0.0061853025108575821, 0.0078641679137945175, 0.014330028556287289, 0.0041479994542896748, 0.0083050010725855827, 0.012272542342543602, 0.010977422818541527, 0.0088452138006687164, 0.013677469454705715, 0.012908797711133957, 0.020617859438061714, 0.0050557088106870651, 0.004691186361014843, 0.011103803291916847, 0.0112138781696558, 0.0037051232066005468, 0.017461217939853668, 0.0042506898753345013, 0.0065578846260905266, 0.0075827562250196934, 0.0044647594913840294, 0.0039278273470699787, 0.0045173522084951401, 0.01180777233093977, 0.0068357051350176334, 0.011827657930552959, 0.0095669468864798546, 0.007855844683945179, 0.0048584034666419029, 0.0077198580838739872, 0.0076462151482701302, } };
const TfArray<48, int> quant88_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant88 = { (TfLiteFloatArray*)&quant88_scale, (TfLiteIntArray*)&quant88_zero, 3 };
const ALIGN(8) int32_t tensor_data89[8] = { -12532, -3135, -618, -12317, 2139, -2834, 13052, 11203, };
const TfArray<1, int> tensor_dimension89 = { 1, { 8 } };
const TfArray<8, float> quant89_scale = { 8, { 0.000123874910059385, 0.00016952079022303224, 5.9850022807950154e-05, 0.00010154891788261011, 8.1915059126913548e-05, 0.00012256551417522132, 7.4913696153089404e-05, 0.00010526756523177028, } };
const TfArray<8, int> quant89_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant89 = { (TfLiteFloatArray*)&quant89_scale, (TfLiteIntArray*)&quant89_zero, 0 };
const ALIGN(8) int8_t tensor_data90[1*3*3*48] = { 
  /* [0][0][][] */ -78,64,-69,-118,-79,88,77,-121,108,78,127,-102,77,-105,-72,-119,127,-67,-80,-102,-108,36,127,38,82,98,71,84,113,-58,-65,-112,-51,-103,127,127,-44,-127,-41,96,-72,68,73,-94,-96,99,45,-110, -71,86,-87,-119,-114,93,86,-111,127,82,122,-127,96,-127,-84,-127,119,-89,-125,-124,-111,50,117,70,90,-9,71,94,127,-79,-86,-107,-70,-118,125,102,-56,-123,-27,98,-126,100,74,-127,-110,127,54,-127, -19,31,-30,-96,-58,36,27,-47,45,23,49,-53,36,-45,-27,-41,68,-35,-36,-54,-53,3,66,40,24,-80,41,18,23,-51,-28,-18,-19,-31,26,47,-17,-34,-10,27,-59,42,18,-62,-23,45,43,-32, 
  /* [0][1][][] */ -117,98,-106,-127,-104,103,105,-127,101,115,109,-90,106,-115,-105,-109,110,-102,-92,-122,-106,111,-9,79,115,125,111,104,-64,-90,-95,-127,-104,-98,26,-17,-101,-126,-96,120,-68,92,110,-82,-127,102,106,-75, -127,127,-127,-108,-127,127,127,-110,106,127,122,-113,127,-127,-127,-114,116,-127,-127,-127,-127,127,-57,127,127,-9,127,127,-72,-127,-127,-110,-127,-127,-9,-68,-127,-121,-127,127,-127,127,127,-112,-125,122,127,-77, -26,27,-55,-101,-56,47,39,-73,20,35,32,-47,41,-43,-43,-27,52,-51,-56,-65,-17,6,-15,60,36,-127,31,35,-49,-54,-40,-12,-35,-43,-24,-36,-57,-23,-51,36,-30,55,43,-27,-43,28,65,-31, 
  /* [0][2][][] */ -54,52,-63,-88,-45,52,48,-71,27,57,44,3,42,-63,-44,32,81,-56,-42,-66,-49,-110,-75,54,65,45,74,26,-44,-25,-30,-81,-86,-30,-103,-64,-69,-25,-84,34,-37,31,57,6,-57,13,73,3, -65,70,-68,-114,-55,75,57,-95,31,61,39,-11,50,-69,-46,8,83,-65,-44,-64,-60,-126,-105,84,57,-23,88,41,-52,-56,-46,-70,-89,-48,-115,-106,-73,-20,-109,46,-73,30,64,-5,-51,19,90,-2, -10,27,-29,-23,-34,33,20,-16,-2,13,5,4,16,-14,-21,27,41,-25,-46,-22,19,-35,-54,40,10,-89,9,12,-36,-7,-29,-3,-26,-26,-68,-56,-41,-5,-41,2,-28,14,18,13,-35,-9,44,8, 
};
const TfArray<4, int> tensor_dimension90 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant90_scale = { 48, { 0.0023146325256675482, 0.0046309311874210835, 0.0023621176369488239, 0.0020116816740483046, 0.0025196443311870098, 0.0026100124232470989, 0.0025138810742646456, 0.0024092833045870066, 0.0034156141337007284, 0.003924837801605463, 0.0030419942922890186, 0.0039161862805485725, 0.0027039339765906334, 0.0023163054138422012, 0.003009784733876586, 0.0034757372923195362, 0.0063490206375718117, 0.00379772181622684, 0.0014333956642076373, 0.0022774725221097469, 0.0024325959384441376, 0.011796833947300911, 0.0078390976414084435, 0.0026004526298493147, 0.0039190743118524551, 0.0084825484082102776, 0.0031774211674928665, 0.0035191490314900875, 0.004922457505017519, 0.0017679972806945443, 0.0023456132039427757, 0.0035475112963467836, 0.0031734439544379711, 0.0016374267870560288, 0.0056182011030614376, 0.0034006608184427023, 0.0060458732768893242, 0.0018286234699189663, 0.0021911186631768942, 0.0037984596565365791, 0.0021790389437228441, 0.0036555556580424309, 0.0033805526327341795, 0.0018980166641995311, 0.0020256419666111469, 0.0025688954629004002, 0.0052865352481603622, 0.0025192878674715757, } };
const TfArray<48, int> quant90_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant90 = { (TfLiteFloatArray*)&quant90_scale, (TfLiteIntArray*)&quant90_zero, 3 };
const ALIGN(8) int32_t tensor_data91[8] = { -15712, 2407, 10835, -9199, 236, -4596, -10318, 8228, };
const TfArray<1, int> tensor_dimension91 = { 1, { 8 } };
const TfArray<8, float> quant91_scale = { 8, { 0.00011220395390409976, 8.2079772255383432e-05, 8.6718449892941862e-05, 0.00021420075790956616, 0.00012465994223020971, 0.00014741462655365467, 0.00015734060434624553, 0.00011525423178682104, } };
const TfArray<8, int> quant91_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant91 = { (TfLiteFloatArray*)&quant91_scale, (TfLiteIntArray*)&quant91_zero, 0 };
const ALIGN(8) int8_t tensor_data92[1*3*3*48] = { 
  /* [0][0][][] */ 1,-26,36,24,42,-49,27,-99,-28,42,-57,-95,4,-12,42,40,50,-6,20,-9,63,9,-49,-9,6,5,0,-10,85,-18,-102,-9,-8,-6,-7,-28,37,35,-105,-19,-45,6,-4,-27,29,-45,28,-16, 8,-94,93,-54,48,17,-37,-71,81,-78,74,-28,-19,-63,34,32,118,-90,127,26,74,-16,22,2,17,127,-3,16,74,23,-127,32,19,12,10,12,71,-86,-127,127,-127,-5,-55,3,127,-72,-127,15, -1,18,23,13,39,-50,14,-118,-6,87,-56,-55,-6,-13,36,5,21,12,-1,-18,62,2,-51,-19,-10,10,12,-21,127,7,-92,-23,1,-17,-5,26,36,29,-68,-30,-55,1,-13,-23,21,-67,28,-40, 
  /* [0][1][][] */ -5,-4,-37,-58,46,22,-64,90,51,72,31,-96,-56,-121,100,48,-48,127,10,-1,42,-33,-127,-24,127,-21,28,-18,41,-127,-22,-28,-110,12,3,-98,-2,-71,-69,9,22,-10,16,-50,-27,-68,-66,-60, 127,-127,-127,64,2,127,-3,40,12,-127,117,-127,127,-127,-72,-127,-127,-87,-94,-70,-127,-127,107,127,-58,-63,-127,127,-86,117,-39,-127,-25,127,127,-42,-127,-127,47,-109,54,127,-99,-24,53,-34,79,-8, -12,24,-42,-44,43,13,-53,127,52,88,72,-59,-58,-126,127,23,-18,118,13,-1,47,-11,-127,-42,-91,-18,56,-21,54,19,-33,-14,-109,-17,0,127,-13,-71,-90,18,15,-19,6,-40,-30,-56,-77,-34, 
  /* [0][2][][] */ -3,40,-28,9,-1,1,51,-36,30,19,-47,-82,-3,1,20,4,-12,53,-16,-27,43,20,-5,-6,7,-3,-4,-8,-20,29,-3,5,127,-21,-36,-20,-18,15,-17,9,16,-4,39,-50,-34,-127,-6,71, -30,71,-71,127,-127,26,127,45,127,-2,127,-86,16,-100,44,-5,4,-66,-15,-127,-9,92,-8,-32,24,-1,30,-76,-69,-23,33,-20,50,65,-59,5,15,-41,-32,111,83,-11,127,-127,-21,-3,-89,127, 6,31,-19,0,5,-2,51,-20,18,21,-60,-52,-3,19,35,-7,-11,42,-17,-23,40,12,-9,-12,-33,-12,-2,-4,-6,0,-7,0,109,-37,-29,8,-14,9,-44,11,23,2,60,-41,-33,-113,-5,79, 
};
const TfArray<4, int> tensor_dimension92 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant92_scale = { 48, { 0.011791517026722431, 0.0090918177738785744, 0.0059843272902071476, 0.018456911668181419, 0.011920795775949955, 0.020238850265741348, 0.0083190761506557465, 0.0064458055421710014, 0.0089077828451991081, 0.012456466443836689, 0.0051641110330820084, 0.0032459108624607325, 0.024693312123417854, 0.0070066070184111595, 0.0044495654292404652, 0.015612027607858181, 0.0090070636942982674, 0.0058754594065248966, 0.014290709979832172, 0.016031110659241676, 0.013011602684855461, 0.0070086834020912647, 0.010680003091692924, 0.042301878333091736, 0.010410333052277565, 0.014840526506304741, 0.046378515660762787, 0.011843143962323666, 0.0082444353029131889, 0.013182632625102997, 0.0048105707392096519, 0.016118926927447319, 0.012437727302312851, 0.011879121884703636, 0.011204500682651997, 0.0085506075993180275, 0.014846300706267357, 0.0078398715704679489, 0.0060385814867913723, 0.0063248975202441216, 0.0072496547363698483, 0.016899935901165009, 0.0079582696780562401, 0.0050649452023208141, 0.012283679097890854, 0.0029435916803777218, 0.010520027950406075, 0.0063253166154026985, } };
const TfArray<48, int> quant92_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant92 = { (TfLiteFloatArray*)&quant92_scale, (TfLiteIntArray*)&quant92_zero, 3 };
const ALIGN(8) int32_t tensor_data93[8] = { -3122, -27854, -837, 579, -933, -5333, 14676, -17, };
const TfArray<1, int> tensor_dimension93 = { 1, { 8 } };
const TfArray<8, float> quant93_scale = { 8, { 2.9398532205959782e-05, 3.0585855711251497e-05, 5.218994920141995e-05, 4.017303217551671e-05, 3.1098374165594578e-05, 3.1515399314230308e-05, 2.9700055165449157e-05, 5.1373030146351084e-05, } };
const TfArray<8, int> quant93_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant93 = { (TfLiteFloatArray*)&quant93_scale, (TfLiteIntArray*)&quant93_zero, 0 };
const ALIGN(8) int8_t tensor_data94[1*3*3*48] = { 
  /* [0][0][][] */ -2,-42,28,-26,51,21,-58,7,7,-25,-42,9,-17,-29,-8,3,60,56,-25,-88,28,-7,21,-7,-20,-127,-74,-32,-13,5,18,-31,-14,-52,41,15,60,-3,76,6,-11,-1,-51,-117,5,3,-45,-46, -43,13,127,-6,127,-8,-61,-23,115,127,-33,5,8,-50,-127,27,-60,127,-29,25,-15,70,-75,-5,-70,58,-94,39,1,-2,86,-65,-36,-58,36,-3,127,116,127,-71,127,12,-64,-74,-127,102,35,-89, 64,-47,44,-34,22,13,-84,-5,3,-9,-35,7,34,-29,0,11,25,42,-63,87,-11,-19,16,-47,-5,83,-64,36,-5,6,3,-60,-21,-58,40,25,51,19,70,-16,-15,-1,-43,-120,-10,-15,-33,-45, 
  /* [0][1][][] */ -60,32,-23,-32,48,-1,39,-9,43,-122,16,-13,-127,-11,-47,11,119,-8,15,-127,-127,37,15,-32,-34,107,-21,-63,80,66,127,-127,13,117,115,-89,80,9,-93,-41,-24,-4,11,88,-25,-68,-75,-46, -110,127,-122,127,-127,45,-127,127,121,-2,-63,120,6,127,-110,127,-127,95,-2,73,49,127,21,127,-127,-48,127,-69,127,54,-78,100,-3,-8,-127,127,9,-98,46,-127,-66,-77,127,127,67,127,-127,127, 127,11,-20,-39,51,14,41,-10,17,-96,19,-18,113,-17,-70,2,-78,-47,-24,47,72,33,-20,-87,-44,-78,-34,127,47,-127,76,2,2,127,112,-76,121,7,-101,-49,-26,-9,-2,72,-18,-66,-67,-77, 
  /* [0][2][][] */ -17,-5,-9,-27,48,32,-119,-48,-105,35,32,20,-26,-21,-6,9,64,-37,86,-85,11,-8,55,-25,-30,94,0,-40,-27,-27,33,-28,13,-14,20,-18,0,-55,-22,10,8,41,9,-28,17,-27,114,-4, 32,20,-23,-17,16,127,-69,-47,-127,85,127,-127,-1,63,-57,0,-29,-49,127,17,0,10,127,48,15,-40,40,31,60,3,26,-8,127,59,-108,-107,112,-127,-22,-36,26,127,-17,-14,80,113,57,22, -3,-11,-12,-25,56,24,-104,-42,-107,2,25,22,33,-23,15,7,-35,-55,75,35,-14,-7,47,-38,-22,-83,1,21,-21,25,8,-44,10,-19,-14,-52,-7,-54,-16,16,7,40,11,-25,25,-16,125,-5, 
};
const TfArray<4, int> tensor_dimension94 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant94_scale = { 48, { 0.012671595439314842, 0.014494824223220348, 0.0075690294615924358, 0.010856733657419682, 0.0088431751355528831, 0.004636512603610754, 0.010847728699445724, 0.012183926068246365, 0.0052459319122135639, 0.0066613228991627693, 0.010229197330772877, 0.016888570040464401, 0.0068184072151780128, 0.010037525556981564, 0.010116181336343288, 0.010978297330439091, 0.010519557632505894, 0.0088268490508198738, 0.0058916816487908363, 0.0062573226168751717, 0.011857106350362301, 0.0098520452156662941, 0.0054852897301316261, 0.011951981112360954, 0.0049042077735066414, 0.0081287054345011711, 0.009980296716094017, 0.0068676336668431759, 0.013505053706467152, 0.012179388664662838, 0.0055363234132528305, 0.012332157231867313, 0.0076701315119862556, 0.0073803262785077095, 0.020435871556401253, 0.0084213912487030029, 0.0048509771004319191, 0.0082647241652011871, 0.0056600687094032764, 0.010440140031278133, 0.011462109163403511, 0.0073335804045200348, 0.012515152804553509, 0.0077074957080185413, 0.015114331617951393, 0.0056049088016152382, 0.0038943002000451088, 0.018667429685592651, } };
const TfArray<48, int> quant94_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant94 = { (TfLiteFloatArray*)&quant94_scale, (TfLiteIntArray*)&quant94_zero, 3 };
const ALIGN(8) int32_t tensor_data95[8] = { 8675, -6636, 6268, 196, -11309, -13731, -7098, -11994, };
const TfArray<1, int> tensor_dimension95 = { 1, { 8 } };
const TfArray<8, float> quant95_scale = { 8, { 4.3747477320721373e-05, 4.2230032704537734e-05, 3.2009065762395039e-05, 4.6183529775589705e-05, 4.5228971430333331e-05, 4.1202736611012369e-05, 6.2425533542409539e-05, 5.2241692173993215e-05, } };
const TfArray<8, int> quant95_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant95 = { (TfLiteFloatArray*)&quant95_scale, (TfLiteIntArray*)&quant95_zero, 0 };
const ALIGN(8) int8_t tensor_data96[1*3*3*48] = { 
  /* [0][0][][] */ -125,1,8,-42,-4,27,17,-15,-72,8,124,-15,-11,-18,-30,-47,108,83,21,11,36,32,-5,0,93,-29,14,-27,32,-6,13,-46,10,-15,-35,30,24,35,-17,3,-64,8,-3,0,27,23,26,10, 1,-21,-8,109,37,127,106,127,127,24,-81,61,-127,-61,42,-37,-127,-96,127,113,127,127,-19,39,113,-45,-80,-25,127,127,20,-43,-21,-127,-63,-59,-45,-8,39,127,124,-33,106,52,25,29,127,69, 118,-11,5,-3,-13,33,18,-24,-30,-18,-63,-14,-3,2,-22,-62,105,93,-2,18,54,46,-13,-1,55,-22,-4,-27,31,0,26,-46,10,1,-27,25,4,31,-11,6,-29,17,7,-6,-13,12,27,11, 
  /* [0][1][][] */ 127,-25,1,125,-108,35,25,55,103,17,110,-59,-63,-32,-108,15,22,-122,32,87,-1,-4,-38,6,110,4,-87,48,62,22,-97,-6,-94,-63,-71,-85,-127,-20,46,104,16,-127,1,52,88,60,26,10, 8,127,127,25,90,-5,-127,53,38,127,-12,127,-87,127,11,127,-88,-127,42,-127,100,-43,127,127,-58,127,-127,-127,19,-18,-64,-127,43,28,86,-27,21,127,-3,-104,51,95,-127,-14,-127,-38,98,127, -120,-41,-3,110,-127,12,22,45,65,-3,-88,-48,-66,-14,-127,10,17,-98,51,72,-7,-9,-26,-3,127,5,-91,39,66,41,-82,-31,-127,-48,-79,-79,-120,-14,62,87,71,-117,54,77,-11,56,19,10, 
  /* [0][2][][] */ 49,-6,12,-127,15,0,-37,3,0,-72,-127,-20,27,3,-52,12,114,7,0,5,-77,-18,-6,-56,51,6,-54,-4,-1,5,30,-55,23,4,-41,7,-46,3,-3,25,-60,-12,-28,4,71,22,-13,36, -30,-24,32,-27,-49,20,-37,44,-27,-77,9,11,-105,-43,-6,-14,-43,0,-51,44,-103,-64,-21,-43,22,-9,-32,15,-2,-8,127,11,-87,-90,-127,-127,83,11,127,30,-127,-112,86,127,12,127,29,56, -26,-16,13,-119,19,-16,-36,5,-15,-85,104,-10,39,19,-36,7,100,19,62,3,-99,-9,-12,-70,60,5,-68,-17,-2,9,36,-46,25,8,-38,12,-68,1,-9,20,-89,-15,48,9,-68,18,-12,21, 
};
const TfArray<4, int> tensor_dimension96 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant96_scale = { 48, { 0.022758753970265388, 0.034750957041978836, 0.013656501658260822, 0.0056054028682410717, 0.015177007764577866, 0.015731586143374443, 0.012281551025807858, 0.0093081546947360039, 0.0075616743415594101, 0.0071817794814705849, 0.011796676553785801, 0.019066216424107552, 0.011818933300673962, 0.023140128701925278, 0.0061853113584220409, 0.011739547364413738, 0.004152453038841486, 0.0051250937394797802, 0.012550449930131435, 0.0074650151655077934, 0.0044106235727667809, 0.0079636890441179276, 0.017155054956674576, 0.013187370263040066, 0.0032300376333296299, 0.011837502010166645, 0.0050002392381429672, 0.027674069628119469, 0.0097864530980587006, 0.012214787304401398, 0.0044813649728894234, 0.0052352435886859894, 0.009651978500187397, 0.0047828485257923603, 0.0070354300551116467, 0.0075653526000678539, 0.0061376788653433323, 0.015722770243883133, 0.01450340636074543, 0.0032095080241560936, 0.010077813640236855, 0.0034458062145859003, 0.01493135467171669, 0.005236178170889616, 0.0093153705820441246, 0.0051941955462098122, 0.0078966319561004639, 0.0068631060421466827, } };
const TfArray<48, int> quant96_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant96 = { (TfLiteFloatArray*)&quant96_scale, (TfLiteIntArray*)&quant96_zero, 3 };
const ALIGN(8) int32_t tensor_data97[8] = { -9000, -3041, -11105, 11193, 3909, -23325, -5949, -3488, };
const TfArray<1, int> tensor_dimension97 = { 1, { 8 } };
const TfArray<8, float> quant97_scale = { 8, { 3.1443036277778447e-05, 6.0755115555366501e-05, 5.2180312195559964e-05, 5.3853847930440679e-05, 3.9809277950553223e-05, 4.2045438021887094e-05, 6.3572049839422107e-05, 4.6447552449535578e-05, } };
const TfArray<8, int> quant97_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant97 = { (TfLiteFloatArray*)&quant97_scale, (TfLiteIntArray*)&quant97_zero, 0 };
const ALIGN(8) int8_t tensor_data98[1*3*3*48] = { 
  /* [0][0][][] */ -35,-2,20,-9,-54,-18,-10,-42,-6,-5,-2,-85,-30,2,-5,-1,7,-68,-3,1,-36,-19,0,-6,-6,5,-18,3,-37,-31,2,7,-52,25,-5,17,-32,25,-9,11,2,-28,3,7,-28,7,7,67, -16,-3,55,-73,-96,-127,9,-127,-8,-13,56,-46,-116,77,5,35,104,55,-25,37,-87,-34,96,-121,29,37,-117,38,-74,16,-62,62,-118,127,1,30,76,101,-127,11,49,-91,67,101,-22,-7,87,96, -37,-6,3,-1,-39,4,-11,-27,-4,-2,-3,-82,-33,-7,-7,-4,-4,25,-9,-2,-29,-17,-12,3,-5,-4,-12,-1,-13,7,3,-6,-29,12,-9,-44,-31,5,-5,2,1,-12,-11,0,-15,1,14,59, 
  /* [0][1][][] */ -73,66,21,21,-71,-8,21,-10,15,-14,6,-102,-56,6,2,8,25,-127,22,9,-39,-15,13,4,18,15,-10,2,-64,19,-48,19,-48,-15,38,23,37,27,-2,-8,8,30,3,36,-29,13,23,30, -127,-3,127,127,-69,-125,127,-34,127,40,127,-37,-127,127,-127,127,127,110,-127,127,-127,-127,127,127,127,127,-127,127,-127,127,-127,127,-127,-80,127,101,127,127,20,-115,127,127,127,127,-127,21,127,106, -55,63,6,13,-85,-10,12,-20,12,-23,-2,-75,-41,-15,9,0,11,20,43,-7,-47,6,9,-4,3,-5,12,-5,-31,-8,-46,9,-41,-7,16,-127,23,27,-2,0,-9,17,1,7,-11,9,11,45, 
  /* [0][2][][] */ -25,8,22,0,-121,-22,-7,-4,-3,3,8,-89,-37,-10,-2,10,-15,-6,-9,8,-33,-2,1,-1,-3,15,-34,-5,-26,-3,-16,0,-2,-9,-33,-1,-23,2,12,-18,-5,-43,0,15,-25,17,7,12, 41,127,68,-5,-127,53,42,-30,0,127,63,-127,-92,-8,13,46,-42,7,-5,70,-104,-49,17,4,21,58,-78,35,-20,-24,-89,-5,-10,-28,-126,38,63,7,43,-127,-54,-6,84,70,-46,127,33,127, -24,-1,17,1,-107,-18,-4,-1,-14,-8,9,-72,-31,-8,-7,4,-12,2,-4,1,-28,1,-1,3,-3,12,-17,-3,-11,21,-1,-4,6,-1,-15,-34,-19,-5,7,-13,-1,-39,3,9,-13,8,9,9, 
};
const TfArray<4, int> tensor_dimension98 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant98_scale = { 48, { 0.0035718951839953661, 0.0068814149126410484, 0.0035158172249794006, 0.012991426512598991, 0.0040384219028055668, 0.0082003641873598099, 0.006210684310644865, 0.0095759434625506401, 0.013861054554581642, 0.012474038638174534, 0.011413294821977615, 0.0018194200238212943, 0.0028512980788946152, 0.011628163978457451, 0.018967265263199806, 0.011673815548419952, 0.0041172974742949009, 0.0073655112646520138, 0.0080194203183054924, 0.0061920345760881901, 0.0045613669790327549, 0.0077012842521071434, 0.010590619407594204, 0.016517302021384239, 0.011617432348430157, 0.0063967998139560223, 0.0025122084189206362, 0.014957639388740063, 0.0049417107366025448, 0.0075846631079912186, 0.0024555986747145653, 0.0079725636169314384, 0.0051213582046329975, 0.01523541659116745, 0.01337348110973835, 0.009795650839805603, 0.0034578628838062286, 0.0052919788286089897, 0.021784516051411629, 0.0038643400184810162, 0.017487782984972, 0.01129439752548933, 0.002939967205747962, 0.0042439978569746017, 0.0033872982021421194, 0.017241979017853737, 0.0059746112674474716, 0.0028152544982731342, } };
const TfArray<48, int> quant98_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant98 = { (TfLiteFloatArray*)&quant98_scale, (TfLiteIntArray*)&quant98_zero, 3 };
const ALIGN(8) int32_t tensor_data99[16] = { 19309, 5074, -17422, 7647, -3384, 9025, -21698, 15801, -5908, -3020, 15289, -23500, -16328, -8228, -8253, 1871, };
const TfArray<1, int> tensor_dimension99 = { 1, { 16 } };
const TfArray<16, float> quant99_scale = { 16, { 4.5432272600010037e-05, 0.000100443467090372, 8.0197947681881487e-05, 8.4072707977611572e-05, 0.00010944779933197424, 8.5184001363813877e-05, 6.3761362980585545e-05, 7.1815840783528984e-05, 7.4830510129686445e-05, 8.3006365457549691e-05, 0.00011221019667573273, 6.4367777667939663e-05, 0.00011259600432822481, 7.9956262197811157e-05, 6.0750779084628448e-05, 6.5275125962216407e-05, } };
const TfArray<16, int> quant99_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant99 = { (TfLiteFloatArray*)&quant99_scale, (TfLiteIntArray*)&quant99_zero, 0 };
const ALIGN(8) int8_t tensor_data100[1*3*3*96] = { 
  /* [0][0][][] */ 27,26,-16,-21,-127,20,127,-3,-127,-9,-25,-98,14,91,-47,-127,-15,11,-43,11,84,-18,42,35,-3,38,-52,98,21,73,-63,17,-24,9,-11,-4,4,-34,-64,29,-1,7,-38,29,-31,40,105,-8,-77,-82,-70,74,-61,127,0,-104,-43,22,-58,-2,-4,82,-22,-57,-2,-8,-17,-33,35,-14,26,-47,27,-110,-57,103,-7,-22,-17,-7,-12,-49,9,-19,-29,35,13,-85,10,-19,-3,-127,46,-111,-46,-51, -127,-55,42,-52,-37,-34,-118,-9,49,-117,24,-114,57,127,-117,-123,-94,127,-127,21,121,15,127,54,-60,125,15,78,127,-21,127,127,44,127,127,-44,9,-6,73,-127,-1,-32,-127,127,-127,127,36,27,-116,-127,97,102,-61,55,127,-127,-127,127,70,-127,31,127,-20,5,127,-66,-4,11,127,-43,127,-56,127,-61,-65,72,127,65,127,-29,-3,6,-127,-5,-127,127,127,-127,127,-65,15,52,7,-127,49,36, 18,17,-21,0,-120,14,-14,-9,61,-21,-25,-85,22,43,-56,-124,-20,-13,-35,-2,57,-7,44,6,-11,36,44,94,-15,-51,17,14,-28,4,-22,-12,1,40,-87,38,2,-27,-26,32,-46,62,82,-13,-13,-63,-32,79,-57,57,5,-37,-35,16,-75,-33,-9,85,-5,-19,-121,2,-4,-46,4,-13,13,-44,18,-127,-61,101,8,-10,-20,-1,15,48,5,30,-30,21,31,-127,-4,30,-16,76,-2,-91,-49,-62, 
  /* [0][1][][] */ -127,-115,21,101,-97,-104,90,1,-81,-7,-6,-105,127,7,20,-16,7,19,-64,32,-36,23,94,127,6,-4,-103,-18,5,100,-97,45,31,-7,-15,-20,29,-127,-81,39,-10,127,27,-15,-35,13,29,14,-8,-56,82,8,-10,122,61,-86,21,-20,115,-68,-3,-9,-43,-55,12,-81,-7,-38,21,-29,-27,127,-2,-123,-11,64,3,49,20,21,-127,-127,10,-127,8,-54,-44,-90,-47,71,75,102,127,90,-52,-127, -82,-15,-38,-16,-56,127,-87,-33,46,22,20,49,41,-52,-11,112,-21,-15,58,127,127,127,-5,-44,-76,-127,127,-115,34,19,62,59,127,-114,34,-41,118,33,-74,-64,-127,58,17,-73,77,-96,-127,-103,-51,-28,127,-127,92,22,-36,-126,98,-109,127,-119,127,-115,-62,105,-10,-127,-20,-52,-102,-85,-32,96,-68,-115,39,1,-118,110,48,127,69,51,-38,66,35,-50,-12,-45,-60,55,55,-37,-3,22,126,-65, -125,127,-2,104,-80,-25,4,9,34,5,-9,-127,108,-24,29,-24,21,20,-60,4,-13,3,77,-99,-7,-1,-34,-1,4,-127,-7,21,39,-14,-21,-25,22,95,-127,22,-9,123,24,-22,-28,2,35,10,-46,-38,85,7,-17,88,52,-30,19,-19,117,-10,-8,-16,-57,-61,2,-116,33,-18,18,-17,4,84,2,-116,-5,27,-15,80,20,20,57,73,9,7,11,-36,-48,-71,-36,23,-127,-63,32,64,-66,-66, 
  /* [0][2][][] */ 21,57,8,11,-80,-4,47,33,-2,23,10,-41,2,-31,9,-116,28,-6,-19,-24,-99,-12,41,-106,6,-10,-22,-127,-17,18,-71,0,15,-15,-19,6,-38,-41,-122,-25,37,-63,19,-31,-17,0,81,-11,-122,-37,30,13,-122,2,-7,35,15,-3,-64,41,14,-6,6,125,14,0,-8,16,7,28,-18,-57,-34,12,-121,-35,-6,-2,-13,-18,-3,2,39,13,24,-12,-31,-31,-4,-22,10,37,-1,10,10,-40, -15,-63,127,127,-10,-3,-23,127,-59,127,127,-2,52,-75,127,-47,127,7,40,-2,-123,-120,118,9,127,62,3,-114,-117,-15,69,66,66,-29,-43,127,-127,11,-92,-26,127,103,115,25,-101,-28,51,-127,-127,-30,127,-121,-98,50,-15,99,45,-21,-47,-29,-73,-38,127,114,9,68,127,127,27,127,5,-74,-65,-66,-105,127,-60,127,104,-113,-6,-24,85,7,78,-42,13,-50,26,127,15,-26,-14,126,127,-12, 17,12,-18,12,-86,6,-22,19,54,16,-11,-13,-3,-14,-3,-102,22,-11,-35,-17,-119,-3,37,88,16,-2,20,-62,4,-2,8,-9,14,-3,-38,2,-20,36,-43,-19,28,-4,8,-21,-13,10,53,-22,-87,-18,8,-15,-127,-27,1,63,11,1,-43,48,18,5,26,127,-21,-12,-10,-5,7,27,2,-4,-28,25,-127,-2,-3,11,-13,-13,8,21,49,21,21,-7,-30,-19,-6,-23,-19,-15,-10,31,10,-19, 
};
const TfArray<4, int> tensor_dimension100 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant100_scale = { 96, { 0.0071775815449655056, 0.014935883693397045, 0.010484528727829456, 0.0049944138154387474, 0.0047274897806346416, 0.018545119091868401, 0.010334214195609093, 0.013518378138542175, 0.0077705392614006996, 0.0086373435333371162, 0.03806798905134201, 0.0044078035280108452, 0.0045611062087118626, 0.0075235920958220959, 0.0079063791781663895, 0.0018013280350714922, 0.0090591628104448318, 0.015942025929689407, 0.0077551249414682388, 0.011340775527060032, 0.0070004332810640335, 0.012094070203602314, 0.002985695842653513, 0.017829237505793571, 0.0095308031886816025, 0.0052858958952128887, 0.012913264334201813, 0.0042179571464657784, 0.008232814259827137, 0.007474362850189209, 0.0084039894863963127, 0.0078421253710985184, 0.00652658985927701, 0.011397984810173512, 0.013755268417298794, 0.013059456832706928, 0.013170970603823662, 0.0099667971953749657, 0.0034970222041010857, 0.023885760456323624, 0.0069091492332518101, 0.0047154533676803112, 0.0071449847891926765, 0.010655712336301804, 0.0032394267618656158, 0.008615441620349884, 0.0064027700573205948, 0.0079202018678188324, 0.0047777313739061356, 0.004963509738445282, 0.0070700566284358501, 0.0046516028232872486, 0.0048123924061655998, 0.0049648950807750225, 0.01490995567291975, 0.0037088964600116014, 0.0081629296764731407, 0.010751698166131973, 0.0050534717738628387, 0.0070980810560286045, 0.019597116857767105, 0.0059040212072432041, 0.010307361371815205, 0.0038642352446913719, 0.01689884252846241, 0.0050281030125916004, 0.022687751799821854, 0.0085766613483428955, 0.012227980419993401, 0.0074285399168729782, 0.020518600940704346, 0.0054650185629725456, 0.010124080814421177, 0.0052442746236920357, 0.0037831808440387249, 0.006111054215580225, 0.012031089514493942, 0.0081160394474864006, 0.0085300300270318985, 0.0083147408440709114, 0.012237757444381714, 0.0093864034861326218, 0.0058142063207924366, 0.020090214908123016, 0.01181794423609972, 0.0095330961048603058, 0.010858044028282166, 0.0031555630266666412, 0.011696730740368366, 0.011568391695618629, 0.0080328341573476791, 0.017446162179112434, 0.0099879158660769463, 0.0043254578486084938, 0.0064929742366075516, 0.0058048674836754799, } };
const TfArray<96, int> quant100_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant100 = { (TfLiteFloatArray*)&quant100_scale, (TfLiteIntArray*)&quant100_zero, 3 };
const ALIGN(8) int32_t tensor_data101[16] = { 10816, 4305, 9167, 6495, 6475, 10179, -4819, 9840, -1499, -1544, 7076, 21036, 16791, -9978, -1360, -11641, };
const TfArray<1, int> tensor_dimension101 = { 1, { 16 } };
const TfArray<16, float> quant101_scale = { 16, { 7.0746624260209501e-05, 5.0203991122543812e-05, 5.8341534895589575e-05, 7.3305462137795985e-05, 5.668300946126692e-05, 8.6008207290433347e-05, 6.021428998792544e-05, 4.916922262054868e-05, 6.205507816048339e-05, 6.524368654936552e-05, 6.3003142713569105e-05, 6.0774003941332921e-05, 3.9533781091449782e-05, 5.2567349484888837e-05, 6.698147626593709e-05, 6.8092995206825435e-05, } };
const TfArray<16, int> quant101_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant101 = { (TfLiteFloatArray*)&quant101_scale, (TfLiteIntArray*)&quant101_zero, 0 };
const ALIGN(8) int8_t tensor_data102[1*3*3*96] = { 
  /* [0][0][][] */ -76,54,-53,59,-3,31,20,44,-11,-1,127,-47,-61,-61,-96,-113,1,19,-127,-39,113,110,88,3,-127,45,-108,109,35,59,-28,-66,-6,36,43,-39,-10,103,6,-39,-38,80,27,-32,34,-92,25,51,-9,113,80,-62,60,69,-16,-26,54,78,64,73,127,-68,17,-73,110,41,76,-78,-6,110,29,-67,-91,79,127,1,19,-28,52,-52,96,-55,51,122,4,25,17,17,-38,-39,31,-127,55,-29,50,-44, -103,105,-26,127,-1,127,-88,127,12,65,75,-17,-10,-127,-45,-106,-105,59,-101,-61,127,-9,48,127,28,53,-23,127,127,127,89,34,-58,127,127,-85,-127,-22,51,-127,59,18,-64,-48,-127,57,23,26,-127,-106,127,-76,127,127,51,96,27,127,104,49,87,79,-127,-124,113,127,127,-36,-87,35,127,105,-71,127,-17,-1,77,30,0,-127,127,-10,-16,87,-14,49,-127,-127,-127,-45,75,98,36,47,39,-127, -82,63,-45,28,-11,26,82,-66,-35,3,111,72,-84,-32,-55,-101,-28,-72,-127,-50,103,55,-127,-20,114,35,-80,99,19,48,-21,-48,-3,9,13,127,-7,-74,-31,-47,-47,48,-20,91,31,26,51,44,46,-7,25,-19,35,29,2,-21,50,79,45,-117,68,-9,17,-77,127,36,30,-74,2,127,-15,-77,-29,63,-107,-4,-15,-50,-51,-48,58,-30,38,92,-24,1,20,18,0,-22,10,21,-68,-29,48,-30, 
  /* [0][1][][] */ -96,-7,108,-71,127,63,-8,127,29,-26,64,-127,-127,-90,-24,-99,110,127,101,-92,95,-46,81,-28,-70,87,-127,32,30,53,-4,-100,-90,-51,-13,24,14,127,-34,15,-1,86,-23,-94,31,-127,-30,74,-106,14,28,-127,-3,-3,65,-18,-23,25,-87,127,59,-127,23,-116,39,-74,-12,3,16,76,-17,-85,-127,38,-21,-127,-41,-65,122,-44,29,-16,-21,-30,1,7,33,7,5,58,-55,114,-4,-14,96,-31, 94,-127,5,-13,-16,14,-104,64,127,71,38,66,-30,-8,-1,-35,20,-55,52,103,-70,-127,7,92,43,-6,-68,-118,-84,-45,44,-69,8,-54,37,-118,88,-66,-127,22,127,-6,-26,-31,-48,36,0,-127,-9,112,-44,55,-2,-71,51,109,127,-12,-127,-86,73,90,-13,46,-75,46,-27,34,-118,66,-80,116,44,53,58,102,-71,-57,8,-99,-101,10,-127,-5,-48,17,101,-93,8,-127,20,70,-46,-18,-127,75, -104,-63,-98,-40,-117,-81,127,-54,13,-106,42,58,-120,-81,-78,-38,127,-77,80,-40,40,-16,-78,-33,20,69,-80,47,38,14,5,-101,-74,-55,-18,82,14,-44,-19,27,-33,16,-12,127,35,73,-29,50,-89,-127,-42,-79,-31,-7,55,-9,-17,-38,-100,-43,72,42,6,-60,35,-37,-31,-28,16,100,7,-54,14,40,-38,27,-16,-66,-127,-22,41,-10,6,-19,-11,23,28,-34,-16,32,-82,39,1,-4,92,-26, 
  /* [0][2][][] */ -127,-51,127,83,-61,-35,20,-68,-26,64,-65,-45,-34,-65,4,-111,22,43,45,-82,86,31,-9,-32,-45,127,-120,102,-54,-30,23,-127,66,-32,-9,-12,13,51,39,4,13,107,3,17,12,-41,-127,-40,-60,71,-19,11,48,-1,127,15,52,-9,-88,23,32,-44,-9,-127,-67,27,18,83,9,29,-16,-127,-61,8,83,0,127,-116,59,-42,92,-4,98,127,-127,-52,-33,17,26,41,86,-102,81,16,5,42, -74,-60,99,58,45,-67,-38,-66,-14,127,-59,-21,18,-108,127,-67,-62,7,34,-55,69,49,-22,-22,4,125,-74,92,-26,-2,127,-59,127,4,64,-26,75,4,127,123,123,62,-127,-45,79,27,-21,-24,-110,-75,35,-117,16,-28,86,127,76,7,42,-78,24,55,-19,-80,-34,79,22,127,127,-25,-51,68,-22,57,12,14,116,-127,8,-48,-55,127,36,104,-78,-127,15,-71,118,70,127,75,40,127,-89,47, -96,-103,56,55,16,-29,14,-23,1,7,-71,64,-27,-92,9,-127,14,-54,37,-127,58,24,-38,-26,39,121,-104,74,-38,-16,4,-118,41,-22,-19,47,1,-58,30,-8,15,127,-17,13,-6,20,-117,-22,-99,6,-61,-5,33,-8,65,12,13,9,-42,15,46,-13,-1,-84,-55,20,-9,24,3,26,6,-118,5,40,-100,-11,64,-126,-70,-17,76,-25,84,83,-109,-24,-62,14,0,57,70,-47,-127,-6,-32,37, 
};
const TfArray<4, int> tensor_dimension102 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant102_scale = { 96, { 0.0029810373671352863, 0.0064974064007401466, 0.0059112356975674629, 0.0064383288845419884, 0.013963322155177593, 0.01930651068687439, 0.010830150917172432, 0.0062455516308546066, 0.026252526789903641, 0.0087504051625728607, 0.0052515235729515553, 0.0089646801352500916, 0.010473606176674366, 0.0047960439696907997, 0.0067652640864253044, 0.0021532054524868727, 0.0069832517765462399, 0.006131037138402462, 0.010272582061588764, 0.0046423515304923058, 0.0041826143860816956, 0.0099767427891492844, 0.0093384571373462677, 0.0097419703379273415, 0.012534639798104763, 0.0079685971140861511, 0.003367133904248476, 0.0051150857470929623, 0.0088632041588425636, 0.015480475500226021, 0.0074949567206203938, 0.0027108574286103249, 0.0083894031122326851, 0.0085861757397651672, 0.0097469240427017212, 0.011971833184361458, 0.0092033902183175087, 0.0070198872126638889, 0.0065829209052026272, 0.012635339982807636, 0.0066373590379953384, 0.0059849247336387634, 0.015088515356183052, 0.010454181581735611, 0.012055035680532455, 0.006967244204133749, 0.0048363674432039261, 0.013684814795851707, 0.0048986398614943027, 0.0092770252376794815, 0.0078079965896904469, 0.0055030500516295433, 0.013204180635511875, 0.013801885768771172, 0.0048071378841996193, 0.016288012266159058, 0.0062349899671971798, 0.013915738090872765, 0.0039218170568346977, 0.0082450825721025467, 0.0071337022818624973, 0.0058867442421615124, 0.014202666468918324, 0.006986335851252079, 0.0041101686656475067, 0.0070575173012912273, 0.0085602216422557831, 0.0056219478137791157, 0.010623786598443985, 0.0043476703576743603, 0.016250947490334511, 0.0087337614968419075, 0.0082191722467541695, 0.0024116728454828262, 0.01044922973960638, 0.016341099515557289, 0.0043359925039112568, 0.0074827470816671848, 0.0081633394584059715, 0.0073782219551503658, 0.0068985247053205967, 0.01808486133813858, 0.0061376248486340046, 0.0050238994881510735, 0.0058903861790895462, 0.0073229838162660599, 0.013675786554813385, 0.0154343256726861, 0.016758624464273453, 0.019687598571181297, 0.006159862969070673, 0.0059694834053516388, 0.0090181939303874969, 0.0065149986185133457, 0.013294484466314316, 0.007628993596881628, } };
const TfArray<96, int> quant102_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant102 = { (TfLiteFloatArray*)&quant102_scale, (TfLiteIntArray*)&quant102_zero, 3 };
const ALIGN(8) int32_t tensor_data103[16] = { 4019, 9997, 13662, 270, 16850, -3137, -8315, -14576, 5275, 6493, -3106, 4426, -7002, -3327, 5281, -3825, };
const TfArray<1, int> tensor_dimension103 = { 1, { 16 } };
const TfArray<16, float> quant103_scale = { 16, { 7.5082105468027294e-05, 7.1048460085876286e-05, 7.1426999056711793e-05, 6.7458240664564073e-05, 6.9553134380839765e-05, 7.4509262049105018e-05, 8.5936073446646333e-05, 5.2132843848085031e-05, 8.3740189438685775e-05, 0.00011926898150704801, 5.8323319535702467e-05, 0.0001058505367836915, 5.3092444431968033e-05, 8.264933421742171e-05, 0.000115921713586431, 6.2339771830011159e-05, } };
const TfArray<16, int> quant103_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant103 = { (TfLiteFloatArray*)&quant103_scale, (TfLiteIntArray*)&quant103_zero, 0 };
const ALIGN(8) int8_t tensor_data104[1*3*3*96] = { 
  /* [0][0][][] */ 98,-108,104,-127,109,46,30,90,-60,57,-101,57,-127,-89,-77,122,63,-16,-51,-87,-59,94,21,95,-83,101,118,-112,115,84,46,91,-77,-38,9,42,115,87,103,94,-48,53,-98,126,-66,-127,-90,-71,91,-104,15,24,116,-127,-127,88,53,-29,101,85,114,-102,95,61,-81,-25,110,39,74,-36,34,54,110,-63,-83,-45,-67,-70,105,103,97,90,-15,127,83,100,91,81,-108,-36,25,108,-127,110,29,96, 127,-127,127,-57,127,65,23,111,-41,67,-127,30,-119,-127,-91,127,80,-11,-127,-127,-59,-28,25,127,-127,127,127,-127,121,72,61,127,-96,-39,1,41,127,127,127,127,-56,54,-127,127,-93,45,-74,-46,127,-127,44,11,127,-115,35,107,56,-95,127,127,114,-101,106,58,-64,-29,127,-28,82,-22,17,52,127,-59,-127,-44,-74,-65,127,127,127,127,-15,114,102,127,127,101,-127,-65,51,101,-124,127,41,94, 53,-14,19,-87,43,17,-1,45,-9,29,-40,-1,-27,-42,-54,33,44,-6,-83,-16,-23,1,7,44,-71,31,101,-78,98,-14,25,38,-30,-25,-39,9,31,72,50,95,-19,10,-80,46,-23,94,-5,22,35,-46,-56,5,49,-89,89,52,17,-127,39,44,46,-29,36,-4,-29,-12,38,-6,22,0,1,13,53,-49,-34,-8,-43,-12,37,42,58,64,-14,11,21,41,44,45,-68,-50,-16,4,-13,79,16,49, 
  /* [0][1][][] */ 5,-88,118,-114,85,118,37,90,-114,106,-61,108,-93,0,86,63,99,50,62,-118,-41,-1,-41,52,48,83,99,-61,110,118,95,14,-26,120,10,96,-47,7,64,30,-59,-92,-72,15,-33,-31,70,-2,85,-88,68,4,18,-89,-84,104,96,-56,48,94,118,-102,103,119,-19,63,-22,3,68,-105,-11,105,102,-127,-80,118,-122,-69,-27,6,113,62,-112,70,-18,68,5,109,-81,-93,69,127,-90,78,107,88, -43,-93,109,-12,112,127,35,117,-127,127,-87,127,-116,-21,127,30,110,34,-7,-121,-41,-20,-55,61,82,106,108,-126,127,127,127,16,-22,127,-10,127,-45,46,93,20,-24,-127,-108,25,-54,16,87,-7,85,-113,61,-56,46,-102,45,127,127,-71,49,119,127,-127,122,127,-44,84,-21,17,82,-127,-127,127,122,-36,-115,127,-127,-126,-22,13,123,70,-127,46,19,105,37,127,-117,-127,82,118,-105,96,127,127, -108,-21,33,-29,58,38,-1,41,-39,61,-77,42,-19,-13,90,67,31,12,-85,-31,-22,-30,-37,14,20,42,51,-60,43,11,64,16,4,53,-17,50,-12,36,43,16,-45,-6,-23,15,-13,2,52,-17,-13,-30,-127,-54,-50,-43,44,45,72,-35,17,47,56,-41,36,28,-127,46,12,14,29,4,-115,29,42,48,-43,22,-68,-120,4,11,15,20,-31,15,-30,58,18,21,-30,-68,34,-23,4,33,42,71, 
  /* [0][2][][] */ 28,7,-42,-114,0,-10,89,-127,-107,63,-17,42,-3,-21,85,-6,100,-91,13,63,-120,127,108,21,95,-80,-34,101,-5,-93,49,-34,16,36,114,64,0,-7,-13,-67,-127,-11,-25,42,-93,-97,96,-120,-28,-7,20,108,23,-80,-72,-78,54,26,48,76,101,-41,98,110,-53,97,-35,24,-113,-80,-56,-82,50,3,-37,68,-57,-124,39,-56,5,28,-49,5,92,60,-18,33,-24,-92,108,32,-55,-97,47,42, 40,37,-45,-34,-12,-40,127,-112,-107,41,-37,67,1,-36,98,-35,127,-127,-40,102,-127,-20,127,28,117,-96,-20,127,-3,-106,52,-39,-13,11,127,85,9,-34,-18,-79,-39,-36,-3,30,-127,25,127,-127,-68,-13,-10,127,21,-98,5,-39,64,-51,55,81,90,-56,127,125,-38,127,23,24,-127,-101,-64,-77,76,35,-16,89,-85,-127,71,-69,-9,40,-66,-3,127,61,-4,26,-32,-102,127,8,-60,-105,50,60, 22,52,-67,-61,-7,-35,45,-71,-21,39,-12,30,-20,-2,35,10,36,-52,-72,67,-32,-2,51,5,43,-42,30,59,39,-35,25,-3,-127,0,30,44,2,-15,3,-28,-67,-34,13,20,-42,70,71,-4,-28,-13,-34,75,4,-28,52,-79,33,-80,6,5,-8,-32,35,26,-41,36,18,127,-39,-51,-54,-24,38,64,19,38,-65,-51,34,-20,-58,23,-29,20,29,19,3,-12,7,-27,-2,-8,-9,-91,19,35, 
};
const TfArray<4, int> tensor_dimension104 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant104_scale = { 96, { 0.005145147442817688, 0.0058268518187105656, 0.0055354428477585316, 0.0030766706913709641, 0.0025167549028992653, 0.0060772579163312912, 0.0053701908327639103, 0.0078891776502132416, 0.0043357242830097675, 0.0016041682101786137, 0.0030925408937036991, 0.0087357936426997185, 0.0048244823701679707, 0.004107943270355463, 0.0028987755067646503, 0.007598531898111105, 0.0055837412364780903, 0.0064462362788617611, 0.0045299199409782887, 0.0055096950381994247, 0.0058285980485379696, 0.0061030811630189419, 0.0056717037223279476, 0.0035048052668571472, 0.0034435007255524397, 0.0037424291949719191, 0.0051156533882021904, 0.0033528979402035475, 0.0020872964523732662, 0.0034132727887481451, 0.0040720710530877113, 0.0063887215219438076, 0.008180215023458004, 0.0045532006770372391, 0.013185270130634308, 0.0037617073394358158, 0.0054212929680943489, 0.0032825877424329519, 0.0025935894809663296, 0.0042736991308629513, 0.0035568661987781525, 0.0042548640631139278, 0.0043343100696802139, 0.0038271837402135134, 0.0059917643666267395, 0.0057350927963852882, 0.0029530157335102558, 0.0057476209476590157, 0.0032791320700198412, 0.0048459949903190136, 0.0065543795935809612, 0.0028267062734812498, 0.007057401817291975, 0.0020286354701966047, 0.0054358253255486488, 0.0040936670266091824, 0.0030963250901550055, 0.0067132539115846157, 0.0068423994816839695, 0.0034392527304589748, 0.0030202912166714668, 0.0040912702679634094, 0.0025359333958476782, 0.0048029297031462193, 0.0078214667737483978, 0.0048923864960670471, 0.0094103952869772911, 0.0070974724367260933, 0.0050436519086360931, 0.0047212210483849049, 0.0062833847478032112, 0.006237515714019537, 0.0031132078729569912, 0.0082508968189358711, 0.0031865108758211136, 0.0054155741818249226, 0.0025204194243997335, 0.0023958887904882431, 0.0059526334516704082, 0.0050926068797707558, 0.00473780557513237, 0.0046655153855681419, 0.0079317810013890266, 0.0024371547624468803, 0.0062832259573042393, 0.0032053531613200903, 0.0060477354563772678, 0.0036798773799091578, 0.0039914255030453205, 0.0041578616946935654, 0.0057499618269503117, 0.0028427001088857651, 0.0046663512475788593, 0.0038034410681575537, 0.0032942434772849083, 0.0026771386619657278, } };
const TfArray<96, int> quant104_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant104 = { (TfLiteFloatArray*)&quant104_scale, (TfLiteIntArray*)&quant104_zero, 3 };
const ALIGN(8) int32_t tensor_data105[16] = { -9448, -3054, -5520, -16166, 11260, -11455, -11862, 19213, -20848, -23687, 605, -172, -12634, 21091, -4397, 8747, };
const TfArray<1, int> tensor_dimension105 = { 1, { 16 } };
const TfArray<16, float> quant105_scale = { 16, { 5.7851655583363026e-05, 6.349044997477904e-05, 6.6497894295025617e-05, 5.341518044588156e-05, 5.8054672990692779e-05, 6.1698541685473174e-05, 5.2093637350481004e-05, 6.2657658418174833e-05, 6.5615793573670089e-05, 6.4865613239817321e-05, 6.7408473114483058e-05, 6.1946193454787135e-05, 5.8339992392575368e-05, 6.5663291024975479e-05, 6.6657346906140447e-05, 6.5381776948925108e-05, } };
const TfArray<16, int> quant105_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant105 = { (TfLiteFloatArray*)&quant105_scale, (TfLiteIntArray*)&quant105_zero, 0 };
const ALIGN(8) int8_t tensor_data106[1*3*3*96] = { 
  /* [0][0][][] */ 99,42,5,-81,-6,-27,22,-101,54,8,-53,116,-9,52,-127,68,-65,56,-25,45,6,-4,-35,-49,-10,-68,-33,50,-34,14,127,-19,42,-39,-75,-66,50,78,95,85,-16,8,-5,-33,-5,13,-77,21,90,16,-20,35,-12,-68,9,-17,62,-37,-74,4,-12,31,41,11,59,111,85,33,72,-6,69,22,-1,-47,-29,123,44,116,-19,-19,94,76,-127,40,-127,-19,127,103,-61,71,24,-127,-19,34,73,120, 4,83,10,23,-3,74,-3,28,-38,-77,-127,50,-13,127,-112,127,49,-72,22,70,60,85,56,105,127,-22,-87,119,-80,-45,-73,30,-33,18,127,-90,127,116,64,75,-3,-124,-78,-92,-27,127,29,-25,127,29,-11,13,-6,45,127,13,42,15,-31,24,127,109,-36,-31,94,79,96,127,127,-127,127,12,-3,-32,-37,-112,-6,27,51,-79,77,31,81,-11,72,-9,-66,-38,-77,-63,-127,14,-31,-10,-46,-70, -127,42,-36,66,-18,-1,-55,94,65,-30,-20,127,20,8,-121,36,64,4,99,-127,-7,29,-49,-87,-53,-5,-34,66,85,27,-75,21,38,38,-29,-62,24,60,25,86,14,13,21,-64,-8,18,-66,27,90,20,-25,22,17,33,23,-127,-75,-53,58,37,17,25,32,21,59,95,92,1,61,4,50,-39,8,-44,13,127,24,-127,-20,-23,-46,41,69,-48,53,23,103,109,97,82,4,-108,-9,34,80,-127, 
  /* [0][1][][] */ -24,27,98,56,127,2,127,-64,10,-72,49,-34,-127,-26,-48,-3,-127,-99,127,20,91,123,-19,-31,-40,-14,-88,38,-52,-127,-39,-59,-48,-127,-75,86,-14,-20,45,127,-16,69,20,-125,39,112,-127,108,20,-10,1,26,-127,-32,-36,36,72,46,-118,95,59,21,74,-3,65,-44,127,-42,64,74,4,127,-127,-5,-102,-37,78,-123,54,-6,97,110,-32,73,-95,116,-60,-28,11,127,91,-54,6,84,-10,66, 30,-127,-127,15,122,-25,-52,3,-59,-127,114,-34,58,-60,-44,32,-13,-13,-85,-7,47,127,127,127,76,120,-61,55,-100,106,21,-13,-32,8,96,34,-17,-47,-36,-119,-79,61,-64,-79,-26,-76,120,-6,-46,-63,-41,127,25,28,-1,28,63,96,127,0,-16,123,-41,127,-24,-80,-96,-69,-22,54,-53,-95,74,127,-66,42,-127,35,127,13,19,127,25,-73,35,-5,-39,-44,56,119,-20,-18,127,11,-3,-43, 3,39,119,-73,95,-22,33,59,38,-91,50,-13,83,0,-80,-32,124,127,83,-66,93,71,-39,-34,-55,-127,-127,2,121,35,50,13,-49,122,-92,41,33,-36,44,96,40,-127,30,-127,-22,105,52,116,35,-3,3,36,118,22,33,30,-127,43,2,41,48,27,96,-9,127,-64,56,-37,4,78,0,-63,85,-18,-29,-43,85,89,70,-17,-127,97,-15,-6,31,97,-70,47,-39,107,91,-39,-24,127,64,27, 
  /* [0][2][][] */ 9,5,-8,-104,70,122,19,-127,31,-40,-16,-53,-20,-72,-60,-4,-55,-36,-62,30,64,-61,-16,-18,-19,40,-84,100,-53,-36,-27,-66,11,-101,76,127,0,-69,7,114,-70,-5,80,-84,81,-41,5,-26,-70,112,12,-2,-8,-127,59,-27,1,-52,-41,-83,0,33,86,11,101,6,107,-63,115,-40,18,-10,59,-28,127,115,-10,62,-8,6,71,124,-125,96,-104,110,75,127,127,6,-23,-95,-14,18,127,-64, 55,21,-53,-3,46,55,22,14,127,-68,-15,-10,-15,1,-107,-77,-13,-42,-12,41,127,-103,-72,115,-19,28,-111,92,-85,23,2,127,-58,29,3,109,8,-127,20,117,-89,116,127,-113,74,-59,-58,-127,-3,82,127,12,11,42,-26,41,38,-127,11,-69,-92,127,-83,-56,-5,-127,2,-81,-21,-57,-3,-14,45,-47,-27,-103,-74,4,-127,127,-62,-7,63,9,28,-82,-19,24,127,44,-10,4,-22,-14,-44,14, 20,44,-40,127,54,127,-77,112,39,-41,0,-13,39,-74,-80,13,40,-15,-13,-47,66,6,-24,-55,-21,-54,-49,127,127,21,19,-52,-127,90,-48,89,0,-32,-127,91,-127,-17,38,-50,-127,-35,-22,8,-122,127,11,8,-11,36,-44,-28,-21,-24,57,127,-15,41,127,12,-86,-14,41,-36,106,-37,-70,-2,-85,-32,-60,123,-11,-87,-17,19,-30,98,109,-127,44,127,82,100,-89,-11,-25,-104,-5,12,116,-25, 
};
const TfArray<4, int> tensor_dimension106 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant106_scale = { 96, { 0.014323239214718342, 0.0093186330050230026, 0.012929542921483517, 0.010467910207808018, 0.0078050023876130581, 0.0087853269651532173, 0.0096555203199386597, 0.0067353826016187668, 0.0092027336359024048, 0.0037433102261275053, 0.0081201996654272079, 0.0064857229590415955, 0.010318099521100521, 0.0062595633789896965, 0.0082617495208978653, 0.0070032523944973946, 0.008618425577878952, 0.010422058403491974, 0.010047950781881809, 0.013855951838195324, 0.0044174469076097012, 0.0051357378251850605, 0.0071296445094048977, 0.0055070426315069199, 0.018284153193235397, 0.011564252898097038, 0.0067384210415184498, 0.0031462518963962793, 0.0061019700951874256, 0.010588354431092739, 0.010669238865375519, 0.011841570027172565, 0.010991967283189297, 0.0062901894561946392, 0.011881178244948387, 0.0055054500699043274, 0.012342401780188084, 0.0053494498133659363, 0.0054341205395758152, 0.003544999985024333, 0.0084423720836639404, 0.011804132722318172, 0.00824736338108778, 0.0078931162133812904, 0.010677297599613667, 0.0060942955315113068, 0.008554873988032341, 0.012751628644764423, 0.0063362321816384792, 0.007900778204202652, 0.0097193382680416107, 0.010631656274199486, 0.012596553191542625, 0.011307169683277607, 0.013926493003964424, 0.012768366374075413, 0.0070434990338981152, 0.013083795085549355, 0.011111773550510406, 0.011302501894533634, 0.013287815265357494, 0.0027944501489400864, 0.0072114993818104267, 0.01859094575047493, 0.0070558716543018818, 0.0049564642831683159, 0.0084429802373051643, 0.013375252485275269, 0.0081747602671384811, 0.0085889054462313652, 0.0079585174098610878, 0.011895283125340939, 0.012803566642105579, 0.016134403645992279, 0.0064256098121404648, 0.010363882407546043, 0.018495319411158562, 0.010116270743310452, 0.0062373713590204716, 0.013759221881628036, 0.0071758241392672062, 0.006403620820492506, 0.0071867215447127819, 0.0078912219032645226, 0.0085122277960181236, 0.0065738079138100147, 0.0068569434806704521, 0.0065020574256777763, 0.0078185861930251122, 0.0049797957763075829, 0.0069835539907217026, 0.0092126987874507904, 0.011954751797020435, 0.011737115681171417, 0.012188099324703217, 0.0095793409273028374, } };
const TfArray<96, int> quant106_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant106 = { (TfLiteFloatArray*)&quant106_scale, (TfLiteIntArray*)&quant106_zero, 3 };
const ALIGN(8) int32_t tensor_data107[16] = { -15002, 21923, 10984, 1885, 18481, 25662, -21957, -17348, -17521, 37176, -44447, -24434, 23212, -27117, 14156, -3430, };
const TfArray<1, int> tensor_dimension107 = { 1, { 16 } };
const TfArray<16, float> quant107_scale = { 16, { 3.0941777367843315e-05, 2.2471371266874485e-05, 2.235837746411562e-05, 2.1906940673943609e-05, 3.2117353839566931e-05, 1.7695627320790663e-05, 2.3776274247211404e-05, 3.3569442166481167e-05, 1.9803565010079183e-05, 2.4472767108818516e-05, 3.5118111554766074e-05, 3.5949760786024854e-05, 1.8978282241732813e-05, 2.3502427211496979e-05, 2.7872751161339693e-05, 2.064044019789435e-05, } };
const TfArray<16, int> quant107_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant107 = { (TfLiteFloatArray*)&quant107_scale, (TfLiteIntArray*)&quant107_zero, 0 };
const ALIGN(8) int8_t tensor_data108[1*3*3*96] = { 
  /* [0][0][][] */ -106,-23,-54,-34,-54,-110,119,6,50,10,-64,125,-48,-86,-53,-104,-73,-41,-2,-32,28,112,67,10,-38,-15,-21,59,-86,54,-107,22,83,-37,65,5,-127,-127,35,-87,-45,-61,-3,-49,-127,-35,101,66,39,77,-34,9,95,-28,19,50,105,-127,57,-6,-84,-18,-28,44,-5,121,-17,76,-21,-15,52,33,54,-125,-117,-41,-106,127,115,-99,4,57,39,79,8,13,49,55,-85,-27,-42,10,-91,55,116,3, 12,-119,-127,46,-91,10,35,-15,39,-99,-25,-127,46,-38,-90,-127,40,-3,36,-34,-102,-78,127,127,10,-127,-9,-18,-103,-10,-75,9,-24,-12,60,-1,-110,-88,29,127,-7,31,-97,-98,66,78,-26,52,-18,69,-76,-21,38,-95,61,113,112,99,-3,15,54,9,-73,-39,-1,15,-8,127,-127,-106,3,109,-89,-9,112,-59,-3,7,46,22,-81,-42,-39,39,127,26,127,-3,-10,-116,121,-25,-95,127,50,-41, 127,-13,-58,-35,6,-46,-127,3,34,24,-29,100,34,-58,-58,-101,-11,-38,-77,-72,57,127,34,-15,-37,-33,-48,76,-86,-66,-127,51,-127,4,10,4,-74,-105,3,-60,-28,-14,-74,127,-93,-50,80,18,-13,54,-3,105,61,60,2,87,85,70,41,-6,31,-12,-27,1,-36,127,-27,82,-24,-67,34,-127,-45,81,-127,-9,2,72,127,-34,-53,-105,24,91,12,-32,55,50,-75,-35,-20,-50,-86,95,122,-32, 
  /* [0][1][][] */ -36,9,-113,43,-6,-11,92,3,127,44,-127,-92,-16,122,-88,-95,-84,-99,69,-12,127,99,-75,17,68,-79,-127,127,-11,36,55,-14,19,54,127,22,-107,-95,-87,-113,-30,-122,-127,-75,76,-47,85,127,127,85,127,78,127,-127,19,25,41,-83,127,-24,93,76,-127,25,1,21,23,-14,75,7,65,78,127,-26,-104,23,76,-21,95,-127,42,118,121,30,-7,81,-29,-4,-55,-15,-49,127,-48,30,-120,-85, 82,-83,-93,96,37,25,24,127,-54,-22,28,89,66,46,-127,-109,50,127,-105,49,-47,-97,-54,-1,127,-123,-48,-66,-101,127,60,7,120,127,-48,-127,-104,-70,64,28,47,-52,-111,11,-81,127,-127,34,-99,127,-33,-51,-14,114,94,26,-10,61,-83,127,55,-127,-12,-18,127,-8,-22,16,-13,-48,127,-48,-81,-12,17,23,16,-110,28,79,127,88,-60,101,-9,80,3,24,127,127,127,-27,-74,-49,-127,127, -2,14,-111,-31,-70,-33,-116,-14,123,33,93,19,-50,127,-84,-75,127,-54,48,-15,87,-80,-72,-15,69,-91,-109,8,-30,23,51,-6,-23,18,82,17,-69,-68,-76,-52,-59,-16,63,48,-79,-58,116,-14,-53,36,114,103,101,-2,3,24,127,32,-45,-36,127,73,-66,10,56,19,18,9,26,18,63,-52,-70,-3,-13,13,88,-20,71,-50,-45,-127,127,29,-10,-127,12,-57,-23,-3,-60,114,-61,79,-25,-87, 
  /* [0][2][][] */ -15,18,-77,3,42,112,57,-19,-36,68,-96,-55,-127,-68,1,42,-51,-43,-122,90,-6,-108,-60,-31,-52,62,-87,95,-87,-14,12,-127,-91,8,-38,-59,-119,-111,14,42,67,-33,-76,-48,-20,-105,-24,67,-26,94,109,61,113,-41,-8,-61,-5,-83,25,5,-37,89,-89,94,-46,109,8,13,49,-59,15,123,6,-68,-124,97,127,19,-19,-44,31,-52,61,119,0,-23,16,107,-9,-54,-97,32,-127,112,27,-77, 22,127,-47,127,127,127,22,-104,-16,127,5,-65,33,-9,116,63,95,99,-4,-49,-77,-20,-82,2,-43,-6,14,1,-27,-32,-30,-20,-89,-4,-12,-31,15,18,127,81,127,-127,-96,-76,96,80,-27,49,-6,48,19,-127,80,1,127,-127,38,53,-11,-58,38,101,-87,127,49,65,127,-2,98,102,65,-79,-25,-127,51,-57,15,-48,-27,-102,-3,-94,-69,127,51,-35,-103,43,69,-109,-25,-23,-75,101,-90,21, 15,-8,-69,-30,43,122,-81,-5,-41,77,110,15,84,-86,89,-28,-5,-48,127,127,-31,-24,-27,17,-57,38,-80,-36,-127,-38,-94,85,-121,58,-1,1,21,-93,-56,41,78,-42,-70,116,-54,-104,2,49,-21,75,82,87,100,-47,17,-10,-18,59,15,8,17,68,-83,86,-22,123,-7,27,42,127,12,-52,-2,-111,-116,127,89,-24,8,-56,81,-58,47,121,1,-79,-4,127,10,-62,-78,-3,-105,122,22,23, 
};
const TfArray<4, int> tensor_dimension108 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant108_scale = { 96, { 0.0080956853926181793, 0.020839760079979897, 0.0092337550595402718, 0.0058061163872480392, 0.0052643315866589546, 0.0054746237583458424, 0.0063792970031499863, 0.015397565439343452, 0.010215582326054573, 0.0074449838139116764, 0.009142640046775341, 0.0060990978963673115, 0.013942827470600605, 0.0060149235650897026, 0.009107368066906929, 0.0063812569715082645, 0.0057272771373391151, 0.015448053367435932, 0.0086981048807501793, 0.0075438790954649448, 0.0073993559926748276, 0.006655470933765173, 0.0058384998701512814, 0.0065169958397746086, 0.0084163928404450417, 0.0088580232113599777, 0.011093715205788612, 0.0062764161266386509, 0.0059115327894687653, 0.0076610944233834743, 0.012641459703445435, 0.012143315747380257, 0.0066555212251842022, 0.012779091484844685, 0.0064510023221373558, 0.023074561730027199, 0.0066905692219734192, 0.0047565209679305553, 0.0075023723766207695, 0.0057611842639744282, 0.01476072333753109, 0.0064364336431026459, 0.0099922241643071175, 0.010041274130344391, 0.0082122152671217918, 0.0052589946426451206, 0.0088948467746376991, 0.010028712451457977, 0.011884445324540138, 0.0043376521207392216, 0.0097887665033340454, 0.0050774626433849335, 0.0049029439687728882, 0.0079445960000157356, 0.011006319895386696, 0.0071771298535168171, 0.007816048339009285, 0.0066509651951491833, 0.014963258057832718, 0.020912140607833862, 0.0073269600979983807, 0.0055873151868581772, 0.004737678449600935, 0.0087309591472148895, 0.011471456848084927, 0.0126601941883564, 0.015938015654683113, 0.00948349479585886, 0.012349296361207962, 0.0086729144677519798, 0.010965235531330109, 0.0094296354800462723, 0.00878941360861063, 0.0075078578665852547, 0.0052300067618489265, 0.010070390067994595, 0.0070431949570775032, 0.005880916491150856, 0.0092924041673541069, 0.0090325744822621346, 0.0067408229224383831, 0.0088923387229442596, 0.0075077619403600693, 0.0060206158086657524, 0.031635861843824387, 0.0067338254302740097, 0.0095283268019556999, 0.01404830627143383, 0.0063818148337304592, 0.0050095408223569393, 0.0090000098571181297, 0.010287891142070293, 0.0039719664491713047, 0.0049484032206237316, 0.0054189730435609818, 0.015670614317059517, } };
const TfArray<96, int> quant108_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant108 = { (TfLiteFloatArray*)&quant108_scale, (TfLiteIntArray*)&quant108_zero, 3 };
const ALIGN(8) int32_t tensor_data109[16] = { 11315, 8061, 26005, -16954, 16715, -4179, -163, -5011, 18551, 4413, -6510, 1197, 233, -16009, 10454, 4360, };
const TfArray<1, int> tensor_dimension109 = { 1, { 16 } };
const TfArray<16, float> quant109_scale = { 16, { 5.8517944125924259e-05, 4.3162744987057522e-05, 2.9962771805003285e-05, 2.4331651729880832e-05, 3.1887208024272695e-05, 2.786488039419055e-05, 3.1610055884812027e-05, 2.6348543542553671e-05, 3.2130803447216749e-05, 4.1590130422264338e-05, 3.2823565561557189e-05, 4.0149250708054751e-05, 4.7880479542072862e-05, 2.2208054360817187e-05, 2.8738166292896494e-05, 2.9815957532264292e-05, } };
const TfArray<16, int> quant109_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant109 = { (TfLiteFloatArray*)&quant109_scale, (TfLiteIntArray*)&quant109_zero, 0 };
const ALIGN(8) int8_t tensor_data110[1*3*3*96] = { 
  /* [0][0][][] */ -2,-7,-32,46,-5,-28,92,-11,5,34,62,35,12,-89,22,27,-65,30,-38,23,10,-5,15,27,-5,-1,27,-31,-32,110,-14,16,-2,-4,-27,36,36,1,-17,-6,-10,-15,4,18,26,7,37,7,8,-5,-64,0,18,-56,24,6,56,-1,-29,5,8,17,55,14,-60,-107,-4,15,20,-6,12,15,14,-28,3,2,81,-1,36,27,-41,-58,-16,76,-7,-22,-13,5,-100,4,8,33,-127,-107,-29,-45, 127,-90,-82,17,127,-13,127,-21,-2,127,37,-50,74,11,26,110,-91,-114,45,127,83,-21,-16,127,-2,-37,127,-68,-11,127,-20,106,-72,-6,-34,127,40,127,-36,6,-127,67,9,84,29,-3,117,127,65,-108,65,-44,52,18,99,105,92,-93,-79,127,104,90,67,69,-54,3,40,29,108,-12,13,98,87,-41,-14,42,127,47,127,127,-42,-54,-127,69,-127,-38,-108,36,44,2,54,-126,-83,-89,-30,31, -4,-6,-34,51,-17,-2,98,-9,20,29,28,-33,4,-106,17,14,-118,47,33,20,6,0,19,21,-5,-1,14,-25,-84,106,-12,17,-3,-9,-19,18,36,-1,-16,-4,-13,50,2,16,26,-6,41,-2,5,9,-70,-6,10,-12,9,-7,34,0,-20,-5,6,7,1,11,-68,24,-15,18,-1,-11,5,12,8,-56,2,7,87,7,33,20,-44,-33,-2,16,-8,-25,-14,34,-127,13,9,12,-5,-105,-74,-54, 
  /* [0][1][][] */ -17,-25,-84,40,-8,2,69,9,-126,24,10,76,51,-8,32,30,-47,9,33,-50,45,24,3,-1,-42,-34,20,-53,-56,30,-48,29,0,12,-45,24,-37,5,0,23,-53,76,-13,21,39,24,37,-5,23,-17,-127,-32,-27,4,48,2,54,6,-8,3,10,17,73,37,-27,22,10,24,24,-9,1,20,9,14,23,10,68,-41,10,-32,-84,-40,-1,-29,-11,2,-24,14,17,-35,-16,8,-26,27,-13,-12, 62,-127,-127,32,-16,127,37,127,-9,118,-127,-30,127,67,127,127,-111,-71,83,-94,127,127,-123,-64,-8,-54,71,-127,116,107,-127,94,-127,127,-127,83,-127,112,96,127,-90,58,-105,127,127,127,127,60,127,-127,125,-127,-127,15,127,127,127,-127,-127,63,127,127,81,127,-44,95,127,127,127,13,-80,127,99,127,127,118,73,-127,30,-74,-127,-97,-125,-103,-97,72,-127,127,96,-127,-127,-102,-125,127,-127,-120, -15,-19,-70,-89,11,-5,79,3,-100,12,18,-81,47,-11,22,29,-49,18,38,-36,36,14,15,21,-7,-9,17,-46,-68,99,-35,37,3,7,-38,27,-29,-8,3,9,-44,8,-9,15,42,18,32,-3,17,-9,-123,-23,-17,5,38,0,34,6,4,-7,-2,8,127,32,-43,26,4,11,25,-1,-1,12,4,10,10,6,67,-56,17,-21,-82,-32,7,-23,-3,1,-16,24,18,-33,-10,58,-31,8,-8,-4, 
  /* [0][2][][] */ 4,-4,54,69,2,-26,-16,-46,-102,-6,26,115,2,71,5,4,-49,97,43,30,9,13,13,-10,3,10,-81,25,-85,51,-27,15,10,-13,-63,-25,-18,-10,14,-16,1,91,-15,-11,24,2,-26,-17,-1,18,-58,58,13,0,-20,-2,7,0,-41,8,-5,-5,58,6,-104,42,-56,11,48,1,-1,-2,15,18,18,14,56,-27,-111,-19,-3,36,22,-2,9,11,-8,39,-28,1,5,46,-60,-59,-25,-77, 47,-74,13,127,-5,-12,38,-33,-2,-1,-95,-127,95,127,30,1,-127,127,127,119,30,121,-127,-112,127,127,28,57,127,-7,-119,127,-83,-42,-73,-13,-40,39,127,5,-38,127,-127,-12,93,92,88,-31,54,-99,66,-30,72,127,-36,14,9,-76,-65,14,12,3,79,73,-93,127,-68,115,-53,127,-127,7,127,38,105,127,65,-44,-17,-58,29,127,19,-127,63,127,64,37,-65,-61,-69,-127,-90,-82,-26,-127, 1,-6,54,54,-4,-17,44,-51,-127,2,43,105,-1,78,16,13,-61,82,38,14,5,7,18,-24,-1,6,13,29,-81,-40,-29,-3,9,-18,-62,-2,-18,-18,1,0,1,66,-9,-7,24,-4,-30,-17,-7,25,-56,74,13,-2,-25,-2,3,-3,-26,5,-8,4,71,6,-127,21,-38,5,-39,8,0,3,-1,0,11,17,-67,-49,22,-21,-6,1,23,14,10,-2,-18,37,-28,-30,1,8,-54,-66,-108,-54, 
};
const TfArray<4, int> tensor_dimension110 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant110_scale = { 96, { 0.016158826649188995, 0.054619330912828445, 0.011805512011051178, 0.013460441492497921, 0.011728744022548199, 0.011127310805022717, 0.013818338513374329, 0.011419319547712803, 0.0095292022451758385, 0.008782263845205307, 0.009181569330394268, 0.0088709378615021706, 0.0035866959951817989, 0.0061067924834787846, 0.010611900128424168, 0.0094608142971992493, 0.011084480211138725, 0.0069257011637091637, 0.0056854560971260071, 0.007119898684322834, 0.011281523853540421, 0.0050391890108585358, 0.0072289630770683289, 0.014583099633455276, 0.010959172621369362, 0.0093797259032726288, 0.01325151976197958, 0.0088287666440010071, 0.016230199486017227, 0.0071134883910417557, 0.010147100314497948, 0.0079770442098379135, 0.081488810479640961, 0.013970895670354366, 0.010948163457214832, 0.0099647743627429008, 0.010521161369979382, 0.0080400919541716576, 0.0091840997338294983, 0.012560781091451645, 0.0093976734206080437, 0.013017130084335804, 0.0073582599870860577, 0.021255394443869591, 0.0042928843759000301, 0.014826362021267414, 0.0056642834097146988, 0.0085705555975437164, 0.01608402281999588, 0.013674360699951649, 0.011595424264669418, 0.007569450419396162, 0.01515661459416151, 0.012234390713274479, 0.0031976697500795126, 0.0080413781106472015, 0.0054964274168014526, 0.013585611246526241, 0.016586558893322945, 0.0098434435203671455, 0.020460138097405434, 0.0090256016701459885, 0.012955258600413799, 0.0037147107068449259, 0.01440158300101757, 0.0082786884158849716, 0.011669964529573917, 0.018519693985581398, 0.018178956583142281, 0.014411706477403641, 0.0074162385426461697, 0.018402434885501862, 0.016831403598189354, 0.0081242956221103668, 0.018232641741633415, 0.0088033070787787437, 0.0065472563728690147, 0.012269379571080208, 0.0064545380882918835, 0.0043467553332448006, 0.0068490807898342609, 0.0090185394510626793, 0.0082840900868177414, 0.0092549910768866539, 0.012578725814819336, 0.013705672696232796, 0.0080250464379787445, 0.009370461106300354, 0.012542941607534885, 0.010740594938397408, 0.015134066343307495, 0.0038833422586321831, 0.0081607680767774582, 0.0079259723424911499, 0.013196469284594059, 0.010071185417473316, } };
const TfArray<96, int> quant110_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant110 = { (TfLiteFloatArray*)&quant110_scale, (TfLiteIntArray*)&quant110_zero, 3 };
const ALIGN(8) int32_t tensor_data111[32] = { -54255, -30994, -36601, 38974, -13069, -29120, -7407, -13702, -3583, -15174, -8247, 33469, 20574, 49366, -29241, -22750, 10399, 22736, -9344, -16358, 41800, 9058, -7819, -12874, -3227, -39709, -3150, -19614, -4671, 16266, -30265, 18753, };
const TfArray<1, int> tensor_dimension111 = { 1, { 32 } };
const TfArray<32, float> quant111_scale = { 32, { 0.00015615759184584022, 0.00020405714167281985, 0.00012332649203017354, 0.00012481471640057862, 0.00016917854372877628, 0.00016809100634418428, 0.0001675115927355364, 0.00012794291251339018, 0.00015185997472144663, 0.00015523153706453741, 0.00015421606076415628, 0.00014406787522602826, 0.00014987819304224104, 0.00017264368943870068, 0.00015002528380136937, 0.0002239236346213147, 0.00016177706129383296, 0.0001178540478576906, 0.00012890771904494613, 0.00018884135351981968, 0.00016174778284039348, 0.00013152000610716641, 0.00017155376554001123, 0.00016772403614595532, 0.00014368178381118923, 0.00012930872617289424, 0.00011759330664062873, 0.00017572335491422564, 0.00015426208847202361, 0.00015243464440573007, 0.0001224714214913547, 0.00014036818174645305, } };
const TfArray<32, int> quant111_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant111 = { (TfLiteFloatArray*)&quant111_scale, (TfLiteIntArray*)&quant111_zero, 0 };
const TfArray<4, int> tensor_dimension112 = { 4, { 1,65,65,1 } };
const TfArray<1, float> quant112_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant112_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant112 = { (TfLiteFloatArray*)&quant112_scale, (TfLiteIntArray*)&quant112_zero, 0 };
const TfArray<4, int> tensor_dimension113 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant113_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant113_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant113 = { (TfLiteFloatArray*)&quant113_scale, (TfLiteIntArray*)&quant113_zero, 0 };
const TfArray<4, int> tensor_dimension114 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant114_scale = { 1, { 0.021857623010873795, } };
const TfArray<1, int> quant114_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant114 = { (TfLiteFloatArray*)&quant114_scale, (TfLiteIntArray*)&quant114_zero, 0 };
const TfArray<4, int> tensor_dimension115 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant115_scale = { 1, { 0.03846997395157814, } };
const TfArray<1, int> quant115_zero = { 1, { 28 } };
const TfLiteAffineQuantization quant115 = { (TfLiteFloatArray*)&quant115_scale, (TfLiteIntArray*)&quant115_zero, 0 };
const TfArray<4, int> tensor_dimension116 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant116_scale = { 1, { 0.046134311705827713, } };
const TfArray<1, int> quant116_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant116 = { (TfLiteFloatArray*)&quant116_scale, (TfLiteIntArray*)&quant116_zero, 0 };
const TfArray<4, int> tensor_dimension117 = { 4, { 1,32,32,48 } };
const TfArray<1, float> quant117_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant117_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant117 = { (TfLiteFloatArray*)&quant117_scale, (TfLiteIntArray*)&quant117_zero, 0 };
const TfArray<4, int> tensor_dimension118 = { 4, { 1,33,33,48 } };
const TfArray<1, float> quant118_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant118_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant118 = { (TfLiteFloatArray*)&quant118_scale, (TfLiteIntArray*)&quant118_zero, 0 };
const TfArray<4, int> tensor_dimension119 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant119_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant119_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant119 = { (TfLiteFloatArray*)&quant119_scale, (TfLiteIntArray*)&quant119_zero, 0 };
const TfArray<4, int> tensor_dimension120 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant120_scale = { 1, { 0.03125704824924469, } };
const TfArray<1, int> quant120_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant120 = { (TfLiteFloatArray*)&quant120_scale, (TfLiteIntArray*)&quant120_zero, 0 };
const TfArray<4, int> tensor_dimension121 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant121_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant121_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant121 = { (TfLiteFloatArray*)&quant121_scale, (TfLiteIntArray*)&quant121_zero, 0 };
const TfArray<4, int> tensor_dimension122 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant122_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant122_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant122 = { (TfLiteFloatArray*)&quant122_scale, (TfLiteIntArray*)&quant122_zero, 0 };
const TfArray<4, int> tensor_dimension123 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant123_scale = { 1, { 0.082559779286384583, } };
const TfArray<1, int> quant123_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant123 = { (TfLiteFloatArray*)&quant123_scale, (TfLiteIntArray*)&quant123_zero, 0 };
const TfArray<4, int> tensor_dimension124 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant124_scale = { 1, { 0.077969633042812347, } };
const TfArray<1, int> quant124_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant124 = { (TfLiteFloatArray*)&quant124_scale, (TfLiteIntArray*)&quant124_zero, 0 };
const TfArray<4, int> tensor_dimension125 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant125_scale = { 1, { 0.01875397190451622, } };
const TfArray<1, int> quant125_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant125 = { (TfLiteFloatArray*)&quant125_scale, (TfLiteIntArray*)&quant125_zero, 0 };
const TfArray<4, int> tensor_dimension126 = { 4, { 1,17,17,48 } };
const TfArray<1, float> quant126_scale = { 1, { 0.01875397190451622, } };
const TfArray<1, int> quant126_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant126 = { (TfLiteFloatArray*)&quant126_scale, (TfLiteIntArray*)&quant126_zero, 0 };
const TfArray<4, int> tensor_dimension127 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant127_scale = { 1, { 0.020542601123452187, } };
const TfArray<1, int> quant127_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant127 = { (TfLiteFloatArray*)&quant127_scale, (TfLiteIntArray*)&quant127_zero, 0 };
const TfArray<4, int> tensor_dimension128 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant128_scale = { 1, { 0.039209581911563873, } };
const TfArray<1, int> quant128_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant128 = { (TfLiteFloatArray*)&quant128_scale, (TfLiteIntArray*)&quant128_zero, 0 };
const TfArray<4, int> tensor_dimension129 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant129_scale = { 1, { 0.015825016424059868, } };
const TfArray<1, int> quant129_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant129 = { (TfLiteFloatArray*)&quant129_scale, (TfLiteIntArray*)&quant129_zero, 0 };
const TfArray<4, int> tensor_dimension130 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant130_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant130_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant130 = { (TfLiteFloatArray*)&quant130_scale, (TfLiteIntArray*)&quant130_zero, 0 };
const TfArray<4, int> tensor_dimension131 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant131_scale = { 1, { 0.035979822278022766, } };
const TfArray<1, int> quant131_zero = { 1, { -35 } };
const TfLiteAffineQuantization quant131 = { (TfLiteFloatArray*)&quant131_scale, (TfLiteIntArray*)&quant131_zero, 0 };
const TfArray<4, int> tensor_dimension132 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant132_scale = { 1, { 0.052389595657587051, } };
const TfArray<1, int> quant132_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant132 = { (TfLiteFloatArray*)&quant132_scale, (TfLiteIntArray*)&quant132_zero, 0 };
const TfArray<4, int> tensor_dimension133 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant133_scale = { 1, { 0.016566870734095573, } };
const TfArray<1, int> quant133_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant133 = { (TfLiteFloatArray*)&quant133_scale, (TfLiteIntArray*)&quant133_zero, 0 };
const TfArray<4, int> tensor_dimension134 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant134_scale = { 1, { 0.019158260896801949, } };
const TfArray<1, int> quant134_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant134 = { (TfLiteFloatArray*)&quant134_scale, (TfLiteIntArray*)&quant134_zero, 0 };
const TfArray<4, int> tensor_dimension135 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant135_scale = { 1, { 0.039393998682498932, } };
const TfArray<1, int> quant135_zero = { 1, { 25 } };
const TfLiteAffineQuantization quant135 = { (TfLiteFloatArray*)&quant135_scale, (TfLiteIntArray*)&quant135_zero, 0 };
const TfArray<4, int> tensor_dimension136 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant136_scale = { 1, { 0.063869282603263855, } };
const TfArray<1, int> quant136_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant136 = { (TfLiteFloatArray*)&quant136_scale, (TfLiteIntArray*)&quant136_zero, 0 };
const TfArray<4, int> tensor_dimension137 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant137_scale = { 1, { 0.016083462163805962, } };
const TfArray<1, int> quant137_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant137 = { (TfLiteFloatArray*)&quant137_scale, (TfLiteIntArray*)&quant137_zero, 0 };
const TfArray<4, int> tensor_dimension138 = { 4, { 1,9,9,48 } };
const TfArray<1, float> quant138_scale = { 1, { 0.016083462163805962, } };
const TfArray<1, int> quant138_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant138 = { (TfLiteFloatArray*)&quant138_scale, (TfLiteIntArray*)&quant138_zero, 0 };
const TfArray<4, int> tensor_dimension139 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant139_scale = { 1, { 0.021387351676821709, } };
const TfArray<1, int> quant139_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant139 = { (TfLiteFloatArray*)&quant139_scale, (TfLiteIntArray*)&quant139_zero, 0 };
const TfArray<4, int> tensor_dimension140 = { 4, { 1,4,4,8 } };
const TfArray<1, float> quant140_scale = { 1, { 0.056673184037208557, } };
const TfArray<1, int> quant140_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant140 = { (TfLiteFloatArray*)&quant140_scale, (TfLiteIntArray*)&quant140_zero, 0 };
const TfArray<4, int> tensor_dimension141 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant141_scale = { 1, { 0.012971305288374424, } };
const TfArray<1, int> quant141_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant141 = { (TfLiteFloatArray*)&quant141_scale, (TfLiteIntArray*)&quant141_zero, 0 };
const TfArray<4, int> tensor_dimension142 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant142_scale = { 1, { 0.016558714210987091, } };
const TfArray<1, int> quant142_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant142 = { (TfLiteFloatArray*)&quant142_scale, (TfLiteIntArray*)&quant142_zero, 0 };
const TfArray<4, int> tensor_dimension143 = { 4, { 1,4,4,8 } };
const TfArray<1, float> quant143_scale = { 1, { 0.01330257672816515, } };
const TfArray<1, int> quant143_zero = { 1, { -20 } };
const TfLiteAffineQuantization quant143 = { (TfLiteFloatArray*)&quant143_scale, (TfLiteIntArray*)&quant143_zero, 0 };
const TfArray<4, int> tensor_dimension144 = { 4, { 1,4,4,8 } };
const TfArray<1, float> quant144_scale = { 1, { 0.055986620485782623, } };
const TfArray<1, int> quant144_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant144 = { (TfLiteFloatArray*)&quant144_scale, (TfLiteIntArray*)&quant144_zero, 0 };
const TfArray<4, int> tensor_dimension145 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant145_scale = { 1, { 0.013273297809064388, } };
const TfArray<1, int> quant145_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant145 = { (TfLiteFloatArray*)&quant145_scale, (TfLiteIntArray*)&quant145_zero, 0 };
const TfArray<4, int> tensor_dimension146 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant146_scale = { 1, { 0.017339615151286125, } };
const TfArray<1, int> quant146_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant146 = { (TfLiteFloatArray*)&quant146_scale, (TfLiteIntArray*)&quant146_zero, 0 };
const TfArray<4, int> tensor_dimension147 = { 4, { 1,4,4,8 } };
const TfArray<1, float> quant147_scale = { 1, { 0.017647130414843559, } };
const TfArray<1, int> quant147_zero = { 1, { -26 } };
const TfLiteAffineQuantization quant147 = { (TfLiteFloatArray*)&quant147_scale, (TfLiteIntArray*)&quant147_zero, 0 };
const TfArray<4, int> tensor_dimension148 = { 4, { 1,4,4,8 } };
const TfArray<1, float> quant148_scale = { 1, { 0.066227063536643982, } };
const TfArray<1, int> quant148_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant148 = { (TfLiteFloatArray*)&quant148_scale, (TfLiteIntArray*)&quant148_zero, 0 };
const TfArray<4, int> tensor_dimension149 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant149_scale = { 1, { 0.01349840871989727, } };
const TfArray<1, int> quant149_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant149 = { (TfLiteFloatArray*)&quant149_scale, (TfLiteIntArray*)&quant149_zero, 0 };
const TfArray<4, int> tensor_dimension150 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant150_scale = { 1, { 0.019971849396824837, } };
const TfArray<1, int> quant150_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant150 = { (TfLiteFloatArray*)&quant150_scale, (TfLiteIntArray*)&quant150_zero, 0 };
const TfArray<4, int> tensor_dimension151 = { 4, { 1,4,4,8 } };
const TfArray<1, float> quant151_scale = { 1, { 0.016826609149575233, } };
const TfArray<1, int> quant151_zero = { 1, { -45 } };
const TfLiteAffineQuantization quant151 = { (TfLiteFloatArray*)&quant151_scale, (TfLiteIntArray*)&quant151_zero, 0 };
const TfArray<4, int> tensor_dimension152 = { 4, { 1,4,4,8 } };
const TfArray<1, float> quant152_scale = { 1, { 0.071930617094039917, } };
const TfArray<1, int> quant152_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant152 = { (TfLiteFloatArray*)&quant152_scale, (TfLiteIntArray*)&quant152_zero, 0 };
const TfArray<4, int> tensor_dimension153 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant153_scale = { 1, { 0.017615426331758499, } };
const TfArray<1, int> quant153_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant153 = { (TfLiteFloatArray*)&quant153_scale, (TfLiteIntArray*)&quant153_zero, 0 };
const TfArray<4, int> tensor_dimension154 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant154_scale = { 1, { 0.021298497915267944, } };
const TfArray<1, int> quant154_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant154 = { (TfLiteFloatArray*)&quant154_scale, (TfLiteIntArray*)&quant154_zero, 0 };
const TfArray<4, int> tensor_dimension155 = { 4, { 1,4,4,16 } };
const TfArray<1, float> quant155_scale = { 1, { 0.028674259781837463, } };
const TfArray<1, int> quant155_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant155 = { (TfLiteFloatArray*)&quant155_scale, (TfLiteIntArray*)&quant155_zero, 0 };
const TfArray<4, int> tensor_dimension156 = { 4, { 1,4,4,96 } };
const TfArray<1, float> quant156_scale = { 1, { 0.014948008581995964, } };
const TfArray<1, int> quant156_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant156 = { (TfLiteFloatArray*)&quant156_scale, (TfLiteIntArray*)&quant156_zero, 0 };
const TfArray<4, int> tensor_dimension157 = { 4, { 1,4,4,96 } };
const TfArray<1, float> quant157_scale = { 1, { 0.021844161674380302, } };
const TfArray<1, int> quant157_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant157 = { (TfLiteFloatArray*)&quant157_scale, (TfLiteIntArray*)&quant157_zero, 0 };
const TfArray<4, int> tensor_dimension158 = { 4, { 1,4,4,16 } };
const TfArray<1, float> quant158_scale = { 1, { 0.027365539222955704, } };
const TfArray<1, int> quant158_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant158 = { (TfLiteFloatArray*)&quant158_scale, (TfLiteIntArray*)&quant158_zero, 0 };
const TfArray<4, int> tensor_dimension159 = { 4, { 1,4,4,16 } };
const TfArray<1, float> quant159_scale = { 1, { 0.04174288734793663, } };
const TfArray<1, int> quant159_zero = { 1, { 20 } };
const TfLiteAffineQuantization quant159 = { (TfLiteFloatArray*)&quant159_scale, (TfLiteIntArray*)&quant159_zero, 0 };
const TfArray<4, int> tensor_dimension160 = { 4, { 1,4,4,96 } };
const TfArray<1, float> quant160_scale = { 1, { 0.015109951607882977, } };
const TfArray<1, int> quant160_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant160 = { (TfLiteFloatArray*)&quant160_scale, (TfLiteIntArray*)&quant160_zero, 0 };
const TfArray<4, int> tensor_dimension161 = { 4, { 1,4,4,96 } };
const TfArray<1, float> quant161_scale = { 1, { 0.022439243271946907, } };
const TfArray<1, int> quant161_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant161 = { (TfLiteFloatArray*)&quant161_scale, (TfLiteIntArray*)&quant161_zero, 0 };
const TfArray<4, int> tensor_dimension162 = { 4, { 1,4,4,16 } };
const TfArray<1, float> quant162_scale = { 1, { 0.024496298283338547, } };
const TfArray<1, int> quant162_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant162 = { (TfLiteFloatArray*)&quant162_scale, (TfLiteIntArray*)&quant162_zero, 0 };
const TfArray<4, int> tensor_dimension163 = { 4, { 1,4,4,16 } };
const TfArray<1, float> quant163_scale = { 1, { 0.052407480776309967, } };
const TfArray<1, int> quant163_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant163 = { (TfLiteFloatArray*)&quant163_scale, (TfLiteIntArray*)&quant163_zero, 0 };
const TfArray<4, int> tensor_dimension164 = { 4, { 1,4,4,96 } };
const TfArray<1, float> quant164_scale = { 1, { 0.013900542631745338, } };
const TfArray<1, int> quant164_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant164 = { (TfLiteFloatArray*)&quant164_scale, (TfLiteIntArray*)&quant164_zero, 0 };
const TfArray<4, int> tensor_dimension165 = { 4, { 1,5,5,96 } };
const TfArray<1, float> quant165_scale = { 1, { 0.013900542631745338, } };
const TfArray<1, int> quant165_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant165 = { (TfLiteFloatArray*)&quant165_scale, (TfLiteIntArray*)&quant165_zero, 0 };
const TfArray<4, int> tensor_dimension166 = { 4, { 1,2,2,96 } };
const TfArray<1, float> quant166_scale = { 1, { 0.016104668378829956, } };
const TfArray<1, int> quant166_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant166 = { (TfLiteFloatArray*)&quant166_scale, (TfLiteIntArray*)&quant166_zero, 0 };
const TfArray<4, int> tensor_dimension167 = { 4, { 1,2,2,16 } };
const TfArray<1, float> quant167_scale = { 1, { 0.027424514293670654, } };
const TfArray<1, int> quant167_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant167 = { (TfLiteFloatArray*)&quant167_scale, (TfLiteIntArray*)&quant167_zero, 0 };
const TfArray<4, int> tensor_dimension168 = { 4, { 1,2,2,96 } };
const TfArray<1, float> quant168_scale = { 1, { 0.014869126491248608, } };
const TfArray<1, int> quant168_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant168 = { (TfLiteFloatArray*)&quant168_scale, (TfLiteIntArray*)&quant168_zero, 0 };
const TfArray<4, int> tensor_dimension169 = { 4, { 1,2,2,96 } };
const TfArray<1, float> quant169_scale = { 1, { 0.013460418209433556, } };
const TfArray<1, int> quant169_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant169 = { (TfLiteFloatArray*)&quant169_scale, (TfLiteIntArray*)&quant169_zero, 0 };
const TfArray<4, int> tensor_dimension170 = { 4, { 1,2,2,16 } };
const TfArray<1, float> quant170_scale = { 1, { 0.0089971590787172318, } };
const TfArray<1, int> quant170_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant170 = { (TfLiteFloatArray*)&quant170_scale, (TfLiteIntArray*)&quant170_zero, 0 };
const TfArray<4, int> tensor_dimension171 = { 4, { 1,2,2,16 } };
const TfArray<1, float> quant171_scale = { 1, { 0.029344663023948669, } };
const TfArray<1, int> quant171_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant171 = { (TfLiteFloatArray*)&quant171_scale, (TfLiteIntArray*)&quant171_zero, 0 };
const TfArray<4, int> tensor_dimension172 = { 4, { 1,2,2,96 } };
const TfArray<1, float> quant172_scale = { 1, { 0.014978140592575073, } };
const TfArray<1, int> quant172_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant172 = { (TfLiteFloatArray*)&quant172_scale, (TfLiteIntArray*)&quant172_zero, 0 };
const TfArray<4, int> tensor_dimension173 = { 4, { 1,2,2,96 } };
const TfArray<1, float> quant173_scale = { 1, { 0.018799250945448875, } };
const TfArray<1, int> quant173_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant173 = { (TfLiteFloatArray*)&quant173_scale, (TfLiteIntArray*)&quant173_zero, 0 };
const TfArray<4, int> tensor_dimension174 = { 4, { 1,2,2,16 } };
const TfArray<1, float> quant174_scale = { 1, { 0.0097127975896000862, } };
const TfArray<1, int> quant174_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant174 = { (TfLiteFloatArray*)&quant174_scale, (TfLiteIntArray*)&quant174_zero, 0 };
const TfArray<4, int> tensor_dimension175 = { 4, { 1,2,2,16 } };
const TfArray<1, float> quant175_scale = { 1, { 0.032172560691833496, } };
const TfArray<1, int> quant175_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant175 = { (TfLiteFloatArray*)&quant175_scale, (TfLiteIntArray*)&quant175_zero, 0 };
const TfArray<4, int> tensor_dimension176 = { 4, { 1,2,2,96 } };
const TfArray<1, float> quant176_scale = { 1, { 0.014375831931829453, } };
const TfArray<1, int> quant176_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant176 = { (TfLiteFloatArray*)&quant176_scale, (TfLiteIntArray*)&quant176_zero, 0 };
const TfArray<4, int> tensor_dimension177 = { 4, { 1,2,2,96 } };
const TfArray<1, float> quant177_scale = { 1, { 0.014816945418715477, } };
const TfArray<1, int> quant177_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant177 = { (TfLiteFloatArray*)&quant177_scale, (TfLiteIntArray*)&quant177_zero, 0 };
const TfArray<4, int> tensor_dimension178 = { 4, { 1,2,2,32 } };
const TfArray<1, float> quant178_scale = { 1, { 0.057155832648277283, } };
const TfArray<1, int> quant178_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant178 = { (TfLiteFloatArray*)&quant178_scale, (TfLiteIntArray*)&quant178_zero, 0 };
const TfArray<4, int> tensor_dimension179 = { 4, { 1,2,2,1280 } };
const TfArray<1, float> quant179_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant179_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant179 = { (TfLiteFloatArray*)&quant179_scale, (TfLiteIntArray*)&quant179_zero, 0 };
const TfArray<2, int> tensor_dimension180 = { 2, { 4,1280 } };
const TfArray<1, float> quant180_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant180_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant180 = { (TfLiteFloatArray*)&quant180_scale, (TfLiteIntArray*)&quant180_zero, 0 };
const TfArray<2, int> tensor_dimension181 = { 2, { 4,10 } };
const TfArray<1, float> quant181_scale = { 1, { 0.043346211314201355, } };
const TfArray<1, int> quant181_zero = { 1, { 18 } };
const TfLiteAffineQuantization quant181 = { (TfLiteFloatArray*)&quant181_scale, (TfLiteIntArray*)&quant181_zero, 0 };
const TfArray<2, int> tensor_dimension182 = { 2, { 1,40 } };
const TfArray<1, float> quant182_scale = { 1, { 0.043346211314201355, } };
const TfArray<1, int> quant182_zero = { 1, { 18 } };
const TfLiteAffineQuantization quant182 = { (TfLiteFloatArray*)&quant182_scale, (TfLiteIntArray*)&quant182_zero, 0 };
const TfArray<2, int> tensor_dimension183 = { 2, { 1,2 } };
const TfArray<1, float> quant183_scale = { 1, { 0.054499492049217224, } };
const TfArray<1, int> quant183_zero = { 1, { 27 } };
const TfLiteAffineQuantization quant183 = { (TfLiteFloatArray*)&quant183_scale, (TfLiteIntArray*)&quant183_zero, 0 };
const TfArray<2, int> tensor_dimension184 = { 2, { 1,2 } };
const TfArray<1, float> quant184_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant184_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant184 = { (TfLiteFloatArray*)&quant184_scale, (TfLiteIntArray*)&quant184_zero, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,2 } };
const TfArray<1, int> outputs0 = { 1, { 112 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingValid, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 112,43,6 } };
const TfArray<1, int> outputs1 = { 1, { 113 } };
const TfLiteDepthwiseConvParams opdata2 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 113,78,35 } };
const TfArray<1, int> outputs2 = { 1, { 114 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 114,44,79 } };
const TfArray<1, int> outputs3 = { 1, { 115 } };
const TfLiteAddParams opdata4 = { kTfLiteActNone };
const TfArray<2, int> inputs4 = { 2, { 113,115 } };
const TfArray<1, int> outputs4 = { 1, { 116 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 116,45,13 } };
const TfArray<1, int> outputs5 = { 1, { 117 } };
const TfArray<2, int> inputs6 = { 2, { 117,2 } };
const TfArray<1, int> outputs6 = { 1, { 118 } };
const TfLiteDepthwiseConvParams opdata7 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 118,80,21 } };
const TfArray<1, int> outputs7 = { 1, { 119 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 119,46,81 } };
const TfArray<1, int> outputs8 = { 1, { 120 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 120,47,32 } };
const TfArray<1, int> outputs9 = { 1, { 121 } };
const TfLiteDepthwiseConvParams opdata10 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 121,82,33 } };
const TfArray<1, int> outputs10 = { 1, { 122 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 122,48,83 } };
const TfArray<1, int> outputs11 = { 1, { 123 } };
const TfLiteAddParams opdata12 = { kTfLiteActNone };
const TfArray<2, int> inputs12 = { 2, { 120,123 } };
const TfArray<1, int> outputs12 = { 1, { 124 } };
const TfLiteConvParams opdata13 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 124,49,34 } };
const TfArray<1, int> outputs13 = { 1, { 125 } };
const TfArray<2, int> inputs14 = { 2, { 125,2 } };
const TfArray<1, int> outputs14 = { 1, { 126 } };
const TfLiteDepthwiseConvParams opdata15 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 126,84,36 } };
const TfArray<1, int> outputs15 = { 1, { 127 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 127,50,85 } };
const TfArray<1, int> outputs16 = { 1, { 128 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 128,51,37 } };
const TfArray<1, int> outputs17 = { 1, { 129 } };
const TfLiteDepthwiseConvParams opdata18 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 129,86,38 } };
const TfArray<1, int> outputs18 = { 1, { 130 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 130,52,87 } };
const TfArray<1, int> outputs19 = { 1, { 131 } };
const TfLiteAddParams opdata20 = { kTfLiteActNone };
const TfArray<2, int> inputs20 = { 2, { 128,131 } };
const TfArray<1, int> outputs20 = { 1, { 132 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 132,53,39 } };
const TfArray<1, int> outputs21 = { 1, { 133 } };
const TfLiteDepthwiseConvParams opdata22 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 133,88,40 } };
const TfArray<1, int> outputs22 = { 1, { 134 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 134,54,89 } };
const TfArray<1, int> outputs23 = { 1, { 135 } };
const TfLiteAddParams opdata24 = { kTfLiteActNone };
const TfArray<2, int> inputs24 = { 2, { 132,135 } };
const TfArray<1, int> outputs24 = { 1, { 136 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 136,55,41 } };
const TfArray<1, int> outputs25 = { 1, { 137 } };
const TfArray<2, int> inputs26 = { 2, { 137,2 } };
const TfArray<1, int> outputs26 = { 1, { 138 } };
const TfLiteDepthwiseConvParams opdata27 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs27 = { 3, { 138,90,42 } };
const TfArray<1, int> outputs27 = { 1, { 139 } };
const TfLiteConvParams opdata28 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs28 = { 3, { 139,56,91 } };
const TfArray<1, int> outputs28 = { 1, { 140 } };
const TfLiteConvParams opdata29 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs29 = { 3, { 140,57,7 } };
const TfArray<1, int> outputs29 = { 1, { 141 } };
const TfLiteDepthwiseConvParams opdata30 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs30 = { 3, { 141,92,8 } };
const TfArray<1, int> outputs30 = { 1, { 142 } };
const TfLiteConvParams opdata31 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs31 = { 3, { 142,58,93 } };
const TfArray<1, int> outputs31 = { 1, { 143 } };
const TfLiteAddParams opdata32 = { kTfLiteActNone };
const TfArray<2, int> inputs32 = { 2, { 140,143 } };
const TfArray<1, int> outputs32 = { 1, { 144 } };
const TfLiteConvParams opdata33 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs33 = { 3, { 144,59,9 } };
const TfArray<1, int> outputs33 = { 1, { 145 } };
const TfLiteDepthwiseConvParams opdata34 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs34 = { 3, { 145,94,10 } };
const TfArray<1, int> outputs34 = { 1, { 146 } };
const TfLiteConvParams opdata35 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs35 = { 3, { 146,60,95 } };
const TfArray<1, int> outputs35 = { 1, { 147 } };
const TfLiteAddParams opdata36 = { kTfLiteActNone };
const TfArray<2, int> inputs36 = { 2, { 144,147 } };
const TfArray<1, int> outputs36 = { 1, { 148 } };
const TfLiteConvParams opdata37 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs37 = { 3, { 148,61,11 } };
const TfArray<1, int> outputs37 = { 1, { 149 } };
const TfLiteDepthwiseConvParams opdata38 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs38 = { 3, { 149,96,12 } };
const TfArray<1, int> outputs38 = { 1, { 150 } };
const TfLiteConvParams opdata39 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs39 = { 3, { 150,62,97 } };
const TfArray<1, int> outputs39 = { 1, { 151 } };
const TfLiteAddParams opdata40 = { kTfLiteActNone };
const TfArray<2, int> inputs40 = { 2, { 148,151 } };
const TfArray<1, int> outputs40 = { 1, { 152 } };
const TfLiteConvParams opdata41 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs41 = { 3, { 152,63,14 } };
const TfArray<1, int> outputs41 = { 1, { 153 } };
const TfLiteDepthwiseConvParams opdata42 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs42 = { 3, { 153,98,15 } };
const TfArray<1, int> outputs42 = { 1, { 154 } };
const TfLiteConvParams opdata43 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs43 = { 3, { 154,64,99 } };
const TfArray<1, int> outputs43 = { 1, { 155 } };
const TfLiteConvParams opdata44 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs44 = { 3, { 155,65,16 } };
const TfArray<1, int> outputs44 = { 1, { 156 } };
const TfLiteDepthwiseConvParams opdata45 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs45 = { 3, { 156,100,17 } };
const TfArray<1, int> outputs45 = { 1, { 157 } };
const TfLiteConvParams opdata46 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs46 = { 3, { 157,66,101 } };
const TfArray<1, int> outputs46 = { 1, { 158 } };
const TfLiteAddParams opdata47 = { kTfLiteActNone };
const TfArray<2, int> inputs47 = { 2, { 155,158 } };
const TfArray<1, int> outputs47 = { 1, { 159 } };
const TfLiteConvParams opdata48 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs48 = { 3, { 159,67,18 } };
const TfArray<1, int> outputs48 = { 1, { 160 } };
const TfLiteDepthwiseConvParams opdata49 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs49 = { 3, { 160,102,19 } };
const TfArray<1, int> outputs49 = { 1, { 161 } };
const TfLiteConvParams opdata50 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs50 = { 3, { 161,68,103 } };
const TfArray<1, int> outputs50 = { 1, { 162 } };
const TfLiteAddParams opdata51 = { kTfLiteActNone };
const TfArray<2, int> inputs51 = { 2, { 159,162 } };
const TfArray<1, int> outputs51 = { 1, { 163 } };
const TfLiteConvParams opdata52 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs52 = { 3, { 163,69,20 } };
const TfArray<1, int> outputs52 = { 1, { 164 } };
const TfArray<2, int> inputs53 = { 2, { 164,2 } };
const TfArray<1, int> outputs53 = { 1, { 165 } };
const TfLiteDepthwiseConvParams opdata54 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs54 = { 3, { 165,104,22 } };
const TfArray<1, int> outputs54 = { 1, { 166 } };
const TfLiteConvParams opdata55 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs55 = { 3, { 166,70,105 } };
const TfArray<1, int> outputs55 = { 1, { 167 } };
const TfLiteConvParams opdata56 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs56 = { 3, { 167,71,23 } };
const TfArray<1, int> outputs56 = { 1, { 168 } };
const TfLiteDepthwiseConvParams opdata57 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs57 = { 3, { 168,106,24 } };
const TfArray<1, int> outputs57 = { 1, { 169 } };
const TfLiteConvParams opdata58 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs58 = { 3, { 169,72,107 } };
const TfArray<1, int> outputs58 = { 1, { 170 } };
const TfLiteAddParams opdata59 = { kTfLiteActNone };
const TfArray<2, int> inputs59 = { 2, { 167,170 } };
const TfArray<1, int> outputs59 = { 1, { 171 } };
const TfLiteConvParams opdata60 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs60 = { 3, { 171,73,25 } };
const TfArray<1, int> outputs60 = { 1, { 172 } };
const TfLiteDepthwiseConvParams opdata61 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs61 = { 3, { 172,108,26 } };
const TfArray<1, int> outputs61 = { 1, { 173 } };
const TfLiteConvParams opdata62 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs62 = { 3, { 173,74,109 } };
const TfArray<1, int> outputs62 = { 1, { 174 } };
const TfLiteAddParams opdata63 = { kTfLiteActNone };
const TfArray<2, int> inputs63 = { 2, { 171,174 } };
const TfArray<1, int> outputs63 = { 1, { 175 } };
const TfLiteConvParams opdata64 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs64 = { 3, { 175,75,27 } };
const TfArray<1, int> outputs64 = { 1, { 176 } };
const TfLiteDepthwiseConvParams opdata65 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs65 = { 3, { 176,110,28 } };
const TfArray<1, int> outputs65 = { 1, { 177 } };
const TfLiteConvParams opdata66 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs66 = { 3, { 177,76,111 } };
const TfArray<1, int> outputs66 = { 1, { 178 } };
const TfLiteConvParams opdata67 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs67 = { 3, { 178,77,29 } };
const TfArray<1, int> outputs67 = { 1, { 179 } };
const TfLiteReshapeParams opdata68 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs68 = { 2, { 179,5 } };
const TfArray<1, int> outputs68 = { 1, { 180 } };
const TfLiteFullyConnectedParams opdata69 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs69 = { 3, { 180,30,3 } };
const TfArray<1, int> outputs69 = { 1, { 181 } };
const TfLiteReshapeParams opdata70 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs70 = { 2, { 181,1 } };
const TfArray<1, int> outputs70 = { 1, { 182 } };
const TfLiteFullyConnectedParams opdata71 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs71 = { 3, { 182,31,4 } };
const TfArray<1, int> outputs71 = { 1, { 183 } };
const TfLiteSoftmaxParams opdata72 = { 1 };
const TfArray<1, int> inputs72 = { 1, { 183 } };
const TfArray<1, int> outputs72 = { 1, { 184 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4240, (TfLiteIntArray*)&tensor_dimension0, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 5120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data44, (TfLiteIntArray*)&tensor_dimension44, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data45, (TfLiteIntArray*)&tensor_dimension45, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data46, (TfLiteIntArray*)&tensor_dimension46, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data47, (TfLiteIntArray*)&tensor_dimension47, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data48, (TfLiteIntArray*)&tensor_dimension48, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data49, (TfLiteIntArray*)&tensor_dimension49, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data50, (TfLiteIntArray*)&tensor_dimension50, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data51, (TfLiteIntArray*)&tensor_dimension51, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data52, (TfLiteIntArray*)&tensor_dimension52, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data53, (TfLiteIntArray*)&tensor_dimension53, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data54, (TfLiteIntArray*)&tensor_dimension54, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data55, (TfLiteIntArray*)&tensor_dimension55, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data56, (TfLiteIntArray*)&tensor_dimension56, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data57, (TfLiteIntArray*)&tensor_dimension57, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data58, (TfLiteIntArray*)&tensor_dimension58, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data59, (TfLiteIntArray*)&tensor_dimension59, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data60, (TfLiteIntArray*)&tensor_dimension60, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data61, (TfLiteIntArray*)&tensor_dimension61, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data62, (TfLiteIntArray*)&tensor_dimension62, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data63, (TfLiteIntArray*)&tensor_dimension63, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data64, (TfLiteIntArray*)&tensor_dimension64, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data65, (TfLiteIntArray*)&tensor_dimension65, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data66, (TfLiteIntArray*)&tensor_dimension66, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data67, (TfLiteIntArray*)&tensor_dimension67, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data68, (TfLiteIntArray*)&tensor_dimension68, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data69, (TfLiteIntArray*)&tensor_dimension69, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data70, (TfLiteIntArray*)&tensor_dimension70, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data71, (TfLiteIntArray*)&tensor_dimension71, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant71))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data72, (TfLiteIntArray*)&tensor_dimension72, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant72))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data73, (TfLiteIntArray*)&tensor_dimension73, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant73))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data74, (TfLiteIntArray*)&tensor_dimension74, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant74))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data75, (TfLiteIntArray*)&tensor_dimension75, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant75))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data76, (TfLiteIntArray*)&tensor_dimension76, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant76))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data77, (TfLiteIntArray*)&tensor_dimension77, 40960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant77))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data78, (TfLiteIntArray*)&tensor_dimension78, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant78))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data79, (TfLiteIntArray*)&tensor_dimension79, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant79))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data80, (TfLiteIntArray*)&tensor_dimension80, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant80))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data81, (TfLiteIntArray*)&tensor_dimension81, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant81))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data82, (TfLiteIntArray*)&tensor_dimension82, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant82))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data83, (TfLiteIntArray*)&tensor_dimension83, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant83))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data84, (TfLiteIntArray*)&tensor_dimension84, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant84))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data85, (TfLiteIntArray*)&tensor_dimension85, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant85))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data86, (TfLiteIntArray*)&tensor_dimension86, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant86))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data87, (TfLiteIntArray*)&tensor_dimension87, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant87))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data88, (TfLiteIntArray*)&tensor_dimension88, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant88))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data89, (TfLiteIntArray*)&tensor_dimension89, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant89))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data90, (TfLiteIntArray*)&tensor_dimension90, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant90))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data91, (TfLiteIntArray*)&tensor_dimension91, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant91))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data92, (TfLiteIntArray*)&tensor_dimension92, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant92))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data93, (TfLiteIntArray*)&tensor_dimension93, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant93))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data94, (TfLiteIntArray*)&tensor_dimension94, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant94))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data95, (TfLiteIntArray*)&tensor_dimension95, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant95))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data96, (TfLiteIntArray*)&tensor_dimension96, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant96))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data97, (TfLiteIntArray*)&tensor_dimension97, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant97))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data98, (TfLiteIntArray*)&tensor_dimension98, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant98))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data99, (TfLiteIntArray*)&tensor_dimension99, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant99))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data100, (TfLiteIntArray*)&tensor_dimension100, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant100))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data101, (TfLiteIntArray*)&tensor_dimension101, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant101))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data102, (TfLiteIntArray*)&tensor_dimension102, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant102))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data103, (TfLiteIntArray*)&tensor_dimension103, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant103))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data104, (TfLiteIntArray*)&tensor_dimension104, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant104))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data105, (TfLiteIntArray*)&tensor_dimension105, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant105))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data106, (TfLiteIntArray*)&tensor_dimension106, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant106))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data107, (TfLiteIntArray*)&tensor_dimension107, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant107))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data108, (TfLiteIntArray*)&tensor_dimension108, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant108))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data109, (TfLiteIntArray*)&tensor_dimension109, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant109))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data110, (TfLiteIntArray*)&tensor_dimension110, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant110))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data111, (TfLiteIntArray*)&tensor_dimension111, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant111))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension112, 4225, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant112))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16384, (TfLiteIntArray*)&tensor_dimension113, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant113))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension114, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant114))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8192, (TfLiteIntArray*)&tensor_dimension115, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant115))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension116, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant116))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 52272, (TfLiteIntArray*)&tensor_dimension117, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant117))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension118, 52272, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant118))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 52272, (TfLiteIntArray*)&tensor_dimension119, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant119))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 24576, (TfLiteIntArray*)&tensor_dimension120, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant120))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 12288, (TfLiteIntArray*)&tensor_dimension121, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant121))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension122, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant122))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 12288, (TfLiteIntArray*)&tensor_dimension123, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant123))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension124, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant124))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13872, (TfLiteIntArray*)&tensor_dimension125, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant125))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension126, 13872, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant126))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13872, (TfLiteIntArray*)&tensor_dimension127, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant127))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6656, (TfLiteIntArray*)&tensor_dimension128, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant128))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3072, (TfLiteIntArray*)&tensor_dimension129, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant129))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension130, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant130))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3072, (TfLiteIntArray*)&tensor_dimension131, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant131))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6144, (TfLiteIntArray*)&tensor_dimension132, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant132))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3072, (TfLiteIntArray*)&tensor_dimension133, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant133))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension134, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant134))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3072, (TfLiteIntArray*)&tensor_dimension135, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant135))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension136, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant136))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3888, (TfLiteIntArray*)&tensor_dimension137, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant137))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension138, 3888, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant138))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3888, (TfLiteIntArray*)&tensor_dimension139, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant139))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1536, (TfLiteIntArray*)&tensor_dimension140, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant140))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 768, (TfLiteIntArray*)&tensor_dimension141, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant141))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension142, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant142))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 768, (TfLiteIntArray*)&tensor_dimension143, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant143))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1664, (TfLiteIntArray*)&tensor_dimension144, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant144))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 768, (TfLiteIntArray*)&tensor_dimension145, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant145))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension146, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant146))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 768, (TfLiteIntArray*)&tensor_dimension147, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant147))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1536, (TfLiteIntArray*)&tensor_dimension148, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant148))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 768, (TfLiteIntArray*)&tensor_dimension149, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant149))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension150, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant150))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 768, (TfLiteIntArray*)&tensor_dimension151, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant151))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension152, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant152))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 768, (TfLiteIntArray*)&tensor_dimension153, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant153))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension154, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant154))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3328, (TfLiteIntArray*)&tensor_dimension155, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant155))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1536, (TfLiteIntArray*)&tensor_dimension156, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant156))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension157, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant157))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1536, (TfLiteIntArray*)&tensor_dimension158, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant158))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3072, (TfLiteIntArray*)&tensor_dimension159, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant159))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1536, (TfLiteIntArray*)&tensor_dimension160, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant160))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension161, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant161))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1536, (TfLiteIntArray*)&tensor_dimension162, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant162))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension163, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant163))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2400, (TfLiteIntArray*)&tensor_dimension164, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant164))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension165, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant165))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2400, (TfLiteIntArray*)&tensor_dimension166, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant166))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 832, (TfLiteIntArray*)&tensor_dimension167, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant167))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension168, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant168))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension169, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant169))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension170, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant170))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 768, (TfLiteIntArray*)&tensor_dimension171, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant171))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension172, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant172))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension173, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant173))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension174, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant174))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension175, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant175))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension176, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant176))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension177, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant177))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension178, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant178))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5120, (TfLiteIntArray*)&tensor_dimension179, 5120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant179))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension180, 5120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant180))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5120, (TfLiteIntArray*)&tensor_dimension181, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant181))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension182, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant182))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension183, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant183))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension184, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant184))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_ADD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_ADD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_ADD, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_ADD, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs27, (TfLiteIntArray*)&outputs27, const_cast<void*>(static_cast<const void*>(&opdata27)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs28, (TfLiteIntArray*)&outputs28, const_cast<void*>(static_cast<const void*>(&opdata28)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs29, (TfLiteIntArray*)&outputs29, const_cast<void*>(static_cast<const void*>(&opdata29)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs30, (TfLiteIntArray*)&outputs30, const_cast<void*>(static_cast<const void*>(&opdata30)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs31, (TfLiteIntArray*)&outputs31, const_cast<void*>(static_cast<const void*>(&opdata31)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs32, (TfLiteIntArray*)&outputs32, const_cast<void*>(static_cast<const void*>(&opdata32)), OP_ADD, },
  { (TfLiteIntArray*)&inputs33, (TfLiteIntArray*)&outputs33, const_cast<void*>(static_cast<const void*>(&opdata33)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs34, (TfLiteIntArray*)&outputs34, const_cast<void*>(static_cast<const void*>(&opdata34)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs35, (TfLiteIntArray*)&outputs35, const_cast<void*>(static_cast<const void*>(&opdata35)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs36, (TfLiteIntArray*)&outputs36, const_cast<void*>(static_cast<const void*>(&opdata36)), OP_ADD, },
  { (TfLiteIntArray*)&inputs37, (TfLiteIntArray*)&outputs37, const_cast<void*>(static_cast<const void*>(&opdata37)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs38, (TfLiteIntArray*)&outputs38, const_cast<void*>(static_cast<const void*>(&opdata38)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs39, (TfLiteIntArray*)&outputs39, const_cast<void*>(static_cast<const void*>(&opdata39)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs40, (TfLiteIntArray*)&outputs40, const_cast<void*>(static_cast<const void*>(&opdata40)), OP_ADD, },
  { (TfLiteIntArray*)&inputs41, (TfLiteIntArray*)&outputs41, const_cast<void*>(static_cast<const void*>(&opdata41)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs42, (TfLiteIntArray*)&outputs42, const_cast<void*>(static_cast<const void*>(&opdata42)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs43, (TfLiteIntArray*)&outputs43, const_cast<void*>(static_cast<const void*>(&opdata43)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs44, (TfLiteIntArray*)&outputs44, const_cast<void*>(static_cast<const void*>(&opdata44)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs45, (TfLiteIntArray*)&outputs45, const_cast<void*>(static_cast<const void*>(&opdata45)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs46, (TfLiteIntArray*)&outputs46, const_cast<void*>(static_cast<const void*>(&opdata46)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs47, (TfLiteIntArray*)&outputs47, const_cast<void*>(static_cast<const void*>(&opdata47)), OP_ADD, },
  { (TfLiteIntArray*)&inputs48, (TfLiteIntArray*)&outputs48, const_cast<void*>(static_cast<const void*>(&opdata48)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs49, (TfLiteIntArray*)&outputs49, const_cast<void*>(static_cast<const void*>(&opdata49)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs50, (TfLiteIntArray*)&outputs50, const_cast<void*>(static_cast<const void*>(&opdata50)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs51, (TfLiteIntArray*)&outputs51, const_cast<void*>(static_cast<const void*>(&opdata51)), OP_ADD, },
  { (TfLiteIntArray*)&inputs52, (TfLiteIntArray*)&outputs52, const_cast<void*>(static_cast<const void*>(&opdata52)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs53, (TfLiteIntArray*)&outputs53, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs54, (TfLiteIntArray*)&outputs54, const_cast<void*>(static_cast<const void*>(&opdata54)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs55, (TfLiteIntArray*)&outputs55, const_cast<void*>(static_cast<const void*>(&opdata55)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs56, (TfLiteIntArray*)&outputs56, const_cast<void*>(static_cast<const void*>(&opdata56)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs57, (TfLiteIntArray*)&outputs57, const_cast<void*>(static_cast<const void*>(&opdata57)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs58, (TfLiteIntArray*)&outputs58, const_cast<void*>(static_cast<const void*>(&opdata58)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs59, (TfLiteIntArray*)&outputs59, const_cast<void*>(static_cast<const void*>(&opdata59)), OP_ADD, },
  { (TfLiteIntArray*)&inputs60, (TfLiteIntArray*)&outputs60, const_cast<void*>(static_cast<const void*>(&opdata60)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs61, (TfLiteIntArray*)&outputs61, const_cast<void*>(static_cast<const void*>(&opdata61)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs62, (TfLiteIntArray*)&outputs62, const_cast<void*>(static_cast<const void*>(&opdata62)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs63, (TfLiteIntArray*)&outputs63, const_cast<void*>(static_cast<const void*>(&opdata63)), OP_ADD, },
  { (TfLiteIntArray*)&inputs64, (TfLiteIntArray*)&outputs64, const_cast<void*>(static_cast<const void*>(&opdata64)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs65, (TfLiteIntArray*)&outputs65, const_cast<void*>(static_cast<const void*>(&opdata65)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs66, (TfLiteIntArray*)&outputs66, const_cast<void*>(static_cast<const void*>(&opdata66)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs67, (TfLiteIntArray*)&outputs67, const_cast<void*>(static_cast<const void*>(&opdata67)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs68, (TfLiteIntArray*)&outputs68, const_cast<void*>(static_cast<const void*>(&opdata68)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs69, (TfLiteIntArray*)&outputs69, const_cast<void*>(static_cast<const void*>(&opdata69)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs70, (TfLiteIntArray*)&outputs70, const_cast<void*>(static_cast<const void*>(&opdata70)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs71, (TfLiteIntArray*)&outputs71, const_cast<void*>(static_cast<const void*>(&opdata71)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs72, (TfLiteIntArray*)&outputs72, const_cast<void*>(static_cast<const void*>(&opdata72)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 185;
  for(size_t i = 0; i < 185; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_PAD] = *tflite::ops::micro::Register_PAD();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = *tflite::ops::micro::Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = *tflite::ops::micro::Register_ADD();
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 73; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 73; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  184, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 73; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
